구분,스키마,질문,Google translate,변경한 질문,답변,TABLE,sql 모델 추론,결과개수,쿼리결과개수,결과데이터,쿼리 결과,추론 재실행,오류여부,검수자,오류내용
테이블 1개,university_learning,"CCC수업을 듣는 학생의 성별, 나이, 지역을 알고싶어","I want to know the gender, age, and region of students taking 'CCC' classes.",,"SELECT gender, age_band, region FROM studentinfo WHERE code_module = 'CCC';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1343,,"F	0-35	West Midlands Region
M	0-35	East Anglian Region
M	0-35	East Anglian Region
M	35-55	North Region
M	35-55	Ireland
M	35-55	Scotland
M	0-35	Yorkshire Region
M	35-55	East Anglian Region
M	0-35	Ireland
M	35-55	West Midlands Region
F	0-35	London Region
M	0-35	South West Region
F	0-35	East Anglian Region
M	0-35	East Anglian Region
M	0-35	West Midlands Region
M	0-35	Scotland
F	0-35	Ireland
M	0-35	South West Region
F	0-35	Yorkshire Region
M	0-35	Yorkshire Region
M	35-55	Scotland
M	0-35	Scotland
M	0-35	Scotland
M	0-35	South West Region
M	0-35	East Midlands Region
F	35-55	South West Region
M	0-35	Scotland
M	0-35	South Region
M	0-35	West Midlands Region
F	0-35	West Midlands Region
M	35-55	West Midlands Region
M	0-35	London Region
F	0-35	Wales
M	35-55	North Region
M	35-55	West Midlands Region
F	0-35	East Midlands Region
M	0-35	North Region
M	35-55	North Western Region
M	35-55	West Midlands Region
M	35-55	Scotland
M	0-35	East Midlands Region
F	0-35	Scotland
M	0-35	West Midlands Region
M	0-35	Scotland
M	35-55	London Region
M	0-35	London Region
M	0-35	Ireland
M	0-35	East Midlands Region
M	35-55	North Region
M	35-55	East Anglian Region
M	35-55	London Region
M	0-35	Scotland
F	0-35	Scotland
M	35-55	East Anglian Region
M	0-35	West Midlands Region
M	0-35	Wales
M	0-35	London Region
F	0-35	Scotland
F	35-55	North Western Region
F	35-55	London Region
M	35-55	East Midlands Region
M	0-35	South West Region
F	0-35	East Midlands Region
M	35-55	Scotland
M	0-35	West Midlands Region
M	0-35	London Region
M	0-35	London Region
M	35-55	Scotland
M	0-35	South West Region
M	0-35	East Midlands Region
F	35-55	London Region
M	0-35	Yorkshire Region
M	0-35	Yorkshire Region
M	35-55	West Midlands Region
M	35-55	West Midlands Region
F	0-35	West Midlands Region
F	35-55	East Anglian Region
F	35-55	South Region
M	0-35	North Western Region
M	35-55	North Western Region
M	0-35	North Region
F	0-35	Yorkshire Region
M	35-55	East Anglian Region
M	35-55	West Midlands Region
F	0-35	Scotland
M	0-35	Scotland
F	0-35	South Region
M	35-55	North Western Region
M	35-55	London Region
M	35-55	East Midlands Region
F	0-35	East Anglian Region
M	35-55	Scotland
F	0-35	South East Region
M	0-35	East Midlands Region
M	35-55	Scotland
F	35-55	South West Region
F	0-35	South Region
M	0-35	Scotland
M	0-35	South East Region
M	0-35	North Region
F	35-55	Scotland
M	0-35	North Western Region
M	35-55	North Region
M	0-35	Ireland
F	35-55	South Region
F	0-35	South Region
M	0-35	West Midlands Region
M	0-35	Scotland
F	0-35	North Western Region
M	35-55	Scotland
F	0-35	Wales
M	0-35	Wales
M	0-35	London Region
M	35-55	Scotland
M	35-55	North Western Region
M	0-35	East Anglian Region
M	0-35	South Region
M	35-55	London Region
M	0-35	East Anglian Region
M	35-55	North Western Region
M	0-35	South West Region
M	0-35	London Region
F	35-55	Yorkshire Region
F	35-55	South Region
M	0-35	West Midlands Region
M	35-55	South East Region
M	0-35	East Midlands Region
M	0-35	London Region
M	0-35	North Region
F	0-35	Scotland
M	0-35	East Midlands Region
M	0-35	London Region
M	35-55	East Anglian Region
M	0-35	Scotland
M	0-35	West Midlands Region
M	0-35	East Midlands Region
M	35-55	Ireland
M	35-55	South Region
M	0-35	Scotland
M	35-55	Wales
M	0-35	South West Region
M	35-55	Scotland
M	0-35	East Midlands Region
M	0-35	West Midlands Region
M	0-35	East Anglian Region
M	0-35	East Anglian Region
M	0-35	East Midlands Region
M	35-55	Scotland
F	0-35	South West Region
M	0-35	South East Region
F	35-55	Yorkshire Region
M	0-35	North Western Region
F	0-35	East Anglian Region
M	0-35	Scotland
M	0-35	West Midlands Region
M	0-35	East Midlands Region
M	35-55	South Region
M	0-35	Scotland
F	0-35	East Anglian Region
M	0-35	London Region
M	0-35	East Anglian Region
M	0-35	Yorkshire Region
F	0-35	Yorkshire Region
M	35-55	South West Region
M	0-35	London Region
M	0-35	East Anglian Region
M	0-35	Yorkshire Region
M	35-55	North Western Region
F	0-35	South West Region
M	0-35	London Region
F	35-55	East Anglian Region
M	35-55	North Western Region
M	35-55	Scotland
F	35-55	London Region
M	35-55	South East Region
M	0-35	Wales
F	0-35	Yorkshire Region
M	0-35	East Midlands Region
M	0-35	Ireland
M	35-55	Wales
M	0-35	North Western Region
M	35-55	London Region
M	35-55	Ireland
M	35-55	London Region
M	0-35	Yorkshire Region
M	35-55	Yorkshire Region
M	0-35	South East Region
M	0-35	London Region
F	0-35	Wales
M	0-35	London Region
M	0-35	East Midlands Region
M	0-35	East Midlands Region
F	35-55	South Region
M	0-35	South Region
M	0-35	East Midlands Region
M	0-35	North Western Region
M	0-35	South West Region
M	0-35	East Anglian Region
M	0-35	Scotland
M	0-35	West Midlands Region
M	0-35	Scotland
M	0-35	West Midlands Region
F	35-55	London Region
M	0-35	South Region
F	35-55	Scotland
M	0-35	Ireland
M	0-35	South West Region
F	0-35	South East Region
F	0-35	South Region
M	0-35	East Midlands Region
M	0-35	North Region
M	0-35	North Western Region
M	35-55	West Midlands Region
M	0-35	North Western Region
M	35-55	London Region
F	0-35	Yorkshire Region
M	0-35	North Region
M	0-35	London Region
F	0-35	South West Region
M	0-35	West Midlands Region
M	35-55	North Region
M	0-35	North Region
M	0-35	East Midlands Region
M	0-35	West Midlands Region
F	0-35	South East Region
M	35-55	North Western Region
F	0-35	East Midlands Region
M	0-35	Scotland
M	35-55	Yorkshire Region
M	35-55	Wales
M	0-35	East Midlands Region
M	35-55	North Region
M	0-35	Scotland
M	0-35	East Anglian Region
M	0-35	North Region
F	0-35	Wales
M	0-35	Scotland
M	0-35	North Western Region
M	35-55	Scotland
M	0-35	South East Region
M	0-35	London Region
F	0-35	London Region
M	0-35	South West Region
F	0-35	North Region
M	0-35	Scotland
F	35-55	Scotland
M	0-35	East Midlands Region
M	0-35	West Midlands Region
M	35-55	North Western Region
M	0-35	London Region
F	35-55	Wales
M	35-55	North Western Region
M	0-35	Scotland
M	0-35	West Midlands Region
M	35-55	South West Region
F	0-35	South West Region
M	35-55	South West Region
M	0-35	East Anglian Region
F	0-35	East Anglian Region
F	0-35	South West Region
F	0-35	Yorkshire Region
F	0-35	South East Region
M	0-35	South Region
F	0-35	London Region
F	0-35	South Region
M	0-35	North Western Region
M	35-55	Wales
F	35-55	South East Region
M	35-55	North Western Region
M	0-35	West Midlands Region
M	0-35	Scotland
M	0-35	South West Region
M	0-35	North Region
F	0-35	South Region
F	0-35	South East Region
M	0-35	South West Region
M	0-35	North Western Region
M	0-35	East Midlands Region
M	35-55	Scotland
M	0-35	East Midlands Region
M	0-35	East Anglian Region
M	0-35	London Region
F	0-35	London Region
M	0-35	South East Region
M	0-35	London Region
F	35-55	Yorkshire Region
M	0-35	South West Region
M	35-55	North Western Region
M	0-35	South West Region
M	0-35	West Midlands Region
F	0-35	London Region
M	0-35	East Anglian Region
F	0-35	North Western Region
F	35-55	Scotland
M	0-35	West Midlands Region
M	0-35	Scotland
M	0-35	North Region
M	55<=	North Region
F	35-55	Scotland
F	0-35	South Region
M	35-55	South West Region
F	0-35	North Region
M	0-35	London Region
M	0-35	London Region
M	0-35	East Anglian Region
M	0-35	North Western Region
F	0-35	Wales
M	0-35	East Anglian Region
M	0-35	London Region
F	35-55	East Anglian Region
M	0-35	North Region
M	35-55	South Region
M	0-35	West Midlands Region
M	35-55	South East Region
M	0-35	South East Region
F	35-55	East Anglian Region
M	0-35	London Region
M	35-55	South East Region
F	0-35	North Western Region
M	0-35	Yorkshire Region
M	0-35	Ireland
M	0-35	South Region
F	0-35	South Region
M	0-35	South Region
M	0-35	South East Region
M	0-35	London Region
M	0-35	West Midlands Region
M	0-35	Wales
F	35-55	East Anglian Region
M	0-35	Wales
M	35-55	East Midlands Region
M	0-35	Scotland
F	0-35	East Midlands Region
M	0-35	Scotland
F	0-35	North Region
M	0-35	South West Region
M	0-35	Yorkshire Region
F	35-55	South Region
M	0-35	East Anglian Region
M	35-55	South Region
M	0-35	East Midlands Region
M	0-35	Wales
M	0-35	North Western Region
F	35-55	South Region
M	35-55	South Region
M	0-35	Yorkshire Region
F	0-35	Scotland
F	0-35	South East Region
M	35-55	South Region
M	0-35	East Midlands Region
M	35-55	Yorkshire Region
M	0-35	South East Region
F	0-35	Scotland
F	0-35	East Midlands Region
M	0-35	London Region
F	35-55	Ireland
M	0-35	South West Region
M	0-35	East Midlands Region
F	0-35	Wales
M	35-55	West Midlands Region
M	0-35	East Midlands Region
M	35-55	South Region
M	35-55	Ireland
M	35-55	South West Region
F	0-35	London Region
M	0-35	North Western Region
M	35-55	South Region
M	0-35	Scotland
F	0-35	Ireland
M	0-35	West Midlands Region
M	35-55	London Region
M	0-35	South Region
F	0-35	Scotland
F	0-35	Scotland
M	35-55	Scotland
F	0-35	North Region
F	0-35	Yorkshire Region
M	0-35	West Midlands Region
M	0-35	East Anglian Region
M	0-35	East Anglian Region
M	0-35	East Anglian Region
F	35-55	East Anglian Region
M	35-55	South West Region
M	0-35	West Midlands Region
M	0-35	South Region
M	0-35	North Western Region
F	0-35	Yorkshire Region
M	0-35	West Midlands Region
M	35-55	South Region
M	0-35	Yorkshire Region
F	0-35	Scotland
F	0-35	Wales
F	0-35	London Region
F	0-35	West Midlands Region
M	0-35	West Midlands Region
M	0-35	South East Region
M	0-35	East Midlands Region
M	0-35	South East Region
M	0-35	North Region
M	0-35	Scotland
M	0-35	North Western Region
M	0-35	East Anglian Region
M	0-35	Wales
M	0-35	North Western Region
F	0-35	London Region
M	55<=	London Region
M	35-55	South Region
M	0-35	North Western Region
M	0-35	North Western Region
M	0-35	West Midlands Region
M	0-35	Scotland
F	35-55	East Midlands Region
M	0-35	West Midlands Region
M	0-35	Ireland
M	0-35	South West Region
M	0-35	East Anglian Region
M	35-55	Ireland
F	0-35	West Midlands Region
M	0-35	West Midlands Region
M	35-55	South East Region
M	0-35	East Midlands Region
F	0-35	South West Region
M	35-55	Wales
M	35-55	West Midlands Region
M	0-35	Yorkshire Region
M	35-55	North Western Region
M	0-35	South West Region
M	0-35	East Midlands Region
F	35-55	London Region
M	0-35	Wales
M	35-55	East Midlands Region
M	0-35	South Region
M	35-55	North Region
F	35-55	South Region
M	0-35	East Midlands Region
M	0-35	West Midlands Region
M	0-35	East Midlands Region
F	35-55	Yorkshire Region
F	0-35	East Midlands Region
F	35-55	Wales
M	35-55	South East Region
F	0-35	South Region
M	0-35	South West Region
M	0-35	Scotland
M	0-35	East Anglian Region
F	0-35	North Western Region
M	35-55	Wales
M	0-35	Yorkshire Region
M	0-35	North Western Region
F	0-35	Scotland
M	35-55	North Western Region
M	0-35	Yorkshire Region
M	35-55	South West Region
M	0-35	South Region
F	35-55	London Region
M	0-35	East Anglian Region
M	0-35	South East Region
F	0-35	North Western Region
M	35-55	West Midlands Region
M	0-35	South East Region
F	35-55	Wales
M	0-35	South West Region
M	0-35	East Anglian Region
F	0-35	London Region
F	0-35	North Western Region
M	0-35	Scotland
F	0-35	Scotland
F	0-35	West Midlands Region
F	0-35	London Region
M	0-35	North Western Region
M	0-35	East Midlands Region
M	0-35	North Western Region
M	0-35	South Region
F	35-55	East Anglian Region
M	0-35	North Western Region
M	0-35	North Region
M	35-55	North Region
M	35-55	South East Region
M	0-35	South Region
M	0-35	East Anglian Region
M	35-55	South East Region
M	0-35	Scotland
M	0-35	Wales
M	0-35	South West Region
M	0-35	Scotland
M	0-35	Yorkshire Region
F	0-35	South East Region
M	0-35	London Region
M	0-35	South East Region
M	0-35	North Western Region
F	0-35	South East Region
M	35-55	East Midlands Region
M	0-35	South West Region
M	0-35	South Region
F	0-35	North Western Region
M	0-35	East Anglian Region
F	0-35	London Region
F	0-35	Scotland
M	0-35	West Midlands Region
M	0-35	East Anglian Region
F	0-35	South East Region
M	0-35	South East Region
M	0-35	Yorkshire Region
M	0-35	Ireland
M	35-55	South Region
M	0-35	Yorkshire Region
M	0-35	East Anglian Region
M	0-35	Yorkshire Region
M	0-35	Scotland
M	35-55	West Midlands Region
M	0-35	South West Region
M	0-35	West Midlands Region
F	0-35	Wales
M	35-55	North Western Region
M	35-55	London Region
M	35-55	South Region
M	0-35	Scotland
M	35-55	Yorkshire Region
M	35-55	London Region
M	0-35	Yorkshire Region
M	0-35	North Western Region
F	0-35	North Region
M	0-35	East Midlands Region
M	0-35	East Anglian Region
M	0-35	Scotland
M	0-35	Yorkshire Region
F	35-55	East Midlands Region
F	0-35	North Western Region
M	35-55	South Region
M	35-55	South Region
M	35-55	North Western Region
M	0-35	Scotland
F	0-35	North Western Region
M	0-35	Yorkshire Region
F	0-35	West Midlands Region
M	35-55	West Midlands Region
F	0-35	North Region
M	0-35	South East Region
M	0-35	West Midlands Region
F	35-55	East Midlands Region
M	0-35	London Region
M	0-35	North Region
F	0-35	Scotland
M	0-35	North Western Region
M	35-55	Wales
F	0-35	Scotland
M	0-35	South Region
M	0-35	East Anglian Region
M	35-55	Scotland
M	0-35	North Region
F	0-35	London Region
M	35-55	East Anglian Region
M	0-35	London Region
F	0-35	South East Region
M	0-35	South East Region
M	0-35	East Midlands Region
F	35-55	Scotland
M	0-35	South West Region
M	35-55	North Region
M	35-55	London Region
M	35-55	South West Region
M	35-55	Scotland
M	0-35	North Western Region
M	0-35	South Region
M	0-35	South West Region
M	0-35	Scotland
M	0-35	West Midlands Region
M	0-35	East Anglian Region
F	35-55	North Region
M	0-35	South Region
F	0-35	South West Region
M	0-35	South East Region
M	0-35	East Anglian Region
F	0-35	West Midlands Region
M	0-35	Wales
M	0-35	Scotland
F	0-35	South Region
M	35-55	East Anglian Region
M	0-35	North Western Region
M	0-35	South East Region
M	35-55	Scotland
F	0-35	East Anglian Region
M	35-55	South Region
M	0-35	Yorkshire Region
M	0-35	West Midlands Region
M	0-35	West Midlands Region
M	0-35	North Western Region
M	0-35	Ireland
M	0-35	Wales
F	35-55	Wales
M	0-35	Ireland
M	0-35	East Midlands Region
M	0-35	Scotland
F	0-35	West Midlands Region
F	35-55	North Western Region
M	0-35	West Midlands Region
M	0-35	London Region
F	35-55	Scotland
M	0-35	North Western Region
M	0-35	Yorkshire Region
F	0-35	Wales
M	35-55	Wales
M	0-35	Scotland
M	0-35	Scotland
M	0-35	Yorkshire Region
F	0-35	Wales
M	0-35	East Anglian Region
M	0-35	South Region
M	0-35	West Midlands Region
M	35-55	Ireland
M	0-35	South East Region
M	0-35	South West Region
M	35-55	South Region
M	0-35	North Western Region
M	0-35	South Region
M	0-35	South Region
M	0-35	East Anglian Region
M	0-35	South West Region
M	0-35	South Region
M	0-35	South Region
M	0-35	London Region
M	0-35	North Western Region
M	0-35	South West Region
M	35-55	North Region
M	0-35	Scotland
M	35-55	Ireland
M	35-55	South Region
M	0-35	South East Region
M	0-35	London Region
M	0-35	Yorkshire Region
M	35-55	North Western Region
M	0-35	Scotland
M	0-35	West Midlands Region
M	0-35	South East Region
M	35-55	Ireland
M	35-55	East Anglian Region
M	0-35	South East Region
M	0-35	North Western Region
M	0-35	Wales
M	0-35	Wales
M	35-55	North Western Region
M	0-35	West Midlands Region
M	0-35	North Western Region
M	0-35	North Region
M	35-55	Scotland
M	0-35	East Anglian Region
F	0-35	London Region
F	0-35	North Western Region
M	0-35	North Region
F	0-35	Wales
M	35-55	South West Region
M	0-35	Ireland
F	0-35	North Region
M	0-35	North Western Region
M	0-35	London Region
F	0-35	Wales
M	0-35	South East Region
M	0-35	North Western Region
M	0-35	Yorkshire Region
M	0-35	South Region
M	0-35	North Region
M	0-35	West Midlands Region
F	0-35	West Midlands Region
M	0-35	North Western Region
M	0-35	East Midlands Region
M	0-35	South West Region
M	0-35	North Region
M	35-55	North Western Region
M	0-35	London Region
M	0-35	South Region
M	0-35	South West Region
M	35-55	North Region
M	0-35	South East Region
M	35-55	Yorkshire Region
M	0-35	South Region
M	0-35	London Region
M	0-35	Scotland
M	35-55	Wales
M	0-35	North Western Region
M	0-35	South West Region
M	35-55	East Anglian Region
F	0-35	Scotland
F	0-35	Ireland
F	0-35	London Region
M	0-35	London Region
M	35-55	South East Region
F	35-55	West Midlands Region
F	0-35	North Western Region
M	0-35	South East Region
M	0-35	Scotland
F	0-35	North Western Region
F	0-35	West Midlands Region
M	35-55	East Anglian Region
F	0-35	London Region
M	0-35	London Region
M	35-55	London Region
M	0-35	South Region
M	35-55	Ireland
M	0-35	East Anglian Region
M	35-55	North Region
F	0-35	East Anglian Region
F	0-35	East Midlands Region
M	0-35	South West Region
F	0-35	North Region
M	35-55	East Anglian Region
F	0-35	Scotland
M	0-35	Scotland
M	0-35	North Region
M	0-35	Wales
F	0-35	North Region
F	35-55	South West Region
M	55<=	South West Region
M	0-35	Yorkshire Region
M	35-55	South Region
M	0-35	North Region
M	0-35	East Anglian Region
M	0-35	West Midlands Region
M	35-55	South East Region
F	0-35	Yorkshire Region
F	35-55	Scotland
M	0-35	South West Region
M	0-35	London Region
M	0-35	Ireland
F	0-35	South Region
F	35-55	Yorkshire Region
F	0-35	London Region
M	35-55	South West Region
F	0-35	East Midlands Region
M	0-35	West Midlands Region
M	0-35	East Anglian Region
M	0-35	Ireland
M	0-35	South Region
M	0-35	Scotland
F	35-55	North Region
M	0-35	South Region
F	0-35	East Midlands Region
M	0-35	London Region
M	0-35	Wales
M	0-35	Yorkshire Region
F	0-35	East Midlands Region
M	0-35	South Region
F	0-35	East Anglian Region
M	0-35	East Anglian Region
M	0-35	Ireland
M	0-35	North Region
M	0-35	North Region
M	0-35	East Anglian Region
M	35-55	East Anglian Region
M	35-55	London Region
M	0-35	Ireland
F	35-55	South Region
M	0-35	West Midlands Region
M	0-35	East Anglian Region
M	0-35	North Region
M	35-55	Scotland
M	0-35	London Region
M	35-55	Scotland
F	0-35	London Region
M	0-35	South Region
M	0-35	South Region
M	0-35	North Region
M	0-35	West Midlands Region
F	0-35	North Western Region
M	0-35	South East Region
F	0-35	North Region
M	0-35	East Midlands Region
M	35-55	South East Region
M	0-35	East Midlands Region
M	0-35	Yorkshire Region
M	0-35	North Western Region
M	0-35	East Anglian Region
M	0-35	London Region
M	0-35	South Region
M	35-55	South East Region
M	35-55	Scotland
M	35-55	South Region
M	0-35	Scotland
M	0-35	South East Region
F	0-35	South Region
F	0-35	South East Region
M	35-55	East Midlands Region
M	0-35	East Anglian Region
F	0-35	Yorkshire Region
M	0-35	West Midlands Region
M	0-35	South East Region
M	0-35	West Midlands Region
F	0-35	North Western Region
M	0-35	London Region
M	0-35	South Region
F	35-55	South Region
M	0-35	South Region
M	0-35	London Region
M	0-35	East Midlands Region
M	0-35	Scotland
F	35-55	West Midlands Region
M	35-55	Scotland
M	0-35	South West Region
M	0-35	London Region
M	35-55	West Midlands Region
F	35-55	Wales
F	0-35	South Region
M	0-35	London Region
F	0-35	South East Region
F	35-55	London Region
M	0-35	East Midlands Region
M	0-35	London Region
M	0-35	South East Region
M	0-35	South Region
F	0-35	West Midlands Region
M	35-55	South Region
M	0-35	South East Region
F	0-35	Yorkshire Region
M	0-35	North Western Region
F	0-35	East Anglian Region
M	0-35	East Midlands Region
F	35-55	Yorkshire Region
F	0-35	London Region
F	35-55	London Region
M	0-35	East Anglian Region
M	0-35	Scotland
M	35-55	Scotland
M	0-35	South West Region
F	0-35	South Region
F	35-55	North Region
F	0-35	North Western Region
F	0-35	East Anglian Region
M	0-35	Scotland
M	35-55	North Western Region
M	0-35	North Region
M	0-35	London Region
M	0-35	East Midlands Region
M	0-35	Scotland
F	0-35	Yorkshire Region
M	0-35	East Anglian Region
M	0-35	Scotland
M	0-35	West Midlands Region
M	0-35	South East Region
F	0-35	South West Region
M	0-35	Scotland
F	0-35	South East Region
M	0-35	Yorkshire Region
M	0-35	South East Region
M	0-35	Yorkshire Region
M	0-35	West Midlands Region
F	0-35	Yorkshire Region
M	0-35	South East Region
M	0-35	Scotland
F	35-55	Wales
M	0-35	North Region
M	0-35	London Region
M	0-35	South Region
M	0-35	London Region
F	0-35	South Region
M	0-35	Scotland
M	0-35	London Region
M	35-55	South Region
M	0-35	South East Region
F	0-35	South West Region
M	0-35	Scotland
M	0-35	London Region
F	0-35	North Region
M	0-35	Yorkshire Region
F	0-35	Ireland
F	0-35	Scotland
M	0-35	East Anglian Region
F	35-55	West Midlands Region
M	0-35	West Midlands Region
M	0-35	Scotland
M	35-55	East Anglian Region
M	35-55	Wales
F	35-55	North Region
F	0-35	Wales
M	0-35	Wales
M	0-35	Scotland
F	0-35	South East Region
M	0-35	North Region
F	35-55	North Region
M	0-35	East Anglian Region
M	0-35	East Anglian Region
M	0-35	North Western Region
M	35-55	South Region
F	0-35	West Midlands Region
M	0-35	South Region
F	0-35	East Midlands Region
M	0-35	East Anglian Region
M	0-35	Scotland
M	0-35	Scotland
F	0-35	Wales
M	0-35	North Region
M	0-35	North Region
M	0-35	West Midlands Region
M	0-35	North Region
F	35-55	West Midlands Region
F	0-35	East Anglian Region
F	0-35	East Midlands Region
F	0-35	Ireland
M	0-35	East Anglian Region
M	0-35	West Midlands Region
M	35-55	Wales
M	0-35	Scotland
M	0-35	South East Region
M	0-35	South Region
M	0-35	West Midlands Region
M	0-35	Yorkshire Region
M	0-35	Wales
M	0-35	East Anglian Region
M	0-35	Scotland
M	0-35	North Region
M	35-55	Scotland
M	0-35	South Region
M	0-35	West Midlands Region
F	0-35	East Midlands Region
M	0-35	West Midlands Region
M	0-35	London Region
F	35-55	London Region
M	0-35	East Anglian Region
M	0-35	South East Region
M	0-35	North Region
M	0-35	Scotland
M	0-35	London Region
M	35-55	North Region
M	0-35	East Anglian Region
M	35-55	East Anglian Region
M	0-35	Scotland
M	0-35	Scotland
M	0-35	East Midlands Region
M	0-35	East Anglian Region
F	0-35	Scotland
M	0-35	East Anglian Region
M	0-35	London Region
M	0-35	North Western Region
M	0-35	East Midlands Region
M	0-35	Scotland
F	0-35	Ireland
F	35-55	North Western Region
M	0-35	South Region
F	0-35	West Midlands Region
M	0-35	London Region
M	0-35	Scotland
M	0-35	North Western Region
M	0-35	East Anglian Region
M	0-35	Scotland
M	0-35	North Region
M	35-55	North Region
M	0-35	South East Region
M	0-35	South West Region
M	0-35	East Anglian Region
M	0-35	Scotland
M	0-35	Scotland
M	0-35	South Region
M	0-35	Yorkshire Region
M	0-35	South West Region
F	0-35	South West Region
F	0-35	Scotland
M	0-35	East Midlands Region
M	0-35	South Region
M	0-35	East Anglian Region
F	0-35	East Anglian Region
M	0-35	East Midlands Region
F	0-35	South East Region
M	0-35	South Region
M	0-35	Scotland
M	0-35	East Anglian Region
M	0-35	South Region
M	35-55	Scotland
F	0-35	West Midlands Region
M	0-35	London Region
F	35-55	London Region
M	0-35	East Anglian Region
M	0-35	South West Region
M	0-35	East Midlands Region
M	0-35	North Western Region
F	35-55	East Midlands Region
M	0-35	Yorkshire Region
F	0-35	London Region
M	0-35	South East Region
M	35-55	West Midlands Region
M	35-55	Wales
M	0-35	North Region
M	35-55	East Anglian Region
M	0-35	East Midlands Region
M	0-35	East Anglian Region
M	0-35	Scotland
F	0-35	Scotland
M	0-35	Scotland
M	0-35	North Region
F	0-35	Wales
M	0-35	North Western Region
M	0-35	North Western Region
M	0-35	South East Region
M	0-35	Scotland
M	0-35	North Region
M	0-35	South East Region
M	0-35	Scotland
F	0-35	South West Region
F	0-35	West Midlands Region
F	0-35	East Midlands Region
M	0-35	Ireland
M	0-35	Scotland
M	0-35	Scotland
M	35-55	Scotland
M	35-55	East Anglian Region
F	0-35	Scotland
M	0-35	Scotland
M	0-35	South East Region
M	0-35	East Anglian Region
F	0-35	West Midlands Region
M	0-35	Scotland
M	0-35	Yorkshire Region
M	35-55	Scotland
M	0-35	West Midlands Region
M	0-35	North Western Region
F	0-35	South West Region
M	0-35	North Region
M	0-35	West Midlands Region
M	0-35	Ireland
M	0-35	South Region
M	0-35	North Western Region
M	35-55	Scotland
M	0-35	West Midlands Region
M	0-35	South Region
F	0-35	London Region
M	0-35	Yorkshire Region
F	0-35	North Western Region
M	0-35	East Midlands Region
M	0-35	North Region
M	35-55	East Anglian Region
M	0-35	Scotland
M	35-55	Scotland
M	0-35	Yorkshire Region
M	0-35	Yorkshire Region
M	0-35	Scotland
M	0-35	Scotland
M	0-35	Scotland
M	35-55	North Western Region
M	35-55	West Midlands Region
M	35-55	Scotland
M	0-35	North Western Region
M	0-35	Wales
M	0-35	Wales
M	0-35	Yorkshire Region
M	35-55	East Anglian Region
M	0-35	North Western Region
M	0-35	Yorkshire Region
M	0-35	Wales
M	0-35	North Western Region
M	35-55	Wales
M	35-55	South Region
M	0-35	South West Region
M	0-35	South East Region
M	0-35	Scotland
M	0-35	West Midlands Region
M	0-35	North Region
F	0-35	North Western Region
M	0-35	Scotland
M	0-35	East Midlands Region
M	0-35	Scotland
M	35-55	Scotland
F	0-35	Scotland
M	35-55	South West Region
M	0-35	South East Region
M	35-55	East Midlands Region
M	0-35	Yorkshire Region
M	0-35	East Midlands Region
F	0-35	North Region
M	0-35	Yorkshire Region
M	0-35	Wales
M	0-35	South West Region
M	0-35	Yorkshire Region
M	0-35	London Region
M	35-55	Scotland
M	0-35	London Region
F	0-35	North Western Region
F	0-35	South East Region
M	0-35	East Anglian Region
M	0-35	Yorkshire Region
F	0-35	Yorkshire Region
M	0-35	East Anglian Region
M	0-35	West Midlands Region
M	0-35	South East Region
M	0-35	North Western Region
M	35-55	East Midlands Region
F	0-35	East Anglian Region
F	0-35	South Region
M	0-35	Scotland
M	0-35	Ireland
M	35-55	South Region
F	0-35	Scotland
M	0-35	London Region
M	35-55	South Region
F	0-35	London Region
M	0-35	North Region
M	0-35	Yorkshire Region
M	0-35	Scotland
M	0-35	Scotland
M	0-35	Scotland
M	0-35	East Midlands Region
M	0-35	East Midlands Region
M	35-55	Scotland
M	0-35	South Region
M	0-35	West Midlands Region
F	0-35	Wales
M	0-35	Wales
F	0-35	South East Region
M	0-35	East Midlands Region
M	0-35	Ireland
M	0-35	North Western Region
M	0-35	Wales
M	0-35	East Midlands Region
M	0-35	Yorkshire Region
F	0-35	West Midlands Region
M	0-35	North Western Region
M	35-55	North Western Region
M	0-35	South Region
M	35-55	South West Region
M	0-35	Scotland
M	0-35	South Region
M	0-35	Scotland
M	0-35	Scotland
F	0-35	East Anglian Region
M	0-35	North Western Region
M	0-35	Ireland
M	0-35	South West Region
M	0-35	Scotland
F	35-55	South Region
M	0-35	London Region
M	35-55	Scotland
M	35-55	East Anglian Region
M	35-55	Scotland
M	0-35	Scotland
M	35-55	North Region
M	0-35	London Region
M	0-35	South West Region
M	0-35	London Region
M	0-35	Yorkshire Region
M	0-35	West Midlands Region
M	0-35	Scotland
M	0-35	South East Region
M	0-35	Scotland
F	0-35	East Anglian Region
F	0-35	Yorkshire Region
F	35-55	Yorkshire Region
M	0-35	Scotland
M	0-35	West Midlands Region
M	0-35	Wales
M	0-35	East Anglian Region
M	0-35	Yorkshire Region
M	0-35	North Western Region
M	0-35	Scotland
M	0-35	South West Region
M	0-35	South Region
M	0-35	North Western Region
M	0-35	South West Region
M	35-55	West Midlands Region
M	0-35	West Midlands Region
M	0-35	Scotland
M	0-35	Yorkshire Region
M	0-35	East Midlands Region
M	0-35	West Midlands Region
M	0-35	Wales
M	0-35	London Region
M	0-35	South Region
M	0-35	South Region
F	0-35	Scotland
M	0-35	Scotland
M	0-35	Scotland
M	0-35	North Region
F	0-35	London Region
F	35-55	Scotland
M	35-55	South Region
M	0-35	London Region
M	0-35	East Anglian Region
M	0-35	North Western Region
M	0-35	Yorkshire Region
F	0-35	East Midlands Region
M	0-35	Scotland
F	0-35	East Anglian Region
F	0-35	East Midlands Region
M	0-35	East Anglian Region
M	0-35	South Region
F	0-35	North Western Region
M	35-55	South West Region
M	0-35	North Western Region
M	0-35	East Anglian Region
M	0-35	West Midlands Region
M	0-35	South Region
M	35-55	East Midlands Region
F	0-35	South Region
M	0-35	Scotland
F	0-35	North Region
F	0-35	London Region
M	0-35	East Anglian Region
M	0-35	North Region
M	0-35	South East Region
M	0-35	London Region
M	0-35	Wales
M	0-35	Scotland
M	0-35	South Region
M	0-35	London Region
F	0-35	North Western Region
F	0-35	North Region
M	35-55	South West Region
F	0-35	Scotland
M	0-35	South Region
M	0-35	North Western Region
M	0-35	North Western Region
M	0-35	North Western Region
F	0-35	North Western Region
M	35-55	North Region
M	0-35	North Region
F	0-35	South Region
M	0-35	London Region
M	0-35	East Midlands Region
M	35-55	North Region
M	0-35	East Anglian Region
M	35-55	London Region
M	0-35	Wales
M	0-35	Scotland
M	35-55	Ireland
F	35-55	West Midlands Region
M	0-35	South Region
M	0-35	Scotland
M	0-35	North Western Region
M	0-35	Scotland
M	0-35	South Region
M	0-35	Wales
M	0-35	South Region
F	0-35	South West Region
M	35-55	West Midlands Region
M	0-35	East Anglian Region
M	0-35	Scotland
M	0-35	East Anglian Region
M	0-35	West Midlands Region
M	0-35	West Midlands Region
M	0-35	North Region
M	0-35	North Region
M	0-35	East Anglian Region
M	0-35	South West Region
M	35-55	Ireland
M	35-55	West Midlands Region
M	35-55	South Region
M	0-35	Scotland
M	0-35	London Region
M	0-35	South Region
M	0-35	North Western Region
M	0-35	South East Region
M	0-35	Wales
F	35-55	East Anglian Region
M	35-55	South East Region
M	0-35	South West Region
M	0-35	Wales
M	0-35	South East Region
M	0-35	London Region
M	0-35	North Western Region
M	0-35	South Region
M	0-35	East Anglian Region
F	0-35	West Midlands Region
M	35-55	London Region
M	0-35	North Region
F	0-35	London Region
M	0-35	Ireland
M	0-35	North Region
F	0-35	East Anglian Region
M	0-35	Wales
M	0-35	East Anglian Region
M	0-35	East Midlands Region
M	0-35	Scotland
M	0-35	East Anglian Region
M	0-35	South East Region
M	35-55	South Region
F	0-35	Yorkshire Region
M	35-55	South Region
F	0-35	North Western Region
F	0-35	South Region
M	0-35	London Region
M	0-35	Scotland
F	0-35	East Anglian Region
M	0-35	London Region
F	0-35	South East Region
M	0-35	Yorkshire Region
M	0-35	East Anglian Region
F	0-35	East Anglian Region
F	35-55	South Region
M	0-35	Scotland
M	0-35	East Anglian Region
M	0-35	North Western Region
M	0-35	North Region
M	35-55	Wales
M	0-35	East Anglian Region
M	0-35	North Western Region
F	0-35	London Region
F	0-35	East Anglian Region
M	0-35	South Region
F	0-35	West Midlands Region
F	0-35	South Region
M	0-35	Scotland
M	0-35	Scotland
M	35-55	North Region
M	0-35	North Region
F	0-35	East Anglian Region
M	0-35	Scotland
F	0-35	Scotland
M	0-35	East Midlands Region
M	0-35	South West Region
M	0-35	South Region
M	0-35	East Midlands Region
M	0-35	North Western Region
M	0-35	West Midlands Region
M	35-55	North Region
M	0-35	South Region
M	0-35	East Midlands Region
M	0-35	East Midlands Region
F	0-35	South West Region
M	0-35	South Region
M	0-35	West Midlands Region
M	0-35	South East Region
F	0-35	Wales
M	35-55	West Midlands Region
M	0-35	North Western Region
M	0-35	Yorkshire Region
M	0-35	South Region
M	35-55	London Region
F	0-35	Scotland
M	0-35	South Region
M	0-35	Wales
M	0-35	North Western Region
M	0-35	South West Region
M	0-35	Scotland
M	0-35	North Western Region
M	0-35	North Region
F	35-55	Scotland
M	0-35	Wales
M	0-35	South Region
M	0-35	North Western Region
F	0-35	Scotland
M	0-35	South Region
M	0-35	South West Region
M	0-35	South Region
M	0-35	London Region
M	0-35	Yorkshire Region
M	0-35	North Western Region
F	0-35	South West Region
M	0-35	South West Region",,,,장희훈,
테이블 1개,university_learning,최종 결과가 pass인 학생이 가장 많은 지역,Region with the highest number of students with a final result of 'pass',,SELECT region FROM studentinfo WHERE final_result = 'pass' GROUP BY region ORDER BY COUNT(*) DESC LIMIT 1;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,East Anglian Region,,,,장희훈,
테이블 1개,university_learning,최종 결과가 pass인 학생의 비율이 가장 높은 지역,Region with the highest percentage of students with a final result of 'pass',,SELECT region FROM studentinfo GROUP BY region ORDER BY SUM(CASE WHEN final_result = 'pass' THEN 1 ELSE 0 END) / COUNT(*) DESC LIMIT 1;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,Ireland,,,,장희훈,
테이블 1개,university_learning,"연령대 별로 어떤 수업을 많이 듣는지 연령대, 수업코드, 학생 수로 알고싶어","I want to know which classes are taken most often by age group, class code, and number of students.",,"SELECT age_band, code_module, COUNT(id_student) AS student_count FROM studentinfo GROUP BY age_band, code_module ORDER BY age_band, student_count DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,9,,"0-35        BBB        5147
0-35        CCC        1039
0-35        AAA        337
35-55        BBB        2537
35-55        AAA        333
35-55        CCC        301
55<=        AAA        42
55<=        BBB        8
55<=        CCC        3",,,,장희훈,
테이블 1개,university_learning,학생 별 수업 평가결과가 50이상인 학생 수,Number of students with class evaluation results of 50 or higher,,SELECT COUNT(DISTINCT id_student) AS num_students_over_50 FROM studentAssessment WHERE score >= 50;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,1995,,,,장희훈,
테이블 1개,university_learning,연령대 별로 어떤 수업을 많이 듣는지 보고싶어,I want to see what classes most people take by age group.,,"SELECT age_band, code_module, COUNT(*) AS num_students FROM studentinfo GROUP BY age_band, code_module ORDER BY age_band, num_students DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,9,,"0-35	BBB	5147
0-35	CCC	1039
0-35	AAA	337
35-55	BBB	2537
35-55	AAA	333
35-55	CCC	301
55<=	AAA	42
55<=	BBB	8
55<=	CCC	3",,,,장희훈,
테이블 1개,university_learning,남학생 중 모듈 코드가 AAA인 학생,"Among male students, the module code is ''AAA''.",,SELECT * FROM studentinfo WHERE gender = 'M' AND code_module = 'AAA';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,413,,"AAA', '2013J', '74372', 'M', 'East Anglian Region', 'A Level or Equivalent', '10-20', '35-55', '0', '150', 'N', 'Fail'
'AAA', '2013J', '75091', 'M', 'South West Region', 'A Level or Equivalent', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '75255', 'M', 'North Western Region', 'A Level or Equivalent', '40-50%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '77367', 'M', 'East Midlands Region', 'A Level or Equivalent', '30-40%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '79403', 'M', 'South Region', 'Lower Than A Level', '80-90%', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '85144', 'M', 'Scotland', 'A Level or Equivalent', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '85302', 'M', 'London Region', 'Lower Than A Level', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '87431', 'M', 'South East Region', 'Lower Than A Level', '10-20', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2013J', '91265', 'M', 'North Western Region', 'HE Qualification', '0-10%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '94961', 'M', 'South Region', 'Lower Than A Level', '70-80%', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '95755', 'M', 'South East Region', 'Lower Than A Level', '90-100%', '0-35', '0', '60', 'N', 'Withdrawn'
'AAA', '2013J', '98094', 'M', 'Wales', 'Lower Than A Level', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '100893', 'M', 'Yorkshire Region', 'A Level or Equivalent', '20-30%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '101781', 'M', 'South Region', 'Lower Than A Level', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '102806', 'M', 'North Western Region', 'A Level or Equivalent', '30-40%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '102952', 'M', 'London Region', 'HE Qualification', '60-70%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '104476', 'M', 'Ireland', 'Post Graduate Qualification', NULL, '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '106247', 'M', 'South Region', 'HE Qualification', '80-90%', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2013J', '106577', 'M', 'East Midlands Region', 'Lower Than A Level', '20-30%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '108872', 'M', 'London Region', 'HE Qualification', '80-90%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '110175', 'M', 'East Anglian Region', 'HE Qualification', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '111512', 'M', 'Wales', 'A Level or Equivalent', '40-50%', '0-35', '0', '60', 'N', 'Fail'
'AAA', '2013J', '113295', 'M', 'Yorkshire Region', 'Lower Than A Level', '60-70%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '114999', 'M', 'Yorkshire Region', 'HE Qualification', '60-70%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '116541', 'M', 'Wales', 'HE Qualification', '0-10%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '116692', 'M', 'East Anglian Region', 'A Level or Equivalent', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '118983', 'M', 'East Midlands Region', 'HE Qualification', '30-40%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '123044', 'M', 'South Region', 'A Level or Equivalent', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '125018', 'M', 'South Region', 'HE Qualification', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '129955', 'M', 'West Midlands Region', 'A Level or Equivalent', '50-60%', '0-35', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '130636', 'M', 'South East Region', 'A Level or Equivalent', '10-20', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '131390', 'M', 'East Anglian Region', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '133922', 'M', 'North Region', 'Lower Than A Level', '0-10%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '135471', 'M', 'East Anglian Region', 'Lower Than A Level', '90-100%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '137873', 'M', 'South West Region', 'A Level or Equivalent', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '139033', 'M', 'South East Region', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2013J', '141377', 'M', 'South West Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '345', 'N', 'Withdrawn'
'AAA', '2014J', '141506', 'M', 'Scotland', 'A Level or Equivalent', '20-30%', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2013J', '145130', 'M', 'South West Region', 'HE Qualification', '60-70%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '146503', 'M', 'East Anglian Region', 'Lower Than A Level', '30-40%', '35-55', '0', '120', 'Y', 'Pass'
'AAA', '2013J', '147756', 'M', 'North Region', 'Lower Than A Level', '60-70%', '0-35', '0', '120', 'N', 'Fail'
'AAA', '2014J', '149962', 'M', 'West Midlands Region', 'A Level or Equivalent', '60-70%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '155550', 'M', 'London Region', 'A Level or Equivalent', '0-10%', '35-55', '0', '420', 'N', 'Pass'
'AAA', '2013J', '159954', 'M', 'East Midlands Region', 'A Level or Equivalent', '40-50%', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2013J', '164259', 'M', 'Scotland', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '167961', 'M', 'South West Region', 'HE Qualification', '70-80%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '172112', 'M', 'Ireland', 'HE Qualification', NULL, '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '174024', 'M', 'North Region', 'A Level or Equivalent', '10-20', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '174782', 'M', 'East Anglian Region', 'HE Qualification', '90-100%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '175392', 'M', 'North Region', 'HE Qualification', NULL, '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '175447', 'M', 'London Region', 'A Level or Equivalent', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '175932', 'M', 'North Western Region', 'HE Qualification', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '180753', 'M', 'South West Region', 'A Level or Equivalent', '30-40%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '183057', 'M', 'Wales', 'Lower Than A Level', '90-100%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '183947', 'M', 'London Region', 'A Level or Equivalent', '10-20', '0-35', '0', '180', 'N', 'Pass'
'AAA', '2013J', '184271', 'M', 'South West Region', 'HE Qualification', '80-90%', '35-55', '0', '170', 'N', 'Pass'
'AAA', '2014J', '185350', 'M', 'Yorkshire Region', 'Lower Than A Level', '10-20', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2013J', '185439', 'M', 'London Region', 'HE Qualification', '10-20', '0-35', '0', '120', 'N', 'Fail'
'AAA', '2013J', '186149', 'M', 'Scotland', 'HE Qualification', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '187100', 'M', 'South East Region', 'A Level or Equivalent', '50-60%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '188278', 'M', 'Yorkshire Region', 'A Level or Equivalent', '70-80%', '35-55', '0', '120', 'N', 'Withdrawn'
'AAA', '2013J', '189879', 'M', 'Scotland', 'A Level or Equivalent', '90-100%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '195262', 'M', 'London Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '199636', 'M', 'East Anglian Region', 'A Level or Equivalent', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '199897', 'M', 'East Midlands Region', 'HE Qualification', '10-20', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '200804', 'M', 'South Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '200860', 'M', 'London Region', 'Lower Than A Level', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '205350', 'M', 'South West Region', 'HE Qualification', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '205494', 'M', 'South West Region', 'HE Qualification', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '205719', 'M', 'East Anglian Region', 'A Level or Equivalent', '40-50%', '0-35', '0', '90', 'Y', 'Fail'
'AAA', '2013J', '227517', 'M', 'Ireland', 'HE Qualification', NULL, '0-35', '0', '180', 'N', 'Fail'
'AAA', '2014J', '228021', 'M', 'Scotland', 'A Level or Equivalent', '40-50%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '228082', 'M', 'London Region', 'HE Qualification', '60-70%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '228222', 'M', 'East Midlands Region', 'Lower Than A Level', '50-60%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '228383', 'M', 'Yorkshire Region', 'HE Qualification', '50-60%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '229179', 'M', 'West Midlands Region', 'A Level or Equivalent', '20-30%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '229361', 'M', 'East Midlands Region', 'A Level or Equivalent', '50-60%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '231554', 'M', 'London Region', 'A Level or Equivalent', '40-50%', '0-35', '0', '240', 'N', 'Pass'
'AAA', '2014J', '232307', 'M', 'South Region', 'Lower Than A Level', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '235507', 'M', 'Yorkshire Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '240', 'N', 'Withdrawn'
'AAA', '2013J', '236284', 'M', 'Scotland', 'Post Graduate Qualification', '90-100%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '236875', 'M', 'West Midlands Region', 'A Level or Equivalent', '40-50%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '237274', 'M', 'Yorkshire Region', 'A Level or Equivalent', '10-20', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '238007', 'M', 'South Region', 'HE Qualification', '90-100%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '240712', 'M', 'London Region', 'HE Qualification', '80-90%', '0-35', '0', '80', 'N', 'Pass'
'AAA', '2013J', '240884', 'M', 'South Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '241649', 'M', 'East Anglian Region', 'HE Qualification', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '242793', 'M', 'London Region', 'HE Qualification', '20-30%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '246834', 'M', 'South West Region', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '248270', 'M', 'North Western Region', 'Lower Than A Level', '20-30%', '0-35', '0', '90', 'N', 'Pass'
'AAA', '2014J', '254625', 'M', 'Wales', 'A Level or Equivalent', '20-30%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '255548', 'M', 'Wales', 'Lower Than A Level', '20-30%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '256815', 'M', 'North Western Region', 'HE Qualification', '10-20', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '258587', 'M', 'South West Region', 'A Level or Equivalent', '10-20', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2014J', '260623', 'M', 'South East Region', 'Lower Than A Level', '40-50%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '262011', 'M', 'East Midlands Region', 'A Level or Equivalent', '20-30%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '263251', 'M', 'East Anglian Region', 'A Level or Equivalent', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '263543', 'M', 'East Anglian Region', 'Lower Than A Level', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '263952', 'M', 'North Region', 'Lower Than A Level', NULL, '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '268073', 'M', 'East Anglian Region', 'A Level or Equivalent', '10-20', '35-55', '0', '90', 'N', 'Fail'
'AAA', '2013J', '268733', 'M', 'East Anglian Region', 'A Level or Equivalent', '30-40%', '0-35', '0', '180', 'N', 'Withdrawn'
'AAA', '2013J', '271251', 'M', 'Scotland', 'A Level or Equivalent', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '273346', 'M', 'East Midlands Region', 'Lower Than A Level', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '274947', 'M', 'East Anglian Region', 'Lower Than A Level', '40-50%', '0-35', '0', '120', 'N', 'Withdrawn'
'AAA', '2013J', '279572', 'M', 'London Region', 'Lower Than A Level', '40-50%', '0-35', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '281250', 'M', 'Wales', 'Lower Than A Level', '70-80%', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2013J', '281589', 'M', 'North Western Region', 'HE Qualification', '30-40%', '0-35', '0', '60', 'N', 'Fail'
'AAA', '2013J', '282821', 'M', 'South West Region', 'A Level or Equivalent', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '285315', 'M', 'East Anglian Region', 'HE Qualification', '70-80%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '286488', 'M', 'South East Region', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '287204', 'M', 'Scotland', 'A Level or Equivalent', '0-10%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '287210', 'M', 'Scotland', 'A Level or Equivalent', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '287548', 'M', 'East Anglian Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '288994', 'M', 'Scotland', 'A Level or Equivalent', '30-40%', '0-35', '0', '120', 'N', 'Fail'
'AAA', '2014J', '289449', 'M', 'East Midlands Region', 'HE Qualification', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '290201', 'M', 'Wales', 'A Level or Equivalent', '20-30%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '290757', 'M', 'North Western Region', 'A Level or Equivalent', '30-40%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '291334', 'M', 'South East Region', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2014J', '292525', 'M', 'South Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '292775', 'M', 'South East Region', 'A Level or Equivalent', '40-50%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '293699', 'M', 'East Midlands Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '294496', 'M', 'North Western Region', 'A Level or Equivalent', '10-20', '35-55', '0', '60', 'Y', 'Pass'
'AAA', '2013J', '294570', 'M', 'South East Region', 'HE Qualification', '90-100%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '294594', 'M', 'South East Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '294655', 'M', 'Wales', 'A Level or Equivalent', '70-80%', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2014J', '295060', 'M', 'East Anglian Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'N', 'Fail'
'AAA', '2014J', '295075', 'M', 'South Region', 'HE Qualification', '70-80%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '295741', 'M', 'South East Region', 'A Level or Equivalent', '40-50%', '35-55', '0', '240', 'N', 'Fail'
'AAA', '2013J', '296332', 'M', 'South Region', 'Post Graduate Qualification', '90-100%', '55<=', '0', '60', 'N', 'Distinction'
'AAA', '2014J', '296424', 'M', 'Scotland', 'A Level or Equivalent', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '298034', 'M', 'Scotland', 'A Level or Equivalent', '70-80%', '35-55', '0', '120', 'N', 'Fail'
'AAA', '2013J', '300398', 'M', 'West Midlands Region', 'A Level or Equivalent', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '301967', 'M', 'South West Region', 'A Level or Equivalent', '20-30%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '302476', 'M', 'South East Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '305152', 'M', 'North Western Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'N', 'Fail'
'AAA', '2013J', '305386', 'M', 'West Midlands Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '120', 'Y', 'Pass'
'AAA', '2013J', '306107', 'M', 'West Midlands Region', 'A Level or Equivalent', '50-60%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2013J', '306466', 'M', 'East Anglian Region', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '306646', 'M', 'South Region', 'A Level or Equivalent', '80-90%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '307866', 'M', 'West Midlands Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '311235', 'M', 'South West Region', 'A Level or Equivalent', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '311659', 'M', 'East Anglian Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '120', 'N', 'Fail'
'AAA', '2013J', '311917', 'M', 'South West Region', 'A Level or Equivalent', '60-70%', '55<=', '0', '120', 'N', 'Pass'
'AAA', '2013J', '312537', 'M', 'South Region', 'Post Graduate Qualification', '90-100%', '55<=', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '312782', 'M', 'South Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '313937', 'M', 'Scotland', 'HE Qualification', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '315076', 'M', 'Yorkshire Region', 'A Level or Equivalent', '0-10%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '315744', 'M', 'Scotland', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '321942', 'M', 'South Region', 'HE Qualification', '90-100%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '324002', 'M', 'East Anglian Region', 'HE Qualification', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '324282', 'M', 'South East Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '328024', 'M', 'Yorkshire Region', 'A Level or Equivalent', '10-20', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '330594', 'M', 'South West Region', 'Lower Than A Level', '50-60%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '332884', 'M', 'Wales', 'A Level or Equivalent', '60-70%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '333059', 'M', 'Scotland', 'A Level or Equivalent', '20-30%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '333323', 'M', 'Scotland', 'HE Qualification', '80-90%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '334441', 'M', 'London Region', 'HE Qualification', '60-70%', '0-35', '0', '60', 'N', 'Fail'
'AAA', '2014J', '335247', 'M', 'South West Region', 'A Level or Equivalent', '80-90%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '336207', 'M', 'East Anglian Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '338407', 'M', 'East Midlands Region', 'A Level or Equivalent', '60-70%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '339972', 'M', 'North Region', 'A Level or Equivalent', '80-90%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '341872', 'M', 'East Anglian Region', 'Lower Than A Level', '40-50%', '0-35', '0', '180', 'N', 'Fail'
'AAA', '2014J', '341876', 'M', 'East Anglian Region', 'HE Qualification', '10-20', '0-35', '0', '120', 'N', 'Withdrawn'
'AAA', '2013J', '342514', 'M', 'Scotland', 'Lower Than A Level', '50-60%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '342972', 'M', 'Yorkshire Region', 'HE Qualification', '0-10%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '343446', 'M', 'Ireland', 'HE Qualification', '70-80%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2013J', '344282', 'M', 'Yorkshire Region', 'A Level or Equivalent', '10-20', '0-35', '0', '60', 'N', 'Fail'
'AAA', '2013J', '345068', 'M', 'East Anglian Region', 'A Level or Equivalent', '60-70%', '0-35', '0', '180', 'Y', 'Pass'
'AAA', '2013J', '345357', 'M', 'Yorkshire Region', 'A Level or Equivalent', '30-40%', '0-35', '0', '60', 'N', 'Distinction'
'AAA', '2014J', '345440', 'M', 'South Region', 'HE Qualification', '90-100%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '346025', 'M', 'East Anglian Region', 'A Level or Equivalent', '50-60%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '348275', 'M', 'Scotland', 'HE Qualification', '40-50%', '35-55', '0', '120', 'N', 'Withdrawn'
'AAA', '2014J', '348807', 'M', 'East Midlands Region', 'A Level or Equivalent', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '350156', 'M', 'South West Region', 'A Level or Equivalent', '30-40%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '350188', 'M', 'North Western Region', 'HE Qualification', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '350939', 'M', 'East Anglian Region', 'Lower Than A Level', '80-90%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '353665', 'M', 'South Region', 'A Level or Equivalent', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '354858', 'M', 'South Region', 'HE Qualification', '90-100%', '35-55', '0', '120', 'N', 'Withdrawn'
'AAA', '2014J', '356170', 'M', 'North Western Region', 'HE Qualification', '30-40%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '357668', 'M', 'Yorkshire Region', 'A Level or Equivalent', '10-20', '0-35', '0', '60', 'N', 'Fail'
'AAA', '2014J', '358182', 'M', 'South Region', 'Lower Than A Level', '80-90%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '364177', 'M', 'East Anglian Region', 'Lower Than A Level', '70-80%', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2013J', '365642', 'M', 'East Anglian Region', 'Lower Than A Level', '10-20', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '366483', 'M', 'South West Region', 'HE Qualification', '40-50%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '368824', 'M', 'Wales', 'HE Qualification', '50-60%', '35-55', '0', '120', 'N', 'Fail'
'AAA', '2013J', '368963', 'M', 'Yorkshire Region', 'Lower Than A Level', '0-10%', '0-35', '0', '180', 'N', 'Pass'
'AAA', '2014J', '369834', 'M', 'West Midlands Region', 'A Level or Equivalent', '60-70%', '0-35', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '371710', 'M', 'Scotland', 'HE Qualification', '10-20', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '375260', 'M', 'Ireland', 'HE Qualification', NULL, '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '375646', 'M', 'London Region', 'A Level or Equivalent', '40-50%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '376439', 'M', 'North Region', 'HE Qualification', NULL, '0-35', '0', '60', 'N', 'Distinction'
'AAA', '2014J', '377546', 'M', 'East Anglian Region', 'A Level or Equivalent', '50-60%', '0-35', '0', '120', 'Y', 'Distinction'
'AAA', '2013J', '380953', 'M', 'East Midlands Region', 'A Level or Equivalent', '80-90%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '382095', 'M', 'South Region', 'Lower Than A Level', '50-60%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '383254', 'M', 'Yorkshire Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '383600', 'M', 'Scotland', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '383723', 'M', 'East Anglian Region', 'HE Qualification', '90-100%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2014J', '384203', 'M', 'Scotland', 'HE Qualification', '20-30%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '386924', 'M', 'Ireland', 'Lower Than A Level', NULL, '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '386952', 'M', 'Yorkshire Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '387533', 'M', 'Scotland', 'HE Qualification', '50-60%', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2013J', '388885', 'M', 'South West Region', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '390890', 'M', 'Scotland', 'A Level or Equivalent', '0-10%', '0-35', '0', '90', 'N', 'Withdrawn'
'AAA', '2014J', '391249', 'M', 'South Region', 'HE Qualification', '90-100%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '392756', 'M', 'West Midlands Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '120', 'N', 'Fail'
'AAA', '2013J', '393207', 'M', 'North Western Region', 'A Level or Equivalent', '60-70%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '396872', 'M', 'Yorkshire Region', 'HE Qualification', '50-60%', '0-35', '0', '180', 'N', 'Pass'
'AAA', '2013J', '398552', 'M', 'Yorkshire Region', 'Lower Than A Level', '90-100%', '0-35', '0', '240', 'N', 'Fail'
'AAA', '2014J', '400147', 'M', 'South East Region', 'Lower Than A Level', '60-70%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '401404', 'M', 'West Midlands Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '180', 'N', 'Pass'
'AAA', '2014J', '402204', 'M', 'West Midlands Region', 'A Level or Equivalent', NULL, '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '402470', 'M', 'South West Region', 'Lower Than A Level', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '404804', 'M', 'Wales', 'Lower Than A Level', '20-30%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2013J', '405088', 'M', 'North Region', 'A Level or Equivalent', '20-30%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '405961', 'M', 'Scotland', 'A Level or Equivalent', '90-100%', '0-35', '0', '240', 'Y', 'Withdrawn'
'AAA', '2014J', '406671', 'M', 'South West Region', 'A Level or Equivalent', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '406682', 'M', 'South East Region', 'HE Qualification', '70-80%', '55<=', '0', '60', 'N', 'Distinction'
'AAA', '2014J', '409100', 'M', 'South East Region', 'HE Qualification', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '409703', 'M', 'East Anglian Region', 'A Level or Equivalent', '30-40%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '411971', 'M', 'Ireland', 'A Level or Equivalent', '40-50%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '414117', 'M', 'Yorkshire Region', 'A Level or Equivalent', '50-60%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '415969', 'M', 'West Midlands Region', 'HE Qualification', '0-10%', '35-55', '0', '90', 'N', 'Withdrawn'
'AAA', '2014J', '418731', 'M', 'Ireland', 'A Level or Equivalent', '70-80%', '0-35', '0', '90', 'N', 'Fail'
'AAA', '2013J', '420087', 'M', 'Scotland', 'A Level or Equivalent', '40-50%', '0-35', '0', '60', 'Y', 'Fail'
'AAA', '2014J', '424577', 'M', 'London Region', 'HE Qualification', '10-20', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '429858', 'M', 'Ireland', 'Lower Than A Level', NULL, '0-35', '0', '300', 'N', 'Distinction'
'AAA', '2014J', '431025', 'M', 'East Anglian Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '150', 'N', 'Fail'
'AAA', '2014J', '439305', 'M', 'South East Region', 'A Level or Equivalent', '60-70%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '441888', 'M', 'London Region', 'A Level or Equivalent', '20-30%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '442132', 'M', 'South West Region', 'HE Qualification', '20-30%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '442442', 'M', 'South West Region', 'HE Qualification', '80-90%', '0-35', '0', '120', 'N', 'Withdrawn'
'AAA', '2013J', '444677', 'M', 'London Region', 'HE Qualification', '30-40%', '0-35', '0', '60', 'N', 'Distinction'
'AAA', '2014J', '446108', 'M', 'South West Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '447481', 'M', 'Ireland', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '468120', 'M', 'West Midlands Region', 'Lower Than A Level', '50-60%', '0-35', '0', '120', 'N', 'Fail'
'AAA', '2014J', '468694', 'M', 'South Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '120', 'N', 'Withdrawn'
'AAA', '2013J', '470588', 'M', 'South East Region', 'HE Qualification', '90-100%', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '476603', 'M', 'Wales', 'A Level or Equivalent', '0-10%', '0-35', '0', '120', 'N', 'Distinction'
'AAA', '2014J', '481022', 'M', 'East Midlands Region', 'A Level or Equivalent', '20-30%', '0-35', '0', '180', 'N', 'Fail'
'AAA', '2014J', '488990', 'M', 'South West Region', 'A Level or Equivalent', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '495284', 'M', 'South East Region', 'HE Qualification', '80-90%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '498857', 'M', 'North Western Region', 'HE Qualification', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '500113', 'M', 'South East Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '508818', 'M', 'London Region', 'A Level or Equivalent', '40-50%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '512460', 'M', 'South East Region', 'HE Qualification', '90-100%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '514526', 'M', 'London Region', 'Lower Than A Level', '10-20', '0-35', '0', '120', 'Y', 'Withdrawn'
'AAA', '2014J', '527100', 'M', 'West Midlands Region', 'HE Qualification', '70-80%', '0-35', '0', '120', 'N', 'Distinction'
'AAA', '2014J', '527801', 'M', 'South West Region', 'Lower Than A Level', '90-100%', '35-55', '0', '120', 'N', 'Fail'
'AAA', '2014J', '533068', 'M', 'South Region', 'HE Qualification', '90-100%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '544103', 'M', 'North Western Region', 'HE Qualification', '40-50%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '544253', 'M', 'London Region', 'A Level or Equivalent', '60-70%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2014J', '548120', 'M', 'London Region', 'HE Qualification', '80-90%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '550383', 'M', 'South East Region', 'HE Qualification', '60-70%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '564450', 'M', 'West Midlands Region', 'HE Qualification', '80-90%', '0-35', '0', '120', 'N', 'Fail'
'AAA', '2014J', '570317', 'M', 'Wales', 'A Level or Equivalent', '70-80%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '572652', 'M', 'West Midlands Region', 'HE Qualification', '70-80%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '580389', 'M', 'Ireland', 'HE Qualification', '90-100%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '581129', 'M', 'East Anglian Region', 'A Level or Equivalent', '30-40%', '0-35', '0', '120', 'N', 'Fail'
'AAA', '2014J', '588477', 'M', 'Yorkshire Region', 'HE Qualification', '20-30%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '588775', 'M', 'South West Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '591774', 'M', 'South Region', 'Post Graduate Qualification', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '593846', 'M', 'South Region', 'HE Qualification', '50-60%', '0-35', '0', '120', 'N', 'Withdrawn'
'AAA', '2013J', '603861', 'M', 'North Region', 'HE Qualification', NULL, '55<=', '0', '60', 'N', 'Withdrawn'
'AAA', '2013J', '606143', 'M', 'Scotland', 'Post Graduate Qualification', '90-100%', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2014J', '623840', 'M', 'East Anglian Region', 'A Level or Equivalent', '0-10%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '626240', 'M', 'South Region', 'HE Qualification', '30-40%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '628088', 'M', 'South East Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'Y', 'Withdrawn'
'AAA', '2014J', '630142', 'M', 'East Anglian Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '120', 'N', 'Withdrawn'
'AAA', '2014J', '639053', 'M', 'North Region', 'A Level or Equivalent', '60-70%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '642878', 'M', 'South West Region', 'HE Qualification', '70-80%', '0-35', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '648130', 'M', 'Yorkshire Region', 'A Level or Equivalent', '80-90%', '0-35', '0', '240', 'N', 'Withdrawn'
'AAA', '2014J', '676546', 'M', 'Scotland', 'HE Qualification', '80-90%', '0-35', '0', '120', 'N', 'Withdrawn'
'AAA', '2014J', '677186', 'M', 'South East Region', 'HE Qualification', '70-80%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '677281', 'M', 'Wales', 'A Level or Equivalent', '80-90%', '0-35', '0', '60', 'N', 'Fail'
'AAA', '2014J', '684180', 'M', 'North Region', 'HE Qualification', NULL, '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '687698', 'M', 'Yorkshire Region', 'HE Qualification', '20-30%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '696578', 'M', 'South Region', 'HE Qualification', '60-70%', '0-35', '0', '60', 'N', 'Withdrawn'
'AAA', '2013J', '704156', 'M', 'South Region', 'HE Qualification', '90-100%', '55<=', '0', '120', 'N', 'Pass'
'AAA', '2013J', '705379', 'M', 'West Midlands Region', 'A Level or Equivalent', '60-70%', '55<=', '0', '120', 'N', 'Distinction'
'AAA', '2013J', '749412', 'M', 'South Region', 'Lower Than A Level', '70-80%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '760729', 'M', 'West Midlands Region', 'A Level or Equivalent', '60-70%', '55<=', '0', '60', 'N', 'Distinction'
'AAA', '2014J', '852847', 'M', 'South West Region', 'A Level or Equivalent', '60-70%', '55<=', '0', '60', 'N', 'Fail'
'AAA', '2013J', '958987', 'M', 'North Western Region', 'HE Qualification', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '969076', 'M', 'South West Region', 'A Level or Equivalent', '80-90%', '35-55', '0', '180', 'N', 'Withdrawn'
'AAA', '2013J', '978739', 'M', 'South Region', 'HE Qualification', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '1045203', 'M', 'Wales', 'Lower Than A Level', '0-10%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1105478', 'M', 'Scotland', 'HE Qualification', '80-90%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2014J', '1183831', 'M', 'South West Region', 'HE Qualification', '70-80%', '55<=', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '1268696', 'M', 'South West Region', 'HE Qualification', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '1336190', 'M', 'London Region', 'HE Qualification', '80-90%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1352868', 'M', 'Yorkshire Region', 'A Level or Equivalent', '20-30%', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2013J', '1401935', 'M', 'West Midlands Region', 'A Level or Equivalent', '70-80%', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2013J', '1456619', 'M', 'South West Region', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2013J', '1465690', 'M', 'West Midlands Region', 'HE Qualification', '40-50%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2014J', '1471214', 'M', 'East Midlands Region', 'A Level or Equivalent', '60-70%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1488959', 'M', 'London Region', 'A Level or Equivalent', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '1511033', 'M', 'Wales', 'A Level or Equivalent', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1618738', 'M', 'London Region', 'Lower Than A Level', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1620151', 'M', 'South Region', 'HE Qualification', '90-100%', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2013J', '1626710', 'M', 'North Western Region', 'A Level or Equivalent', '60-70%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2014J', '1629771', 'M', 'South East Region', 'A Level or Equivalent', '60-70%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '1640609', 'M', 'West Midlands Region', 'A Level or Equivalent', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '1676594', 'M', 'London Region', 'HE Qualification', '80-90%', '55<=', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '1715896', 'M', 'South Region', 'A Level or Equivalent', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '1721270', 'M', 'South East Region', 'Lower Than A Level', '50-60%', '35-55', '0', '90', 'N', 'Pass'
'AAA', '2013J', '1746134', 'M', 'East Anglian Region', 'A Level or Equivalent', '60-70%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1758449', 'M', 'South Region', 'Lower Than A Level', '30-40%', '35-55', '0', '75', 'N', 'Withdrawn'
'AAA', '2013J', '1765788', 'M', 'South East Region', 'HE Qualification', '70-80%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2014J', '1773377', 'M', 'London Region', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '1799111', 'M', 'Scotland', 'A Level or Equivalent', '60-70%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1801229', 'M', 'Ireland', 'HE Qualification', NULL, '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1801641', 'M', 'Scotland', 'A Level or Equivalent', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1847830', 'M', 'South West Region', 'Lower Than A Level', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1860318', 'M', 'South West Region', 'Lower Than A Level', '40-50%', '35-55', '0', '300', 'Y', 'Pass'
'AAA', '2013J', '1889511', 'M', 'Yorkshire Region', 'A Level or Equivalent', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '1926668', 'M', 'London Region', 'Lower Than A Level', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1938355', 'M', 'South Region', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1970390', 'M', 'West Midlands Region', 'Lower Than A Level', '0-10%', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '1975209', 'M', 'South East Region', 'Lower Than A Level', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '1976139', 'M', 'Ireland', 'Lower Than A Level', '50-60%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2013J', '2012966', 'M', 'North Western Region', 'Lower Than A Level', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '2045084', 'M', 'North Western Region', 'HE Qualification', '40-50%', '35-55', '0', '120', 'N', 'Fail'
'AAA', '2014J', '2057803', 'M', 'London Region', 'Lower Than A Level', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2065691', 'M', 'London Region', 'A Level or Equivalent', '30-40%', '35-55', '0', '330', 'Y', 'Withdrawn'
'AAA', '2014J', '2086400', 'M', 'Scotland', 'A Level or Equivalent', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2104505', 'M', 'West Midlands Region', 'Lower Than A Level', '0-10%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2139353', 'M', 'London Region', 'A Level or Equivalent', '50-60%', '35-55', '0', '120', 'N', 'Withdrawn'
'AAA', '2013J', '2146792', 'M', 'North Western Region', 'HE Qualification', '20-30%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2149225', 'M', 'Scotland', 'A Level or Equivalent', '70-80%', '35-55', '0', '60', 'Y', 'Withdrawn'
'AAA', '2014J', '2168833', 'M', 'South West Region', 'Lower Than A Level', '50-60%', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2013J', '2208424', 'M', 'Scotland', 'A Level or Equivalent', '20-30%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '2240349', 'M', 'South West Region', 'Lower Than A Level', '20-30%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '2244332', 'M', 'North Western Region', 'A Level or Equivalent', '20-30%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '2278464', 'M', 'South Region', 'Lower Than A Level', '30-40%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2293923', 'M', 'South Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '150', 'N', 'Pass'
'AAA', '2014J', '2313257', 'M', 'London Region', 'A Level or Equivalent', '30-40%', '35-55', '0', '360', 'N', 'Withdrawn'
'AAA', '2013J', '2318055', 'M', 'Wales', 'A Level or Equivalent', '90-100%', '35-55', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '2330254', 'M', 'London Region', 'Lower Than A Level', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2342426', 'M', 'Yorkshire Region', 'Lower Than A Level', '20-30%', '35-55', '0', '60', 'N', 'Fail'
'AAA', '2014J', '2355470', 'M', 'East Midlands Region', 'A Level or Equivalent', '80-90%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2013J', '2365101', 'M', 'South East Region', 'HE Qualification', '20-30%', '0-35', '0', '300', 'N', 'Withdrawn'
'AAA', '2014J', '2369415', 'M', 'London Region', 'A Level or Equivalent', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2391984', 'M', 'South Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '2398313', 'M', 'East Anglian Region', 'Lower Than A Level', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2411778', 'M', 'Scotland', 'HE Qualification', '20-30%', '0-35', '0', '120', 'N', 'Withdrawn'
'AAA', '2013J', '2412002', 'M', 'South West Region', 'Lower Than A Level', '50-60%', '35-55', '0', '90', 'N', 'Distinction'
'AAA', '2014J', '2425993', 'M', 'Scotland', 'HE Qualification', '40-50%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2429854', 'M', 'London Region', 'A Level or Equivalent', '10-20', '35-55', '0', '120', 'Y', 'Withdrawn'
'AAA', '2014J', '2434159', 'M', 'North Western Region', 'A Level or Equivalent', '10-20', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2456480', 'M', 'Scotland', 'Lower Than A Level', '80-90%', '35-55', '0', '120', 'N', 'Fail'
'AAA', '2013J', '2457256', 'M', 'South Region', 'Lower Than A Level', '80-90%', '35-55', '0', '180', 'N', 'Pass'
'AAA', '2013J', '2458355', 'M', 'London Region', 'Lower Than A Level', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2460080', 'M', 'Scotland', 'HE Qualification', '90-100%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2461190', 'M', 'South Region', 'HE Qualification', '70-80%', '55<=', '0', '60', 'N', 'Fail'
'AAA', '2014J', '2467267', 'M', 'West Midlands Region', 'HE Qualification', '0-10%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2479954', 'M', 'North Western Region', 'A Level or Equivalent', '40-50%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2481901', 'M', 'Wales', 'Lower Than A Level', '80-90%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2482700', 'M', 'South Region', 'Lower Than A Level', '90-100%', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2014J', '2494700', 'M', 'Yorkshire Region', 'HE Qualification', '70-80%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '2509639', 'M', 'West Midlands Region', 'A Level or Equivalent', '80-90%', '0-35', '0', '90', 'N', 'Pass'
'AAA', '2014J', '2514368', 'M', 'West Midlands Region', 'A Level or Equivalent', '50-60%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '2516503', 'M', 'South East Region', 'HE Qualification', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2518069', 'M', 'East Midlands Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2523736', 'M', 'North Western Region', 'A Level or Equivalent', '20-30%', '55<=', '0', '120', 'N', 'Pass'
'AAA', '2013J', '2536991', 'M', 'South Region', 'HE Qualification', '90-100%', '55<=', '0', '60', 'N', 'Distinction'
'AAA', '2014J', '2546445', 'M', 'Scotland', 'HE Qualification', '80-90%', '55<=', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '2551932', 'M', 'South East Region', 'Lower Than A Level', '50-60%', '0-35', '0', '60', 'N', 'Withdrawn'
'AAA', '2013J', '2557283', 'M', 'Yorkshire Region', 'HE Qualification', '80-90%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2559575', 'M', 'South West Region', 'Lower Than A Level', '30-40%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2562034', 'M', 'East Anglian Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2569324', 'M', 'South Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '120', 'N', 'Withdrawn'
'AAA', '2013J', '2574528', 'M', 'Ireland', 'HE Qualification', NULL, '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2574583', 'M', 'Yorkshire Region', 'Lower Than A Level', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2576122', 'M', 'North Western Region', 'A Level or Equivalent', '70-80%', '0-35', '0', '60', 'N', 'Withdrawn'
'AAA', '2014J', '2578676', 'M', 'North Region', 'Lower Than A Level', '20-30%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2014J', '2596621', 'M', 'South West Region', 'A Level or Equivalent', '50-60%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2600688', 'M', 'West Midlands Region', 'A Level or Equivalent', '20-30%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '2601889', 'M', 'West Midlands Region', 'HE Qualification', '70-80%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '2606802', 'M', 'North Region', 'A Level or Equivalent', '60-70%', '0-35', '0', '60', 'N', 'Fail'
'AAA', '2013J', '2620584', 'M', 'West Midlands Region', 'A Level or Equivalent', '40-50%', '0-35', '0', '60', 'Y', 'Fail'
'AAA', '2014J', '2633226', 'M', 'South West Region', 'A Level or Equivalent', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2639449', 'M', 'East Midlands Region', 'A Level or Equivalent', '10-20', '0-35', '0', '120', 'N', 'Pass'
'AAA', '2013J', '2639641', 'M', 'South East Region', 'Lower Than A Level', '30-40%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2013J', '2641155', 'M', 'East Midlands Region', 'Lower Than A Level', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2014J', '2649800', 'M', 'West Midlands Region', 'Lower Than A Level', '50-60%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2649826', 'M', 'East Anglian Region', 'Lower Than A Level', '60-70%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '2650282', 'M', 'London Region', 'A Level or Equivalent', '0-10%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2664024', 'M', 'South East Region', 'HE Qualification', '90-100%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2666246', 'M', 'North Western Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2669816', 'M', 'Yorkshire Region', 'A Level or Equivalent', '90-100%', '0-35', '0', '60', 'N', 'Fail'
'AAA', '2013J', '2671132', 'M', 'London Region', 'HE Qualification', '20-30%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2014J', '2677624', 'M', 'North Western Region', 'A Level or Equivalent', '10-20', '35-55', '0', '90', 'N', 'Pass'
'AAA', '2014J', '2680312', 'M', 'Scotland', 'HE Qualification', '90-100%', '55<=', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2688067', 'M', 'East Anglian Region', 'A Level or Equivalent', '10-20', '0-35', '0', '60', 'N', 'Pass'
'AAA', '2014J', '2688166', 'M', 'Yorkshire Region', 'Lower Than A Level', '40-50%', '35-55', '0', '60', 'N', 'Pass'
'AAA', '2013J', '2689958', 'M', 'East Anglian Region', 'A Level or Equivalent', '40-50%', '35-55', '0', '60', 'N', 'Distinction'
'AAA', '2013J', '2691244', 'M', 'South Region', 'A Level or Equivalent', '40-50%', '35-55', '0', '180', 'N', 'Pass'
'AAA', '2014J', '2692514', 'M', 'North Western Region', 'Lower Than A Level', '0-10%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2013J', '2694424', 'M', 'East Anglian Region', 'A Level or Equivalent', '70-80%', '35-55', '0', '120', 'N', 'Pass'
'AAA', '2013J', '2698257', 'M', 'East Midlands Region', 'Lower Than A Level', '60-70%', '0-35', '0', '120', 'N', 'Pass'",,,,장희훈,
테이블 1개,university_learning,남학생 중 모듈 코드가 BBB인 학생,"Among male students, the module code is ''BBB''.",,SELECT * FROM studentinfo WHERE gender = 'M' AND code_module = 'BBB';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,895,,"BBB	2013J	23798	M	Wales	A Level or Equivalent	50-60%	0-35	0	60	N	Distinction
BBB	2013J	26677	M	West Midlands Region	A Level or Equivalent	0-10%	0-35	4	60	N	Withdrawn
BBB	2014J	26734	M	South West Region	A Level or Equivalent	20-30%	0-35	0	90	Y	Fail
BBB	2013J	27759	M	North Western Region	Lower Than A Level	40-50%	35-55	0	120	Y	Fail
BBB	2013B	27891	M	Scotland	Lower Than A Level	0-10%	0-35	2	120	Y	Withdrawn
BBB	2013B	29144	M	South Region	Lower Than A Level	60-70%	0-35	0	120	N	Fail
BBB	2013B	31663	M	North Region	A Level or Equivalent	30-40%	35-55	0	60	N	Pass
BBB	2013B	34353	M	Scotland	A Level or Equivalent	70-80%	35-55	0	120	Y	Fail
BBB	2013B	34694	M	West Midlands Region	A Level or Equivalent	10-20	35-55	1	60	N	Withdrawn
BBB	2014J	38711	M	West Midlands Region	Lower Than A Level	0-10%	35-55	0	60	Y	Withdrawn
BBB	2013J	54388	M	East Anglian Region	Lower Than A Level	0-10%	35-55	3	75	N	Withdrawn
BBB	2013J	57369	M	Ireland	Lower Than A Level	40-50%	35-55	0	60	N	Withdrawn
BBB	2013B	72070	M	South East Region	A Level or Equivalent	60-70%	35-55	0	60	N	Withdrawn
BBB	2013J	74169	M	East Anglian Region	A Level or Equivalent	70-80%	35-55	0	60	N	Withdrawn
BBB	2013B	84245	M	Wales	A Level or Equivalent	50-60%	0-35	0	120	N	Distinction
BBB	2013B	87732	M	East Midlands Region	A Level or Equivalent	30-40%	35-55	0	75	N	Pass
BBB	2014B	89778	M	South East Region	A Level or Equivalent	70-80%	0-35	1	120	N	Distinction
BBB	2013J	96475	M	South East Region	Lower Than A Level	60-70%	0-35	0	180	N	Pass
BBB	2014J	98452	M	South West Region	A Level or Equivalent	30-40%	0-35	0	120	Y	Withdrawn
BBB	2014J	106793	M	East Anglian Region	A Level or Equivalent	60-70%	35-55	0	60	N	Fail
BBB	2014J	108859	M	South West Region	A Level or Equivalent	70-80%	0-35	0	60	Y	Pass
BBB	2014J	116606	M	East Midlands Region	A Level or Equivalent	50-60%	35-55	0	60	N	Pass
BBB	2013B	117071	M	London Region	A Level or Equivalent	40-50%	35-55	0	60	N	Fail
BBB	2014B	123462	M	Scotland	HE Qualification	80-90%	0-35	1	120	N	Pass
BBB	2013J	123716	M	North Region	Lower Than A Level	10-20	0-35	0	90	N	Pass
BBB	2013J	124909	M	Yorkshire Region	Lower Than A Level	40-50%	35-55	0	60	N	Pass
BBB	2014B	126608	M	Wales	A Level or Equivalent	40-50%	0-35	0	60	N	Pass
BBB	2013J	128386	M	South Region	Lower Than A Level	30-40%	35-55	0	60	N	Fail
BBB	2013B	145544	M	East Midlands Region	A Level or Equivalent	20-30%	0-35	0	60	N	Pass
BBB	2013B	147876	M	South West Region	A Level or Equivalent	30-40%	0-35	0	60	N	Fail
BBB	2013B	152910	M	West Midlands Region	A Level or Equivalent		0-35	0	60	N	Pass
BBB	2013J	156788	M	East Midlands Region	Lower Than A Level	30-40%	35-55	0	180	N	Withdrawn
BBB	2013J	157795	M	Yorkshire Region	Lower Than A Level	80-90%	35-55	1	60	N	Pass
BBB	2014B	159293	M	South East Region	A Level or Equivalent	20-30%	0-35	0	120	N	Distinction
BBB	2013B	165243	M	Wales	A Level or Equivalent	50-60%	35-55	0	60	N	Pass
BBB	2014J	169008	M	Ireland	Lower Than A Level	10-20	35-55	0	60	N	Pass
BBB	2013J	178963	M	South West Region	A Level or Equivalent	70-80%	0-35	0	120	Y	Pass
BBB	2013J	184236	M	North Western Region	Lower Than A Level	0-10%	0-35	0	60	Y	Withdrawn
BBB	2013B	188152	M	South East Region	Lower Than A Level	50-60%	0-35	0	120	N	Distinction
BBB	2013B	192424	M	Wales	A Level or Equivalent	70-80%	35-55	0	120	N	Pass
BBB	2013B	198956	M	Yorkshire Region	Lower Than A Level	50-60%	35-55	0	60	N	Pass
BBB	2013J	199663	M	London Region	Post Graduate Qualification	30-40%	35-55	0	60	N	Pass
BBB	2013J	203640	M	Yorkshire Region	Lower Than A Level	70-80%	0-35	0	60	N	Pass
BBB	2013B	226374	M	Wales	A Level or Equivalent	70-80%	35-55	0	60	N	Fail
BBB	2013J	227416	M	South East Region	A Level or Equivalent	30-40%	0-35	0	60	N	Fail
BBB	2013J	228243	M	London Region	A Level or Equivalent	10-20	35-55	0	120	N	Withdrawn
BBB	2014J	228909	M	North Region	Lower Than A Level		35-55	0	60	Y	Withdrawn
BBB	2014J	235371	M	East Anglian Region	A Level or Equivalent	80-90%	0-35	0	60	N	Pass
BBB	2013J	235428	M	London Region	Lower Than A Level	20-30%	35-55	0	150	N	Withdrawn
BBB	2013B	237304	M	North Region	A Level or Equivalent	0-10%	0-35	0	60	N	Fail
BBB	2014B	238519	M	South Region	Lower Than A Level	40-50%	0-35	0	120	N	Withdrawn
BBB	2013J	243047	M	Yorkshire Region	HE Qualification	0-10%	35-55	0	120	N	Withdrawn
BBB	2013B	247267	M	South East Region	Lower Than A Level	70-80%	0-35	0	60	N	Fail
BBB	2013J	248653	M	London Region	A Level or Equivalent	40-50%	0-35	0	120	N	Distinction
BBB	2014J	252863	M	East Midlands Region	Lower Than A Level	40-50%	35-55	0	60	N	Pass
BBB	2014J	254612	M	Scotland	A Level or Equivalent	30-40%	0-35	3	90	N	Fail
BBB	2013B	259182	M	East Midlands Region	Lower Than A Level	40-50%	0-35	1	120	N	Withdrawn
BBB	2014J	260137	M	West Midlands Region	HE Qualification	10-20	0-35	0	60	N	Pass
BBB	2013J	261332	M	North Western Region	Lower Than A Level	50-60%	35-55	0	60	Y	Fail
BBB	2014B	263098	M	South West Region	A Level or Equivalent	20-30%	0-35	0	90	N	Withdrawn
BBB	2014J	264281	M	North Western Region	A Level or Equivalent	20-30%	55<=	0	180	N	Withdrawn
BBB	2014B	268301	M	Scotland	HE Qualification	60-70%	35-55	0	75	N	Distinction
BBB	2014J	272000	M	Yorkshire Region	HE Qualification	40-50%	0-35	0	90	N	Fail
BBB	2013B	273877	M	London Region	Lower Than A Level	0-10%	35-55	0	60	N	Fail
BBB	2013J	277537	M	North Western Region	Lower Than A Level	30-40%	35-55	0	60	N	Fail
BBB	2014J	277967	M	London Region	Lower Than A Level	70-80%	0-35	1	60	N	Pass
BBB	2013J	278272	M	East Anglian Region	HE Qualification	20-30%	35-55	1	120	N	Fail
BBB	2014J	279238	M	East Anglian Region	Lower Than A Level	20-30%	0-35	0	60	N	Withdrawn
BBB	2014B	283131	M	West Midlands Region	A Level or Equivalent	0-10%	0-35	0	60	N	Fail
BBB	2013J	285050	M	North Western Region	HE Qualification	0-10%	0-35	1	180	N	Fail
BBB	2014B	288967	M	South East Region	Lower Than A Level	20-30%	35-55	0	60	N	Pass
BBB	2013B	288990	M	West Midlands Region	HE Qualification	40-50%	35-55	1	60	N	Withdrawn
BBB	2013J	290089	M	London Region	Lower Than A Level	40-50%	0-35	0	120	N	Distinction
BBB	2014B	290914	M	North Region	A Level or Equivalent	0-10%	0-35	2	120	Y	Distinction
BBB	2013B	292027	M	East Midlands Region	Lower Than A Level	40-50%	0-35	0	60	N	Withdrawn
BBB	2013J	293754	M	North Region	Lower Than A Level		35-55	0	60	N	Distinction
BBB	2013B	294999	M	Wales	A Level or Equivalent	90-100%	0-35	0	60	N	Withdrawn
BBB	2014J	300819	M	South Region	HE Qualification	30-40%	0-35	0	60	N	Distinction
BBB	2013B	302550	M	South Region	Lower Than A Level	40-50%	35-55	1	180	N	Withdrawn
BBB	2013J	305173	M	Wales	Lower Than A Level	10-20	0-35	2	60	N	Fail
BBB	2014B	305307	M	North Western Region	HE Qualification	0-10%	0-35	0	60	N	Withdrawn
BBB	2013B	306984	M	North Region	Lower Than A Level	20-30%	35-55	3	60	N	Withdrawn
BBB	2013J	307193	M	Wales	Lower Than A Level	10-20	35-55	0	60	N	Fail
BBB	2014J	308850	M	Wales	Lower Than A Level	10-20	35-55	0	120	N	Fail
BBB	2013B	309709	M	South East Region	Lower Than A Level	90-100%	35-55	3	195	N	Pass
BBB	2014J	314252	M	West Midlands Region	A Level or Equivalent	20-30%	35-55	0	60	N	Pass
BBB	2013J	315105	M	East Anglian Region	A Level or Equivalent	20-30%	35-55	2	60	N	Distinction
BBB	2013J	320757	M	Scotland	Lower Than A Level	90-100%	0-35	1	60	N	Pass
BBB	2014B	322325	M	South Region	Lower Than A Level	70-80%	0-35	0	60	N	Fail
BBB	2013J	325887	M	South East Region	Lower Than A Level	70-80%	0-35	0	60	Y	Pass
BBB	2013J	329030	M	East Anglian Region	HE Qualification	70-80%	0-35	1	60	N	Fail
BBB	2013B	329226	M	Scotland	HE Qualification	20-30%	0-35	0	120	N	Pass
BBB	2013B	329800	M	South Region	A Level or Equivalent	80-90%	0-35	0	60	N	Pass
BBB	2014B	334565	M	Wales	Post Graduate Qualification	80-90%	35-55	1	120	N	Distinction
BBB	2014B	339381	M	West Midlands Region	A Level or Equivalent	0-10%	0-35	0	60	N	Pass
BBB	2013J	339494	M	South East Region	A Level or Equivalent	0-10%	0-35	0	60	N	Pass
BBB	2013J	340661	M	North Western Region	A Level or Equivalent	20-30%	35-55	0	120	Y	Withdrawn
BBB	2013B	340831	M	West Midlands Region	A Level or Equivalent	30-40%	35-55	0	60	N	Withdrawn
BBB	2014J	340899	M	Wales	Lower Than A Level	0-10%	0-35	0	60	N	Withdrawn
BBB	2014B	341027	M	East Midlands Region	Lower Than A Level	10-20	0-35	0	120	N	Withdrawn
BBB	2013B	341040	M	South Region	HE Qualification	60-70%	0-35	0	60	N	Withdrawn
BBB	2013B	341235	M	South Region	Lower Than A Level	50-60%	0-35	0	60	N	Withdrawn
BBB	2014B	347864	M	West Midlands Region	A Level or Equivalent	30-40%	35-55	1	60	N	Withdrawn
BBB	2013B	350795	M	East Midlands Region	Lower Than A Level	40-50%	35-55	1	60	N	Fail
BBB	2014B	352009	M	West Midlands Region	HE Qualification	0-10%	35-55	0	60	N	Fail
BBB	2013J	355692	M	South West Region	A Level or Equivalent	10-20	35-55	0	60	N	Withdrawn
BBB	2013J	358289	M	East Anglian Region	Lower Than A Level	10-20	0-35	0	180	Y	Withdrawn
BBB	2013B	360877	M	South Region	HE Qualification	50-60%	0-35	1	120	N	Pass
BBB	2013B	361603	M	North Western Region	A Level or Equivalent	50-60%	0-35	1	60	N	Pass
BBB	2013J	363151	M	North Western Region	Lower Than A Level	10-20	35-55	0	655	Y	Withdrawn
BBB	2014J	363213	M	Scotland	A Level or Equivalent	20-30%	0-35	0	60	N	Pass",,,,장희훈,
테이블 2개,university_learning,남학생 중 평균 점수 이상인 학생,Students who scored above average among male students,,"SELECT sa.id_student, AVG(sa.score) AS average_score FROM studentassessment AS sa JOIN studentinfo AS si ON sa.id_student = si.id_student WHERE si.gender = 'M' GROUP BY sa.id_student HAVING AVG(sa.score) >= ( SELECT AVG(score) FROM studentassessment );","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,280,,"11391', '82'
'53025', '78'
'57506', '74'
'59185', '78.6'
'71361', '80.4'
'101781', '72.6'
'102806', '78'
'102952', '76.6'
'104476', '79.6'
'113295', '77.6'
'114999', '72.8'
'116692', '74.2'
'129955', '81'
'137873', '80.2'
'174782', '80.4'
'175392', '82.4'
'175932', '78.2'
'185439', '74'
'186149', '76'
'187100', '89.2'
'189879', '79.4'
'205350', '72.2'
'228082', '72.4'
'229361', '78'
'236284', '78'
'238007', '79.2'
'240712', '75.8'
'241649', '78.8'
'242793', '77.4'
'248270', '78.4'
'256815', '76.8'
'268073', '74.6'
'271251', '76.4'
'279572', '79.2'
'290757', '75'
'291334', '83.6'
'294570', '78.2'
'296332', '86.8'
'300398', '78.8'
'305386', '78'
'306466', '82'
'312537', '87.8'
'321942', '80.4'
'324002', '80.4'
'333323', '74.4'
'342514', '77.2'
'343446', '78.4'
'345068', '78'
'345357', '80.4'
'346025', '82.4'
'350188', '73.8'
'366483', '76.8'
'376439', '87'
'383254', '75.6'
'393207', '74.2'
'402470', '72.6'
'405088', '77.2'
'414117', '76.4'
'420087', '76'
'444677', '87.6'
'470588', '79.33333333333333'
'498857', '73'
'512460', '72.4'
'544103', '81'
'572652', '73.2'
'588775', '82.8'
'591774', '76.2'
'705379', '80.8'
'760729', '81.2'
'958987', '77.2'
'1105478', '82.6'
'1465690', '81.8'
'1618738', '79.6'
'1620151', '77.5'
'1626710', '84.6'
'1640609', '85'
'1746134', '83.8'
'1801229', '76.8'
'1801641', '77.4'
'1938355', '73'
'1970390', '83.6'
'2012966', '78.4'
'2342426', '73.2'
'2391984', '73'
'2411778', '80'
'2412002', '82.8'
'2458355', '90.6'
'2460080', '78.8'
'2479954', '79.6'
'2481901', '75.8'
'2516503', '79.4'
'2518069', '76.6'
'2536991', '80.8'
'2557283', '81.2'
'2574528', '75.4'
'2641155', '79.2'
'2649826', '83.4'
'2650282', '84.2'
'2666246', '76'
'2689958', '81.6'
'2694424', '79.4'
'570317', '75.8'
'588477', '76.8'
'623840', '79.8'
'628088', '80'
'630142', '84.5'
'676546', '74'
'696578', '78.33333333333333'
'1045203', '79.4'
'1511033', '74.6'
'1629771', '80.2'
'1715896', '78'
'1773377', '74.6'
'1799111', '77.4'
'2240349', '76.8'
'2244332', '85.2'
'2318055', '75.8'
'2369415', '78.5'
'2494700', '83.6'
'2514368', '82.6'
'2546445', '73'
'2601889', '82'
'2680312', '78.8'
'2692514', '78.2'
'28061', '77.6'
'58071', '76'
'75255', '81.8'
'85144', '77.6'
'131390', '78.6'
'133922', '78.2'
'135471', '84'
'141506', '75'
'167961', '76'
'199636', '75.8'
'228021', '83'
'237274', '72.4'
'254625', '82.8'
'258587', '80.6'
'263251', '74'
'263543', '79.6'
'263952', '88.8'
'273346', '81.8'
'285315', '86.2'
'287204', '73.6'
'287210', '73.4'
'289449', '75.2'
'292525', '84.6'
'292775', '81.6'
'294496', '80.6'
'294655', '77.6'
'296424', '77.2'
'298034', '72.8'
'302476', '85.2'
'313937', '80.8'
'315744', '82.4'
'332884', '82.2'
'338407', '73.8'
'345440', '73.8'
'348807', '76.6'
'358182', '75'
'369834', '73.6'
'371710', '81.6'
'375646', '75.6'
'377546', '83'
'382095', '76.6'
'383600', '78.6'
'383723', '80.2'
'384203', '75.4'
'391249', '82.2'
'401404', '75.6'
'406671', '79.6'
'406682', '83.6'
'409100', '77.4'
'411971', '73.2'
'429858', '83'
'439305', '73'
'476603', '83.8'
'500113', '75.4'
'527100', '90.8'
'544253', '73.2'
'548120', '74.6'
'1436591', '96'
'1493476', '80.14285714285714'
'1753965', '79.57142857142857'
'1797614', '90.57142857142857'
'2034350', '87'
'2210318', '81.6'
'2236738', '88'
'2308528', '77.8'
'2445088', '79.66666666666667'
'2481224', '85.57142857142857'
'2620178', '85.28571428571429'
'2622465', '76.14285714285714'
'2692384', '80.28571428571429'
'27891', '73.75'
'34353', '84.33333333333333'
'84245', '87.28571428571429'
'87732', '77.66666666666667'
'145544', '78'
'147876', '74'
'152910', '80'
'165243', '73.5'
'188152', '91.85714285714286'
'192424', '78.14285714285714'
'198956', '88.5'
'226374', '76'
'237304', '73.75'
'292027', '80'
'309709', '74.2'
'329226', '81'
'329800', '87.33333333333333'
'340831', '81'
'350795', '80.66666666666667'
'360877', '85.83333333333333'
'361603', '85.42857142857143'
'363660', '86.85714285714286'
'367609', '86.14285714285714'
'376617', '79.5'
'378543', '78.42857142857143'
'386348', '86.8'
'389369', '84.14285714285714'
'405471', '85'
'406974', '86.2'
'412407', '81.66666666666667'
'412654', '81'
'427704', '76'
'432870', '74.66666666666667'
'433755', '79.16666666666667'
'439857', '76'
'447782', '74.71428571428571'
'475095', '83.16666666666667'
'476201', '80.71428571428571'
'482710', '84.28571428571429'
'488425', '84.5'
'493773', '81.71428571428571'
'495856', '88.57142857142857'
'500719', '77'
'500836', '72.2'
'500958', '84.14285714285714'
'511050', '82'
'518469', '84.4'
'518970', '76.33333333333333'
'520836', '76.5'
'525942', '83.8'
'534343', '80.5'
'534360', '78'
'538196', '84'
'543165', '79.83333333333333'
'544186', '85'
'546921', '82.75'
'547757', '80'
'548241', '76.4'
'548504', '85.5'
'548839', '74.5'
'548843', '77.66666666666667'
'550707', '86.33333333333333'
'550777', '81'
'552025', '74.5'
'552273', '74.66666666666667'
'552535', '74.5'
'552749', '75'
'554226', '78.5'
'554830', '83.25'
'554998', '75.66666666666667'
'555309', '81.8'
'555627', '87'
'555674', '83.5'
'555880', '75'
'556284', '89'
'557057', '83.16666666666667'
'558324', '77.5'
'558373', '82'
'559452', '86.8'
'560208', '79'
'560970', '87.83333333333333'
'561164', '87.33333333333333'
'562495', '74.16666666666667'
'563330', '91.2'
'2280038', '84'
'117071', '73'",,,,장희훈,
테이블 2개,university_learning,남학생 중 평균 점수 이하인 학생,Students with below average scores among male students,,"SELECT studentassessment.id_student, AVG(studentassessment.score) AS average_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' GROUP BY studentassessment.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,275,,"38053	68
45462	68
63400	71.6
74372	48.5
75091	66
77367	70.4
91265	70.8
94961	65.33333333333333
98094	60.6
100893	68.4
106247	60
106577	53.4
110175	63.4
116541	62.4
118983	61.8
123044	71.4
141377	48.833333333333336
145130	54.4
147756	68.66666666666667
155550	67
159954	68.2
164259	71.8
172112	69.6
180753	53.4
183947	49
184271	59.8
188278	71.66666666666667
200860	54.4
205719	56.666666666666664
227517	62.6
228222	61.8
229179	66
231554	67.75
235507	57.833333333333336
240884	58.4
246834	55.6
255548	71.4
262011	71
268733	43
281250	55.4
282821	60.6
286488	71
287548	67.8
290201	70.4
294594	52.8
295741	50.2
305152	64
306107	58.2
307866	60
311917	59.2
312782	61.8
324282	61.2
333059	65.8
336207	68.2
339972	49.8
341872	64.2
342972	60.4
344282	49.2
357668	57
364177	69
365642	70
368824	55.6
368963	66.4
380953	67.8
386924	67.8
386952	68
388885	60.6
390890	68.625
392756	45
396872	61.4
398552	46.4
404804	43.8
415969	59.666666666666664
441888	70.6
442442	40.5
495284	66.6
508818	71.8
550383	72
564450	59.2
580389	71.4
603861	63
606143	66
704156	66
749412	72
969076	59.75
978739	56.6
1352868	68.57142857142857
1401935	35
1488959	61.8
1758449	61
1765788	66.2
1847830	71
1860318	62.6
1889511	72
1976139	67.25
2065691	35.666666666666664
2104505	65.6
2139353	66.5
2146792	70
2208424	71.2
2278464	51.4
2293923	61.2
2429854	51
2456480	24.666666666666668
2457256	70
2461190	56
2482700	55.6
2523736	61.75
2559575	71.2
2562034	65.4
2574583	70.8
2576122	64
2600688	70
2639449	56
2639641	65.6
2664024	63.2
2669816	57.2
2671132	68.8
2688067	67.8
2698257	67.8
2691244	58.25
293699	46.75
581129	40
195262	50
593846	64.8
626240	56
639053	65.6
642878	44
648130	53
677186	55.6
684180	62.6
687698	52.6
852847	34.5
1183831	71.33333333333333
1268696	60.2
1456619	63
1471214	71
1721270	58
1926668	62.2
1975209	64
2045084	72
2057803	66
2086400	69.2
2168833	24
2330254	69.8
2355470	54.4
2398313	71.4
2425993	68.6
2434159	54
2467267	71.4
2509639	66
2551932	50
2569324	71.2
2578676	70
2596621	72
2633226	54
2649800	64.8
2677624	69.6
2688166	59.5
6516	61.8
46844	64.8
63165	51.4
79403	60.666666666666664
85302	71.2
87431	50
95755	45
108872	61.8
125018	64.8
130636	60
139033	61
146503	63.4
149962	68.4
174024	60.4
175447	69.6
183057	65.6
185350	59.6
199897	69.4
200804	66
205494	66.4
228383	70.6
232307	66.2
236875	46.4
260623	70.2
274947	54
295060	67
295075	64
301967	52.8
306646	52.8
311235	65.8
315076	68.6
328024	55.8
330594	59.6
334441	39.8
335247	70.2
341876	68.5
348275	61.5
350156	52.2
350939	69.6
353665	64.6
356170	71.5
375260	71.4
387533	55
400147	59.2
402204	70.4
409703	63.8
418731	41.2
424577	59.4
431025	55.2
442132	65.8
446108	57.6
447481	52.4
468120	40
468694	61.2
481022	49
488990	54
527801	49.5
533068	58.2
2606802	29
1776925	72
2442685	65
2445949	63
2654302	71.28571428571429
29144	69.83333333333333
31663	70.28571428571429
247267	70
273877	59.666666666666664
288990	45
294999	51
341040	71
363401	40.42857142857143
370302	39.666666666666664
377846	62.42857142857143
384678	70.33333333333333
406311	48.714285714285715
416314	65.66666666666667
418065	55
423314	69.33333333333333
425817	67
442456	41.833333333333336
466959	65.2
475688	68.71428571428571
477164	58.57142857142857
480382	68.66666666666667
480458	58.2
482945	63.25
501955	65
507817	62.714285714285715
514140	69.57142857142857
516432	66
523672	55.42857142857143
528649	45.8
532534	54.5
537259	53.4
541803	64.2
541838	37
542010	45.5
544989	53
545041	61.5
545376	70
548344	48
548744	61.666666666666664
552667	55
552701	54.833333333333336
552902	66.6
552991	65.8
553443	71
554545	69
555102	72
555157	61
560117	36.25
561343	68.66666666666667
561711	42.5
561713	52.333333333333336
561715	42.4
561718	65",,,,장희훈,
테이블 2개,university_learning,여학생 중 평균 점수 이상인 학생,Students with above average scores among female students,,"SELECT studentinfo.id_student, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,793,,"31604	76
45642	72.4
58873	73.2
62155	76
111717	81
134143	84.4
141355	72.6
142326	73.6
148993	79.5
155854	79.8
155984	78.14285714285714
181316	76
227499	83.6
262934	76.6
281022	73.4
298696	80.8
307061	81.2
319047	78.4
331358	84.66666666666667
332789	74.4
335764	86.875
342007	82.33333333333333
376581	72.8
568601	81.5
905042	76.4
1402638	75.2
1518989	73
1729319	78.2
1889577	73.6
2011876	76
2122180	82.4
2155014	73.8
2197016	75.6
2229865	76.4
2268379	83
2339528	80
2364471	83.4
2367155	75.6
2376496	73.4
2412967	77.6
2437837	74.4
2486127	73.6
2498700	77.2
2529279	78
2555340	80.6
2578995	79.6
2586560	73.6
2594139	76
2598871	72.6
2599352	76.4
2613116	78.2
2639540	79.4
2645733	82.6
2685865	78.6
2691206	84.8
569505	85.8
593987	72.4
596288	77.4
696073	73.2
1398979	72.75
1576513	86.6
1609002	79.4
1686551	80
1818673	86
1947156	76.2
2010232	84.2
2085209	86.8
2158048	86
2363863	80.6
2507842	79
2602338	72.5
2642935	83.4
2648611	77.6
26192	86.2
58316	73.4
70011	80.2
101116	82.6
107489	82
121349	76
124064	87.2
130034	78.4
158707	74
165226	77
174094	75.4
175772	85
248581	85
275792	73
281077	72.4
281636	83
287040	72.8
298838	79.2
303521	80.4
303985	74.8
304465	75.6
310412	76
323370	75.2
345519	77.4
346118	72.6
381642	78.8
384725	80.4
398349	79.8
402727	73.2
404356	74
421455	77.8
485962	80.4
518808	73.8
522482	75
1098728	73
1413989	79
1480800	81.71428571428571
1521540	91.57142857142857
1574398	85.57142857142857
1659662	80.57142857142857
1728437	79.14285714285714
1747892	83.57142857142857
1770733	79.14285714285714
1847146	77.85714285714286
1903527	84.42857142857143
1904710	73
1912438	93.71428571428571
1923618	88.28571428571429
1930367	86.42857142857143
1937864	76.57142857142857
1971393	88
1997796	86.85714285714286
2019837	82.66666666666667
2023366	90.57142857142857
2092834	74.2
2097916	98
2132811	80.16666666666667
2173572	78.66666666666667
2205383	78.71428571428571
2231614	80.66666666666667
2249372	72.85714285714286
2254619	77
2269480	90.71428571428571
2273828	91
2288607	80.14285714285714
2290090	81
2293443	84.42857142857143
2300911	75
2301111	91
2302925	80.5
2322342	83.66666666666667
2327072	83.5
2366070	75.33333333333333
2375144	87.33333333333333
2376628	74.28571428571429
2377567	77.28571428571429
2380539	80.16666666666667
2384819	87.28571428571429
2395222	86
2418877	84.33333333333333
2425726	81
2439201	78
2444088	85
2444703	80
2446144	81.5
2464963	72.66666666666667
2470672	77.83333333333333
2474493	77.16666666666667
2476649	86.16666666666667
2481765	81.5
2483179	82.71428571428571
2483568	75.42857142857143
2487541	90.14285714285714
2498299	83.57142857142857
2512392	79.75
2517864	86
2518653	94.71428571428571
2522093	80.83333333333333
2535788	82.5
2540362	74.5
2541120	85.28571428571429
2553749	77.5
2569163	86.28571428571429
2571447	81
2575914	76.33333333333333
2578567	77.33333333333333
2579459	87.42857142857143
2580439	81.42857142857143
2581528	77.33333333333333
2602809	86.28571428571429
2608453	77.16666666666667
2612483	88.28571428571429
2616787	77.33333333333333
2617596	94.28571428571429
2617999	74.16666666666667
2626410	73.5
2635505	77.57142857142857
2635829	90.57142857142857
2639611	86.42857142857143
2641393	73.57142857142857
2642029	92.42857142857143
2645061	83.16666666666667
2649947	72.83333333333333
2685831	72.85714285714286
23629	76.66666666666667
33666	78.66666666666667
34229	82
39655	82
52899	76
58089	87.5
62631	76.6
70608	78
74695	93
74734	75
78645	73.25
84664	82
86291	87
91322	73.66666666666667
92947	85
97154	87.83333333333333
98313	78.28571428571429
104054	91.57142857142857
108377	77.66666666666667
108589	82.28571428571429
109938	86.85714285714286
116603	84
120994	85
123860	76.71428571428571
126322	77.25
133155	89
142324	72.8
143741	81
151697	82.85714285714286
152929	74
153212	82.71428571428571
153704	85.25
154125	84.66666666666667
154540	78.71428571428571
156835	81.5
179605	75.33333333333333
182824	73.42857142857143
183806	92.5
185349	80.71428571428571
193822	81.16666666666667
197595	75.71428571428571
199520	82.28571428571429
203108	79.5
203481	74.71428571428571
204746	75.28571428571429
226827	85.42857142857143
229240	75.57142857142857
229426	84.71428571428571
232695	77.71428571428571
237913	85.5
245404	83.66666666666667
248103	80.57142857142857
249534	72.57142857142857
251351	85.33333333333333
252340	77.5
255347	89.5
265958	80.66666666666667
270567	73
271036	75.14285714285714
272580	81.57142857142857
273731	75.66666666666667
276717	86
278447	83.28571428571429
285912	76.14285714285714
290550	83.85714285714286
291194	78.66666666666667
294381	79.5
294961	74
295754	78.57142857142857
297484	82.16666666666667
298476	74
313810	94.5
315186	83.33333333333333
316841	81.57142857142857
319209	80.71428571428571
322960	82.33333333333333
324236	81.25
331354	80.83333333333333
331844	87.42857142857143
333837	85
334291	78
335910	74
338861	76
339379	91
339946	84
349040	73
350622	76
351271	80.33333333333333
352161	87.5
352364	96
353093	86.83333333333333
353352	82
354058	76.33333333333333
354895	75.25
355369	75
360188	89.71428571428571
360489	82.8
363416	74
365439	82.33333333333333
365452	73.33333333333333
365488	80.66666666666667
365707	84.57142857142857
371679	85.57142857142857
374102	74.4
374234	87.16666666666667
377759	84.33333333333333
377905	79
378462	82.66666666666667
379402	80
381722	73
388360	73
388410	73.5
390220	76.5
390442	83
392428	74.5
392614	79.66666666666667
397118	81.5
398084	79.28571428571429
400469	78
400474	88.42857142857143
401339	93.85714285714286
401349	89.42857142857143
404022	85
405995	81.85714285714286
408112	80.85714285714286
409662	77.14285714285714
413984	77.71428571428571
414958	83
415716	80.57142857142857
415760	84.6
416007	76.83333333333333
416654	74.42857142857143
417462	72.5
418325	76.85714285714286
420604	81.4
423871	82.85714285714286
425808	83.57142857142857
425820	81.14285714285714
426650	79.57142857142857
426838	82.71428571428571
432319	79.33333333333333
433531	78.28571428571429
434192	77.71428571428571
434353	78
435245	82.83333333333333
437562	80.5
437967	74.42857142857143
438703	77.42857142857143
440509	78.57142857142857
441000	76
441255	91.71428571428571
442012	78.28571428571429
442143	87
442183	77.71428571428571
442466	77.8
443288	84.28571428571429
444117	88.85714285714286
444408	85.75
445065	86.85714285714286
446045	73.71428571428571
446247	83
447759	90.71428571428571
465599	78.83333333333333
465730	83.33333333333333
466037	85.75
466810	77
466973	87.5
467035	80.83333333333333
467292	81.16666666666667
467756	73.5
468792	85.33333333333333
470318	85.85714285714286
470653	80.16666666666667
471525	76.42857142857143
472182	74
473095	83.66666666666667
473328	81.6
476297	73.57142857142857
476369	91.85714285714286
476596	74.5
476709	83.85714285714286
476710	73.71428571428571
476783	87.71428571428571
477167	86
478444	77
479060	92.57142857142857
479171	83.16666666666667
479343	82.16666666666667
479519	75
480507	84.14285714285714
480554	86.66666666666667
480650	94.42857142857143
480815	75.5
481010	88.42857142857143
481580	85
481607	84.85714285714286
482467	80
483064	83.14285714285714
483074	88.85714285714286
483109	73.33333333333333
483243	80.83333333333333
483371	75
483411	75.25
483479	84
484135	73
484885	76
484933	95.28571428571429
485630	73.42857142857143
486099	84
486391	86.42857142857143
486656	83.57142857142857
487329	83.28571428571429
488477	72.66666666666667
488863	74
490514	78.83333333333333
492182	78
492240	81.33333333333333
492590	86.25
492946	76.14285714285714
493377	78.66666666666667
493451	82
493912	73.42857142857143
494095	75.85714285714286
494278	91.57142857142857
494786	89.57142857142857
494838	77
494840	77
494927	88.33333333333333
496041	82.14285714285714
496243	75.25
497793	80.5
498065	83.42857142857143
498131	82.57142857142857
498175	74.42857142857143
498967	73.66666666666667
499027	72.28571428571429
499118	77.71428571428571
499380	92
499483	82.4
499511	84.28571428571429
500507	78.8
500791	78.28571428571429
500815	81.42857142857143
500819	87.5
501432	87.57142857142857
501550	76.42857142857143
501879	85
502088	78
502131	77
502441	86.71428571428571
502694	82.14285714285714
502713	76.2
502717	76
502872	87.66666666666667
503353	75
503491	76.14285714285714
503509	81.71428571428571
503878	75.6
504014	77.5
504028	83
504936	81.57142857142857
505376	78.14285714285714
505606	83.71428571428571
505871	81.66666666666667
505961	74.85714285714286
506753	87.57142857142857
507184	75
508537	92.57142857142857
508662	81.83333333333333
509226	82.85714285714286
509768	94.28571428571429
509926	78.2
510556	81
510756	79.57142857142857
511067	80.33333333333333
511306	78.14285714285714
511474	80
511524	73.71428571428571
511693	77.28571428571429
512242	83.25
512805	73
512911	76
512929	93.71428571428571
512995	77.5
513093	79.85714285714286
513757	77.85714285714286
514981	73.16666666666667
515105	75
515311	76.14285714285714
515959	73.83333333333333
516057	86.28571428571429
516456	74
516475	78.8
516529	87.71428571428571
516841	78
517043	74.4
517474	72.5
517617	79
517778	81.57142857142857
517853	75
517890	81.57142857142857
518189	77.85714285714286
518879	73
519222	76.14285714285714
519602	74.33333333333333
519800	80.16666666666667
521096	87
521394	88.66666666666667
521430	85.14285714285714
521764	79.83333333333333
522090	72.28571428571429
522373	80.42857142857143
523012	86.85714285714286
523596	78.42857142857143
523630	82.85714285714286
523966	87.66666666666667
524101	82.33333333333333
524452	86.85714285714286
525501	77.14285714285714
525520	76
525683	72.2
526200	91
527164	81.33333333333333
527227	73.16666666666667
527313	73
527886	89.2
527980	86.16666666666667
528161	73.33333333333333
528261	89.83333333333333
528353	78.83333333333333
528698	77.33333333333333
528904	82.8
529065	81
529212	74.16666666666667
529446	75.5
532396	85
532886	77.6
532950	75.6
533722	81.66666666666667
533839	79.5
534051	74
534086	78.16666666666667
534373	78
534432	76.2
534652	87.8
534698	81.83333333333333
534744	76
534765	77.66666666666667
535145	77
535152	74
535278	74
535328	74
535407	79.66666666666667
535468	82.16666666666667
535530	80.83333333333333
535605	91.66666666666667
535755	74.5
535773	89.4
535778	81.5
535800	77.2
535820	77.2
536112	77
536188	75.5
536189	84.66666666666667
536270	76
536726	77.4
537162	79.8
537193	78.66666666666667
537255	81.8
537342	85.5
537434	89.5
537464	76
537488	79.4
537558	89
537572	72.83333333333333
537679	76.66666666666667
537688	74.5
537844	72.33333333333333
537875	78.16666666666667
537905	82.33333333333333
538221	72.83333333333333
538232	74
538897	80.16666666666667
538942	80.2
538987	83.83333333333333
539232	72.33333333333333
539265	72.6
539303	75.66666666666667
539418	93.5
539891	73
540055	83.6
540511	75.5
540513	76
540607	72.4
540614	76.2
540750	74.83333333333333
540780	78.5
540787	83
541048	77.33333333333333
541073	81.4
541196	74
541232	73
541523	84
541697	76.16666666666667
541706	73
541794	76.66666666666667
541822	78.2
541973	73.75
542012	73
542084	72.33333333333333
542291	76
542396	73
542687	75
542748	85.66666666666667
543124	81.66666666666667
543356	73.16666666666667
543473	81.5
543853	82
543970	76.33333333333333
544444	78
544848	87
544881	77.8
545392	76.5
545658	82.5
545725	76
546052	82.83333333333333
546202	77.5
546407	83
546428	78
546500	72.75
546609	82.16666666666667
546632	83.83333333333333
546685	89.6
546749	82.2
546837	76.66666666666667
546958	85.25
547165	78.5
547259	84.5
547427	73.33333333333333
547689	88.16666666666667
547690	91.16666666666667
547697	87.66666666666667
547841	90.4
547892	77
547902	78.2
547903	82.6
548090	88.4
548124	77
548255	83.16666666666667
548275	78.66666666666667
548439	79
548488	75.5
548617	79.66666666666667
548714	72.25
548791	72.8
548834	82
548885	90.5
548935	75.6
548954	74
549196	93.8
549391	74.5
549512	75
549732	82
549754	85.33333333333333
549862	77.83333333333333
550077	73.5
550209	88.83333333333333
550354	82.5
550403	75.8
550428	80
550429	80.33333333333333
550520	91
550549	75.33333333333333
550613	77.66666666666667
550668	78.6
550708	82
550921	83.5
550923	80.2
550963	76.5
551129	82
551487	74.75
551576	86.5
551706	77
551715	76.8
551716	81.2
551886	83
551895	84.6
551938	76.33333333333333
552007	81.5
552017	78.16666666666667
552039	79.83333333333333
552222	77.2
552826	84
552859	77.6
552929	76.66666666666667
553047	77.66666666666667
553125	80.33333333333333
553321	85.16666666666667
553487	81.16666666666667
553502	84
553520	83
553755	74
553840	87.5
554294	76
554336	82.33333333333333
554344	78
554352	78.66666666666667
554374	78.83333333333333
554608	86.66666666666667
554795	79.83333333333333
555059	78
555414	72.5
555667	77.33333333333333
555670	78.4
555672	77.5
555673	75
555675	80.16666666666667
555747	83.2
555838	88.16666666666667
556292	82
556301	87.66666666666667
556502	81.66666666666667
556553	76.66666666666667
556692	75
556840	73
556863	78.66666666666667
556871	84.66666666666667
556876	78.83333333333333
556877	76
556892	86
556986	79
556990	83.66666666666667
556997	80.8
556999	78.5
557032	77.33333333333333
557220	78.2
557325	75
557451	81.8
557528	82.5
557622	87
557758	83.83333333333333
557775	75
557935	75
557968	82.66666666666667
558040	83.33333333333333
558042	80.66666666666667
558066	83.83333333333333
558068	76
558075	75
558099	80.16666666666667
558163	73
558435	80.33333333333333
558654	78
558701	78
558769	72.66666666666667
558809	83.5
559173	75
559180	84.66666666666667
559253	73.6
559389	78.5
559425	80
559458	78.83333333333333
559475	88.33333333333333
559495	85.16666666666667
559606	77.6
559611	75.16666666666667
559744	76
560468	73.4
560968	90
561138	74.16666666666667
561161	92.33333333333333
561166	81.66666666666667
561167	78.83333333333333
561366	78.5
561437	89.83333333333333
561444	83
561445	92.33333333333333
561448	80.5
561452	83.16666666666667
561455	72.4
561458	72.33333333333333
561459	87.6
561461	74.66666666666667
562465	79.6
562489	80.33333333333333
563874	90.83333333333333
563877	75.83333333333333
565870	77.33333333333333
497088	78
2035022	80
34431	80
126411	100
335600	80
411197	100
429494	100
447790	100",,,,장희훈,
테이블 2개,university_learning,여학생 중 평균 점수 이하인 학생,"Among female students, students with below average scores",,"SELECT studentinfo.id_student, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) <= (SELECT AVG(score) FROM studentassessment);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,693,,"28400	66.4
32885	54.4
52130	71.4
65002	67
70464	55.6
114017	71.8
127582	69.6
132976	67.4
135400	53.142857142857146
144801	68.8
146188	50
147793	52
151358	50
157568	70.6
167906	69.4
168936	66.4
172797	61.4
175991	37.6
183096	54
192183	68.4
202635	66.66666666666667
241729	58.6
258392	58.8
258894	64.8
260355	57.5
277880	67.66666666666667
302302	58.666666666666664
306897	62.6
318933	66.6
324084	57.6
334259	53
334333	36
365244	56.4
368194	50.4
388722	63.8
392931	68.4
401869	65
429958	58.4
441018	59.8
489455	70.6
721259	65
949618	61.8
968578	72
971027	68
1035023	70
1414443	59
1472925	61.9
1686521	68
1894188	70.4
1942396	53.6
2051699	66.6
2062879	61.2
2073016	58.857142857142854
2080474	69.6
2083877	67.8
2084066	59.75
2143752	52.6
2153153	62.2
2164705	70
2171627	69
2182846	66
2194100	67.2
2255601	54.5
2312620	32
2329342	57.2
2344901	51.5
2358056	67.8
2358969	69
2369266	50.6
2411661	46.8
2449878	60.6
2521459	60.8
2532302	63.2
2550279	62.6
2551220	64.8
2552472	53.5
2566163	71.8
2566592	71.8
2606098	71.4
2617002	64.8
2643002	51.2
2676809	43.333333333333336
2678643	71.4
2469673	44.5
2470694	67
574505	42
603834	61.8
637665	51.8
998493	68.8
1112555	66.8
1484804	65.8
1689639	70.5
1757766	70.4
1839386	40
1967783	65
2148681	72
2158196	58
2165164	63.2
2207874	54.666666666666664
2273119	38.333333333333336
2277857	65.4
2297896	62.6
2375975	71.4
2397661	48.4
2404408	52.5
2432796	63.4
2473538	55
2474849	35
2500258	71.2
2514898	66.4
2521865	63.8
2522927	68.4
2540168	43.333333333333336
2551797	63.2
2574990	56.4
2581477	49.2
2584873	64
2595841	56.8
2624961	62.6
2642616	57.2
2654628	71.6
2690062	58
2694788	35.333333333333336
24734	46.8
31600	54.8
52765	63
55104	71
62487	71.6
85092	58
109155	67.8
117818	57.6
119902	67
130547	58.4
133816	65.4
149741	66.4
151587	67
152668	71
164944	62.4
174745	65
235068	59.6
243510	43.6
244246	67.2
252073	49
266524	53.8
275674	45
277123	46
290164	66
293824	60
309142	66
329659	49.8
337748	44
351336	64.6
354170	58
364957	59.6
373872	65.6
383180	72
388147	40
396599	54.25
396655	40.2
398171	69.2
400682	52.6
402961	67.6
410092	66.4
440319	69.33333333333333
442064	53
470982	61.6
483800	70.6
484897	64.8
503889	69
537081	60.8
2436812	43
1008675	63.714285714285715
1536591	57.333333333333336
1678401	64.57142857142857
1721462	71
1730702	56
1771053	60
1789199	65.14285714285714
1858523	51.8
1993672	36
2243551	34.42857142857143
2244724	67.66666666666667
2279538	52
2291598	71.85714285714286
2296749	71
2322046	65
2336550	66.57142857142857
2458984	71.5
2466123	63
2475780	70.28571428571429
2521745	61.42857142857143
2524127	69.42857142857143
2528966	71.33333333333333
2531031	68.28571428571429
2560219	62.333333333333336
2572118	70
2591421	53.5
2608235	69.28571428571429
2664301	54
2680770	62.666666666666664
25107	64.42857142857143
34756	67.33333333333333
34863	67.57142857142857
35812	71
50993	39.333333333333336
75399	64.83333333333333
82535	64.71428571428571
82741	69.14285714285714
83254	63.285714285714285
92274	63
92832	70.16666666666667
92993	71.16666666666667
94616	69.5
110881	71
133748	71.2
141823	29
152153	49.2
154027	68.83333333333333
161678	40
169515	59
170356	65
173316	58
173335	69.33333333333333
186670	66.83333333333333
186988	57.8
187793	63
200905	55.142857142857146
235097	71
242149	63
255998	50.857142857142854
262294	49.333333333333336
262454	70.16666666666667
262741	71.42857142857143
263499	70
267761	70.5
269076	64
277733	69.66666666666667
281564	68.85714285714286
284076	72
285633	62.57142857142857
288380	67
291037	64.42857142857143
298322	65.14285714285714
306886	67.14285714285714
309175	63
309734	70
311042	65
312141	68
318056	71.28571428571429
318101	59
325511	71
325879	66.66666666666667
326012	64
329321	67.75
333129	50
334794	53
335421	71.42857142857143
336165	35
338056	72.14285714285714
341229	70.5
341509	64.5
351290	71.71428571428571
351543	35
355998	55
357030	67
357928	55
362760	52.166666666666664
362877	57
367304	48.8
367348	67.66666666666667
370720	69
378721	69.33333333333333
384909	70
385034	65.66666666666667
387702	66
388205	50.333333333333336
388484	66
390461	61.25
392213	62.714285714285715
392281	71
400049	72
400894	70
403093	56.833333333333336
405746	71
406416	50
410739	69.66666666666667
421205	54.75
422070	59
427536	71.83333333333333
427773	70.83333333333333
429038	66.5
430357	40
431071	66
432004	26.5
432232	52
433939	66.6
434646	67
440057	71.42857142857143
441181	57.57142857142857
443108	72
444784	70
444926	64
445125	61.714285714285715
445889	62.57142857142857
446357	53
446856	72
466800	69
468021	61
468949	72.16666666666667
469683	61.142857142857146
471219	68
472348	38
472586	70.66666666666667
475460	59.285714285714285
476037	64.33333333333333
476457	68
477009	55.857142857142854
477011	66.42857142857143
477734	66.85714285714286
477835	61.2
478317	63.2
478792	64.66666666666667
478873	51.5
479516	71.2
481143	55.166666666666664
482766	66.28571428571429
483952	60.42857142857143
484039	50.75
484768	61
485399	68.42857142857143
486282	70.33333333333333
486521	66.42857142857143
487646	56.57142857142857
488185	72
489251	71.71428571428571
490152	67
493186	69.16666666666667
493515	70.83333333333333
493958	69.57142857142857
495674	43
496070	62.857142857142854
496220	67.57142857142857
496674	41
497278	65
497280	71.6
497468	65
498296	64.33333333333333
498371	50
498455	46.833333333333336
499067	59.6
499387	63
499891	64.28571428571429
500585	47
500659	57.75
502604	59.42857142857143
503390	55.833333333333336
504021	66
504102	46.57142857142857
505417	69
505595	54
505959	71.16666666666667
506233	72
506360	69.83333333333333
506650	66.85714285714286
507359	70.83333333333333
508452	54.142857142857146
509797	40.6
509901	65.5
510141	65.66666666666667
510492	56.142857142857146
510845	64.16666666666667
511459	67.71428571428571
511515	52.166666666666664
511527	67.75
512070	53
512180	57.666666666666664
512883	57
513210	64.5
513315	51
513733	62.166666666666664
513881	67.33333333333333
514987	72.16666666666667
515035	56.333333333333336
515474	66.8
515497	70.66666666666667
516495	67.66666666666667
518876	67
518904	53
519387	69.5
521903	67.42857142857143
522249	71.66666666666667
522383	65.33333333333333
525679	57.666666666666664
526370	69.2
526506	71
527020	59
527382	67
527400	62
527659	29
528175	71
528220	53.666666666666664
528250	68.33333333333333
528918	62
529174	67.33333333333333
529452	63.666666666666664
529502	70.33333333333333
530065	53.5
530153	70.5
530226	57.6
530266	60
530493	67.66666666666667
530669	43.833333333333336
530987	51.333333333333336
531027	60
531205	41
531427	65.75
531428	66
531464	55
531569	70
531573	44
531634	39
532034	67
532140	71.66666666666667
532500	14.5
532512	70
532584	54.5
532665	71.16666666666667
532839	63.5
533324	63.333333333333336
533347	56.6
533365	65
533545	55.8
533697	61
533969	70
533996	69.5
534709	51
534908	41
534983	60.6
534991	46.5
535012	59.4
535140	70.4
535155	69
535269	69.5
535396	66
535760	67.83333333333333
535807	59.5
536203	35
536205	64.4
536442	47.5
536452	65
536510	60.333333333333336
536722	71.66666666666667
536856	60.25
536900	65.4
537392	63
537414	71.5
537473	65.2
537704	64.4
537898	59.5
538138	65
539056	64.5
539253	70
539345	62.666666666666664
539365	71.16666666666667
539385	60.666666666666664
539558	65.5
539572	56
539737	64.16666666666667
539962	56.333333333333336
540184	71.66666666666667
540530	62.5
540656	67.5
540826	70.75
540918	55
541013	69
541113	56.6
541231	69.25
541363	59.5
541763	68.5
541764	72
541808	71.33333333333333
541832	68
542172	18
542259	38.5
542260	62.666666666666664
542543	43
542613	59
542663	41.2
542745	39
542991	46.8
543140	59.333333333333336
543180	64.2
543351	60.5
543408	71.5
543533	32
543630	45.75
543719	59.6
543926	62
544017	60.333333333333336
544351	35.166666666666664
544455	61.8
544500	65
544519	46
544532	71.66666666666667
544627	63.333333333333336
544632	70.5
544639	48.666666666666664
544642	66.83333333333333
544741	67.66666666666667
544859	62.333333333333336
544890	56.5
544978	60.333333333333336
545191	68.5
545223	58.4
545340	67.5
545480	53.333333333333336
545697	56
545702	53.666666666666664
545803	32
546019	68
546136	49
546157	50.833333333333336
546322	69
546533	64
546811	53.166666666666664
546843	63.8
546909	61.666666666666664
546947	69.5
547192	66.2
547372	42
547390	62.8
547403	64.33333333333333
547409	63
547466	56.666666666666664
547620	60.333333333333336
547755	55
547873	60.666666666666664
548307	53
548334	63.8
548403	60
548585	65.33333333333333
548642	68.33333333333333
548838	65.16666666666667
548871	52.4
548884	61
548921	65
548924	45.5
548981	61
549009	25.25
549047	71.83333333333333
549078	36
549158	58.666666666666664
549204	37.666666666666664
549261	64.83333333333333
549568	62.5
549590	57
549651	67.66666666666667
549873	55.6
549907	58.75
550051	63
550098	41
550106	66.5
550163	57
550278	51
550322	50.5
550342	70.16666666666667
550381	68.33333333333333
550400	57.833333333333336
550597	68.33333333333333
550867	65.66666666666667
550898	47.333333333333336
550960	72
551032	58.5
551053	59.333333333333336
551080	65.83333333333333
551274	64.33333333333333
551282	61.333333333333336
551480	62.333333333333336
551702	57.5
551714	60
551770	68.4
551906	66
551954	65
552110	68.5
552135	47.666666666666664
552718	70.5
552822	71
552894	65.5
552914	47
553320	68
553442	64.4
553462	66.5
553490	60
553508	71.5
553572	63
553716	55.5
553729	68.33333333333333
553800	52.666666666666664
553807	55
554068	52.5
554083	70.66666666666667
554203	50
554206	64.33333333333333
554512	56.666666666666664
554551	72
554818	61.5
554894	66.25
554898	39.666666666666664
554930	45.25
554986	0
555035	59
555086	63.166666666666664
555263	62.5
555407	36.75
555695	69.66666666666667
555837	25
555902	65
555909	67.5
555930	69.5
555935	56.5
555946	64
556138	70
556318	43
556349	54.5
556568	65.5
556605	69.2
556648	71
556860	63.833333333333336
556865	63.6
556878	64.33333333333333
556882	63
556883	61.333333333333336
556887	58.166666666666664
556898	64.2
556959	70
556987	49.4
556992	60.833333333333336
557006	52
557024	66.66666666666667
557060	70.2
557145	66.83333333333333
557285	65.16666666666667
557308	53.166666666666664
557351	63.5
557594	66.83333333333333
557709	55
557827	45.75
557979	64.33333333333333
558024	68.33333333333333
558092	41
558113	66.8
558114	64.33333333333333
558168	67.16666666666667
558247	56.5
558250	68.16666666666667
558602	58
558622	67.6
558662	65
558689	69.2
558703	58
558747	63.333333333333336
558820	64.6
558965	67.16666666666667
559011	60
559031	71.5
559350	54.666666666666664
559595	71.5
559603	64.4
559608	61.166666666666664
559610	57
559651	70.83333333333333
559697	51
559808	68
559989	44
560005	55
560012	64
560075	67.4
560170	59.6
560319	68.5
560335	70.5
560455	62.166666666666664
560891	63
561716	52.4
563157	29.333333333333332
563363	57.5
563878	68.5
563879	59.666666666666664
558903	71
558955	61.2
404727	63.4
519012	63.5
542115	42
542692	25",,,,장희훈,
테이블 2개,university_learning,남학생 중 활동 유형이 homepage인 학생을 찾으시오,"Among male students, find a student whose activity type is 'homepage'.",,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'homepage';,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,56,,"71361
57506
101781
116692
123044
238007
279572
291334
205350
229361
324282
336207
343446
368963
386952
393207
414117
470588
588775
550383
1765788
2649826
2104505
2139353
1105478
1620151
2278464
2391984
2482700
2694424
969076
1746134
1801229
1465690
572652
113295
290757
508818
189879
295741
305152
333059
444677
383254
294570
286488
2012966
240884
195262
2065691
2562034
345068
606143
366483
498857
268733",,,,장희훈,
테이블 2개,university_learning,"남학생 중 활동 유형이 resource인 학생을 찾으시오","Among male students, find a student whose activity type is 'resource'.",,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'resource';,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,24,,"77367
98094
106577
104476
147756
235507
256815
242793
312782
155550
186149
174782
333323
405088
544103
2559575
2688067
2641155
2146792
2412002
100893
2691244
53025
305386",,,,장희훈,
테이블 2개,university_learning,남학생 중 활동 유형이 forumng인 학생을 찾으시오,"Among male students, find a student whose activity type is 'forumng'.",,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'forumng';,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,25,,"75091
248270
281250
282821
296332
307866
172112
321942
978739
1847830
1938355
1970390
2574528
2689958
1456619
1626710
2293923
2523736
2518069
2666246
231554
392756
390890
290201
183947",,,,장희훈,
테이블 2개,university_learning,"여학생 중 활동 유형이 resource인 학생을 찾으시오
",Find a female student whose activity type is 'resource'.,,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' AND vle.activity_type = 'resource';,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,12,,"62155
298696
155854
324084
721259
2599352
2606098
2643002
2164705
2171627
2358969
2529279",,,,장희훈,
테이블 2개,university_learning,여학생 중 활동 유형이 glossary인 학생을 찾으시오,"Among female students, find a student whose activity type is 'glossary'.",,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' AND vle.activity_type = 'glossary';,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,70464,,,,장희훈,
테이블 2개,university_learning,평균 점수 이상인 학생의 총 클릭 수를 구하시오,Find the total number of clicks for students whose score is above average.,,SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentassessment.score >= (SELECT AVG(score) FROM studentassessment);,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,4117,,,,장희훈,
테이블 2개,university_learning,평균 점수 이하인 학생의 총 클릭 수를 구하시오,Find the total number of clicks for students whose score is below average.,,SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentassessment.score < (SELECT AVG(score) FROM studentassessment);,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,3250,,,,장희훈,
테이블 2개,university_learning,"East Anglian Region 지역의 평균 점수를 구하시오",Find the average score for 'East Anglian Region',,SELECT AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Anglian Region';,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,71.01748543,,,,장희훈,
테이블 2개,university_learning,East Anglian Region 지역의 평균 점수 이상의 남학생을 조회하시오,Find boys with above average scores in the 'East Anglian Region'.,,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Anglian Region' AND studentinfo.gender = 'M' AND studentassessment.score >= (SELECT AVG(score) FROM studentassessment WHERE id_student IN (SELECT id_student FROM studentinfo WHERE region = 'East Anglian Region' ));,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,39,,"11391
58071
59185
116692
131390
135471
174782
199636
241649
263251
263543
268073
274947
285315
295060
306466
324002
336207
345068
346025
350939
363401
364177
365642
377546
377846
383723
423314
554830
560208
623840
630142
1746134
2398313
2442685
2649826
2688067
2689958
2694424",,,,장희훈,
테이블 2개,university_learning,East Midlands Region 지역의 평균 점수 이상의 남학생을 조회하시오,Find boys with above average scores in the 'East Midlands Region',,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'East Midlands Region' ));,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,25,,"77367
87732
118983
145544
159954
199897
229361
262011
273346
289449
292027
338407
348807
350795
380953
386348
425817
507817
550777
552273
558373
1471214
2518069
2641155
2698257",,,,장희훈,
테이블 2개,university_learning,Ireland 지역의 평균 점수 이상의 남학생을 조회하시오,Find male students with above average score in 'Ireland' region.,,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Ireland' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Ireland' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,14,,"71361
104476
172112
343446
375260
386924
411971
429858
518469
520836
580389
1801229
1976139
2574528",,,,장희훈,
테이블 2개,university_learning,London Region 지역의 평균 점수 이상의 남학생을 조회하시오,Find boys with above average scores in the 'London Region',,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'London Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'London Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,42,,"85302
102952
108872
117071
155550
175447
185439
200860
228082
231554
240712
242793
273877
279572
375646
384678
424577
441888
444677
447782
493773
508818
516432
543165
544253
548120
552991
554998
563330
1618738
1773377
1926668
2057803
2139353
2330254
2369415
2445088
2458355
2481224
2622465
2650282
2671132",,,,장희훈,
테이블 2개,university_learning,North Region 지역의 평균 점수 이상의 남학생을 조회하시오,Search for male students with above average scores in the 'North Region'.,,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,19,,"31663
46844
53025
133922
147756
175392
237304
263952
370302
376439
405088
416314
500719
500958
534343
561164
639053
684180
2578676",,,,장희훈,
테이블 2개,university_learning,North Western Region 지역의 평균 점수 이상의 남학생을 조회하시오,Find male students with above average scores in the 'North Western Region'.,,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Western Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Western Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,29,,"75255
91265
102806
175932
248270
256815
290757
294496
350188
356170
361603
393207
432870
466959
475688
498857
518970
544103
548504
552025
958987
1626710
2012966
2146792
2244332
2479954
2666246
2677624
2692514",,,,장희훈,
테이블 2개,university_learning,Scotland 지역의 평균 점수 이상의 남학생을 조회하시오,Find boys with above average scores in 'Scotland',,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'West Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'West Midlands Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,38,,"129955
149962
152910
229179
300398
305386
306107
307866
340831
369834
376617
401404
402204
406974
427704
439857
482710
500836
511050
527100
534360
538196
548744
552535
572652
705379
760729
1465690
1640609
1970390
2104505
2467267
2509639
2514368
2600688
2601889
2649800
2654302",,,,장희훈,
테이블 2개,university_learning,South East Region 지역의 평균 점수 이상의 남학생을 조회하시오,Search for male students with above average scores in the 'South East Region',,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South East Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South East Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,28,,"187100
188152
247267
286488
291334
292775
294570
302476
309709
363660
378543
405471
406682
409100
412407
439305
470588
480382
488425
495284
500113
512460
550383
628088
1629771
1753965
2516503
2664024",,,,장희훈,
테이블 2개,university_learning,South Region 지역의 평균 점수 이상의 남학생을 조회하시오,Search for male students with above average scores in the 'South Region'.,,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,43,,"29144
57506
94961
101781
123044
200804
232307
238007
240884
292525
296332
312537
312782
321942
329800
341040
345440
353665
358182
360877
382095
391249
495856
533068
544186
548241
554226
555102
556284
559452
591774
593846
696578
749412
1620151
1715896
1797614
1938355
2391984
2457256
2536991
2569324
2620178",,,,장희훈,
테이블 2개,university_learning,South West Region 지역의 평균 점수 이상의 남학생을 조회하시오,Find male students with above average scores in the 'South West Region'.,,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South West Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South West Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,34,,"137873
145130
147876
167961
205350
205494
258587
282821
311235
335247
366483
388885
402470
406671
433755
442132
475095
477164
501955
547757
548839
548843
557057
558324
588775
969076
1183831
1268696
1847830
1860318
2240349
2412002
2559575
2596621",,,,장희훈,
테이블 2개,university_learning,Wales 지역의 평균 점수 이상의 남학생을 조회하시오,Find boys with above average scores in 'Wales',,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Wales' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Wales' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,32,,"38053
84245
116541
165243
192424
226374
254625
255548
290201
294655
332884
367609
389369
476603
480458
482945
514140
523672
546921
550707
555309
555627
560970
561343
562495
570317
1045203
1493476
1511033
2210318
2318055
2481901",,,,장희훈,
테이블 2개,university_learning,West Midlands Region 지역의 평균 점수 이상의 남학생을 조회하시오,Find boys with above average scores in the 'West Midlands Region'.,,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'West Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'West Midlands Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,38,,"129955
149962
152910
229179
300398
305386
306107
307866
340831
369834
376617
401404
402204
406974
427704
439857
482710
500836
511050
527100
534360
538196
548744
552535
572652
705379
760729
1465690
1640609
1970390
2104505
2467267
2509639
2514368
2600688
2601889
2649800
2654302",,,,장희훈,
테이블 2개,university_learning,Yorkshire Region 지역의 평균 점수 이상의 남학생을 조회하시오,Find boys with above average scores in 'Yorkshire Region'.,,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Yorkshire Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Yorkshire Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,29,,"28061
100893
113295
114999
185350
188278
198956
228383
237274
315076
328024
342972
345357
368963
383254
386952
414117
476201
555674
588477
1352868
1776925
1889511
2034350
2280038
2342426
2494700
2557283
2574583",,,,장희훈,
테이블 2개,university_learning,총 클릭 수 10 이상 학생의 성적을 구해줘,Find the grades of students with a total number of clicks of 10 or more.,,SELECT studentassessment.score FROM studentassessment JOIN studentvle ON studentassessment.id_student = studentvle.id_student WHERE studentvle.sum_click >= 10;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,202,,"67
71
78
88
89
83
42
78
76
79
82
86
82
77
75
67
66
67
65
65
80
80
83
72
77
72
78
72
68
70
78
86
85
90
73
86
83
73
68
86
86
79
82
73
79
83
85
84
85
86
78
81
78
88
76
87
60
58
82
72
75
61
59
44
59
44
74
57
53
51
52
57
75
59
87
65
75
77
75
81
80
79
86
87
86
86
87
86
87
90
86
77
89
94
89
61
56
58
69
71
61
56
58
69
71
81
83
82
78
80
62
77
73
72
76
57
63
67
74
70
78
90
90
80
80
78
90
90
80
80
59
69
78
69
69
74
77
83
82
77
75
82
85
87
88
86
80
82
79
85
50
56
52
52
53
71
38
90
85
85
85
72
50
50
40
57
56
64
72
70
76
85
87
73
79
79
62
50
50
40
65
63
64
68
70
73
55
78
85
80
85
82
87
81
83
89
73
61
68
68
39
42",,,,장희훈,
테이블 2개,university_learning,총 클릭 수가 가장 많은 학생의 성적과 학생 id를 알고싶어,I want to know the grades and student ID of the student with the most total clicks.,,"SELECT studentvle.id_student, studentassessment.score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click = (SELECT MAX(sum_click) FROM studentvle);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,5,,"2649826	75
2649826	82
2649826	85
2649826	87
2649826	88",,,,장희훈,
테이블 2개,university_learning,"남학생의 평균 모듈 프레젠테이션 길이를 구해줘",Find the average module presentation length for male students.,,SELECT AVG(courses.module_presentation_length) AS average_module_presentation_length FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module WHERE studentinfo.gender = 'M';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,254.5099,,,,장희훈,
테이블 2개,university_learning,평균 모듈 프레젠테이션 길이가 가장 긴 지역을 구해줘,Find the region with the longest average module presentation length.,,SELECT studentinfo.region FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY studentinfo.region ORDER BY AVG(courses.module_presentation_length) DESC LIMIT 1;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,Ireland,,,,장희훈,
테이블 2개,university_learning,평균 모듈 프레젠테이션 길이가 가장 짧은 지역을 구해줘,Find the region with the shortest average module presentation length.,,SELECT region FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY region ORDER BY AVG(courses.module_presentation_length) ASC LIMIT 1;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,North Region,,,,장희훈,
테이블 2개,university_learning,모듈 코드 AAA의 학생들의 평균을 구해줘,Find the average of students in module code ''AAA''.,,SELECT AVG(studentinfo.studied_credits) AS average_studied_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE courses.code_module = 'AAA';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,84.4101,,,,장희훈,
테이블 2개,university_learning,BBB수업을 듣는 학생 중 성적이 가장 안좋은 학생을 찾아줘,Find the student with the worst grades among students taking ''BBB'' classes.,,"SELECT id_student, MIN(score) AS min_score FROM studentassessment WHERE id_assessment IN ( SELECT id_assessment FROM assessments WHERE code_module = 'BBB' ) GROUP BY id_student ORDER BY min_score LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,186780,,,,장희훈,
테이블 2개,university_learning,CCC 수업을 듣는 학생의 평균 이수 학점을 알고 싶어,I want to know the average credits earned by students taking ''CCC'' classes.,,SELECT AVG(studentinfo.studied_credits) AS average_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE courses.code_module = 'CCC';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,78.2688,,,,장희훈,
테이블 2개,university_learning,"이수 학점이 100점 이상인 학생 중 성적이 가장 우수한 학생을 찾아줘",Find the student with the best grades among students with completed credits of 100 or more.,,SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.studied_credits >= 100 GROUP BY studentinfo.id_student ORDER BY MAX(studentassessment.score) DESC LIMIT 1;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,1098728,,,,장희훈,
테이블 2개,university_learning,최종 결과 pass인 학생들의 평균 점수,The average score of students with a final result of 'pass',,SELECT AVG(score) AS average_score FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE final_result = 'pass' );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,72.79269261,,,,장희훈,
테이블 2개,university_learning,최종 결과 fail인 학생들의 평균 점수,The average score of students whose final result was 'fail',,SELECT AVG(score) AS average_score FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE final_result = 'fail' );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,63.41169154,,,,장희훈,
테이블 2개,university_learning,DDD 수업을 듣는 학생들의 활동 유형을 알려줘,Tell us about the types of activities of students taking ''DDD'' classes.,,SELECT DISTINCT vle.activity_type FROM vle JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE courses.code_module = 'DDD';,"CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,12,,"glossary
forumng
homepage
externalquiz
page
oucontent
ouwiki
resource
url
subpage
ouelluminate
oucollaborate",,,,장희훈,
테이블 2개,university_learning,Yorkshire Region 지역 학생들의 등록 날짜를 알고싶어,I would like to know the registration date for students in 'Yorkshire Region'.,,SELECT studentregistration.date_registration FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.region = 'Yorkshire Region';,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,640,,"-130
-24
-87
-173
-22
-81
-144
-103
-124
-39
-19
-123
-31
-62
-26
-68
-117
-97
-55
-67
-150
-17
-53
-16
-145
-117
-22
-11
-15
-57
-39
-29
-45
-107
-41
-127
-21
-37
-23
-79
-155
-68
-109
-101
-87
-53
-5
-127
-29
-41
-222
-23
-106
-185
-87
-29
-85
-47
-68
-32
-66
-31
-59
-123
-17
-130
-61
-22
-22
-104
-45
-110
-70
-17
-66
-60
-12
-18
-44
-54
-38
-22
-58
-16
-19
-173
-183
-46
-23
-107
-24
-61
-38
-276
-21
-49
-61
-23
-149
-101
-57
-30
-77
-100
-91
-142
-22
-47
-30
-29
-22
-73
-8
-143
-66
-107
-37
-192
-262
-55
-101
-73
-130
-165
-55
-88
-25
-128
-32
-79
-59
-58
-95
-100
-53
-85
-36
-30
-142
-36
-43
-23
-74
-53
-277
-27
-132
-49
-53
-88
-30
-16
-63
-55
-79
-174
-184
-246
-89
-36
-23
-42
-32
-80
-96
-25
-32
-82
-25
-64
-52
-41
-102
-46
-225
-21
-108
-70
-77
-144
-43
-61
-36
-100
-22
-103
-149
-80
-29
-94
-57
-23
-30
-106
-229
-73
-75
-83
-158
-36
-150
-14
-50
-57
-151
-81
-106
-65
-57
-240
-117
-127
-43
-128
-121
-120
-77
-72
-92
-38
-73
-93
-116
-113
-37
-89
-36
-109
-17
-149
-24
-35
-52
-94
-93
-28
-53
-18
-60
-86
-72
-76
-94
-118
-147
-74
-25
-43
-79
-66
-124
-73
-74
-183
-43
-65
-72
-79
-143
-52
-16
-65
-55
-60
-48
-68
-35
-52
-55
-25
-50
-51
-38
-28
-11
-16
-25
-46
-257
-44
-44
-34
-25
-136
-22
-21
-27
-23
-23
-23
-22
-88
-149
-211
-46
-31
-153
-66
-149
-106
-51
-61
-123
-196
-161
-28
-142
-163
-176
-92
-45
-60
-49
-28
-144
-298
-149
-195
-179
-137
-215
-100
-273
-156
-51
-149
-162
-22
-101
-73
-130
-161
-94
-88
-35
-95
-186
-164
-148
-107
-121
-117
-117
-156
-117
-138
-136
-42
-162
-246
-122
-103
-17
-95
-117
-221
-102
-141
-82
-25
-91
-22
-87
-31
-28
-221
-95
-95
-38
-56
-121
-10
-103
-50
-94
-79
-36
-32
-91
-25
-91
-92
-80
-47
-25
-50
-25
-82
-199
-79
-60
-120
-88
-198
-79
-79
-110
-22
-67
-36
-123
-10
-46
-65
-15
-148
-151
-60
-11
-17
-32
-29
-47
-24
-25
-49
-123
-28
-38
-165
-35
-36
-155
-43
-109
-42
-58
-23
-135
-137
-59
-35
-32
-162
-32
-15
-129
-22
-135
-147
-144
-144
-142
-110
-122
-15
-15
-137
-138
-138
-23
-120
-10
-88
-127
-64
-96
-127
-124
-124
-114
-120
-73
-88
-106
-38
-104
-94
-99
-107
-96
-64
-82
-87
-29
-52
-86
-80
-52
-52
-24
-29
-31
-66
-30
-24
-15
-162
-17
-162
-162
-34
-34
-30
-77
-24
-66
-151
-155
-142
-154
-162
-122
-150
-121
-53
-142
-150
-60
-127
-156
-112
-38
-156
-121
-121
-150
-151
-151
-31
-136
-149
-149
-122
-121
-38
-42
-77
-116
-112
-45
-135
-105
-57
-15
-73
-122
-73
-80
-112
-29
-20
-22
-84
-73
-74
-98
-84
-73
-36
-72
-84
-65
-65
-66
-73
-73
-73
-37
-71
-65
-36
-36
-58
-4
-35
-52
-51
-32
-45
-36
-30
-30
-25
-23
-21
-14
-21
-15
-14
-14
-63
-169
-121
-37
-24
11
-102
-66
-67
-42
-77
-24
-60
-32
-65
-108
-49
-50
-63
-43
-105
-84
-81
-109
-22
-16
-38
-24
-31
1
-16
-35
-3
-22
4
-56
-71
-17
-22
-16
-80
-23
-74
-63
-18
-22
-34
-46
-59
-136
-56
-51
-58
-63
-56
-170
-110
-141
4",,,,장희훈,
테이블 2개,university_learning,최고 학력 A Level or Equivalent 인 학생의 점수와 사이트 id를 알려줘,Please tell me the score and site ID of the student with the highest academic level of 'A Level or Equivalent'.,,"SELECT studentassessment.score, studentvle.id_site FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentvle ON studentassessment.id_student = studentvle.id_student WHERE studentinfo.highest_education = 'A Level or Equivalent';","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,815,,"72	546672
71	546672
74	546672
88	546672
75	546672
79	546879
69	546879
74	546879
50	546879
68	546879
73	546652
74	546652
68	546652
73	546652
78	546652
66	546614
68	546614
66	546614
68	546614
59	546660
60	546660
60	546660
61	546660
38	546660
67	546652
66	546652
67	546652
65	546652
65	546652
73	546986
76	546986
72	546986
67	546986
64	546986
80	546719
86	546719
86	546719
78	546719
60	546719
72	546614
77	546614
72	546614
78	546614
72	546614
69	546879
66	546879
71	546879
75	546879
67	546879
85	546879
82	546879
76	546879
85	546879
82	546879
76	546879
87	546879
83	546879
85	546879
86	546879
81	546879
72	546719
81	546719
83	546719
78	546719
87	546719
75	546614
72	546614
72	546614
70	546614
68	546614
52	546662
53	546662
62	546662
43	546662
40	546662
68	546614
70	546614
78	546614
86	546614
85	546614
90	546614
73	546614
86	546614
65	546954
62	546954
30	546954
69	546954
60	546954
61	546954
60	546672
56	546672
58	546672
52	546672
52	546672
81	546874
80	546874
75	546874
72	546874
75	546874
80	546900
62	546900
72	546900
83	546900
85	546900
61	546652
53	546652
72	546652
74	546652
43	546652
85	546614
84	546614
85	546614
86	546614
78	546614
82	546681
80	546681
79	546681
76	546681
77	546681
69	546731
70	546731
60	546731
70	546731
70	546731
58	546879
59	546879
59	546879
72	546719
73	546719
74	546719
39	546719
55	546719
81	546662
78	546662
88	546662
76	546662
87	546662
47	546652
52	546652
73	546652
68	546652
89	546986
54	546986
60	546986
50	546986
56	546986
82	547013
79	547013
79	547013
81	547013
78	547013
75	547013
66	547013
68	547013
61	547013
65	547013
65	546719
68	546719
65	546719
68	546719
75	546719
82	546662
58	546662
78	546662
73	546662
68	546662
60	546688
58	546688
82	546688
72	546688
75	546688
61	546662
59	546662
44	546662
59	546662
44	546662
76	546879
57	546662
53	546662
51	546662
52	546662
57	546662
88	546883
90	546883
88	546883
90	546883
90	546883
76	546670
79	546670
73	546670
63	546670
72	546670
67	546670
60	546652
54	546652
67	546652
66	546652
60	546652
68	546652
70	546652
62	546652
84	546873
83	546873
84	546873
84	546873
83	546873
81	546614
76	546614
75	546614
82	546614
76	546614
77	546614
75	546614
81	546614
80	546614
79	546614
58	546986
35	546986
66	546986
72	546986
57	546986
38	546614
58	546614
64	546614
74	546614
72	546614
36	546614
86	546614
87	546614
86	546614
86	546614
87	546614
86	546614
87	546614
90	546614
71	546614
67	546614
65	546614
75	546614
63	546614
73	546662
58	546662
68	546662
75	546662
65	546662
67	546614
63	546614
71	546614
64	546614
75	546614
65	546871
63	546871
75	546871
67	546871
72	546871
68	546614
74	546614
75	546614
80	546614
74	546614
51	546879
75	546879
54	546879
59	546879
64	546879
85	546986
72	546986
71	546986
72	546986
86	546986
81	546614
72	546614
70	546614
82	546614
77	546614
74	546652
68	546652
69	546652
74	546652
68	546652
54	546614
60	546614
54	546614
65	546614
66	546614
85	546614
81	546614
81	546614
86	546614
81	546614
81	546662
83	546662
82	546662
78	546662
80	546662
80	546668
80	546668
81	546668
82	546668
83	546668
63	546652
63	546652
63	546652
72	546652
48	546652
62	546662
77	546662
73	546662
72	546662
76	546662
72	546879
69	546879
77	546879
78	546879
64	546879
76	546668
67	546668
70	546668
70	546668
69	546668
72	546681
74	546681
80	546681
85	546681
76	546681
82	546652
50	546652
85	546652
84	546652
64	546652
66	546662
77	546662
67	546662
66	546662
80	546662
64	546668
64	546668
66	546667
66	546667
78	546667
73	546667
80	546667
80	547013
75	547013
77	547013
77	547013
73	547013
64	546719
72	546719
72	546719
77	546719
65	546719
70	546911
70	546911
71	546911
68	546911
78	546911
83	546688
80	546688
66	546688
62	546688
66	546688
67	546652
53	546652
67	546652
66	546652
71	546652
70	546954
62	546954
63	546954
68	546954
76	546954
86	546652
78	546652
80	546652
82	546652
82	546652
86	546879
85	546879
78	546879
90	546879
85	546879
75	546879
84	546879
81	546879
78	546879
80	546879
67	546671
68	546671
49	546671
40	546671
49	547013
64	547013
59	547013
59	547013
25	547013
65	546614
62	546614
71	546614
65	546614
62	546614
71	546614
70	546614
66	546614
56	546652
55	546652
65	546652
65	546652
65	546652
88	546652
64	546652
72	546652
60	546652
64	546652
72	546669
64	546669
68	546669
60	546669
75	546669
70	547013
71	547013
67	547013
72	547013
70	547013
65	547013
65	546670
63	546670
64	546670
70	546670
68	546670
64	546614
61	546614
66	546614
80	546614
65	546614
63	546652
67	546723
64	546723
63	546723
64	546723
51	546723
66	546662
65	546662
82	546662
72	546662
66	546662
73	546662
56	546662
45	546662
25	546662
82	546652
85	546652
86	546652
85	546652
85	546652
83	546681
86	546681
85	546681
85	546681
86	546681
73	546614
76	546614
75	546614
78	546614
80	546614
71	546732
38	546732
72	546652
59	546652
52	546652
58	546652
65	546652
68	547013
68	547013
69	547013
68	547013
62	547013
79	547013
63	546614
85	546614
80	546614
86	546614
64	546614
64	546614
72	546614
70	546614
76	546614
85	546614
75	546614
74	546614
75	546614
68	546614
80	546614
77	546614
80	546614
72	546614
79	546614
66	546879
60	546879
57	546879
55	546879
65	546879
77	546719
83	546719
82	546719
78	546719
78	546719
58	546652
64	546652
62	546652
63	546652
69	546668
72	546668
64	546668
71	546668
40	546668
67	546652
77	546652
69	546652
87	546652
72	546652
74	546652
75	546652
80	546652
79	546652
75	546652
86	546667
57	546667
60	546667
70	546667
86	546667
76	546652
76	546652
74	546652
76	546652
78	546652
76	546652
78	546652
80	546652
82	546652
81	546652
89	546614
74	546614
80	546614
94	546614
60	546614
87	546662
73	546662
79	546662
79	546662
62	546662
82	546614
62	546614
59	546614
36	546614
83	546614
87	546614
81	546614
83	546614
85	546614
80	546614
79	546614
83	546614
87	546614
86	546614
79	546652
71	546652
78	546652
77	546652
75	546652
58	546670
60	546670
64	546714
53	546714
59	546714
50	546714
56	546714
54	546667
49	546667
58	546667
50	546667
41	546667
55	546667
60	546667
	546667
63	547013
68	547013
71	547013
74	547013
66	547013
72	546652
72	546652
72	546652
73	546652
73	546652
77	546652
74	546652
70	546652
71	546652
71	546652
85	546879
75	546879
82	546879
85	546879
85	546879
75	546614
74	546614
76	546614
80	546614
70	546614
80	546652
62	546652
63	546652
66	546652
79	546668
81	546668
74	546668
60	546668
59	546668
53	546652
25	546652
55	546652
54	546652
38	546652
75	546652
80	546652
54	546652
75	546652
80	546652
54	546652
54	546652
77	546652
73	546614
78	546614
81	546614
73	546614
54	546614
76	546614
85	546614
83	546614
83	546614
70	546614
38	546614
52	546614
52	546614
54	546614
55	546614
70	546652
65	546652
68	546652
70	546652
65	546652
68	546652
78	546652
69	546652
75	546652
58	546652
72	546652
64	546614
70	546652
72	546652
74	546652
77	546652
74	546652
72	546614
70	546614
73	546614
74	546614
40	546614
64	546879
73	546879
85	546879
80	546879
80	546879
55	546688
57	546688
40	546688
42	546688
40	546688
57	547013
60	547013
54	547013
62	547013
72	546614
69	546614
84	546614
75	546614
68	546614
74	546671
64	546671
70	546671
77	546671
68	546671
74	546614
69	546614
85	546614
69	546614
81	546614
57	546652
49	546652
51	546614
28	546614
42	546614
32	546614
35	546614
60	546719
79	546719
70	546719
75	546719
71	546719
55	546614
73	546614
77	546614
70	546614
80	546614
64	546662
68	546662
70	546662
73	546662
55	546662
69	546671
77	546671
72	546671
78	546671
76	546671
75	546714
70	546714
81	546714
85	546714
91	546714
74	546614
54	546614
56	546614
54	546614
54	546614
65	546689
76	546689
74	546689
71	546689
82	546689
75	547013
76	547013
83	547013
80	547013
76	547013
55	546876
46	546876
61	546876
67	546876
67	546876
50	546614
60	546668
18	546668
67	546668
49	546668
30	546614
40	546614
37	546614
73	546662
57	546662
81	546662
85	546662
60	546662
67	546871
68	546871
66	546871
50	546871
35	546871
87	546652
55	546652
65	546652
74	546652
78	546652
70	546614
62	546614
60	546614
65	546614
70	546614
87	546614
81	546614
83	546614
89	546614
73	546614
83	546879
84	546879
85	546879
85	546879
84	546879
70	546614
75	546614
80	546614
80	546614
85	546614
72	546614
68	546614
75	546614
72	546614
70	546614
64	546879
78	546879
83	546879
75	546879
73	546879
67	546652
33	546652
48	546652
54	546652
43	546652
68	546681
44	546681
52	546681
37	546681
48	546681
51	546614
35	546614",,,,장희훈,
테이블 2개,university_learning,최종 결과 fail인 학생 중 점수가 평균 이상인 학생을 구해줘,"Among the students whose final result was 'fail', find the student whose score is above average.",,"SELECT studentassessment.id_student, studentassessment.score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'fail' AND studentassessment.score > ( SELECT AVG(score) FROM studentassessment WHERE id_student = studentinfo.id_student );","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,743,,"23629	100
29144	70
29144	72
29144	100
34353	95
34353	90
34353	100
50993	61
50993	80
58089	100
62631	100
74372	60
74372	67
74372	49
78645	75
78645	79
78645	80
94616	70
94616	77
94616	85
94616	80
117071	100
120994	100
133748	74
133748	100
139033	63
139033	66
139033	62
142324	100
146188	52
146188	53
146188	62
147756	77
147756	72
147756	75
147756	71
147756	69
147756	82
147756	72
147876	84
147876	100
154125	86
154125	100
173316	60
173316	100
173335	73
173335	71
173335	77
173335	100
175991	51
175991	42
183806	100
185350	75
185350	60
186670	81
186670	73
186670	75
186670	72
186988	100
187793	67
187793	80
200905	66
200905	66
200905	100
203108	85
203108	100
205719	67
205719	63
226374	78
226374	100
227517	63
227517	67
227517	66
227517	63
235097	72
235097	80
237304	81
237304	100
237913	88
237913	100
241729	62
241729	64
241729	61
243510	46
243510	62
245404	86
245404	100
247267	85
247267	84
247267	88
247267	80
252340	78
252340	78
252340	80
262454	100
268073	78
268073	83
268073	75
273877	63
273877	100
277123	58
277123	47
277123	50
281250	63
281250	57
281250	65
285633	100
288380	80
294381	100
294655	81
294655	78
295060	70
295060	73
295741	52
295741	52
295741	54
295741	55
298034	82
298034	82
302302	59
302302	59
329321	100
329659	58
329659	58
329659	50
334259	57
334291	100
334441	41
334441	45
334441	45
335421	81
335421	82
335421	76
335421	80
335910	100
338861	100
341229	71
341872	70
344282	61
344282	53
350622	84
350622	80
350622	87
350622	79
350622	100
350795	85
350795	84
350795	82
350795	82
354058	100
354170	68
354170	71
357668	63
357668	59
357928	59
357928	80
362760	55
362760	56
362760	60
363401	53
363401	43
363401	100
364177	75
364177	72
365439	100
365488	100
367304	60
367304	59
367304	52
367348	70
367348	73
368824	61
368824	68
368824	68
370302	40
370302	78
370302	40
370302	80
370720	100
374102	77
374102	83
374102	80
377905	83
377905	100
379402	100
384678	100
387533	68
387702	75
388147	41
388205	62
388360	100
388410	74
388410	80
390461	80
392614	100
392756	53
392756	55
392756	54
396599	60
396599	62
396599	55
396655	50
396655	54
398552	54
398552	49
398552	47
400049	73
400049	74
400049	100
404727	67
404727	73
406311	61
406311	72
406311	63
406311	59
416314	80
417462	80
418731	61
418731	45
418731	44
420087	80
420604	100
421205	100
422070	65
422070	100
423314	100
430357	51
430357	52
430357	42
430357	100
431025	60
431025	56
432004	33
433939	73
433939	69
441000	100
442456	46
442456	43
442456	50
444408	100
445125	73
445125	64
445125	62
445125	75
446856	76
446856	77
446856	76
446856	80
466037	95
466037	100
466959	68
466959	80
466973	100
467756	80
468021	80
468120	42
470653	83
470653	82
470653	100
471219	74
471219	100
473095	100
475460	65
475460	68
475460	60
477009	69
477009	69
477009	63
477009	68
477009	100
478792	69
478792	75
478792	80
478873	58
479519	100
480458	61
480458	80
481022	57
481022	50
481143	62
481143	64
481143	58
481143	100
483411	83
483411	100
483952	61
483952	100
484039	70
484039	80
484885	83
484885	80
484885	100
486282	100
486521	72
486521	100
487329	84
487329	87
487329	84
487329	100
487646	70
487646	100
488425	100
490152	78
492590	89
492590	100
492946	81
492946	83
492946	78
492946	80
493451	100
493515	87
493515	93
493515	71
493515	100
493773	88
493773	89
493773	100
496243	100
496674	42
498455	50
498455	50
498455	60
499067	100
500836	85
500836	100
501955	67
501955	100
502088	85
502088	80
502713	100
502872	100
503390	75
503390	75
503390	100
504014	100
505871	100
506360	71
506360	75
506360	74
506360	80
507817	80
507817	68
507817	100
509797	65
509797	73
509901	80
509926	83
509926	100
510492	61
510492	58
510492	58
510492	80
511515	59
511515	80
511527	100
512180	80
512242	100
512805	85
512911	100
513733	71
513733	69
513733	80
514981	75
514981	100
515035	58
515105	85
515105	100
516495	80
516495	80
517853	80
518469	85
518469	89
518469	87
519012	77
519387	70
519387	100
521903	73
521903	80
522383	75
522383	80
523596	79
523596	100
525520	82
525520	83
525520	80
525679	65
526200	93
526200	95
527400	63
527659	47
527801	52
527801	67
528649	55
528649	59
529174	73
529174	75
529174	73
529452	87
529452	77
529452	65
529452	70
530153	78
530493	70
531427	68
531427	68
531573	53
532034	72
532500	33
532500	25
532534	64
532584	55
533365	70
533365	80
534051	80
534051	76
534051	82
534086	83
534086	79
534086	85
534744	80
534744	77
535012	71
535012	64
535012	63
535145	85
535145	87
535145	85
535278	79
535778	83
535807	67
535807	63
535807	60
535807	70
536188	78
536188	82
536188	78
536722	80
536722	75
536726	84
536726	95
536856	73
537081	74
537081	76
537081	66
537259	59
537259	58
537259	65
537844	75
537844	74
538942	82
538942	81
539253	80
539253	71
539253	72
539558	69
539558	68
539962	74
540530	64
540530	65
540530	63
540826	85
540826	74
541048	80
541048	82
541231	72
541231	71
541706	82
541763	75
541763	78
541763	73
541803	70
541803	70
541803	67
541832	73
541832	70
541832	69
541832	75
541973	82
541973	81
542260	70
542260	63
542543	46
542663	50
542745	69
542745	58
542745	50
542745	57
542991	50
542991	59
542991	47
543140	78
543630	65
543630	58
543630	55
543970	81
544017	62
544351	38
544351	37
544351	38
544351	37
544500	70
544500	68
544519	55
544519	52
544519	55
544519	48
544639	60
544639	60
544859	76
544859	66
544859	68
544978	72
544989	70
544989	62
544989	70
545041	70
545340	70
545803	64
546202	80
546500	78
546500	86
546533	67
546533	67
546533	80
546843	70
546843	68
546909	65
546958	86
546958	90
547165	85
547372	44
547409	65
547620	70
547620	64
548871	56
548871	55
548924	51
548981	63
549078	52
549078	37
549078	37
549078	39
549078	51
549204	40
549907	62
549907	59
550098	45
550098	45
550163	64
550322	52
550400	75
550400	59
550400	58
550428	87
550429	83
550429	84
550668	85
550668	85
550898	50
550898	56
550898	58
551032	85
551032	62
551032	75
551282	73
551282	70
551282	73
552110	74
552110	71
552110	71
552135	71
552718	74
552914	65
552914	49
552914	53
553729	70
553729	75
553729	90
553755	78
553800	60
553800	62
554068	59
554294	83
554551	75
554551	76
554830	85
554830	86
554898	62
554898	51
554898	56
555407	68
555407	49
555673	76
555673	80
555673	84
555930	75
555946	67
555946	66
555946	65
556860	68
556860	65
556860	65
556860	78
556987	54
556987	53
557145	91
557145	84
557145	91
557308	68
557308	78
557308	80
557351	65
557451	85
557451	90
557451	85
557827	67
557827	57
557935	82
558092	55
558092	44
558114	67
558114	71
558247	58
558247	61
558662	69
558769	73
558769	75
558769	75
558769	73
558809	87
558820	68
558820	80
558903	73
558903	80
558903	74
558955	62
558955	63
558955	62
558955	63
560012	69
560012	69
560208	82
561711	66
561711	62
561715	60
561715	43
561715	59
561715	50
562495	89
562495	86
562495	78
564450	64
564450	64
564450	63
565870	78
565870	86
565870	80
581129	65
593987	74
593987	73
593987	75
606143	78
852847	42
1098728	75
1098728	100
1401935	45
1414443	60
1472925	64
1472925	62
1472925	67
1472925	69
1472925	66
1620151	85
1776925	100
2062879	65
2062879	65
2062879	65
2084066	65
2084066	60
2084066	62
2205383	93
2205383	84
2205383	83
2205383	95
2205383	86
2205383	100
2207874	66
2207874	60
2243551	39
2243551	45
2243551	60
2244724	74
2244724	100
2342426	78
2342426	80
2344901	67
2344901	59
2358056	79
2358056	68
2358056	76
2395222	100
2404408	68
2411661	55
2411661	57
2436812	51
2444703	100
2456480	40
2456480	34
2461190	62
2469673	51
2469673	52
2469673	45
2470672	81
2470672	80
2470672	78
2470672	100
2521745	63
2521745	70
2521745	100
2535788	100
2540362	100
2560219	65
2574990	58
2574990	66
2574990	61
2578567	78
2578567	80
2595841	67
2595841	69
2602338	73
2608453	79
2608453	85
2608453	80
2624961	67
2624961	68
2624961	63
2664301	74
2669816	67
2669816	68
2669816	66
2676809	46
2676809	48
2694788	51",,,,장희훈,
테이블 2개,university_learning,평균 클릭 수 보다 높은 클릭 수의 학생들의 평균 성적을 구해줘,Find the average grade of students with a higher number of clicks than the average number of clicks.,,SELECT AVG(studentassessment.score) AS average_score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click > ( SELECT AVG(studentvle.sum_click) FROM studentvle );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,71.87692308,,,,장희훈,
테이블 2개,university_learning,평균 클릭 수 보다 낮은 클릭 수의 학생들의 평균 성적을 구해줘,Find the average grade of students with a lower number of clicks than the average number of clicks.,,SELECT AVG(studentassessment.score) AS average_score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click < ( SELECT AVG(studentvle.sum_click) FROM studentvle );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,69.55438312,,,,장희훈,
테이블 2개,university_learning,"0-35, 35-55, 55<= 의 연령대로 구분하고 각 연령대의 평균 성적을 구해줘","Divide into age groups '0-35', '35-55', '55<=' and calculate the average score for each age group.",,"SELECT CASE WHEN studentinfo.age_band <= 35 THEN '0-35' WHEN studentinfo.age_band <= 55 THEN '35-55' ELSE '55+' END AS age_group, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY age_group;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"35-55	73.57608695652173
0-35	72.1612738593447",,,,장희훈,
테이블 2개,university_learning,"점수가 90 이상인 학생이 몇 명인지 연령대 별로 나눠줘 ",How many students have a score of 90 or higher? Divide by age group.,,"SELECT studentinfo.age_band, COUNT(*) AS num_students FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentassessment.score >= 90 GROUP BY studentinfo.age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"55<=	8
0-35	574
35-55	422",,,,장희훈,
테이블 2개,university_learning,연령대 별 활동 유형을 구해줘,Find activity types by age group,,"SELECT studentinfo.age_band, vle.activity_type, COUNT(*) AS num_activities FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.age_band, vle.activity_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,18,,"35-55        forumng        23
35-55        oucontent        66
0-35        oucontent        50
35-55        subpage        24
0-35        forumng        30
0-35        resource        19
0-35        homepage        42
35-55        glossary        1
35-55        homepage        36
35-55        resource        13
0-35        subpage        16
55<=        homepage        4
35-55        url        2
55<=        forumng        3
55<=        oucontent        10
55<=        resource        4
0-35        dataplus        1
55<=        subpage        5",,,,장희훈,
테이블 2개,university_learning,35-55의 연령대에서 점수가 가장 높은 학생의 정보를 알고 싶어,I want to know information about students with the highest scores in the age group '35-55'.,,SELECT * FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.age_band = '35-55' ORDER BY studentassessment.score DESC LIMIT 1;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,14987	1436591	120	0	100	BBB	2013B	1436591	M	Scotland	A Level or Equivalent	10-20	35-55	0	60	Y	Distinction,,,,장희훈,
테이블 2개,university_learning,35-55 연령대의 총 클릭 수,Total number of clicks in the '35-55' age group,,SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.age_band = '35-55';,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,762,,,,장희훈,
테이블 2개,university_learning,최종 학력이 Post Graduate Qualification인 학생들을 연령대 별로 평균 점수를 알고 싶어,I want to know the average score by age group for students whose final educational level is 'Post Graduate Qualification'.,,"SELECT studentinfo.age_band, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.highest_education = 'Post Graduate Qualification' GROUP BY studentinfo.age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"55<=	84.2
35-55	76.36666666666666
0-35	78",,,,장희훈,
테이블 2개,university_learning,최종 학력이 Lower Than A Level인 학생을 연령대 별로 평균 점수 확인,Check the average score by age group for students with a final academic level of 'Lower Than A Level',,"SELECT studentinfo.age_band, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.highest_education = 'Lower Than A Level' GROUP BY studentinfo.age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	70.9989914271306
35-55	70.9951923076923
55<=	73.72727272727273",,,,장희훈,
테이블 2개,university_learning,"AAA수업을 듣는 학생 중 0-35세 이면서 평균 점수 이상인 학생을 찾아줘

",Find students taking ''AAA'' classes who are between the ages of 0 and 35 and have an average score or higher.,,SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.code_module = 'AAA' AND studentinfo.age_band = '0-35' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,123,,"45642
58316
58873
62155
70011
75255
102806
102952
107489
124064
129955
133922
141355
155984
158707
165226
185439
189879
228082
229361
236284
237274
240712
248270
248581
256815
275792
279572
281022
281077
281636
285315
287204
290757
292525
292775
298696
298838
302476
303985
304465
305386
307061
319047
323370
332884
333323
335764
342007
345068
345357
345440
345519
346025
358182
366483
369834
371710
375646
376439
377546
381642
382095
383254
383600
384203
393207
398349
401404
402727
404356
405088
411971
414117
420087
421455
429858
444677
476603
485962
500113
512460
518808
522482
527100
544103
548120
568601
570317
572652
588477
588775
596288
623840
628088
630142
676546
696073
696578
2010232
2011876
2155014
2268379
2339528
2363863
2364471
2367155
2376496
2391984
2411778
2437837
2479954
2486127
2494700
2498700
2518069
2578995
2594139
2599352
2645733
2666246
2685865
2691206",,,O,장희훈,
테이블 2개,university_learning, BBB 수업을 듣는 학생 중 35-55 연령대이면서 평균 점수 이상인 학생들의 평균 점수,The average score of students taking ''BBB'' classes who are in the '35-55' age range and have an above average score.,,SELECT AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.age_band = '35-55' AND studentinfo.code_module = 'BBB';,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,75.03892842,,,,장희훈,
테이블 2개,university_learning,CCC 수업을 듣는 학생 중 최종 결과가 pass인 학생의 활동 유형 횟수를 알고 싶어,I want to know the number of activity types among students taking ''CCC'' classes whose final result was a 'pass'.,,"SELECT vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation WHERE studentinfo.code_module = 'CCC' AND studentinfo.final_result = 'pass' GROUP BY vle.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,9,,"homepage	330
forumng	2970
quiz	5280
page	660
oucontent	15510
subpage	9240
resource	25740
oucollaborate	660
url	4290",,,,장희훈,
테이블 2개,university_learning,모듈 별 최종 결과가 fail인 학생의 활동 유형의 횟수를 알고 싶어,I want to know the number of student activity types for which the final result for each module was 'fail'.,,"SELECT studentinfo.code_module, vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation WHERE studentinfo.final_result = 'fail' GROUP BY studentinfo.code_module, vle.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,30,,"BBB        forumng        24515
BBB        glossary        2065
BBB        homepage        1691
BBB        oucontent        29213
BBB        quiz        8081
BBB        url        21643
BBB        subpage        52971
BBB        resource        347928
BBB        sharedsubpage        1317
BBB        ouelluminate        459
BBB        oucollaborate        2482
BBB        questionnaire        1496
CCC        homepage        266
CCC        forumng        2394
CCC        quiz        4256
CCC        page        532
CCC        oucontent        12502
CCC        subpage        7448
CCC        resource        20748
CCC        oucollaborate        532
CCC        url        3458
AAA        homepage        84
AAA        forumng        909
AAA        glossary        168
AAA        oucontent        5712
AAA        subpage        504
AAA        url        1590
AAA        resource        7902
AAA        dataplus        336
AAA        oucollaborate        168",,,,장희훈,
테이블 2개,university_learning,"지역 별 활동 유형의 횟수",Number of activity types by region,,"SELECT studentinfo.region, vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.region, vle.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,66,,"Yorkshire Region	oucontent	10
Yorkshire Region	resource	3
Yorkshire Region	homepage	6
Yorkshire Region	subpage	4
Yorkshire Region	forumng	1
West Midlands Region	oucontent	16
West Midlands Region	glossary	1
West Midlands Region	subpage	3
West Midlands Region	forumng	3
West Midlands Region	homepage	6
West Midlands Region	resource	1
Wales	subpage	3
Wales	resource	1
Wales	forumng	3
Wales	oucontent	3
South West Region	forumng	6
South West Region	oucontent	12
South West Region	subpage	5
South West Region	homepage	6
South West Region	resource	4
South West Region	dataplus	1
South Region	homepage	12
South Region	subpage	7
South Region	forumng	7
South Region	oucontent	13
South Region	resource	3
South East Region	oucontent	4
South East Region	subpage	3
South East Region	homepage	10
South East Region	resource	1
South East Region	url	1
South East Region	forumng	2
Scotland	forumng	4
Scotland	oucontent	11
Scotland	url	1
Scotland	resource	3
Scotland	subpage	2
Scotland	homepage	4
North Western Region	forumng	9
North Western Region	resource	6
North Western Region	oucontent	8
North Western Region	homepage	8
North Western Region	subpage	3
North Region	resource	3
North Region	oucontent	7
North Region	forumng	4
North Region	subpage	1
London Region	resource	2
London Region	homepage	9
London Region	oucontent	13
London Region	subpage	3
London Region	forumng	6
Ireland	homepage	3
Ireland	resource	1
Ireland	forumng	3
Ireland	oucontent	3
East Midlands Region	resource	5
East Midlands Region	subpage	4
East Midlands Region	oucontent	10
East Midlands Region	homepage	4
East Midlands Region	forumng	2
East Anglian Region	forumng	6
East Anglian Region	oucontent	16
East Anglian Region	homepage	14
East Anglian Region	subpage	7
East Anglian Region	resource	3",,,,장희훈,
테이블 3개,university_learning,"Ireland 지역의 성별과 활동 유형, 모듈 별 평균 점수
","Mean score by gender, activity type and module in 'Ireland' region",,"SELECT studentinfo.gender, vle.activity_type, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE studentinfo.region = 'Ireland' GROUP BY studentinfo.gender, vle.activity_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,24,,"M	homepage	71.36470588235294
M	forumng	73.03917910447761
M	glossary	70.76100628930817
M	oucontent	70.08943089430895
M	subpage	74.86133960047003
M	url	70.94828700711054
M	resource	72.81526733500418
M	dataplus	70.06756756756756
M	oucollaborate	70.06756756756756
F	homepage	75.10650887573965
F	forumng	75.04485776805252
F	glossary	74.88648648648649
F	oucontent	72.90894439967768
F	subpage	75.32569046378322
F	url	75.08099808061421
F	resource	75.2576450566399
F	dataplus	72.5625
F	oucollaborate	72.5625
F	quiz	75.37254901960785
F	sharedsubpage	75.37254901960785
F	ouelluminate	75.37254901960785
M	quiz	80.0909090909091
M	sharedsubpage	80.0909090909091
M	ouelluminate	80.0909090909091",,,,장희훈,
테이블 3개,university_learning,연령대별로 가장 많이 사용된 활동 유형과 해당 활동 유형을 사용하는 학생들의 비율을 계산,Calculate the most used activity types by age group and the percentage of students using those activity types,,"SELECT studentinfo.age_band, vle.activity_type, COUNT(*) AS activity_count, ROUND((COUNT(*) / subquery.total_students) * 100, 2) AS activity_percentage FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site JOIN (SELECT studentinfo_inner.age_band, vle_inner.activity_type, COUNT(*) AS activity_count, (SELECT COUNT(DISTINCT studentinfo_inner_inner.id_student) FROM studentinfo studentinfo_inner_inner JOIN studentvle studentvle_inner ON studentinfo_inner_inner.id_student = studentvle_inner.id_student JOIN vle vle_inner_inner ON studentvle_inner.id_site = vle_inner_inner.id_site WHERE studentinfo_inner_inner.age_band = studentinfo_inner.age_band) AS total_students FROM studentinfo studentinfo_inner JOIN studentvle ON studentinfo_inner.id_student = studentvle.id_student JOIN vle vle_inner ON studentvle.id_site = vle_inner.id_site GROUP BY studentinfo_inner.age_band, vle_inner.activity_type HAVING COUNT(*) = ( SELECT COUNT(*) FROM studentinfo studentinfo_inner_inner JOIN studentvle studentvle_inner ON studentinfo_inner_inner.id_student = studentvle_inner.id_student JOIN vle vle_inner_inner ON studentvle_inner.id_site = vle_inner_inner.id_site WHERE studentinfo_inner_inner.age_band = studentinfo_inner.age_band GROUP BY vle_inner_inner.activity_type ORDER BY COUNT(*) DESC LIMIT 1 )) AS subquery ON studentinfo.age_band = subquery.age_band AND vle.activity_type = subquery.activity_type GROUP BY studentinfo.age_band, vle.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"35-55	oucontent	66	40.00
0-35	oucontent	50	31.65
55<=	oucontent	10	38.46",,,,장희훈,
테이블 3개,university_learning,"평균 클릭 수 보다 많은 학생과 적은 학생으로 구분하고 많이 듣는 수업, 평균 점수를 각각 구해줘","Divide students into students with more clicks than the average and students with fewer clicks, and calculate the average score for the classes they take the most.",,"WITH AverageClicks AS ( SELECT AVG(sum_click) AS avg_clicks FROM studentvle ), StudentScores AS ( SELECT studentvle.id_student, studentinfo.code_module, AVG(studentassessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student JOIN studentinfo ON studentvle.id_student = studentinfo.id_student GROUP BY studentvle.id_student, studentinfo.code_module ), CourseClickCounts AS ( SELECT code_module, CASE WHEN avg_clicks > (SELECT avg_clicks FROM AverageClicks) THEN 'Above Average Clicks' ELSE 'Below Average Clicks' END AS click_category, COUNT(*) AS student_count FROM StudentScores GROUP BY code_module, click_category ) SELECT CourseClickCounts.code_module, CourseClickCounts.click_category, CourseClickCounts.student_count FROM CourseClickCounts ORDER BY CourseClickCounts.student_count DESC;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"AAA	Below Average Clicks	262
AAA	Above Average Clicks	77",,,,장희훈,
테이블 3개,university_learning,평가 방법이 TMA인 학생들의 정보,Information for students whose assessment method is 'TMA',,"SELECT studentAssessment.*, studentInfo.gender, studentInfo.region, studentInfo.highest_education, studentInfo.imd_band, studentInfo.age_band, studentInfo.num_of_prev_attempts, studentInfo.studied_credits, studentInfo.disability, studentInfo.final_result FROM studentAssessment JOIN assessments ON studentAssessment.id_assessment = assessments.id_assessment JOIN studentInfo ON studentAssessment.id_student = studentInfo.id_student WHERE assessments.assessment_type = 'TMA';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,9356,,"1752	11391	18	0	78	M	East Anglian Region	HE Qualification	90-100%	55<=	0	240	N	Pass
1752	28400	22	0	70	F	Scotland	HE Qualification	20-30%	35-55	0	60	N	Pass
1752	31604	17	0	72	F	South East Region	A Level or Equivalent	50-60%	35-55	0	60	N	Pass
1752	32885	26	0	69	F	West Midlands Region	Lower Than A Level	50-60%	0-35	0	60	N	Pass
1752	38053	19	0	79	M	Wales	A Level or Equivalent	80-90%	35-55	0	60	N	Pass
1752	45462	20	0	70	M	Scotland	HE Qualification	30-40%	0-35	0	60	N	Pass
1752	45642	18	0	72	F	North Western Region	A Level or Equivalent	90-100%	0-35	0	120	N	Pass
1752	52130	19	0	72	F	East Anglian Region	A Level or Equivalent	70-80%	0-35	0	90	N	Pass
1752	53025	9	0	71	M	North Region	Post Graduate Qualification		55<=	0	60	N	Pass
1752	57506	18	0	68	M	South Region	Lower Than A Level	70-80%	35-55	0	60	N	Pass
1752	58873	19	0	73	F	East Anglian Region	A Level or Equivalent	20-30%	0-35	0	60	N	Pass
1752	59185	18	0	67	M	East Anglian Region	Lower Than A Level	60-70%	35-55	0	60	N	Pass
1752	62155	17	0	73	F	North Western Region	HE Qualification	50-60%	0-35	0	60	N	Pass
1752	63400	19	0	83	M	Scotland	Lower Than A Level	40-50%	35-55	0	60	N	Pass
1752	65002	17	0	66	F	East Anglian Region	A Level or Equivalent	70-80%	0-35	0	60	N	Withdrawn
1752	70464	19	0	59	F	West Midlands Region	A Level or Equivalent	60-70%	35-55	0	60	N	Pass
1752	71361	19	0	82	M	Ireland	HE Qualification		35-55	0	60	N	Pass
1752	74372	22	0	60	M	East Anglian Region	A Level or Equivalent	10-20	35-55	0	150	N	Fail
1752	75091	18	0	67	M	South West Region	A Level or Equivalent	30-40%	35-55	0	60	N	Pass
1752	77367	18	0	73	M	East Midlands Region	A Level or Equivalent	30-40%	0-35	0	60	N	Pass
1752	91265	21	0	75	M	North Western Region	HE Qualification	0-10%	0-35	0	60	N	Pass
1752	94961	17	0	74	M	South Region	Lower Than A Level	70-80%	35-55	0	60	N	Withdrawn
1752	98094	18	0	62	M	Wales	Lower Than A Level	70-80%	35-55	0	60	N	Pass
1752	100893	17	0	63	M	Yorkshire Region	A Level or Equivalent	20-30%	0-35	0	60	N	Pass
1752	101781	16	0	84	M	South Region	Lower Than A Level	80-90%	35-55	0	60	N	Pass
1752	102806	19	0	80	M	North Western Region	A Level or Equivalent	30-40%	0-35	0	60	N	Pass
1752	102952	19	0	76	M	London Region	HE Qualification	60-70%	0-35	0	60	N	Pass
1752	104476	30	0	85	M	Ireland	Post Graduate Qualification		35-55	0	60	N	Pass
1752	106247	32	0	67	M	South Region	HE Qualification	80-90%	35-55	0	60	N	Withdrawn
1752	106577	18	0	57	M	East Midlands Region	Lower Than A Level	20-30%	0-35	0	60	N	Pass
1752	110175	18	0	66	M	East Anglian Region	HE Qualification	80-90%	35-55	0	60	N	Pass
1752	111717	10	0	80	F	East Anglian Region	HE Qualification	90-100%	35-55	0	60	N	Pass
1752	113295	19	0	81	M	Yorkshire Region	Lower Than A Level	60-70%	35-55	0	60	N	Pass
1752	114017	18	0	66	F	North Region	Post Graduate Qualification		35-55	0	60	N	Pass
1752	114999	18	0	74	M	Yorkshire Region	HE Qualification	60-70%	35-55	0	60	N	Pass
1752	116541	19	0	76	M	Wales	HE Qualification	0-10%	0-35	0	60	N	Pass
1752	116692	16	0	72	M	East Anglian Region	A Level or Equivalent	70-80%	35-55	0	60	N	Pass
1752	118983	19	0	73	M	East Midlands Region	HE Qualification	30-40%	0-35	0	120	N	Pass
1752	123044	25	0	75	M	South Region	A Level or Equivalent	40-50%	35-55	0	60	N	Pass
1752	127582	26	0	69	F	East Midlands Region	A Level or Equivalent	40-50%	0-35	0	180	N	Pass
1752	129955	18	0	85	M	West Midlands Region	A Level or Equivalent	50-60%	0-35	0	60	N	Withdrawn
1752	132976	18	0	63	F	East Anglian Region	Lower Than A Level	80-90%	35-55	0	120	N	Pass
1752	134143	18	0	87	F	South East Region	A Level or Equivalent	90-100%	35-55	0	60	N	Distinction
1752	135400	19	0	72	F	South East Region	Lower Than A Level	90-100%	35-55	0	60	Y	Withdrawn
1752	137873	15	0	72	M	South West Region	A Level or Equivalent	40-50%	35-55	0	60	N	Pass
1752	141355	19	0	77	F	East Midlands Region	A Level or Equivalent	30-40%	0-35	0	240	N	Pass
1752	141377	54	0	45	M	South West Region	A Level or Equivalent	90-100%	0-35	0	345	N	Withdrawn
1752	142326	17	0	65	F	North Region	A Level or Equivalent	50-60%	35-55	0	60	N	Pass
1752	144801	19	0	61	F	South Region	HE Qualification	80-90%	35-55	0	60	N	Pass
1752	145130	19	0	75	M	South West Region	HE Qualification	60-70%	0-35	0	120	N	Pass
1752	146188	19	0	52	F	West Midlands Region	A Level or Equivalent	20-30%	0-35	0	60	Y	Fail
1752	147756	18	0	77	M	North Region	Lower Than A Level	60-70%	0-35	0	120	N	Fail
1752	147793	32	0	52	F	North Region	Lower Than A Level	80-90%	0-35	0	90	N	Withdrawn
1752	148993	25	0	68	F	North Western Region	A Level or Equivalent	30-40%	35-55	0	60	Y	Withdrawn
1752	151358	17	0	54	F	London Region	A Level or Equivalent	80-90%	0-35	0	150	N	Pass
1752	155550	19	0	75	M	London Region	A Level or Equivalent	0-10%	35-55	0	420	N	Pass
1752	155854	18	0	82	F	East Midlands Region	A Level or Equivalent	20-30%	35-55	0	60	N	Pass
1752	155984	19	0	85	F	East Anglian Region	Lower Than A Level	70-80%	0-35	0	60	N	Withdrawn
1752	157568	18	0	79	F	South West Region	A Level or Equivalent	90-100%	0-35	0	60	N	Pass
1752	159954	19	0	65	M	East Midlands Region	A Level or Equivalent	40-50%	35-55	0	60	N	Withdrawn
1752	164259	18	0	82	M	Scotland	A Level or Equivalent	70-80%	0-35	0	60	N	Pass
1752	167906	19	0	60	F	Yorkshire Region	A Level or Equivalent	40-50%	35-55	0	60	N	Pass
1752	168936	19	0	76	F	West Midlands Region	Lower Than A Level	10-20	35-55	0	60	N	Pass
1752	172112	19	0	60	M	Ireland	HE Qualification		35-55	0	60	N	Pass
1752	172797	18	0	60	F	Ireland	A Level or Equivalent		35-55	0	60	N	Pass
1752	174782	17	0	83	M	East Anglian Region	HE Qualification	90-100%	55<=	0	60	N	Pass
1752	175392	16	0	85	M	North Region	HE Qualification		35-55	0	60	N	Pass
1752	175932	18	0	76	M	North Western Region	HE Qualification	70-80%	35-55	0	60	N	Pass
1752	175991	15	0	51	F	North Western Region	A Level or Equivalent	80-90%	0-35	0	180	N	Fail
1752	180753	18	0	61	M	South West Region	A Level or Equivalent	30-40%	0-35	0	120	N	Pass
1752	181316	20	0	76	F	South West Region	A Level or Equivalent	80-90%	35-55	0	120	N	Withdrawn
1752	183096	19	0	57	F	South West Region	A Level or Equivalent	60-70%	0-35	0	60	N	Pass
1752	183947	19	0	67	M	London Region	A Level or Equivalent	10-20	0-35	0	180	N	Pass
1752	184271	18	0	65	M	South West Region	HE Qualification	80-90%	35-55	0	170	N	Pass
1752	185439	24	0	74	M	London Region	HE Qualification	10-20	0-35	0	120	N	Fail
1752	186149	33	0	85	M	Scotland	HE Qualification	30-40%	35-55	0	60	N	Pass
1752	187100	17	0	88	M	South East Region	A Level or Equivalent	50-60%	35-55	0	60	N	Distinction
1752	188278	19	0	76	M	Yorkshire Region	A Level or Equivalent	70-80%	35-55	0	120	N	Withdrawn
1752	189879	19	0	76	M	Scotland	A Level or Equivalent	90-100%	0-35	0	120	N	Pass
1752	192183	19	0	75	F	South West Region	Lower Than A Level	90-100%	0-35	0	60	N	Pass
1752	200860	18	0	69	M	London Region	Lower Than A Level	50-60%	35-55	0	60	N	Pass
1752	202635	27	0	68	F	Wales	A Level or Equivalent	30-40%	0-35	0	60	N	Withdrawn
1752	205350	19	0	75	M	South West Region	HE Qualification	80-90%	35-55	0	60	N	Pass
1752	205719	19	0	67	M	East Anglian Region	A Level or Equivalent	40-50%	0-35	0	90	Y	Fail
1752	227499	19	0	84	F	London Region	A Level or Equivalent	10-20	35-55	0	60	N	Distinction
1752	227517	18	0	63	M	Ireland	HE Qualification		0-35	0	180	N	Fail
1752	228082	19	0	58	M	London Region	HE Qualification	60-70%	0-35	0	60	N	Pass
1752	228222	19	0	71	M	East Midlands Region	Lower Than A Level	50-60%	0-35	0	60	N	Pass
1752	229179	19	0	64	M	West Midlands Region	A Level or Equivalent	20-30%	0-35	0	60	N	Pass
1752	229361	18	0	81	M	East Midlands Region	A Level or Equivalent	50-60%	0-35	0	60	N	Pass
1752	231554	19	0	80	M	London Region	A Level or Equivalent	40-50%	0-35	0	240	N	Pass
1752	235507	18	0	65	M	Yorkshire Region	A Level or Equivalent	90-100%	0-35	0	240	N	Withdrawn
1752	236284	23	0	85	M	Scotland	Post Graduate Qualification	90-100%	0-35	0	60	N	Pass
1752	238007	19	0	83	M	South Region	HE Qualification	90-100%	55<=	0	60	N	Pass
1752	240712	19	0	82	M	London Region	HE Qualification	80-90%	0-35	0	80	N	Pass
1752	240884	18	0	74	M	South Region	A Level or Equivalent	90-100%	0-35	0	120	N	Pass
1752	241649	16	0	85	M	East Anglian Region	HE Qualification	90-100%	35-55	0	60	N	Pass
1752	241729	19	0	51	F	East Midlands Region	HE Qualification	60-70%	35-55	0	60	N	Fail
1752	242793	18	0	66	M	London Region	HE Qualification	20-30%	35-55	0	60	N	Pass
1752	246834	18	0	60	M	South West Region	A Level or Equivalent	90-100%	35-55	0	60	N	Pass
1752	248270	19	0	77	M	North Western Region	Lower Than A Level	20-30%	0-35	0	90	N	Pass
1752	255548	19	0	84	M	Wales	Lower Than A Level	20-30%	35-55	0	60	N	Pass
1752	256815	37	0	71	M	North Western Region	HE Qualification	10-20	0-35	0	120	N	Pass
1752	258392	18	0	58	F	West Midlands Region	Lower Than A Level	30-40%	0-35	0	60	N	Pass
1752	258894	19	0	58	F	East Anglian Region	Lower Than A Level	70-80%	35-55	0	60	N	Pass
1752	260355	21	0	55	F	London Region	A Level or Equivalent	80-90%	35-55	0	60	N	Withdrawn
1752	262011	18	0	60	M	East Midlands Region	A Level or Equivalent	20-30%	35-55	0	60	N	Pass
1752	262934	18	0	81	F	North Western Region	A Level or Equivalent	30-40%	35-55	0	60	N	Pass
1752	268073	18	0	64	M	East Anglian Region	A Level or Equivalent	10-20	35-55	0	90	N	Fail
1752	268733	29	0	51	M	East Anglian Region	A Level or Equivalent	30-40%	0-35	0	180	N	Withdrawn
1752	271251	19	0	80	M	Scotland	A Level or Equivalent	80-90%	35-55	0	60	N	Pass
1752	277880	20	0	70	F	South East Region	A Level or Equivalent	60-70%	0-35	0	60	N	Withdrawn
1752	279572	18	0	79	M	London Region	Lower Than A Level	40-50%	0-35	0	60	N	Distinction
1752	281022	18	0	70	F	Scotland	A Level or Equivalent	30-40%	0-35	0	150	N	Pass
1752	281250	18	0	63	M	Wales	Lower Than A Level	70-80%	35-55	0	60	N	Fail
1752	282821	19	0	61	M	South West Region	A Level or Equivalent	30-40%	35-55	0	60	N	Pass
1752	286488	18	0	55	M	South East Region	A Level or Equivalent	90-100%	35-55	0	60	N	Pass
1752	287548	21	0	69	M	East Anglian Region	A Level or Equivalent	90-100%	0-35	0	120	N	Pass
1752	290201	18	0	78	M	Wales	A Level or Equivalent	20-30%	0-35	0	60	N	Pass
1752	290757	18	0	75	M	North Western Region	A Level or Equivalent	30-40%	0-35	0	60	N	Pass
1752	291334	18	0	85	M	South East Region	A Level or Equivalent	90-100%	35-55	0	60	N	Distinction
1752	294570	16	0	72	M	South East Region	HE Qualification	90-100%	55<=	0	60	N	Pass
1752	294594	18	0	61	M	South East Region	A Level or Equivalent	90-100%	0-35	0	60	N	Pass
1752	295741	18	0	38	M	South East Region	A Level or Equivalent	40-50%	35-55	0	240	N	Fail
1752	296332	18	0	91	M	South Region	Post Graduate Qualification	90-100%	55<=	0	60	N	Distinction
1752	298696	19	0	77	F	South East Region	HE Qualification	80-90%	0-35	0	60	N	Pass
1752	300398	20	0	82	M	West Midlands Region	A Level or Equivalent	30-40%	35-55	0	60	N	Pass
1752	302302	18	0	58	F	East Anglian Region	A Level or Equivalent	40-50%	0-35	0	60	N	Fail
1752	305152	19	0	64	M	North Western Region	A Level or Equivalent	70-80%	0-35	0	60	N	Fail
1752	305386	19	0	75	M	West Midlands Region	A Level or Equivalent	70-80%	0-35	0	120	Y	Pass
1752	306107	18	0	73	M	West Midlands Region	A Level or Equivalent	50-60%	35-55	0	120	N	Pass
1752	306466	7	0	81	M	East Anglian Region	A Level or Equivalent	90-100%	35-55	0	60	N	Pass
1752	306897	16	0	72	F	London Region	A Level or Equivalent	10-20	0-35	0	60	N	Pass
1752	307061	19	0	82	F	East Midlands Region	HE Qualification	10-20	0-35	0	60	N	Pass
1752	307866	19	0	47	M	West Midlands Region	A Level or Equivalent	70-80%	0-35	0	60	N	Pass
1752	311917	18	0	55	M	South West Region	A Level or Equivalent	60-70%	55<=	0	120	N	Pass
1752	312537	19	0	88	M	South Region	Post Graduate Qualification	90-100%	55<=	0	60	N	Distinction
1752	312782	18	0	89	M	South Region	A Level or Equivalent	90-100%	0-35	0	60	N	Pass
1752	318933	16	0	70	F	East Anglian Region	HE Qualification	80-90%	0-35	0	120	N	Pass
1752	319047	26	0	77	F	East Midlands Region	A Level or Equivalent	50-60%	0-35	0	60	N	Pass
1752	321942	17	0	82	M	South Region	HE Qualification	90-100%	55<=	0	60	N	Pass
1752	324002	19	0	85	M	East Anglian Region	HE Qualification	40-50%	35-55	0	60	N	Pass
1752	324084	16	0	58	F	South West Region	A Level or Equivalent	10-20	35-55	0	60	N	Pass
1752	324282	18	0	38	M	South East Region	A Level or Equivalent	90-100%	0-35	0	120	N	Pass
1752	331358	18	0	84	F	South Region	HE Qualification	90-100%	35-55	0	60	N	Withdrawn
1752	332789	18	0	69	F	East Anglian Region	A Level or Equivalent	60-70%	35-55	0	60	N	Pass
1752	333059	19	0	72	M	Scotland	A Level or Equivalent	20-30%	0-35	0	120	N	Pass
1752	333323	19	0	77	M	Scotland	HE Qualification	80-90%	0-35	0	60	N	Pass
1752	334259	19	0	57	F	London Region	A Level or Equivalent	50-60%	0-35	0	150	N	Fail
1752	334333	18	0	36	F	South West Region	A Level or Equivalent	0-10%	0-35	0	240	Y	Withdrawn
1752	335764	19	0	86	F	South East Region	A Level or Equivalent	20-30%	0-35	0	60	N	Withdrawn
1752	336207	17	0	71	M	East Anglian Region	A Level or Equivalent	90-100%	0-35	0	120	N	Pass
1752	339972	16	0	68	M	North Region	A Level or Equivalent	80-90%	0-35	0	60	N	Pass
1752	341872	58	0	64	M	East Anglian Region	Lower Than A Level	40-50%	0-35	0	180	N	Fail
1752	342007	20	0	75	F	West Midlands Region	HE Qualification	70-80%	0-35	0	60	N	Withdrawn
1752	342514	12	0	68	M	Scotland	Lower Than A Level	50-60%	55<=	0	60	N	Pass
1752	342972	14	0	62	M	Yorkshire Region	HE Qualification	0-10%	0-35	0	60	N	Pass
1752	343446	19	0	74	M	Ireland	HE Qualification	70-80%	35-55	0	120	N	Pass
1752	344282	18	0	61	M	Yorkshire Region	A Level or Equivalent	10-20	0-35	0	60	N	Fail
1752	345068	19	0	70	M	East Anglian Region	A Level or Equivalent	60-70%	0-35	0	180	Y	Pass
1752	345357	16	0	75	M	Yorkshire Region	A Level or Equivalent	30-40%	0-35	0	60	N	Distinction
1752	346025	19	0	85	M	East Anglian Region	A Level or Equivalent	50-60%	0-35	0	120	N	Pass
1752	350188	19	0	75	M	North Western Region	HE Qualification	80-90%	35-55	0	60	N	Pass
1752	357668	19	0	49	M	Yorkshire Region	A Level or Equivalent	10-20	0-35	0	60	N	Fail
1752	364177	15	0	64	M	East Anglian Region	Lower Than A Level	70-80%	35-55	0	60	N	Fail
1752	365244	19	0	64	F	London Region	A Level or Equivalent	0-10%	0-35	0	120	N	Pass
1752	365642	15	0	68	M	East Anglian Region	Lower Than A Level	10-20	35-55	0	60	N	Pass
1752	366483	18	0	88	M	South West Region	HE Qualification	40-50%	0-35	0	60	N	Pass
1752	368194	19	0	54	F	South West Region	A Level or Equivalent	50-60%	0-35	0	120	Y	Pass
1752	368824	18	0	61	M	Wales	HE Qualification	50-60%	35-55	0	120	N	Fail
1752	368963	20	0	58	M	Yorkshire Region	Lower Than A Level	0-10%	0-35	0	180	N	Pass
1752	376439	19	0	86	M	North Region	HE Qualification		0-35	0	60	N	Distinction
1752	376581	18	0	86	F	South Region	A Level or Equivalent	80-90%	35-55	0	60	N	Pass
1752	380953	17	0	73	M	East Midlands Region	A Level or Equivalent	80-90%	0-35	0	60	N	Pass
1752	383254	18	0	74	M	Yorkshire Region	A Level or Equivalent	90-100%	0-35	0	120	N	Pass
1752	386924	26	0	59	M	Ireland	Lower Than A Level		0-35	0	120	N	Pass
1752	386952	19	0	67	M	Yorkshire Region	A Level or Equivalent	70-80%	0-35	0	120	N	Pass
1752	388722	21	0	65	F	London Region	Lower Than A Level	80-90%	35-55	0	60	N	Pass
1752	388885	19	0	51	M	South West Region	A Level or Equivalent	90-100%	35-55	0	60	N	Pass
1752	390890	19	0	75	M	Scotland	A Level or Equivalent	0-10%	0-35	0	90	N	Withdrawn
1752	392756	19	0	53	M	West Midlands Region	A Level or Equivalent	70-80%	0-35	0	120	N	Fail
1752	392931	29	0	65	F	North Western Region	A Level or Equivalent	50-60%	35-55	0	120	N	Pass
1752	393207	18	0	68	M	North Western Region	A Level or Equivalent	60-70%	0-35	0	60	N	Pass
1752	396872	19	0	63	M	Yorkshire Region	HE Qualification	50-60%	0-35	0	180	N	Pass
1752	398552	17	0	54	M	Yorkshire Region	Lower Than A Level	90-100%	0-35	0	240	N	Fail
1752	401869	19	0	55	F	South East Region	Lower Than A Level	80-90%	0-35	0	60	N	Pass
1752	402470	16	0	80	M	South West Region	Lower Than A Level	50-60%	35-55	0	60	N	Pass
1752	404804	18	0	52	M	Wales	Lower Than A Level	20-30%	35-55	0	120	N	Pass
1752	405088	19	0	85	M	North Region	A Level or Equivalent	20-30%	0-35	0	120	N	Pass
1752	414117	18	0	81	M	Yorkshire Region	A Level or Equivalent	50-60%	0-35	0	120	N	Pass
1752	415969	20	0	67	M	West Midlands Region	HE Qualification	0-10%	35-55	0	90	N	Withdrawn
1752	420087	20	0	80	M	Scotland	A Level or Equivalent	40-50%	0-35	0	60	Y	Fail
1752	429958	19	0	59	F	North Western Region	A Level or Equivalent	70-80%	0-35	0	60	N	Pass
1752	441018	18	0	54	F	South East Region	A Level or Equivalent	70-80%	0-35	0	150	N	Pass",,,,장희훈,
테이블 4개,university_learning,"35-55세 학생들의 가장 많이 듣는 수업, 그 수업의 점수, 지역, 사이트id","Most frequently taken classes by students aged '35-55', class scores, region, site ID",,"SELECT studentinfo.code_module, AVG(studentassessment.score) AS average_score, studentinfo.region, studentvle.id_site FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentinfo.age_band = '35-55' GROUP BY studentinfo.code_module, studentinfo.region, studentvle.id_site ORDER BY COUNT(*) DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,AAA	70.5625	South Region	546614,,,,장희훈,
테이블 5개,university_learning,"55세 이상의 학생들의 지역 별 평균 점수와 사이트 id, 활동유형","Average score, site ID, and activity type by region for students over 55 years of age",,"SELECT studentinfo.region, AVG(studentassessment.score) AS average_score, vle.id_site, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE studentinfo.age_band = '55<=' GROUP BY studentinfo.region, vle.id_site, vle.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,22,,"South Region	79.2	546614	homepage
South Region	83.6	546652	forumng
South Region	76.9	546667	oucontent
East Anglian Region	80.4	546986	resource
Scotland	77.2	546740	oucontent
North Region	63	546662	oucontent
South Region	67.42857142857143	546879	subpage
West Midlands Region	80.8	546662	oucontent
South Region	65	547013	resource
West Midlands Region	81.2	546668	oucontent
South East Region	72.2	546614	homepage
Yorkshire Region	81.2	546879	subpage
London Region	68.8	546662	oucontent
North Western Region	70	547020	resource
Scotland	82.6	546614	homepage
Scotland	67	546670	oucontent
Scotland	78.8	546714	oucontent
North Western Region	61.75	546652	forumng
South Region	80.8	546871	subpage
North Region	78	547013	resource
South West Region	59.2	546876	subpage
East Anglian Region	82	546669	oucontent",,,,장희훈,
테이블 5개,university_learning,"평가 유형이 CMA 인 학생을 연령 별로 나누어 인원 수, 평균 점수, 연령 별 가장 많은 활동 유형","Students with assessment type 'CMA' divided by age, number of students, average score, and most common activity types by age",,"SELECT si.age_band, COUNT(sa.id_student) AS student_count, AVG(sa.score) AS average_score, (SELECT vle.activity_type FROM studentvle sv JOIN vle ON sv.id_site = vle.id_site JOIN studentinfo sii ON sv.id_student = sii.id_student WHERE sii.age_band = si.age_band GROUP BY vle.activity_type ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_activity FROM studentassessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentinfo si ON sa.id_student = si.id_student WHERE a.assessment_type = 'CMA' GROUP BY si.age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;  CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"35-55	252	93.80952380952381	oucontent
0-35	392	93.6734693877551	oucontent",,,,장희훈,
테이블 6개,university_learning,"장애가 있는 학생과 없는 학생으로 나누어 가장 많이 듣는 수업, 평균 점수와 평균 이수 학점","Classes taken most often by students with and without disabilities, average score and average number of credits completed",,"SELECT si.disability, courses.code_module, COUNT(*) AS course_count, AVG(sa.score) AS average_score, AVG(si.studied_credits) AS average_credits FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentvle sv ON si.id_student = sv.id_student JOIN vle ON sv.id_site = vle.id_site JOIN courses ON si.code_module = courses.code_module GROUP BY si.disability, courses.code_module ORDER BY course_count DESC;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"N	AAA	1557	70.19228295819936	83.1150
Y	AAA	67	68.26865671641791	115.0746",,,,장희훈,
테이블 4개,university_learning,수업 모듈 및 프레젠테이션에서 학생 지역별로 등록된 학생 수와 평균 점수를 비교,Compare the number of students enrolled and average scores by student region for class modules and presentations,,"SELECT courses.code_module, courses.code_presentation, studentinfo.region, COUNT(studentregistration.id_student) AS num_students_registered, AVG(studentassessment.score) AS average_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentregistration ON studentinfo.code_module = studentregistration.code_module AND studentinfo.code_presentation = studentregistration.code_presentation AND studentinfo.id_student = studentregistration.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY courses.code_module, courses.code_presentation, studentinfo.region ORDER BY courses.code_module, courses.code_presentation, studentinfo.region;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,39,,"AAA	2013J	East Anglian Region	243	70.80246913580247
AAA	2013J	East Midlands Region	131	69.09160305343511
AAA	2013J	Ireland	54	71.96296296296296
AAA	2013J	London Region	165	68.0609756097561
AAA	2013J	North Region	73	69.21917808219177
AAA	2013J	North Western Region	152	74
AAA	2013J	Scotland	117	73.26495726495726
AAA	2013J	South East Region	124	70.6774193548387
AAA	2013J	South Region	195	69.16494845360825
AAA	2013J	South West Region	159	64.68553459119497
AAA	2013J	Wales	53	64.0754716981132
AAA	2013J	West Midlands Region	154	69.97402597402598
AAA	2013J	Yorkshire Region	137	66.01459854014598
AAA	2014J	East Anglian Region	195	71.37435897435897
AAA	2014J	East Midlands Region	106	68.70754716981132
AAA	2014J	Ireland	36	68.33333333333333
AAA	2014J	London Region	92	66.21739130434783
AAA	2014J	North Region	52	72.37254901960785
AAA	2014J	North Western Region	69	73.3623188405797
AAA	2014J	Scotland	139	73.67625899280576
AAA	2014J	South East Region	128	69.0703125
AAA	2014J	South Region	168	63.982142857142854
AAA	2014J	South West Region	156	61.916666666666664
AAA	2014J	Wales	54	74.88888888888889
AAA	2014J	West Midlands Region	111	68.96396396396396
AAA	2014J	Yorkshire Region	86	65.29069767441861
BBB	2013B	East Anglian Region	763	70.99475753604194
BBB	2013B	East Midlands Region	439	73.62870159453303
BBB	2013B	Ireland	164	75.6890243902439
BBB	2013B	London Region	677	68.05654761904762
BBB	2013B	North Region	280	73.5304659498208
BBB	2013B	North Western Region	450	71.95525727069351
BBB	2013B	Scotland	514	74.58284600389864
BBB	2013B	South East Region	550	78.59454545454545
BBB	2013B	South Region	607	76.64851485148515
BBB	2013B	South West Region	635	74.58201892744479
BBB	2013B	Wales	707	73.10623229461757
BBB	2013B	West Midlands Region	615	74.23980424143556
BBB	2013B	Yorkshire Region	450	74.98886414253897",,,,장희훈,
테이블 4개,university_learning,"imd_band 별로 학생 수와 비율, 평균 점수와 활동 유형을 알고 싶어","I want to know the number and ratio of students, average score, and activity type by imd_band.",,"SELECT studentinfo.imd_band, COUNT(studentinfo.id_student) AS student_count, COUNT(studentinfo.id_student) / (SELECT COUNT(*) FROM studentinfo) * 100 AS student_ratio, AVG(studentassessment.score) AS average_score, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.imd_band, vle.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,59,,"        10        0.1026        78.6        homepage
        10        0.1026        78.8        resource
        20        0.2052        67.25        forumng
        30        0.3078        70.96666666666667        oucontent
        5        0.0513        71.8        subpage
0-10%        5        0.0513        67        resource
0-10%        11        0.1129        63.27272727272727        homepage
0-10%        21        0.2155        61        oucontent
0-10%        18        0.1847        76.94444444444444        forumng
0-10%        10        0.1026        77.5        subpage
10-20        15        0.1539        67.4        resource
10-20        26        0.2667        64.57692307692308        oucontent
10-20        15        0.1539        79.26666666666667        subpage
10-20        10        0.1026        77.3        homepage
10-20        13        0.1334        52.23076923076923        forumng
20-30%        29        0.2975        70.41379310344827        forumng
20-30%        30        0.3078        71.03333333333333        resource
20-30%        57        0.5848        64.19298245614036        oucontent
20-30%        5        0.0513        71.4        subpage
20-30%        27        0.2770        73.48148148148148        homepage
30-40%        60        0.6156        72.9        oucontent
30-40%        33        0.3386        69.24242424242425        forumng
30-40%        25        0.2565        72.6        resource
30-40%        17        0.1744        65.70588235294117        subpage
30-40%        40        0.4104        67.575        homepage
40-50%        45        0.4617        72.46666666666667        oucontent
40-50%        23        0.2360        70.65217391304348        subpage
40-50%        40        0.4104        74.225        homepage
40-50%        10        0.1026        70.8        resource
40-50%        19        0.1949        74.73684210526316        forumng
50-60%        55        0.5643        65.32727272727273        oucontent
50-60%        17        0.1744        78.4375        resource
50-60%        31        0.3180        75.19354838709677        subpage
50-60%        5        0.0513        89.2        url
50-60%        29        0.2975        72.41379310344827        homepage
50-60%        7        0.0718        59.285714285714285        forumng
60-70%        45        0.4617        69.68888888888888        oucontent
60-70%        5        0.0513        55.6        glossary
60-70%        14        0.1436        72        resource
60-70%        30        0.3078        78.16666666666667        homepage
60-70%        16        0.1642        70.9375        forumng
60-70%        15        0.1539        67.86666666666666        subpage
70-80%        66        0.6771        71.87878787878788        homepage
70-80%        24        0.2462        70.29166666666667        subpage
70-80%        16        0.1642        69.1875        resource
70-80%        55        0.5643        64.43636363636364        oucontent
70-80%        14        0.1436        53        forumng
80-90%        24        0.2462        66.875        subpage
80-90%        49        0.5027        69.40816326530613        homepage
80-90%        87        0.8926        66.46511627906976        oucontent
80-90%        5        0.0513        76.4        url
80-90%        15        0.1539        68.8        resource
80-90%        31        0.3180        69.64516129032258        forumng
80-90%        2        0.0205        40.5        dataplus
90-100%        94        0.9644        72.44680851063829        oucontent
90-100%        35        0.3591        72.37142857142857        subpage
90-100%        21        0.2155        67.38095238095238        resource
90-100%        72        0.7387        71.625        homepage
90-100%        66        0.6771        74.06060606060606        forumng",,,,장희훈,
테이블 5개,university_learning,"최고 학력 별 학생 수와 평균 점수, 가장 많이 한 활동 유형","Number of students by highest academic level, average score, and type of activity most engaged in",,"SELECT external_studentinfo.highest_education, COUNT(*) AS num_students, AVG(external_studentassessment.score) AS average_score, vle.activity_type AS most_common_activity FROM studentinfo AS external_studentinfo JOIN studentassessment AS external_studentassessment ON external_studentinfo.id_student = external_studentassessment.id_student JOIN assessments AS external_assessments ON external_studentassessment.id_assessment = external_assessments.id_assessment JOIN studentvle AS external_studentvle ON external_studentinfo.id_student = external_studentvle.id_student JOIN vle ON external_studentvle.id_site = vle.id_site GROUP BY external_studentinfo.highest_education, vle.activity_type HAVING COUNT(*) = (SELECT COUNT(*) AS activity_count FROM studentinfo AS sub_studentinfo JOIN studentassessment AS sub_studentassessment ON sub_studentinfo.id_student = sub_studentassessment.id_student JOIN assessments AS sub_assessments ON sub_studentassessment.id_assessment = sub_assessments.id_assessment JOIN studentvle AS sub_studentvle ON sub_studentinfo.id_student = sub_studentvle.id_student JOIN vle AS sub_vle ON sub_studentvle.id_site = sub_vle.id_site WHERE sub_studentinfo.highest_education = external_studentinfo.highest_education GROUP BY sub_studentinfo.highest_education, sub_vle.activity_type ORDER BY activity_count DESC LIMIT 1);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,5,,"A Level or Equivalent	252	67.9003984063745	oucontent
Lower Than A Level	118	65.34745762711864	oucontent
HE Qualification	195	69.78461538461538	oucontent
Post Graduate Qualification	10	78.8	resource
Post Graduate Qualification	10	82	oucontent",,,,장희훈,
테이블 4개,university_learning,이수 학점이 100 이상인 학생과 100 이하인 학생을 구분하고 각각의 평균 점수와 활동 유형을 구해줘,Distinguish between students with completed credits of 100 or more and students with credits less than 100 and calculate the average score and activity type for each.,,"SELECT CASE WHEN external_studentinfo.studied_credits >= 100 THEN '100 이상' ELSE '100 미만' END AS credit_group, AVG(external_studentassessment.score) AS average_score, SUBSTRING_INDEX(GROUP_CONCAT(sub_v.activity_type ORDER BY activity_count DESC), ',', 1) AS most_common_activity FROM studentinfo AS external_studentinfo JOIN studentassessment AS external_studentassessment ON external_studentinfo.id_student = external_studentassessment.id_student JOIN assessments AS external_assessments ON external_studentassessment.id_assessment = external_assessments.id_assessment JOIN (SELECT code_module, code_presentation, activity_type, COUNT(*) AS activity_count FROM vle WHERE activity_type IS NOT NULL GROUP BY code_module, code_presentation, activity_type) AS sub_v ON external_assessments.code_module = sub_v.code_module AND external_assessments.code_presentation = sub_v.code_presentation GROUP BY CASE WHEN external_studentinfo.studied_credits >= 100 THEN '100 이상' ELSE '100 미만' END;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"100 미만	71.9504040807547	resource
100 이상	72.99024637405789	resource",,,,장희훈,
테이블 4개,university_learning,"평가유형이 TMA인 학생 중 최종 결과가 Pass인 학생을 찾고 각 학생들의 클릭 수를 구해줘","Among students whose evaluation type is 'TMA', find students whose final result is ''Pass'' and calculate the number of clicks for each student.",,"SELECT studentassessment.id_student, SUM(studentvle.sum_click) AS total_clicks FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentvle ON studentassessment.id_student = studentvle.id_student AND assessments.code_module = studentvle.code_module AND assessments.code_presentation = studentvle.code_presentation WHERE assessments.assessment_type = 'TMA' AND studentinfo.final_result = 'Pass' GROUP BY studentassessment.id_student;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,243,,"28400	20
31604	5
32885	25
38053	35
45462	5
58873	40
59185	70
62155	5
63400	110
70464	10
71361	125
75091	60
57506	15
77367	5
98094	10
101781	25
102806	15
106577	5
104476	5
110175	20
114999	15
111717	87
116692	80
127582	5
132976	25
137873	5
118983	5
123044	10
144801	15
145130	5
238007	55
241649	20
248270	20
255548	5
258392	15
256815	10
258894	5
242793	5
246834	5
262934	5
271251	5
282821	5
298696	5
300398	15
287548	5
306897	30
306466	100
307866	12
312782	5
155854	5
155550	5
164259	5
167906	60
180753	85
184271	5
186149	5
183096	165
192183	5
172797	25
172112	15
175392	15
174782	5
175932	5
200860	20
205350	55
229361	15
228082	15
318933	40
319047	70
321942	25
324084	5
324282	5
333323	5
336207	5
342514	35
342972	25
343446	20
350188	20
365642	15
368963	25
380953	5
386952	5
392931	5
393207	5
396872	10
388722	10
388885	5
401869	15
405088	5
404804	25
414117	20
489455	10
441018	40
512460	5
588775	10
544103	5
550383	15
749412	45
704156	20
949618	30
958987	35
978739	45
971027	5
968578	65
1729319	45
1765788	60
1847830	20
1860318	5
1889511	15
1894188	5
1801641	5
1938355	20
1976139	24
2550279	10
2551220	10
2555340	5
2557283	35
2559575	5
2574583	5
2574528	10
2598871	20
2599352	10
2600688	5
2606098	15
2671132	145
2678643	15
2685865	110
2617002	10
2688067	5
2578995	20
2639641	15
2639449	4
2641155	5
2643002	5
2051699	5
2104505	5
2143752	75
2146792	5
2080474	10
2083877	10
2171627	5
2182846	5
2197016	10
2194100	5
1035023	5
1105478	45
1488959	5
1518989	5
1402638	5
1640609	5
2229865	45
2278464	30
2293923	5
2364471	50
2369266	115
2367155	15
2376496	55
2412967	30
2449878	15
2479954	15
2481901	20
2482700	5
2498700	5
2460080	5
2457256	5
2458355	25
2521459	10
2523736	8
2529279	5
2532302	5
2437837	10
2516503	5
2518069	5
2566592	10
2666246	10
2664024	5
2639540	5
2694424	25
2698257	20
2586560	15
2594139	90
1746134	10
1942396	80
1801229	5
2268379	20
2011876	5
1465690	25
572652	10
365244	5
368194	15
240712	5
100893	5
45642	15
113295	10
114017	10
141355	15
324002	5
346025	5
290757	5
307061	15
231554	16
157568	5
402470	15
508818	20
189879	5
91265	5
290201	20
281022	5
333059	5
905042	20
2691244	4
2155014	15
1889577	15
441888	10
383254	5
53025	5
262011	10
294570	5
286488	10
591774	10
2012966	20
2486127	15
229179	160
332789	5
240884	10
142326	5
305386	5
311917	15
11391	80
2208424	45
2613116	30
2566163	25
2562034	20
2645733	70
2650282	5
580389	5
345068	5
52130	10
102952	5
183947	5
339972	10
366483	5
498857	25",,,,장희훈,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생의 평균 학습 시간과 모듈 정보를 결합하여 분석하고 모듈, 프레젠테이션, 평균 학습 시간을 조회","Analyze the average learning time of students registered for each module presentation by combining the module information and view the module, presentation, and average learning time",,"SELECT courses.code_module, courses.code_presentation, AVG(DATEDIFF(studentvle.date, studentregistration.date_registration)) AS avg_learning_time FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY courses.code_module, courses.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,22,,"AAA	2013J	
AAA	2014J	
BBB	2013B	
BBB	2013J	
BBB	2014B	
BBB	2014J	",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생의 평균 상호 작용 횟수와 각 모듈 프레젠테이션의 길이를 모듈 정보와 결합하여 분석하고 모듈, 프레젠테이션, 평균 상호 작용 횟수, 프레젠테이션 길이를 조회","Analyze the average number of interactions of students enrolled in each module presentation and the length of each module presentation by combining them with module information and query the module, presentation, average number of interactions, and length of presentation.",,"SELECT courses.code_module, courses.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, courses.module_presentation_length FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY courses.code_module, courses.code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,22,,"AAA	2013J		268
AAA	2014J		269
BBB	2013B	2.4000	240
BBB	2013J		268
BBB	2014B		234",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생의 최고 점수와 모듈 정보를 결합하여 분석하고 모듈, 프레젠테이션, 최고 점수를 조회","Combine and analyze module information with the highest scores of students registered for each module presentation and view modules, presentations, and highest scores",,"SELECT courses.code_module, courses.code_presentation, MAX(studentAssessment.score) AS max_score FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student GROUP BY courses.code_module, courses.code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,22,,"AAA	2013J	
AAA	2014J	
BBB	2013B	
BBB	2013J	
BBB	2014B	",,,,,
테이블 3개,university_learning,"각 학생의 평균 점수와 VLE 자료를 이용한 평균 상호 작용 횟수를 학생 정보와 결합하여 분석하고 학생, 평균 점수, 평균 상호작용 횟수를 조회","Analyze each student's average score and the average number of interactions using VLE materials by combining them with student information and view the student, average score, and average number of interactions.",,"SELECT studentInfo.id_student, AVG(studentAssessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_interaction_count FROM studentInfo LEFT JOIN studentAssessment ON studentInfo.id_student = studentAssessment.id_student LEFT JOIN studentvle ON studentInfo.id_student = studentvle.id_student GROUP BY studentInfo.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,9747,,"6516	61.8	
11391	82	16.0000
23629	76.66666666666667	
23632		
23798		
24734	46.8	
25107	64.42857142857143	
25629		
25997		
26192	86.2	
26315		
26677		
26734		
27457		
27759		
27891	73.75	
28061	77.6	
28400	66.4	4.0000
28418		
29144	69.83333333333333	
29764		
29820		
30091		
30268		3.0000
31014		
31600	54.8	
31604	76	1.0000
31663	70.28571428571429	
31849		
32327		
32885	54.4	5.0000
32930		
33666	78.66666666666667	
34229	82	
34353	84.33333333333333	
34431	80	
34662		
34694		
34756	67.33333333333333	
34863	67.57142857142857	
35812	71	
37622		
38053	68	7.0000
38234		
38711		
38941		
39208		
39655	82	
40333		
40604		
41547		
42638		
45462	68	1.0000
45642	72.4	3.0000   ...",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 여학생의 평균 점수와 여학생이 참여한 VLE 자료의 평균 상호 작용 횟수를 분석하고 모듈, 프레젠테이션, 평균점수, 평균 상호작용 수를 조회","Analyze the average score of female students enrolled in each module presentation and the average number of interactions with the VLE materials in which female students participated, and view the module, presentation, average score, and average number of interactions.",,"SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_interaction_count FROM studentregistration INNER JOIN studentInfo ON studentregistration.id_student = studentInfo.id_student AND studentInfo.gender = 'F' LEFT JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,7,,"AAA	2013J		
AAA	2014J		
BBB	2013B		2.4000
BBB	2013J		
BBB	2014B		
BBB	2014J		
CCC	2014B		",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 여학생의 평균 점수와 남학생의 평균 점수를 비교하여 분석하고 모듈, 프레젠테이션, 여학생의 평균점수, 남학생의 평균점수를 조회","Among students registered for each module presentation, compare and analyze the average score of female students and the average score of male students, and view the module, presentation, average score of female students, and average score of male students.",,"SELECT sr.code_module, sr.code_presentation, AVG(CASE WHEN si.gender = 'F' THEN sa.score END) AS avg_female_score, AVG(CASE WHEN si.gender = 'M' THEN sa.score END) AS avg_male_score FROM studentregistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,7,,"BBB	2013B	73.54237007613374	
BBB	2013J		
AAA	2014J	67.09966777408638	
BBB	2014B		
BBB	2014J		
AAA	2013J	68.50302114803625	4.5786
CCC	2014B		",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 상호 작용 횟수가 평균 이상인 학생의 평균 점수를 분석하고 모듈, 프레젠테이션, 평균 점수를 조회","Among students enrolled in each module presentation, we analyze the average score of students whose number of interactions using VLE materials is above average and view the module, presentation, and average score.",,"SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN ( SELECT id_student, AVG(sum_click) AS avg_interaction_count FROM studentvle GROUP BY id_student HAVING AVG(sum_click) > (SELECT AVG(sum_click) FROM studentvle) ) AS high_interaction ON studentregistration.id_student = high_interaction.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	2013J	71.87692307692308,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 모든 평가 유형에 참여한 학생의 수를 분석하고 모듈, 프레젠테이션, 학생수를 조회","Analyze the number of students enrolled in each module presentation who participated in all assessment types and view the number of modules, presentations, and students",,"SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(DISTINCT studentregistration.id_student) AS num_students_with_all_assessment_types FROM studentregistration INNER JOIN assessments ON studentregistration.code_module = assessments.code_module AND studentregistration.code_presentation = assessments.code_presentation LEFT JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student AND assessments.id_assessment = studentAssessment.id_assessment GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,7,,"AAA        2013J        383
AAA        2014J        329
BBB        2013B        1767
BBB        2013J        2193
BBB        2014B        1521
BBB        2014J        2211
CCC        2014B        1343",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 평균적으로 가장 높은 평가 점수를 받은 학생의 성적 밴드(IMD) 분포를 분석하고 모듈, 프레젠테이션, 성적밴드, 학생수를 조회","Analyze the grade band (IMD) distribution of the student who received the highest evaluation score on average among students registered for each module presentation and view the module, presentation, grade band, and number of students.",,"SELECT studentregistration.code_module, studentregistration.code_presentation, imd_band, COUNT(studentregistration.id_student) AS num_students FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN studentInfo ON studentregistration.id_student = studentInfo.id_student WHERE studentAssessment.score = ( SELECT MAX(score) FROM studentAssessment WHERE id_student = studentregistration.id_student ) GROUP BY studentregistration.code_module, studentregistration.code_presentation, imd_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,33,,"AAA	2013J	20-30%	34
AAA	2013J	80-90%	55
AAA	2013J	40-50%	41
AAA	2013J	30-40%	44
AAA	2013J	0-10%	20
AAA	2013J	70-80%	45
AAA	2013J	NULL	17
AAA	2013J	60-70%	30
AAA	2013J	50-60%	42
AAA	2013J	90-100%	80
AAA	2013J	10월 20일	25
AAA	2014J	70-80%	62
AAA	2014J	20-30%	30
AAA	2014J	50-60%	29
AAA	2014J	90-100%	41
AAA	2014J	80-90%	33
AAA	2014J	60-70%	37
AAA	2014J	40-50%	41
AAA	2014J	30-40%	29
AAA	2014J	10월 20일	21
AAA	2014J	0-10%	15
AAA	2014J	NULL	11
BBB	2013B	80-90%	105
BBB	2013B	10월 20일	183
BBB	2013B	70-80%	125
BBB	2013B	30-40%	165
BBB	2013B	0-10%	179
BBB	2013B	50-60%	136
BBB	2013B	90-100%	70
BBB	2013B	40-50%	167",,,,,
테이블 1개,university_learning,10월 프레젠테이션에 제공되는 모듈과 프레젠테이션 길이를 조회,Check the modules and presentation length provided for the October presentation.,,"SELECT courses.code_module, courses.module_presentation_length FROM courses WHERE courses.code_presentation LIKE '%B' OR courses.code_presentation LIKE '%J';","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,22,,"AAA	268
AAA	269
BBB	240
BBB	268
BBB	234
BBB	262
CCC	241
CCC	269
DDD	240
DDD	261
DDD	241
DDD	262
EEE	268
EEE	241
EEE	269
FFF	240
FFF	268
FFF	241
FFF	269
GGG	261
GGG	241
GGG	269",,,,,
테이블 2개,university_learning,"성별 VLE 자료 사용 분석하고 성별, VLE 자료 사용횟수를 조회",Analyze gender VLE data usage and check gender and VLE data usage frequency,,"SELECT studentinfo.gender, COUNT(studentvle.id_site) AS total_interactions FROM studentvle INNER JOIN studentinfo ON studentvle.id_student = studentinfo.id_student GROUP BY studentinfo.gender ORDER BY total_interactions DESC;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M	213
F	136",,,,,
테이블 2개,university_learning,"특정 평가 유형의 평균 점수 및 합격 비율 계산하고 평가 유형, 평균 점수, 40점 이상 학생 수, 총 시도 횟수를 조회 ","Calculate the average score and pass rate for a specific assessment type and view the assessment type, average score, number of students scoring above 40, and total number of attempts.",,"SELECT assessments.assessment_type, AVG(studentassessment.score) AS avg_score, COUNT(CASE WHEN studentassessment.score >= 40 THEN 1 ELSE NULL END) AS pass_count, COUNT(*) AS total_attempts FROM studentassessment INNER JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment GROUP BY assessments.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"TMA	70.70172432258755	9059	9356
CMA	93.72670807453416	641	644",,,,,
테이블 2개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생 중 최근에 등록한 학생의 평균 상호 작용 횟수와 최근 제출일 사이의 상관 관계를 분석하고 모듈, 프레젠테이션, 평균 상호 작용 횟수, 최근 제출일을 조회","Among students registered for each module presentation who used VLE materials, we analyzed the correlation between the average number of interactions and the most recent submission date for recently registered students and looked up the module, presentation, average number of interactions, and most recent submission date.",,"SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, MAX(studentvle.date) AS recent_interaction_date FROM studentregistration JOIN studentvle ON studentregistration.id_student = studentvle.id_student JOIN ( SELECT id_student, MAX(date) AS max_date FROM studentvle GROUP BY id_student ) AS sq ON studentvle.id_student = sq.id_student AND studentvle.date = sq.max_date GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA        2013J        4.3352        -2,,,,,
테이블 2개,university_learning,"특정 기간 동안 VLE 자료 사용량이 가장 높은 학생 10위를 대상으로 학생, 모듈, 프레젠테이션, 상호작용횟수를 조회","Check the number of students, modules, presentations, and interactions for the top 10 students with the highest usage of VLE materials during a specific period.",,"WITH student_interactions AS ( SELECT studentvle.id_student, COUNT(*) AS interaction_count FROM studentvle GROUP BY studentvle.id_student ) SELECT studentinfo.id_student, studentinfo.code_module, studentinfo.code_presentation, interaction_count FROM student_interactions INNER JOIN studentinfo ON student_interactions.id_student = studentinfo.id_student WHERE interaction_count >= ( SELECT MIN(interaction_count) FROM student_interactions ORDER BY interaction_count DESC LIMIT 10 ) ORDER BY interaction_count DESC;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,349,,"11391	AAA	2013J	1
28400	AAA	2013J	1
30268	AAA	2013J	1
31604	AAA	2013J	1
32885	AAA	2013J	1
38053	AAA	2013J	1
45462	AAA	2013J	1
45642	AAA	2013J	1
52130	AAA	2013J	1
53025	AAA	2013J	1
57506	AAA	2013J	1
58873	AAA	2013J	1
59185	AAA	2013J	1
62155	AAA	2013J	1
63400	AAA	2013J	1
65002	AAA	2013J	1
70464	AAA	2013J	1
71361	AAA	2013J	1
74372	AAA	2013J	1
75091	AAA	2013J	1
77367	AAA	2013J	1
91265	AAA	2013J	1
94961	AAA	2013J	1
98094	AAA	2013J	1
100893	AAA	2013J	1
101781	AAA	2013J	1
102806	AAA	2013J	1
102952	AAA	2013J	1
104476	AAA	2013J	1
106577	AAA	2013J	1
110175	AAA	2013J	1
111717	AAA	2013J	1
113295	AAA	2013J	1
114017	AAA	2013J	1
114999	AAA	2013J	1
116692	AAA	2013J	1
118983	AAA	2013J	1
123044	AAA	2013J	1
127582	AAA	2013J	1
129955	AAA	2013J	1
132976	AAA	2013J	1
134143	AAA	2013J	1
135335	AAA	2013J	1
137873	AAA	2013J	1
141355	AAA	2013J	1
142326	AAA	2013J	1
144801	AAA	2013J	1
145130	AAA	2013J	1
146188	AAA	2013J	1
147756	AAA	2013J	1
147793	AAA	2013J	1
148993	AAA	2013J	1
155550	AAA	2013J	1
155854	AAA	2013J	1
155984	AAA	2013J	1
157568	AAA	2013J	1
159954	AAA	2013J	1
164259	AAA	2013J	1
167906	AAA	2013J	1
172112	AAA	2013J	1
172797	AAA	2013J	1
174782	AAA	2013J	1
175392	AAA	2013J	1
175932	AAA	2013J	1
175991	AAA	2013J	1
180753	AAA	2013J	1
181316	AAA	2013J	1
183096	AAA	2013J	1
183947	AAA	2013J	1
184271	AAA	2013J	1
185439	AAA	2013J	1
186149	AAA	2013J	1
187100	AAA	2013J	1
188278	AAA	2013J	1
189879	AAA	2013J	1
192183	AAA	2013J	1
195262	AAA	2013J	1
200860	AAA	2013J	1
202635	AAA	2013J	1
205350	AAA	2013J	1
227499	AAA	2013J	1
227517	AAA	2013J	1
228082	AAA	2013J	1
229179	AAA	2013J	1
229361	AAA	2013J	1
231554	AAA	2013J	1
235507	AAA	2013J	1
238007	AAA	2013J	1
240712	AAA	2013J	1
240884	AAA	2013J	1
241649	AAA	2013J	1
241729	AAA	2013J	1
242793	AAA	2013J	1
246834	AAA	2013J	1
248270	AAA	2013J	1
255548	AAA	2013J	1
256815	AAA	2013J	1
258392	AAA	2013J	1
258894	AAA	2013J	1
260355	AAA	2013J	1
262011	AAA	2013J	1
262934	AAA	2013J	1
268073	AAA	2013J	1
268733	AAA	2013J	1
271251	AAA	2013J	1
277880	AAA	2013J	1
279572	AAA	2013J	1
281022	AAA	2013J	1
281250	AAA	2013J	1
281589	AAA	2013J	1
282821	AAA	2013J	1
286488	AAA	2013J	1
287548	AAA	2013J	1
290201	AAA	2013J	1
290757	AAA	2013J	1
291334	AAA	2013J	1
294570	AAA	2013J	1
295741	AAA	2013J	1
296332	AAA	2013J	1
298696	AAA	2013J	1
300398	AAA	2013J	1
302302	AAA	2013J	1
305152	AAA	2013J	1
305386	AAA	2013J	1
305539	AAA	2013J	1
306466	AAA	2013J	1
306897	AAA	2013J	1
307061	AAA	2013J	1
307866	AAA	2013J	1
311917	AAA	2013J	1
312537	AAA	2013J	1
312782	AAA	2013J	1
318933	AAA	2013J	1
319047	AAA	2013J	1
321942	AAA	2013J	1
324002	AAA	2013J	1
324084	AAA	2013J	1
324282	AAA	2013J	1
331358	AAA	2013J	1
332789	AAA	2013J	1
333059	AAA	2013J	1
333323	AAA	2013J	1
334259	AAA	2013J	1
334333	AAA	2013J	1
335764	AAA	2013J	1
336207	AAA	2013J	1
339972	AAA	2013J	1
342007	AAA	2013J	1
342514	AAA	2013J	1
342972	AAA	2013J	1
343446	AAA	2013J	1
345068	AAA	2013J	1
345357	AAA	2013J	1
346025	AAA	2013J	1
350188	AAA	2013J	1
354858	AAA	2013J	1
364177	AAA	2013J	1
365244	AAA	2013J	1
365642	AAA	2013J	1
366483	AAA	2013J	1
368194	AAA	2013J	1
368824	AAA	2013J	1
368963	AAA	2013J	1
376439	AAA	2013J	1
380953	AAA	2013J	1
383254	AAA	2013J	1
386952	AAA	2013J	1
388722	AAA	2013J	1
388885	AAA	2013J	1
390890	AAA	2013J	1
392756	AAA	2013J	1
392931	AAA	2013J	1
393207	AAA	2013J	1
396872	AAA	2013J	1
398552	AAA	2013J	1
401869	AAA	2013J	1
402470	AAA	2013J	1
404804	AAA	2013J	1
405088	AAA	2013J	1
414117	AAA	2013J	1
415969	AAA	2013J	1
441018	AAA	2013J	1
441888	AAA	2013J	1
442442	AAA	2013J	1
444677	AAA	2013J	1
470588	AAA	2013J	1
489455	AAA	2013J	1
494424	AAA	2013J	1
498857	AAA	2013J	1
508818	AAA	2013J	1
512460	AAA	2013J	1
544103	AAA	2013J	1
550383	AAA	2013J	1
564450	AAA	2013J	1
572652	AAA	2013J	1
580389	AAA	2013J	1
588775	AAA	2013J	1
591774	AAA	2013J	1
603861	AAA	2013J	1
606143	AAA	2013J	1
704156	AAA	2013J	1
705379	AAA	2013J	1
721259	AAA	2013J	1
749412	AAA	2013J	1
760729	AAA	2013J	1
905042	AAA	2013J	1
949618	AAA	2013J	1
958987	AAA	2013J	1
968578	AAA	2013J	1
969076	AAA	2013J	1
971027	AAA	2013J	1
978739	AAA	2013J	1
1035023	AAA	2013J	1
1105478	AAA	2013J	1
1352868	AAA	2013J	1
1401935	AAA	2013J	1
1402638	AAA	2013J	1
1414443	AAA	2013J	1
1456619	AAA	2013J	1
1465690	AAA	2013J	1
1488959	AAA	2013J	1
1518989	AAA	2013J	1
1620151	AAA	2013J	1
1626710	AAA	2013J	1
1640609	AAA	2013J	1
1686521	AAA	2013J	1
1729319	AAA	2013J	1
1746134	AAA	2013J	1
1758449	AAA	2013J	1
1763015	AAA	2013J	1
1765788	AAA	2013J	1
1801229	AAA	2013J	1
1801641	AAA	2013J	1
1847830	AAA	2013J	1
1860318	AAA	2013J	1
1889511	AAA	2013J	1
1889577	AAA	2013J	1
1894188	AAA	2013J	1
1938355	AAA	2013J	1
1942396	AAA	2013J	1
1970390	AAA	2013J	1
1976139	AAA	2013J	1
2011876	AAA	2013J	1
2012966	AAA	2013J	1
2051699	AAA	2013J	1
2062879	AAA	2013J	1
2065691	AAA	2013J	1
2073016	AAA	2013J	1
2080474	AAA	2013J	1
2083877	AAA	2013J	1
2084066	AAA	2013J	1
2104505	AAA	2013J	1
2122180	AAA	2013J	1
2139353	AAA	2013J	1
2143752	AAA	2013J	1
2146792	AAA	2013J	1
2149225	AAA	2013J	1
2155014	AAA	2013J	1
2164705	AAA	2013J	1
2171627	AAA	2013J	1
2182846	AAA	2013J	1
2194100	AAA	2013J	1
2197016	AAA	2013J	1
2208424	AAA	2013J	1
2229865	AAA	2013J	1
2255601	AAA	2013J	1
2268379	AAA	2013J	1
2278464	AAA	2013J	1
2293923	AAA	2013J	1
2312620	AAA	2013J	1
2339528	AAA	2013J	1
2342426	AAA	2013J	1
2358056	AAA	2013J	1
2358969	AAA	2013J	1
2364471	AAA	2013J	1
2367155	AAA	2013J	1
2369266	AAA	2013J	1
2376496	AAA	2013J	1
2391984	AAA	2013J	1
2411661	AAA	2013J	1
2411778	AAA	2013J	1
2412002	AAA	2013J	1
2412967	AAA	2013J	1
2437837	AAA	2013J	1
2449878	AAA	2013J	1
2456480	AAA	2013J	1
2457256	AAA	2013J	1
2458355	AAA	2013J	1
2460080	AAA	2013J	1
2461190	AAA	2013J	1
2469673	AAA	2013J	1
2470694	AAA	2013J	1
2479954	AAA	2013J	1
2481901	AAA	2013J	1
2482700	AAA	2013J	1
2486127	AAA	2013J	1
2498700	AAA	2013J	1
2516503	AAA	2013J	1
2518069	AAA	2013J	1
2521459	AAA	2013J	1
2523736	AAA	2013J	1
2529279	AAA	2013J	1
2532302	AAA	2013J	1
2536991	AAA	2013J	1
2542724	AAA	2013J	1
2550279	AAA	2013J	1
2551220	AAA	2013J	1
2552472	AAA	2013J	1
2555340	AAA	2013J	1
2557283	AAA	2013J	1
2559575	AAA	2013J	1
2562034	AAA	2013J	1
2566163	AAA	2013J	1
2566592	AAA	2013J	1
2569324	AAA	2013J	1
2574528	AAA	2013J	1
2574583	AAA	2013J	1
2576122	AAA	2013J	1
2578995	AAA	2013J	1
2586560	AAA	2013J	1
2594139	AAA	2013J	1
2598871	AAA	2013J	1
2599352	AAA	2013J	1
2600688	AAA	2013J	1
2606098	AAA	2013J	1
2613116	AAA	2013J	1
2617002	AAA	2013J	1
2620584	AAA	2013J	1
2639449	AAA	2013J	1
2639540	AAA	2013J	1
2639641	AAA	2013J	1
2641155	AAA	2013J	1
2643002	AAA	2013J	1
2645733	AAA	2013J	1
2649826	AAA	2013J	1
2650282	AAA	2013J	1
2664024	AAA	2013J	1
2666246	AAA	2013J	1
2669816	AAA	2013J	1
2671132	AAA	2013J	1
2676809	AAA	2013J	1
2678643	AAA	2013J	1
2685865	AAA	2013J	1
2688067	AAA	2013J	1
2689958	AAA	2013J	1
2691206	AAA	2013J	1
2691244	AAA	2013J	1
2694424	AAA	2013J	1
2698257	AAA	2013J	1",,,,,
테이블 1개,university_learning,"장애를 선언한 학생 수가 100명을 초과하는 모든 모듈, 프레젠테이션을 조회",View all modules and presentations where the number of students with a declared disability exceeds 100,,"SELECT code_module, code_presentation FROM studentinfo WHERE disability = 'Y' GROUP BY code_module, code_presentation HAVING COUNT(*) > 100;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,5,,"BBB        2014J
BBB        2013J
BBB        2013B
CCC        2014B
BBB        2014B",,,,,
테이블 2개,university_learning,"여학생의 비율이 60% 이상인 모든 모듈, 프레젠테이션을 조회",View all modules and presentations with more than 60% female students,,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) * 1.0 / (SELECT COUNT(DISTINCT studentregistration2.id_student) FROM studentregistration studentregistration2 WHERE studentregistration2.code_module = studentregistration.code_module AND studentregistration2.code_presentation = studentregistration.code_presentation)) > 0.6;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"BBB	2013B
BBB	2013J
BBB	2014B
BBB	2014J",,,,,
테이블 2개,university_learning,"장애 학생의 비율이 10% 미만인 모든 모듈, 프레젠테이션을 조회",View all modules and presentations where the proportion of students with disabilities is less than 10%,,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.disability = 'Y' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) / (SELECT COUNT(id_student) FROM studentinfo WHERE code_module = studentregistration.code_module AND code_presentation = studentregistration.code_presentation)) < 0.1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,6,,"BBB        2014J
BBB        2013J
AAA        2013J
CCC        2014B
BBB        2014B
AAA        2014J",,,,,
테이블 2개,university_learning,"모듈을 Pass 등급을 받은 학생 수가 100명을 초과하는 모든 모듈, 프레젠테이션을 조회",View all modules and presentations where the number of students who received a 'Pass' grade for the module exceeds 100,,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Pass' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING COUNT(studentinfo.id_student) > 100;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"AAA        2014J
AAA        2013J
BBB        2013B
BBB        2014J
CCC        2014B
BBB        2013J
BBB        2014B",,,,,
테이블 2개,university_learning,"VLE에서 학생당 평균 클릭 수가 5 미만인 모듈, 프레젠테이션을 조회","View modules, presentations with an average of less than 5 clicks per student in the VLE",,"SELECT studentinfo.code_module, studentinfo.code_presentation FROM studentinfo INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.code_module, studentinfo.code_presentation HAVING AVG(studentvle.sum_click) < 5;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,AAA	2013J,,,,,
테이블 2개,university_learning,"남학생의 비율이 40%를 넘는 모든 모듈, 프레젠테이션을 조회",View all modules and presentations where the ratio of male students exceeds 40%,,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) * 1.0 / (SELECT COUNT(*) FROM studentregistration sr2 WHERE sr2.code_module = studentregistration.code_module AND sr2.code_presentation = studentregistration.code_presentation)) > 0.4;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	2014J
AAA	2013J
CCC	2014B",,,,,
테이블 1개,university_learning,"등록 취소된 학생 수가 20명을 초과하는 모든 모듈, 프레젠테이션을 조회",View all modules and presentations with more than 20 unregistered students,,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration WHERE studentregistration.date_unregistration IS NOT NULL GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING COUNT(studentregistration.id_student) > 20;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,7,,"AAA	2013J
AAA	2014J
BBB	2013B
BBB	2013J
BBB	2014B
BBB	2014J
CCC	2014B",,,,,
테이블 1개,university_learning,"학생의 평균 이수학점이 100학점 미만인 모듈, 프레젠테이션을 조회",View modules and presentations with a student's average completed credits of less than 100 credits.,,"SELECT studentinfo.code_module, studentinfo.code_presentation FROM studentinfo GROUP BY studentinfo.code_module, studentinfo.code_presentation HAVING AVG(studentinfo.studied_credits) < 100;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"AAA        2014J
AAA        2013J
BBB        2013B
BBB        2013J
BBB        2014B
BBB        2014J
CCC        2014B",,,,,
테이블 2개,university_learning,"장애 학생의 비율이 5%를 초과하는 모든 모듈, 프레젠테이션을 조회",View all modules and presentations where the proportion of students with disabilities exceeds 5%,,"SELECT sr.code_module, sr.code_presentation FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(si.id_student) * 1.0 / (SELECT COUNT(*) FROM studentregistration WHERE code_module = sr.code_module AND code_presentation = sr.code_presentation)) > 0.05;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,6,,"BBB	2014J
BBB	2013J
BBB	2013B
AAA	2013J
CCC	2014B
BBB	2014B",,,,,
테이블 2개,university_learning,장애가 있는 학생의 비율이 10% 미만이고 학생의 평균 이전 시도 횟수가 2회 미만인 모듈과 프레젠테이션을 조회,View modules and presentations where the percentage of students with disabilities is less than 10% and the average number of previous student attempts is less than 2.,,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (SUM(CASE WHEN studentinfo.disability = 'Y' THEN 1 ELSE 0 END) / COUNT(studentinfo.id_student)) < 0.1 AND AVG(studentinfo.num_of_prev_attempts) < 2;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,6,,"AAA	2013J
AAA	2014J
BBB	2013J
BBB	2014B
BBB	2014J
CCC	2014B",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생 중 최근에 등록한 학생의 평균 점수와 최근 제출일 사이의 상관 관계를 분석하고 모듈, 프레젠테이션, 평균 점수, 최근 제출일을 조회","Among students registered for each module presentation and using VLE materials, we analyze the correlation between the average score and the most recent submission date of the most recently registered students and look up the module, presentation, average score, and most recent submission date.",,"SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score, MAX(studentAssessment.date_submitted) AS recent_submission_date FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN ( SELECT id_student, MAX(date) AS max_date FROM studentvle GROUP BY id_student ) top_students ON studentregistration.id_student = top_students.id_student INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student AND studentvle.date = top_students.max_date GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	2013J	70.11282367447596	239,,,,,
테이블 1개,university_learning,주당 평균 상호 작용 수가 가장 높은 모듈과 프레젠테이션을 조회,View modules and presentations with the highest average number of interactions per week,,"SELECT studentvle.code_module, studentvle.code_presentation FROM studentvle GROUP BY studentvle.code_module, studentvle.code_presentation ORDER BY AVG(studentvle.sum_click) DESC LIMIT 1;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA        2013J,,,,,
테이블 2개,university_learning,"모듈을 Pass 등급을 받은 학생의 비율이 평균 합격률보다 낮은 모듈, 프레젠테이션을 조회",View modules and presentations where the percentage of students receiving a ''Pass'' grade is lower than the average pass rate.,,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student)) < (SELECT AVG(passing_rate) FROM (SELECT COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student) AS passing_rate FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation) AS avg_passing_rates);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,5,,"BBB	2013B
BBB	2013J
BBB	2014B
BBB	2014J
CCC	2014B",,,,,
테이블 1개,university_learning,모듈을 Pass 등급을 받은 학생의 비율이 40% 미만인 지역명과 비율을 조회,Check the name and percentage of regions where the percentage of students who received a ''Pass'' grade for the module is less than 40%.,,"SELECT studentinfo.region, COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student) AS pass_percentage FROM studentinfo GROUP BY studentinfo.region HAVING pass_percentage < 0.4;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,6,,"London Region	0.3268
West Midlands Region	0.3520
North Western Region	0.2943
Yorkshire Region	0.3953
North Region	0.3445
East Midlands Region	0.3645",,,,,
테이블 2개,university_learning,"모듈을 Pass 등급을 받은 남학생의 비율보다 여학생의 비율이 낮은 모듈, 프레젠테이션을 조회",View modules and presentations where the proportion of female students is lower than the proportion of male students who received a ''Pass'' grade for the module.,,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Pass' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(CASE WHEN studentinfo.gender = 'F' THEN 1 END) / COUNT(studentinfo.id_student)) < (COUNT(CASE WHEN studentinfo.gender = 'M' THEN 1 END) / COUNT(studentinfo.id_student));","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	2014J
AAA	2013J
CCC	2014B",,,,,
테이블 2개,university_learning,"학생의 평균 연령이 전체 평균 연령보다 높은 모듈, 프레젠테이션을 조회",View modules and presentations where the average student age is higher than the overall average age,,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING AVG(studentinfo.age_band) > (SELECT AVG(age_band) FROM studentinfo);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"AAA	2013J
AAA	2014J
BBB	2013J
BBB	2014J",,,,,
테이블 2개,university_learning,주당 평균 상호 작용 수가 가장 높은 지역을 분석하고 지역명과 평균 상호작용수를 조회. 데이터는 주당 평균 상호 작용 수를 기준으로 순서대로 나열,Analyze the region with the highest average number of interactions per week and view the region name and average number of interactions. Data is ordered by average number of interactions per week,,"SELECT studentinfo.region, AVG(studentvle.sum_click) AS avg_interactions_per_week FROM studentinfo INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.region ORDER BY avg_interactions_per_week DESC;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"East Anglian Region	6.0217
North Region	5.2667
Ireland	5.2000
London Region	4.7879
South West Region	4.7059
West Midlands Region	4.7000
South East Region	4.4762
Scotland	4.4000
Wales	4.0000
South Region	3.4762
East Midlands Region	3.4400
North Western Region	3.0588
Yorkshire Region	2.7500",,,,,
테이블 1개,university_learning,"학생 등록 수가 가장 많은 모듈 프레젠테이션을 식별하고 모듈, 프레젠테이션, 학생수를 조회","Identify module presentations with the highest number of student enrollments and view the number of modules, presentations, and students",,"SELECT code_module, code_presentation, COUNT(id_student) AS num_registrations FROM studentregistration GROUP BY code_module, code_presentation ORDER BY num_registrations DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,7,,"BBB	2014J	2211
BBB	2013J	2193
BBB	2013B	1767
BBB	2014B	1521
CCC	2014B	1343
AAA	2013J	383
AAA	2014J	329",,,,,
테이블 1개,university_learning,각 모델 프레젠테이션과 평균 프레젠테이션 길이를 조회,View each model presentation and average presentation length,,"SELECT code_presentation, AVG(module_presentation_length) AS avg_length FROM courses GROUP BY code_presentation ORDER BY avg_length DESC;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,4,,"2014J	267.0000
2013J	265.6667
2013B	240.0000
2014B	239.8333",,,,,
테이블 2개,university_learning,주당 평균 상호 작용 수가 가장 높은 모듈과 평균 상호 작용횟수를 조회,View which module has the highest average number of interactions per week and the average number of interactions,,"SELECT studentregistration.code_module, AVG(studentvle.sum_click) AS avg_interactions_per_week FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module ORDER BY avg_interactions_per_week DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	4.3352,,,,,
테이블 2개,university_learning,장애를 선언한 학생의 비율이 가장 높은 모듈을 식별하고 모듈과 학생 비율을 식별,Identify modules with the highest proportion of students declaring a disability and identify module to student ratios,,"SELECT studentregistration.code_module, COUNT(CASE WHEN studentinfo.disability = 'Y' THEN 1 END) / COUNT(studentinfo.id_student) * 100 AS disability_percentage FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module ORDER BY disability_percentage DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"CCC	9.6054
BBB	9.1394
AAA	5.3371",,,,,
테이블 1개,university_learning,학생의 평균 연령이 가장 높은 프레젠테이션을 검색하고 프레젠테이션과 프레젠테이션 별 평균 연령을 조회,Search for presentations with the highest average age of students and view average ages by presentation and presentation,,"SELECT code_presentation, AVG(age_band) AS avg_age FROM studentinfo GROUP BY code_presentation ORDER BY avg_age DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"2013J	13.125
2014J	12.828740157480315
2013B	11.34974533106961
2014B	9.58449720670391",,,,,
테이블 2개,university_learning,"""23632"" 학생의 성별, 최종 결과, 해당 모듈의 평가 유형 및 가중치 조회","""23632"" View student's gender, final result, assessment type and weighting for that module",,"SELECT studentinfo.gender, studentinfo.final_result, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 23632;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,12,,"F','Withdrawn','TMA','5'
'F','Withdrawn','TMA','18'
'F','Withdrawn','TMA','18'
'F','Withdrawn','TMA','18'
'F','Withdrawn','TMA','18'
'F','Withdrawn','TMA','18'
'F','Withdrawn','Exam','100'
'F','Withdrawn','CMA','1'
'F','Withdrawn','CMA','1'
'F','Withdrawn','CMA','1'
'F','Withdrawn','CMA','1'
'F','Withdrawn','CMA','1'
",,,,,
테이블 3개,university_learning,"모듈 정보, 평가 정보, 그리고 학생 정보를 결합하여 학생별 평가 점수 조회","Combine module information, evaluation information, and student information to view evaluation scores for each student",,"SELECT studentinfo.id_student, studentinfo.gender, studentinfo.age_band, courses.code_module, courses.code_presentation, courses.module_presentation_length, assessments.assessment_type, assessments.weight, assessments.date, assessments.id_assessment FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation JOIN courses ON assessments.code_module = courses.code_module AND assessments.code_presentation = courses.code_presentation ORDER BY studentinfo.id_student, assessments.date;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,50000,,"6516	M	55<=	AAA	2014J	269	Exam	100		1763
6516	M	55<=	AAA	2014J	269	TMA	10	19	1758
6516	M	55<=	AAA	2014J	269	TMA	20	54	1759
6516	M	55<=	AAA	2014J	269	TMA	20	117	1760
6516	M	55<=	AAA	2014J	269	TMA	20	166	1761
6516	M	55<=	AAA	2014J	269	TMA	30	215	1762
11391	M	55<=	AAA	2013J	268	Exam	100		1757
11391	M	55<=	AAA	2013J	268	TMA	10	19	1752
11391	M	55<=	AAA	2013J	268	TMA	20	54	1753
11391	M	55<=	AAA	2013J	268	TMA	20	117	1754
11391	M	55<=	AAA	2013J	268	TMA	20	166	1755
11391	M	55<=	AAA	2013J	268	TMA	30	215	1756
23629	F	0-35	BBB	2013B	240	Exam	100		14990
23629	F	0-35	BBB	2013B	240	TMA	5	19	14984
23629	F	0-35	BBB	2013B	240	TMA	18	47	14985
23629	F	0-35	BBB	2013B	240	CMA	1	54	14991
23629	F	0-35	BBB	2013B	240	TMA	18	89	14986
23629	F	0-35	BBB	2013B	240	CMA	1	89	14992
23629	F	0-35	BBB	2013B	240	TMA	18	124	14987
23629	F	0-35	BBB	2013B	240	CMA	1	124	14993   ........",,,,,
테이블 2개,university_learning,"""24734""학생의 성별, 연령대, 지역, 그리고 해당 모듈의 평가 유형 및 가중치 조회","""24734"" Look up student's gender, age group, region, and assessment type and weight for that module",,"SELECT studentinfo.gender, studentinfo.age_band, studentinfo.region, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 24734;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,6,,"F','0-35','South Region','TMA','10'
'F','0-35','South Region','TMA','20'
'F','0-35','South Region','TMA','20'
'F','0-35','South Region','TMA','20'
'F','0-35','South Region','TMA','30'
'F','0-35','South Region','Exam','100'",,,,,
테이블 2개,university_learning,"런던 지역의 학생들의 성별, 연령대, 장애 여부, 그리고 해당 모듈의 평가 유형 및 가중치 조회","Find out the gender, age group and disability status of students in the 'London' area, as well as the assessment type and weighting of the module",,"SELECT studentinfo.gender, studentinfo.age_band, studentinfo.disability, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.region = 'London Region';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,8736,,"F	0-35	N	TMA	5
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	Exam	100
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	TMA	5
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	Exam	100
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	TMA	5
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	Exam	100
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	TMA	9
F	0-35	N	TMA	22
F	0-35	N	TMA	22
F	0-35	N	TMA	22
F	0-35	N	CMA	2
F	0-35	N	CMA	7
F	0-35	N	CMA	8
F	0-35	N	CMA	8
F	0-35	N	Exam	100
F	0-35	N	Exam	100
F	35-55	Y	TMA	5
F	35-55	Y	TMA	18
F	35-55	Y	TMA	18
F	35-55	Y	TMA	18
F	35-55	Y	TMA	18
F	35-55	Y	TMA	18
F	35-55	Y	Exam	100
F	35-55	Y	CMA	1
F	35-55	Y	CMA	1
F	35-55	Y	CMA	1
F	35-55	Y	CMA	1
F	35-55	Y	CMA	1
F	35-55	N	TMA	5
F	35-55	N	TMA	18
F	35-55	N	TMA	18
F	35-55	N	TMA	18
F	35-55	N	TMA	18
F	35-55	N	TMA	18
F	35-55	N	Exam	100
F	35-55	N	CMA	1
F	35-55	N	CMA	1
F	35-55	N	CMA	1
F	35-55	N	CMA	1
F	35-55	N	CMA	1
F	0-35	N	TMA	0
F	0-35	N	TMA	10
F	0-35	N	TMA	20
F	0-35	N	TMA	35
F	0-35	N	TMA	35
F	0-35	N	Exam	100
F	0-35	N	TMA	5
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	Exam	100
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	TMA	5
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	TMA	18
F	0-35	N	Exam	100
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	0-35	N	CMA	1
F	35-55	N	TMA	5
F	35-55	N	TMA	18
F	35-55	N	TMA	18
F	35-55	N	TMA	18
F	35-55	N	TMA	18
F	35-55	N	TMA	18
F	35-55	N	Exam	100
F	35-55	N	CMA	1
F	35-55	N	CMA	1
F	35-55	N	CMA	1
F	35-55	N	CMA	1
F	35-55	N	CMA	1
F	0-35	N	TMA	0
F	0-35	N	TMA	10
F	0-35	N	TMA	20
F	0-35	N	TMA	35
F	0-35	N	TMA	35
F	0-35	N	Exam	100
F	35-55	Y	TMA	5
F	35-55	Y	TMA	18 ..................",,,,,
테이블 2개,university_learning,"""27759"" 학생의 성별, 연령대, 장애 여부, 그리고 해당 모듈의 평가 유형, 가중치, 제출 날짜 조회","""27759"" Check student's gender, age range, disability status, and assessment type, weighting, and submission date for the module.",,"SELECT studentinfo.gender, studentinfo.age_band, studentinfo.disability, assessments.assessment_type, assessments.weight, assessments.date FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 27759;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,12,,"M','35-55','Y','TMA','5','19'
'M','35-55','Y','TMA','18','47'
'M','35-55','Y','TMA','18','96'
'M','35-55','Y','TMA','18','131'
'M','35-55','Y','TMA','5','19'
'M','35-55','Y','TMA','18','47'
'M','35-55','Y','TMA','18','96'
'M','35-55','Y','TMA','18','131'
",,,,,
테이블 2개,university_learning,모든 프레젠테이션의 'BBB' 모듈에서 VLE 자료에 사용되는 가장 일반적인 활동 유형과 해당 활동 유형의 자료개수,The most common activity types used in VLE materials across all presentations in the ''BBB'' module and the number of materials for that activity type.,,"SELECT activity_type, COUNT(*) AS num_materials FROM vle INNER JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE courses.code_module = 'BBB' GROUP BY activity_type ORDER BY num_materials DESC LIMIT 1;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,"resource','807'",,,,,
테이블 1개,university_learning,AAA'모듈의 모든 평가에서 가장 높은 평균 가중치를 갖는 평가 유형과 해당 가중치를 조회,Retrieve the assessment type with the highest average weight and its weight across all assessments in the ''AAA'' module.,,"SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments WHERE code_module = 'AAA' GROUP BY assessment_type ORDER BY avg_weight DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,"Exam','100.0000'",,,,,
테이블 1개,university_learning,"장애를 가진 학생들의 과목별 'Pass' 비율을 계산하고 모듈, 프레젠테이션, 비율을 조회","Calculate the ''Pass'' rate for each subject of students with disabilities and view modules, presentations, and rates",,"SELECT si.code_module, si.code_presentation, COUNT(CASE WHEN si.final_result = 'Pass' THEN 1 END) / COUNT(*) AS pass_rate FROM studentinfo si WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"BBB','2014J','0.3642'
'BBB','2013J','0.3628'
'BBB','2013B','0.3371'
'AAA','2013J','0.4348'
'CCC','2014B','0.2016'
'BBB','2014B','0.2628'
'AAA','2014J','0.5333'",,,,,
테이블 2개,university_learning,"모듈이 'BBB'이고 프레젠테이션이 '2014J'에 등록된 모든 학생들과 그들의 최종 성적을 모듈, 프레젠테이션, 학생, 최종 성적을 조회","View all registered students with module ''BBB'' and presentation '2014J' and their final grades for module, presentation, student and final grade.",,"SELECT si.code_module, si.code_presentation, si.id_student, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.code_module = 'BBB' AND si.code_presentation = '2014J';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1000,,"BBB','2014J','26315','Pass'
'BBB','2014J','26734','Fail'
'BBB','2014J','32327','Withdrawn'
'BBB','2014J','32930','Pass'
'BBB','2014J','34662','Withdrawn'
'BBB','2014J','38711','Withdrawn'",,,,,
테이블 2개,university_learning,"TMA 과정의 모든 프레젠테이션에 대해 학생들의 평균 점수 계산하고 모듈, 프레젠테이션, 평균 점수를 조회","Calculate students' average scores for all presentations in a 'TMA' course and view average scores by module, presentation, and",,"SELECT a.code_module, a.code_presentation, AVG(sa.score) AS avg_score FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment WHERE a.assessment_type = 'TMA' GROUP BY a.code_module, a.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,"FFF', '2013B', '67.57142857142857'",,,,,
테이블 2개,university_learning,"특정 과정의 모든 발표(presentation)에서, 각 학생이 시도한 횟수(num_of_prev_attempts)에 따른 학생 수를 계산하고 모듈, 프레젠테이션, 시도 횟수, 학생 수를 조회","For all presentations in a particular course, calculate the number of students based on the number of attempts each student made (num_of_prev_attempts) and view the module, presentation, number of attempts, and number of students.",,"SELECT si.code_module, si.code_presentation, si.num_of_prev_attempts, COUNT(*) AS student_count FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation GROUP BY si.code_module, si.code_presentation, si.num_of_prev_attempts;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,29,,"AAA', '2014J', '0', '324'
'AAA', '2013J', '0', '383'
'BBB', '2013B', '2', '58'
'BBB', '2013J', '0', '1902'
'BBB', '2013B', '0', '1407'
'BBB', '2014B', '2', '35'
'BBB', '2014J', '1', '122'
'BBB', '2013J', '4', '2'",,,,,
테이블 2개,university_learning,"장애를 선언한 모든 학생의 ID,성별,장애여부,총학점,최종성적 리스트와 최종성적 기준으로 정렬","Sort by ID, gender, disability status, total credits, final grade list and final grade of all students who declared a disability.",,"SELECT si.id_student, si.gender, si.disability, SUM(si.studied_credits) AS total_credits, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.disability = 'Y' GROUP BY si.id_student, si.gender, si.disability, si.final_result ORDER BY si.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,870,,"553840', 'F', 'Y', '60', 'Distinction'
'133104', 'M', 'Y', '120', 'Distinction'
'620408', 'M', 'Y', '60', 'Distinction'
'585695', 'M', 'Y', '90', 'Distinction'
'537640', 'F', 'Y', '60', 'Distinction'
'552039', 'F', 'Y', '60', 'Distinction'
'170864', 'M', 'Y', '60', 'Distinction'
'114402', 'F', 'Y', '90', 'Distinction'
'143741', 'F', 'Y', '120', 'Distinction'
'506206', 'F', 'Y', '30', 'Distinction'
'600856', 'F', 'Y', '60', 'Distinction'",,,,,
테이블 2개,university_learning,"특정 과정 모듈(BBB)에 등록된 학생들 중 장애를 선언한 학생들의 최종 성적을 확인하고 학생, 성별, 장애여부, 최종 성적을 조회","Among students enrolled in a specific course module ('BBB'), check the final grades of students who have declared a disability and check the student, gender, disability status, and final grade.",,"SELECT si.id_student, si.gender, si.disability, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.disability = 'Y' AND c.code_module = 'BBB';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,703,,"26734', 'M', 'Y', 'Fail'
'27759', 'M', 'Y', 'Fail'
'27891', 'M', 'Y', 'Withdrawn'
'30091', 'F', 'Y', 'Pass'
'34353', 'M', 'Y', 'Fail'
'38711', 'M', 'Y', 'Withdrawn'
'50993', 'F', 'Y', 'Fail'
'51301', 'F', 'Y', 'Withdrawn'
'55026', 'F', 'Y', 'Pass'
'58520', 'F', 'Y', 'Withdrawn'",,,,,
테이블 2개,university_learning,"특정 과정에 등록된 학생들 중 재시도 횟수가 6회 이상인 학생들의 정보와 과정 세부 정보를 분석하고 학생, 성별, 연령대,  재시도 횟수, 모듈, 프레젠테이션을 조회","Among students enrolled in a specific course, analyze the information and course details of students with more than 6 retries and view students, gender, age group, number of retries, modules, and presentations.",,"SELECT si.id_student, si.gender, si.age_band, si.num_of_prev_attempts, c.code_module, c.code_presentation FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.num_of_prev_attempts >= 6;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,"334981', 'F', '35-55', '6', 'BBB', '2014B'",,,,,
테이블 2개,university_learning,특정 과정 모듈에 등록된 학생들 중 최종 성적이 'Fail'인 학생들의 수와 모듈을 조회,View the number and module of students enrolled in a specific course module whose final grade is 'Fail',,"SELECT c.code_module, COUNT(si.id_student) AS failed_students FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.final_result = 'Fail' GROUP BY c.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,3,,"BBB','1691'
'CCC','266'
'AAA','84'",,,,,
테이블 3개,university_learning,"장애가 있는 학생이 최소 한번 이상 시도한 과목 모듈별로, 학생수를 세고 그 숫자가 가장 많은 상위 3개 과목모듈과 학생수를 조회","For each subject module that a student with a disability has attempted at least once, count the number of students and view the top three subject modules with the highest number of subjects and the number of students.",,"SELECT courses.code_module, COUNT(DISTINCT studentinfo.id_student) AS num_attempts FROM studentinfo INNER JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation INNER JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE studentinfo.disability = 'Y' GROUP BY courses.code_module ORDER BY num_attempts DESC LIMIT 3;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,3,,"BBB','703'
'CCC','129'
'AAA','38'",,,,,
테이블 2개,university_learning,가장 많은 학점을 이수한 모듈의 학생번호 및 최종 성적을 조회,Check the student number and final grade of the module in which you completed the most credits,,"SELECT sr.id_student, si.final_result FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student JOIN ( SELECT code_module, code_presentation, MAX(studied_credits) AS max_credits FROM studentinfo GROUP BY code_module, code_presentation ) AS max_credits_per_module ON sr.code_module = max_credits_per_module.code_module AND sr.code_presentation = max_credits_per_module.code_presentation WHERE si.studied_credits = max_credits_per_module.max_credits;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,8,,"153687	Withdrawn
155550	Pass
230348	Withdrawn
363151	Withdrawn
602779	Pass
627968	Fail
2300913	Fail
2313257	Withdrawn",,,,,
테이블 2개,university_learning,"장애가 있는 학생들이 참여한 과목 모듈과 세션을 기준으로, 해당 과목 모듈과 세션별로 장애가 있는 학생들의 수를 계산하고 모듈, 프레젠테이션, 학생 수를 조회","Based on the subject modules and sessions in which students with disabilities participated, calculate the number of students with disabilities for each subject module and session and view the number of modules, presentations, and students.",,"SELECT si.code_module, si.code_presentation, COUNT(sa.id_student) AS num_students_with_disability FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,7,,"BBB	2014J	0
BBB	2013J	0
BBB	2013B	0
AAA	2013J	0
CCC	2014B	0
BBB	2014B	0
AAA	2014J	0",,,,,
테이블 1개,university_learning,"다양한 연령대에 따른 최종 결과의 분포를 계산하고 연령대, 최종 결과, 학생 수를 조회","Calculate the distribution of final results according to various age groups and view age groups, final results, and number of students",,"SELECT si.age_band, si.final_result, COUNT(*) AS num_students FROM studentinfo si GROUP BY si.age_band, si.final_result ORDER BY si.age_band, num_students DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,12,,"0-35	Pass	2388
0-35	Withdrawn	2191
0-35	Fail	1483
0-35	Distinction	461
35-55	Pass	1395
35-55	Withdrawn	859
35-55	Fail	554
35-55	Distinction	363
55<=	Pass	31
55<=	Withdrawn	11
55<=	Distinction	7
55<=	Fail	4",,,,,
테이블 1개,university_learning,다양한 모듈 프레젠테이션에서 학생당 공부한 평균 학점이 가장 높은 지역 순으로 정렬,Sorted by region with highest average number of credits studied per student across various module presentations,,"SELECT si.region, AVG(si.studied_credits) AS avg_credits FROM studentinfo si GROUP BY si.region ORDER BY avg_credits DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"London Region	87.8753
East Midlands Region	85.6285
Yorkshire Region	85.4297
South West Region	85.2983
South East Region	84.8851
East Anglian Region	84.0165
North Western Region	83.6551
West Midlands Region	83.3413
North Region	82.3810
South Region	80.9251
Wales	80.8040
Scotland	78.1535
Ireland	73.5453",,,,,
테이블 2개,university_learning,다양한 IMB 밴드 간의 평가 유형 별로 진행된 평가수 집계(imd_band 별 그룹화 및 해당 지수 내에서 평가 수가 많은 순서로 정렬),Aggregation of the number of evaluations conducted by evaluation type between various IMB bands (grouped by imd_band and sorted by highest number of evaluations within the index),,"SELECT si.imd_band, a.assessment_type, COUNT(*) AS num_assessments FROM studentinfo si INNER JOIN assessments a ON si.code_module = a.code_module AND si.code_presentation = a.code_presentation GROUP BY si.imd_band, a.assessment_type ORDER BY si.imd_band, num_assessments DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,33,,"	TMA	718
	CMA	500
	Exam	212
0-10%	TMA	6364
0-10%	CMA	4098
0-10%	Exam	1268
10-20	TMA	6192
10-20	CMA	3923
10-20	Exam	1261
20-30%	TMA	6517
20-30%	CMA	4087
20-30%	Exam	1348
30-40%	TMA	5769
30-40%	CMA	3619
30-40%	Exam	1194
40-50%	TMA	5557
40-50%	CMA	3448
40-50%	Exam	1153
50-60%	TMA	4988
50-60%	CMA	2970
50-60%	Exam	1042
60-70%	TMA	4627
60-70%	CMA	2853
60-70%	Exam	984
70-80%	TMA	4377
70-80%	CMA	2677
70-80%	Exam	922
80-90%	TMA	4207
80-90%	CMA	2528
80-90%	Exam	913
90-100%	TMA	3557
90-100%	CMA	2074
90-100%	Exam	793",,,,,
테이블 2개,university_learning,모듈 프레젠테이션에 등록했지만 VLE 자료와 상호 작용하지 않은 학생은 몇 명,How many students registered for module presentations but did not interact with the VLE materials?,,"SELECT sr.code_module, sr.code_presentation, COUNT(sv.id_student) AS num_students FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student AND sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE sv.id_student IS NULL GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,7,,"AAA	2013J	0
AAA	2014J	0
BBB	2013B	0
BBB	2013J	0
BBB	2014B	0
BBB	2014J	0
CCC	2014B	0",,,,,
테이블 1개,university_learning,학생 등록과 등록 취소 사이의 차이를 통해 평균 등록기간 계산하여 가장 긴 등록기간을 가진 상위 5개 모듈 프레젠테이션 조회,Calculate the average enrollment period using the difference between student registrations and cancellations to view the top 5 module presentations with the longest enrollment periods.,,"SELECT sr.code_module, sr.code_presentation, AVG(sr.date_unregistration - sr.date_registration) AS avg_registration_duration FROM studentregistration sr GROUP BY sr.code_module, sr.code_presentation ORDER BY avg_registration_duration DESC LIMIT 5;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,5,,"AAA        2013J        185.5000
AAA        2014J        179.6607
CCC        2014B        161.2055
BBB        2013B        122.7743
BBB        2013J        113.0064",,,,,
테이블 2개,university_learning,각 모듈 프레젠테이션에 대해 각 활동 유형의 VLE 자료와 상호 작용한 고유 학생 수는 몇 명,"For each module presentation, how many unique students interacted with the VLE material for each activity type?",,"SELECT v.code_module, v.code_presentation, v.activity_type, COUNT(DISTINCT sv.id_student) AS num_unique_students FROM vle v INNER JOIN studentvle sv ON v.id_site = sv.id_site GROUP BY v.code_module, v.code_presentation, v.activity_type;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,8,,"AAA	2013J	dataplus	1
AAA	2013J	forumng	56
AAA	2013J	glossary	1
AAA	2013J	homepage	82
AAA	2013J	oucontent	126
AAA	2013J	resource	36
AAA	2013J	subpage	45
AAA	2013J	url	2",,,,,
테이블 1개,university_learning,모든 모듈 프레젠테이션에서 장애 학생 비율이 가장 높은 지역순으로 정렬,Sorted by region with highest proportion of students with disabilities across all module presentations,,"SELECT si.region, (COUNT(CASE WHEN si.disability = 'Y' THEN 1 END) / COUNT(*)) * 100 AS disability_percentage FROM studentinfo si GROUP BY si.region ORDER BY disability_percentage DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"North Western Region	11.7177
Scotland	10.8921
South East Region	10.8729
East Midlands Region	10.7542
East Anglian Region	10.6589
South West Region	10.2273
South Region	10.0703
London Region	8.4296
West Midlands Region	8.2339
Wales	7.0485
Yorkshire Region	5.0000
Ireland	2.8017
North Region	2.8011",,,,,
테이블 2개,university_learning,모든 모듈 프레젠테이션에서 평균 점수가 가장 높은 평가 시험유형은 무엇,Which assessment test type had the highest average score across all module presentations?,,"SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,TMA	67.57142857142857,,,,,
테이블 1개,university_learning,여학생의 평균 이수학점이 200학점 미만인 모듈발표를 검색,Search for module presentations where the average number of credits completed by female students is less than 200 credits.,,"SELECT code_module, code_presentation, AVG(studied_credits) AS avg_studied_credits FROM studentinfo WHERE gender = 'F' GROUP BY code_module, code_presentation HAVING AVG(studied_credits) < 200;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"BBB	2013B	89.2720
BBB	2013J	82.9397
AAA	2014J	83.2000
BBB	2014B	82.7770
BBB	2014J	80.2596
AAA	2013J	80.7383
CCC	2014B	84.5847",,,,,
테이블 1개,university_learning,여학생 수가 남학생 수를 초과하는 모듈 프레젠테이션을 식별,Identify module presentations where the number of female students exceeds the number of male students,,"SELECT code_module, code_presentation FROM studentinfo GROUP BY code_module, code_presentation HAVING SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"BBB	2013B
BBB	2013J
BBB	2014B
BBB	2014J",,,,,
테이블 2개,university_learning,장애 학생의 비율이 20%를 초과하는 모듈 프레젠테이션 결정,Determination of presentation of modules with a proportion of students with disabilities exceeding 20%,,"SELECT sr.code_module, sr.code_presentation, (COUNT(si.id_student) * 100.0 / (SELECT COUNT(*) FROM studentinfo WHERE disability = 'Y')) AS disability_percentage FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING disability_percentage > 20;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,2,,"BBB	2013J	24.71264
BBB	2013B	20.45977",,,,,
테이블 1개,university_learning,학생당 VLE 자료와의 평균 상호 작용 횟수가 10회 미만인 모듈 프레젠테이션,Module presentation with less than 10 average interactions with VLE material per student,,"SELECT sv.code_module, sv.code_presentation, AVG(sv.sum_click) AS avg_interactions_per_student FROM studentvle sv GROUP BY sv.code_module, sv.code_presentation HAVING avg_interactions_per_student < 10;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	2013J	4.3352,,,,,
테이블 2개,university_learning,강좌에 등록하지 않은 학생의 비율이 10%를 초과하는 모듈 프레젠테이션을 나열,List module presentations with more than 10% of students not enrolled in the course,,"SELECT sr.code_module, sr.code_presentation, (COUNT(sr.date_unregistration) * 100.0 / COUNT(si.id_student)) AS unregistration_percentage FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation HAVING unregistration_percentage > 10;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"AAA	2013J	15.66580
AAA	2014J	17.02128
BBB	2013B	28.57951
BBB	2013J	28.72777
BBB	2014B	30.30901
BBB	2014J	32.15739
CCC	2014B	46.68652",,,,,
테이블 2개,university_learning,발표 시작 전 20일 이상 등록한 학생의 평균 수강 학점이 150학점 미만인 모듈 발표를 나열,Lists module presentations with an average course load of less than 150 credits for students enrolled more than 20 days prior to the start of the presentation.,,"SELECT si.code_module, si.code_presentation FROM studentinfo si INNER JOIN studentregistration sr ON si.code_module = sr.code_module AND si.code_presentation = sr.code_presentation AND si.id_student = sr.id_student WHERE sr.date_registration > -20 GROUP BY si.code_module, si.code_presentation HAVING AVG(si.studied_credits) < 150;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,7,,"AAA	2013J
AAA	2014J
BBB	2013B
BBB	2013J
BBB	2014B
BBB	2014J
CCC	2014B",,,,,
테이블 1개,university_learning,장애를 선언한 학생이 공부한 평균 학점이 180학점 미만인 모듈 프레젠테이션을 검색,Search for presentations of modules studied by a student with a declared disability with an average grade point average of less than 180 credits.,,"SELECT si.code_module, si.code_presentation FROM studentinfo si WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation HAVING AVG(si.studied_credits) < 180;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"BBB	2014J
BBB	2013J
BBB	2013B
AAA	2013J
CCC	2014B
BBB	2014B
AAA	2014J",,,,,
테이블 1개,university_learning,최종 평가를 Pass 등급을 받은 학생의 평균 이전 시도 횟수가 1 미만인 모듈 프레젠테이션 조회,View module presentations where the average number of previous attempts was less than 1 for students who received a 'Pass' grade on the final assessment.,,"SELECT si.code_module, si.code_presentation FROM studentinfo si WHERE si.final_result = 'Pass' GROUP BY si.code_module, si.code_presentation HAVING AVG(si.num_of_prev_attempts) < 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"AAA	2014J
AAA	2013J
BBB	2013B
BBB	2014J
CCC	2014B
BBB	2013J
BBB	2014B",,,,,
테이블 2개,university_learning,특정 모듈(AAA)과 프레젠테이션(2013J)에서 평균 점수가 50점 이상인 학생의 목록,List of students with an average score of 50 or more in a specific module ('AAA') and presentation ('2013J'),,"SELECT si.id_student, si.code_module, si.code_presentation, AVG(sa.score) AS average_score FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.code_module = 'AAA' AND si.code_presentation = '2013J' GROUP BY si.id_student HAVING AVG(sa.score) >= 50;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,347,,"11391        AAA        2013J        82
28400        AAA        2013J        66.4
31604        AAA        2013J        76
32885        AAA        2013J        54.4
38053        AAA        2013J        68
45462        AAA        2013J        68
45642        AAA        2013J        72.4
52130        AAA        2013J        71.4
53025        AAA        2013J        78
57506        AAA        2013J        74
58873        AAA        2013J        73.2
59185        AAA        2013J        78.6
62155        AAA        2013J        76
63400        AAA        2013J        71.6
65002        AAA        2013J        67
70464        AAA        2013J        55.6
71361        AAA        2013J        80.4
75091        AAA        2013J        66
77367        AAA        2013J        70.4
91265        AAA        2013J        70.8
94961        AAA        2013J        65.33333333333333
98094        AAA        2013J        60.6
100893        AAA        2013J        68.4
101781        AAA        2013J        72.6
102806        AAA        2013J        78
102952        AAA        2013J        76.6
104476        AAA        2013J        79.6
106247        AAA        2013J        60
106577        AAA        2013J        53.4
110175        AAA        2013J        63.4
111717        AAA        2013J        81
113295        AAA        2013J        77.6
114017        AAA        2013J        71.8
114999        AAA        2013J        72.8
116541        AAA        2013J        62.4
116692        AAA        2013J        74.2
118983        AAA        2013J        61.8
123044        AAA        2013J        71.4
127582        AAA        2013J        69.6
129955        AAA        2013J        81
132976        AAA        2013J        67.4
134143        AAA        2013J        84.4
135400        AAA        2013J        53.142857142857146
137873        AAA        2013J        80.2
141355        AAA        2013J        72.6
142326        AAA        2013J        73.6
144801        AAA        2013J        68.8
145130        AAA        2013J        54.4
146188        AAA        2013J        50
147756        AAA        2013J        68.66666666666667
147793        AAA        2013J        52
148993        AAA        2013J        79.5
151358        AAA        2013J        50
155550        AAA        2013J        67
155854        AAA        2013J        79.8
155984        AAA        2013J        78.14285714285714
157568        AAA        2013J        70.6
159954        AAA        2013J        68.2
164259        AAA        2013J        71.8
167906        AAA        2013J        69.4
168936        AAA        2013J        66.4
172112        AAA        2013J        69.6
172797        AAA        2013J        61.4
174782        AAA        2013J        80.4
175392        AAA        2013J        82.4
175932        AAA        2013J        78.2
180753        AAA        2013J        53.4
181316        AAA        2013J        76
183096        AAA        2013J        54
184271        AAA        2013J        59.8
185439        AAA        2013J        74
186149        AAA        2013J        76
187100        AAA        2013J        89.2
188278        AAA        2013J        71.66666666666667
189879        AAA        2013J        79.4
192183        AAA        2013J        68.4
195262        AAA        2013J        50
200860        AAA        2013J        54.4
202635        AAA        2013J        66.66666666666667
205350        AAA        2013J        72.2
205719        AAA        2013J        56.666666666666664
227499        AAA        2013J        83.6
227517        AAA        2013J        62.6
228082        AAA        2013J        72.4
228222        AAA        2013J        61.8
229179        AAA        2013J        66
229361        AAA        2013J        78
231554        AAA        2013J        67.75
235507        AAA        2013J        57.833333333333336
236284        AAA        2013J        78
238007        AAA        2013J        79.2
240712        AAA        2013J        75.8
240884        AAA        2013J        58.4
241649        AAA        2013J        78.8
241729        AAA        2013J        58.6
242793        AAA        2013J        77.4
246834        AAA        2013J        55.6
248270        AAA        2013J        78.4
255548        AAA        2013J        71.4
256815        AAA        2013J        76.8
258392        AAA        2013J        58.8
258894        AAA        2013J        64.8
260355        AAA        2013J        57.5
262011        AAA        2013J        71
262934        AAA        2013J        76.6
268073        AAA        2013J        74.6
271251        AAA        2013J        76.4
277880        AAA        2013J        67.66666666666667
279572        AAA        2013J        79.2
281022        AAA        2013J        73.4
281250        AAA        2013J        55.4
282821        AAA        2013J        60.6
286488        AAA        2013J        71
287548        AAA        2013J        67.8
290201        AAA        2013J        70.4
290757        AAA        2013J        75
291334        AAA        2013J        83.6
294570        AAA        2013J        78.2
294594        AAA        2013J        52.8
295741        AAA        2013J        50.2
296332        AAA        2013J        86.8
298696        AAA        2013J        80.8
300398        AAA        2013J        78.8
302302        AAA        2013J        58.666666666666664
305152        AAA        2013J        64
305386        AAA        2013J        78
306107        AAA        2013J        58.2
306466        AAA        2013J        82
306897        AAA        2013J        62.6
307061        AAA        2013J        81.2
307866        AAA        2013J        60
311917        AAA        2013J        59.2
312537        AAA        2013J        87.8
312782        AAA        2013J        61.8
318933        AAA        2013J        66.6
319047        AAA        2013J        78.4
321942        AAA        2013J        80.4
324002        AAA        2013J        80.4
324084        AAA        2013J        57.6
324282        AAA        2013J        61.2
331358        AAA        2013J        84.66666666666667
332789        AAA        2013J        74.4
333059        AAA        2013J        65.8
333323        AAA        2013J        74.4
334259        AAA        2013J        53
335764        AAA        2013J        86.875
336207        AAA        2013J        68.2
341872        AAA        2013J        64.2
342007        AAA        2013J        82.33333333333333
342514        AAA        2013J        77.2
342972        AAA        2013J        60.4
343446        AAA        2013J        78.4
345068        AAA        2013J        78
345357        AAA        2013J        80.4
346025        AAA        2013J        82.4
350188        AAA        2013J        73.8
357668        AAA        2013J        57
364177        AAA        2013J        69
365244        AAA        2013J        56.4
365642        AAA        2013J        70
366483        AAA        2013J        76.8
368194        AAA        2013J        50.4
368824        AAA        2013J        55.6
368963        AAA        2013J        66.4
376439        AAA        2013J        87
376581        AAA        2013J        72.8
380953        AAA        2013J        67.8
383254        AAA        2013J        75.6
386924        AAA        2013J        67.8
386952        AAA        2013J        68
388722        AAA        2013J        63.8
388885        AAA        2013J        60.6
390890        AAA        2013J        68.625
392931        AAA        2013J        68.4
393207        AAA        2013J        74.2
396872        AAA        2013J        61.4
401869        AAA        2013J        65
402470        AAA        2013J        72.6
405088        AAA        2013J        77.2
414117        AAA        2013J        76.4
415969        AAA        2013J        59.666666666666664
420087        AAA        2013J        76
429958        AAA        2013J        58.4
441018        AAA        2013J        59.8
441888        AAA        2013J        70.6
444677        AAA        2013J        87.6
470588        AAA        2013J        79.33333333333333
489455        AAA        2013J        70.6
495284        AAA        2013J        66.6
498857        AAA        2013J        73
508818        AAA        2013J        71.8
512460        AAA        2013J        72.4
544103        AAA        2013J        81
550383        AAA        2013J        72
564450        AAA        2013J        59.2
568601        AAA        2013J        81.5
572652        AAA        2013J        73.2
580389        AAA        2013J        71.4
588775        AAA        2013J        82.8
591774        AAA        2013J        76.2
603861        AAA        2013J        63
606143        AAA        2013J        66
704156        AAA        2013J        66
705379        AAA        2013J        80.8
721259        AAA        2013J        65
749412        AAA        2013J        72
760729        AAA        2013J        81.2
905042        AAA        2013J        76.4
949618        AAA        2013J        61.8
958987        AAA        2013J        77.2
968578        AAA        2013J        72
969076        AAA        2013J        59.75
971027        AAA        2013J        68
978739        AAA        2013J        56.6
1035023        AAA        2013J        70
1105478        AAA        2013J        82.6
1352868        AAA        2013J        68.57142857142857
1402638        AAA        2013J        75.2
1414443        AAA        2013J        59
1456619        AAA        2013J        63
1465690        AAA        2013J        81.8
1472925        AAA        2013J        61.9
1488959        AAA        2013J        61.8
1518989        AAA        2013J        73
1618738        AAA        2013J        79.6
1620151        AAA        2013J        77.5
1626710        AAA        2013J        84.6
1640609        AAA        2013J        85
1686521        AAA        2013J        68
1729319        AAA        2013J        78.2
1746134        AAA        2013J        83.8
1758449        AAA        2013J        61
1765788        AAA        2013J        66.2
1801229        AAA        2013J        76.8
1801641        AAA        2013J        77.4
1847830        AAA        2013J        71
1860318        AAA        2013J        62.6
1889511        AAA        2013J        72
1889577        AAA        2013J        73.6
1894188        AAA        2013J        70.4
1938355        AAA        2013J        73
1942396        AAA        2013J        53.6
1970390        AAA        2013J        83.6
1976139        AAA        2013J        67.25
2011876        AAA        2013J        76
2012966        AAA        2013J        78.4
2051699        AAA        2013J        66.6
2062879        AAA        2013J        61.2
2073016        AAA        2013J        58.857142857142854
2080474        AAA        2013J        69.6
2083877        AAA        2013J        67.8
2084066        AAA        2013J        59.75
2104505        AAA        2013J        65.6
2122180        AAA        2013J        82.4
2139353        AAA        2013J        66.5
2143752        AAA        2013J        52.6
2146792        AAA        2013J        70
2153153        AAA        2013J        62.2
2155014        AAA        2013J        73.8
2164705        AAA        2013J        70
2171627        AAA        2013J        69
2182846        AAA        2013J        66
2194100        AAA        2013J        67.2
2197016        AAA        2013J        75.6
2208424        AAA        2013J        71.2
2229865        AAA        2013J        76.4
2255601        AAA        2013J        54.5
2268379        AAA        2013J        83
2278464        AAA        2013J        51.4
2293923        AAA        2013J        61.2
2318055        AAA        2013J        75.8
2329342        AAA        2013J        57.2
2339528        AAA        2013J        80
2342426        AAA        2013J        73.2
2344901        AAA        2013J        51.5
2358056        AAA        2013J        67.8
2358969        AAA        2013J        69
2364471        AAA        2013J        83.4
2367155        AAA        2013J        75.6
2369266        AAA        2013J        50.6
2376496        AAA        2013J        73.4
2391984        AAA        2013J        73
2411778        AAA        2013J        80
2412002        AAA        2013J        82.8
2412967        AAA        2013J        77.6
2429854        AAA        2013J        51
2437837        AAA        2013J        74.4
2449878        AAA        2013J        60.6
2457256        AAA        2013J        70
2458355        AAA        2013J        90.6
2460080        AAA        2013J        78.8
2461190        AAA        2013J        56
2470694        AAA        2013J        67
2479954        AAA        2013J        79.6
2481901        AAA        2013J        75.8
2482700        AAA        2013J        55.6
2486127        AAA        2013J        73.6
2498700        AAA        2013J        77.2
2516503        AAA        2013J        79.4
2518069        AAA        2013J        76.6
2521459        AAA        2013J        60.8
2523736        AAA        2013J        61.75
2529279        AAA        2013J        78
2532302        AAA        2013J        63.2
2536991        AAA        2013J        80.8
2550279        AAA        2013J        62.6
2551220        AAA        2013J        64.8
2552472        AAA        2013J        53.5
2555340        AAA        2013J        80.6
2557283        AAA        2013J        81.2
2559575        AAA        2013J        71.2
2562034        AAA        2013J        65.4
2566163        AAA        2013J        71.8
2566592        AAA        2013J        71.8
2569324        AAA        2013J        71.2
2574528        AAA        2013J        75.4
2574583        AAA        2013J        70.8
2576122        AAA        2013J        64
2578995        AAA        2013J        79.6
2586560        AAA        2013J        73.6
2594139        AAA        2013J        76
2598871        AAA        2013J        72.6
2599352        AAA        2013J        76.4
2600688        AAA        2013J        70
2606098        AAA        2013J        71.4
2613116        AAA        2013J        78.2
2617002        AAA        2013J        64.8
2639449        AAA        2013J        56
2639540        AAA        2013J        79.4
2639641        AAA        2013J        65.6
2641155        AAA        2013J        79.2
2643002        AAA        2013J        51.2
2645733        AAA        2013J        82.6
2649826        AAA        2013J        83.4
2650282        AAA        2013J        84.2
2664024        AAA        2013J        63.2
2666246        AAA        2013J        76
2669816        AAA        2013J        57.2
2671132        AAA        2013J        68.8
2678643        AAA        2013J        71.4
2685865        AAA        2013J        78.6
2688067        AAA        2013J        67.8
2689958        AAA        2013J        81.6
2691206        AAA        2013J        84.8
2691244        AAA        2013J        58.25
2694424        AAA        2013J        79.4
2698257        AAA        2013J        67.8",,,,,
테이블 2개,university_learning,특정 모듈(AAA)에서 각 평가 유형별 평균 점수,Average score for each assessment type in a specific module ('AAA'),,"SELECT a.assessment_type, AVG(sa.score) AS average_score FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,TMA	69.03051493960585,,,,,
테이블 2개,university_learning,각 모듈 프레젠테이션에 등록된 학생 수,Number of students registered for each module presentation,,"SELECT c.code_module, c.code_presentation, COUNT(si.id_student) AS student_count FROM courses c INNER JOIN studentInfo si ON c.code_module = si.code_module AND c.code_presentation = si.code_presentation GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"AAA	2014J	329
AAA	2013J	383
BBB	2013B	1767
BBB	2013J	2193
BBB	2014B	1521
BBB	2014J	2211
CCC	2014B	1343",,,,,
테이블 1개,university_learning,두 번 이상 모듈을 시도한 학생들의 목록,List of students who attempted the module more than once,,"SELECT id_student, code_module, code_presentation FROM studentInfo WHERE num_of_prev_attempts >= 2;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,256,,"23629	BBB	2013B
25997	BBB	2014B
26677	BBB	2013J
27891	BBB	2013B
32327	BBB	2014J
34229	BBB	2013B
47855	BBB	2013J
47891	BBB	2014J",,,,,
테이블 2개,university_learning,모든 모듈과 프레젠테이션에 대해 특정평가유형(TMA)의 평균 점수,Average score on the Specific Assessment Type ('TMA') for all modules and presentations,,"SELECT a.code_module, a.code_presentation, AVG(sa.score) AS average_exam_score FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.assessment_type = 'TMA' GROUP BY a.code_module, a.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,3,,"AAA	2013J	69.4316370324954
AAA	2014J	68.5986798679868
BBB	2013B	71.55096107252463",,,,,
테이블 1개,university_learning,특정 지리적 지역(Scotland)에서 공부하는 학생의 평균 학점,Average grade point average for students studying in a specific geographical area ('Scotland'),,"SELECT region, AVG(studied_credits) AS average_credits FROM studentInfo WHERE region = 'Scotland' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,Scotland	78.1535,,,,,
테이블 1개,university_learning,장애가 있는 학생들의 최종 결과 분포,Distribution of final outcomes for students with disabilities,,"SELECT final_result, COUNT(id_student) AS result_count FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"Fail	204
Withdrawn	338
Pass	281
Distinction	47",,,,,
테이블 2개,university_learning,각 모듈에 대한 총 학생 등록 수와 평균 모듈 프레젠테이션 기간 조회,View the total number of student enrollments for each module and the average module presentation duration.,,"SELECT si.code_module, COUNT(si.id_student) AS registration_count, AVG(c.module_presentation_length) AS average_length FROM studentInfo si INNER JOIN courses c ON si.code_module = c.code_module GROUP BY si.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,3,,"AAA	1424	268.5000
BBB	30768	251.0000
CCC	2686	255.0000",,,,,
테이블 2개,university_learning,특정 모듈(AAA)에서 평균 점수가 40점 미만인 학생의 비율,Percentage of students with an average score below 40 in a particular module ('AAA'),,"SELECT si.code_module, (COUNT(sa.id_student) / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module)) AS fail_rate FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.code_module = 'AAA' AND sa.score < 40 GROUP BY si.code_module;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,AAA	0.1264,,,,,
테이블 2개,university_learning,모든 과목의 평균 최종 점수를 계산,Calculate the average final score for all subjects,,"SELECT code_module, code_presentation, AVG(score) AS average_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	2013J	69.4316370324954
AAA	2014J	68.5986798679868
BBB	2013B	73.6403803950256",,,,,
테이블 1개,university_learning,"특정 학생(26677)이 등록한 모든  모듈코드, 프레젠테이션 코드과 해당 최종 결과","All module codes, presentation codes and corresponding final results registered by a specific student ('26677')",,"SELECT si.code_module, si.code_presentation, si.final_result FROM studentInfo si WHERE id_student = ""26677"";","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,BBB	2013J	Withdrawn,,,,,
테이블 1개,university_learning,특정 모듈에서 실패한 학생의 수,Number of students failing a particular module,,"SELECT code_module, code_presentation, COUNT(id_student) AS failed_students FROM studentInfo WHERE final_result = 'Fail' GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"BBB	2013B	459
BBB	2014J	374
BBB	2013J	502
CCC	2014B	266
BBB	2014B	356
AAA	2013J	45
AAA	2014J	39",,,,,
테이블 1개,university_learning,최소 한 번 이상의 과제를 늦게 제출한 학생들의 목록,List of students who submitted at least one assignment late,,SELECT DISTINCT id_student FROM studentAssessment WHERE date_submitted > (SELECT date FROM assessments WHERE id_assessment = studentAssessment.id_assessment);,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,2,,"14988
14989",,,,,
테이블 1개,university_learning,각 과목별로 가장 높은 가중치를 가진 평가,Assessment with the highest weight for each subject,,"SELECT code_module, code_presentation, MAX(weight) AS max_weight FROM assessments GROUP BY code_module, code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,22,,"AAA	2013J	100
AAA	2014J	100
BBB	2013B	100
BBB	2013J	100",,,,,
테이블 2개,university_learning,특정 과목(AAA)의 모든 평가 유형과 해당 평균 점수,All assessment types and their average scores for a specific subject ('AAA'),,"SELECT a.assessment_type, AVG(sa.score) AS average_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE a.code_module = 'AAA' AND a.code_presentation = '2013J' GROUP BY a.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,TMA	69.4316370324954,,,,,
테이블 1개,university_learning,특정 학생(25997)이 수강한 과목 중 재수강한 과목,Courses retaken among courses taken by a specific student (25997),,"SELECT code_module, code_presentation FROM studentInfo WHERE id_student = 25997 AND num_of_prev_attempts > 0;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,BBB	2014B,,,,,
테이블 1개,university_learning,성별에 따른 각 과목의 등록 학생 수,Number of students enrolled in each subject by gender,,"SELECT code_module, code_presentation, gender, COUNT(id_student) AS student_count FROM studentInfo GROUP BY code_module, code_presentation, gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,14,,"AAA	2014J	M	179
AAA	2013J	M	234
BBB	2013B	F	1559
BBB	2013J	F	1939
BBB	2013J	M	254
AAA	2014J	F	150",,,,,
테이블 1개,university_learning,"특정 모듈에 등록한 학생 중 장애가 있는 학생의 비율을 계산하고 모듈, 프레젠테이션, 장애가 있는 학생의 비율 순으로 조회","Calculate the percentage of students enrolled in a specific module with disabilities and view it by module, presentation, and percentage of students with disabilities.",,"SELECT code_module, code_presentation, (COUNT(id_student) / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module AND code_presentation = si.code_presentation)) * 100 AS disability_percentage FROM studentInfo si WHERE disability = 'Y' GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"BBB        2014J        7.8245
BBB        2013J        9.8039
BBB        2013B        10.0736
AAA        2013J        6.0052
CCC        2014B        9.6054
BBB        2014B        9.0072
AAA        2014J        4.5593",,,,,
테이블 1개,university_learning,"각 모듈의 프레젠테이션 기간을 모듈, 프레젠테이션, 프레젠테이션 기간 순으로 조회","View the presentation period of each module in the order of module, presentation, and presentation period.",,"SELECT code_module, code_presentation, module_presentation_length FROM courses;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,22,,"AAA        2013J        268
AAA        2014J        269
BBB        2013B        240
BBB        2013J        268
BBB        2014B        234
BBB        2014J        262
CCC        2014B        241
CCC        2014J        269
DDD        2013B        240
DDD        2013J        261
DDD        2014B        241
DDD        2014J        262
EEE        2013J        268
EEE        2014B        241
EEE        2014J        269
FFF        2013B        240
FFF        2013J        268
FFF        2014B        241
FFF        2014J        269
GGG        2013J        261
GGG        2014B        241
GGG        2014J        269
                ",,,,,
테이블 1개,university_learning,모든 모듈의 평균 모듈 프레젠테이션 진행 일수를 계산하고 모듈과 평균 프레젠테이션 진행 일수 조회,Calculate the average number of module presentation days for all modules and view the average number of module and presentation days,,"SELECT code_module, AVG(module_presentation_length) AS average_length FROM courses GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"AAA	268.5000
BBB	251.0000
CCC	255.0000
DDD	251.0000
EEE	259.3333
FFF	254.5000
GGG	257.0000",,,,,
테이블 1개,university_learning,특정 학생(25629)이 등록한 모든 모듈과 해당 프레젠테이션 코드,All modules registered by a specific student ('25629') and their presentation codes,,"SELECT code_module, code_presentation FROM studentInfo WHERE id_student = 25629;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,BBB	2013J,,,,,
테이블 1개,university_learning,최종 시험(Final Exam)이 있는 모든 모듈과 프레젠테이션 식별,Identify all modules and presentations that have a 'Final Exam',,"SELECT code_module, code_presentation FROM assessments WHERE assessment_type = 'Exam';","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,24,,"AAA	2013J
AAA	2014J
BBB	2013B
BBB	2013J
BBB	2014B
BBB	2014J
CCC	2014B
CCC	2014J
DDD	2013B
DDD	2013J
DDD	2014B
DDD	2014J
EEE	2013J
EEE	2014B
EEE	2014J
FFF	2013B
FFF	2013J
FFF	2014B
FFF	2014J
GGG	2013J
GGG	2014B
GGG	2014J
CCC	2014B
CCC	2014J",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션별로 평균 최종 점수를 계산하고 모듈, 프레젠테이션, 평균 최종 점수를 조회( 세 개의 테이블(studentAssessment, assessments, studentRegistration)을 결합)","Calculate the average final score for each module presentation and view the module, presentation, and average final score (combining the three tables (studentAssessment, assessments, studentRegistration))",,"SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentRegistration sr ON sa.id_student = sr.id_student AND a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	2013J	69.4316370324954
AAA	2014J	68.51905104241553
BBB	2013B	73.6403803950256",,,,,
테이블 1개,university_learning,등록 해제한 학생 수가 10명 이상인 모듈과 프레젠테이션 찾기,Find modules and presentations with 10 or more unenrolled students,,"SELECT code_module, code_presentation FROM studentRegistration WHERE date_unregistration IS NOT NULL GROUP BY code_module, code_presentation HAVING COUNT(id_student) >= 10;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,7,,"AAA	2013J
AAA	2014J
BBB	2013B
BBB	2013J
BBB	2014B
BBB	2014J
CCC	2014B",,,,,
테이블 2개,university_learning,각 모듈에 대해 등록한 학생의 평균 학점 수를 계산하고 모듈과 평균 학점 수 조회,Calculate the average number of credits for an enrolled student for each module and view the module and average number of credits,,"SELECT si.code_module, AVG(si.studied_credits) AS average_credits FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student AND si.code_module = sr.code_module GROUP BY si.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"AAA	84.4101
BBB	83.6031
CCC	78.2688",,,,,
테이블 4개,university_learning,"장애가 있는 학생들의 모듈 프레젠테이션별 평균 점수를 계산하고 모듈, 프레젠테이션 평균 점수를 조회",Calculate the average score for each module presentation of students with disabilities and view the average score for each module and presentation.,,"SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentRegistration sr ON si.id_student = sr.id_student AND a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"BBB	2013B	71.1285930408472
AAA	2013J	66.23684210526316
AAA	2014J	64.19047619047619",,,,,
테이블 1개,university_learning,모든 최종 시험의 평균 가중치를 계산 결과,Results of calculating the average weight of all final exams,,SELECT AVG(weight) AS average_weight FROM assessments WHERE assessment_type = 'Exam';,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,100,,,,,
테이블 1개,university_learning,모든 모듈에 대해 각 학생이 등록한 총 모듈 수를 계산하고 학생과 등록한 총 모듈 수 조회,Calculate the total number of modules registered by each student for all modules and view the total number of modules registered by a student,,"SELECT id_student, COUNT(*) AS total_modules_registered FROM studentRegistration GROUP BY id_student;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1000,,"6516	1
11391	1
23629	1
23632	1
23798	1
24734	1
25107	1
25629	1
25997	1
26192	1
26315	1
26677	1
26734	1
27457	1
27759	1
27891	1
28061	1
28400	1
28418	1
29144	1
29764	1
29820	1
30091	1
30268	1
31014	1
31600	1
31604	1
31663	1
31849	1
32327	1
32885	1
32930	1
33666	1
34229	1
34353	1
34431	1
34662	1
34694	1
34756	1
34863	1
35812	1
37622	1
38053	1
38234	1
38711	1
38941	1
39208	1
39655	1
40333	1
40604	1
41547	1
42638	1
45462	1
45642	1
45664	1
46605	1
46844	1
47855	1
47891	1
48040	1
48503	1
49119	1
50069	1
50263	1
50993	1
51301	1
51576	1
52130	1
52426	1
52765	1
52797	1
52899	1
53025	1
53236	1
53360	1
54388	1
54391	1
55026	1
55104	1
55968	1
56340	1
56789	1
57079	1
57285	1
57340	1
57369	1
57506	1
58071	1
58089	1
58316	1
58520	1
58653	1
58873	1
59185	1
59272	1
59541	1
59725	1
60416	1
60830	1
61118	1
61352	1
62155	1
62278	1
62487	1
62631	1
63044	1
63165	1
63400	1
63467	1
63721	1
64246	1
64275	1
64296	1
65002	1
65807	1
66254	1
67863	1
68556	1
69489	1
69494	1
69703	1
69843	1
70011	1
70381	1
70464	1
70569	1
70608	1
70750	1
70771	1
71361	1
71433	1
71504	1
72057	1
72070	1
72349	1
72400	1
73489	1
73584	1
73874	1
74169	1
74290	1
74372	1
74574	1
74585	1
74695	1
74734	1
75091	1
75118	1
75255	1
75399	1
75454	1
75469	1
75728	1
76196	1
77367	1
78255	1
78645	1
79378	1
79403	1
79461	1
80001	1
80329	1
80717	1
82535	1
82575	1
82611	1
82741	1
83219	1
83254	1
83453	1
84245	1
84299	1
84541	1
84664	1
84812	1
85092	1
85144	1
85302	1
86047	1
86291	1
87431	1
87604	1
87732	1
88340	1
88580	1
88758	1
89092	1
89778	1
89850	1
90243	1
90361	1
91265	1
91322	1
92274	1
92341	1
92832	1
92947	1
92993	1
93925	1
94484	1
94616	1
94961	1
95755	1
95906	1
96291	1
96475	1
96538	1
97006	1
97154	1
97486	1
97567	1
97865	1
98094	1
98268	1
98313	1
98452	1
98720	1
98842	1
99088	1
99799	1
100282	1
100621	1
100893	1
101116	1
101781	1
102067	1
102806	1
102849	1
102952	1
103496	1
103535	1
103998	1
104054	1
104238	1
104476	1
105523	1
105527	1
105851	1
105883	1
106095	1
106247	1
106383	1
106577	1
106588	1
106793	1
107028	1
107339	1
107489	1
107713	1
108118	1
108377	1
108589	1
108760	1
108799	1
108834	1
108859	1
108872	1
108947	1
109155	1
109372	1
109441	1
109782	1
109938	1
110175	1
110881	1
110911	1
111512	1
111717	1
111942	1
113295	1
114017	1
114402	1
114999	1
115452	1
116174	1
116518	1
116541	1
116603	1
116606	1
116692	1
117071	1
117232	1
117544	1
117545	1
117699	1
117818	1
118098	1
118213	1
118877	1
118983	1
119353	1
119437	1
119444	1
119471	1
119729	1
119898	1
119902	1
120994	1
121349	1
122392	1
122524	1
123044	1
123087	1
123270	1
123379	1
123462	1
123598	1
123716	1
123860	1
124064	1
124124	1
124193	1
124909	1
125018	1
125055	1
125535	1
125874	1
126322	1
126337	1
126394	1
126395	1
126411	1
126608	1
126713	1
126769	1
126800	1
127209	1
127582	1
128386	1
128510	1
128776	1
128889	1
129198	1
129638	1
129878	1
129955	1
130013	1
130034	1
130547	1
130636	1
131051	1
131145	1
131390	1
131695	1
131933	1
132055	1
132191	1
132626	1
132924	1
132972	1
132976	1
133104	1
133155	1
133269	1
133531	1
133748	1
133816	1
133922	1
134025	1
134143	1
134563	1
135330	1
135335	1
135400	1
135471	1
135792	1
137873	1
138289	1
138407	1
138920	1
139033	1
139190	1
139250	1
139549	1
140719	1
141355	1
141377	1
141506	1
141823	1
141949	1
142324	1
142326	1
142935	1
143741	1
143854	1
144801	1
145130	1
145280	1
145282	1
145544	1
146125	1
146165	1
146188	1
146503	1
146600	1
147675	1
147756	1
147793	1
147876	1
148427	1
148993	1
149741	1
149962	1
150398	1
151358	1
151549	1
151587	1
151697	1
151800	1
151917	1
152153	1
152428	1
152668	1
152867	1
152910	1
152929	1
152962	1
152973	1
153212	1
153687	1
153704	1
153788	1
154011	1
154027	1
154125	1
154540	1
154570	1
155067	1
155484	1
155550	1
155631	1
155735	1
155854	1
155963	1
155984	1
156311	1
156358	1
156788	1
156835	1
157060	1
157276	1
157310	1
157568	1
157752	1
157795	1
158707	1
159293	1
159954	1
160026	1
160300	1
161491	1
161678	1
161811	1
162646	1
162650	1
164259	1
164944	1
165099	1
165226	1
165243	1
165498	1
165647	1
165733	1
165823	1
165904	1
166160	1
167791	1
167906	1
167961	1
168178	1
168936	1
169008	1
169213	1
169380	1
169400	1
169515	1
170025	1
170356	1
170519	1
170864	1
171377	1
171751	1
171896	1
172112	1
172137	1
172301	1
172797	1
172965	1
173163	1
173316	1
173335	1
174024	1
174094	1
174222	1
174321	1
174440	1
174487	1
174745	1
174782	1
174807	1
175392	1
175447	1
175490	1
175772	1
175932	1
175991	1
177554	1
177639	1
177967	1
178072	1
178496	1
178654	1
178738	1
178963	1
179073	1
179254	1
179297	1
179605	1
179904	1
180753	1
180976	1
181316	1
182661	1
182824	1
183057	1
183096	1
183287	1
183331	1
183806	1
183947	1
184234	1
184236	1
184271	1
184583	1
184897	1
184972	1
185021	1
185240	1
185349	1
185350	1
185439	1
185597	1
186149	1
186565	1
186670	1
186780	1
186988	1
187100	1
187257	1
187435	1
187601	1
187793	1
188026	1
188152	1
188278	1
188766	1
189035	1
189095	1
189428	1
189624	1
189879	1
189986	1
190352	1
190565	1
191000	1
191269	1
191459	1
191746	1
191797	1
191973	1
192183	1
192424	1
192944	1
193163	1
193215	1
193310	1
193822	1
194073	1
194377	1
195096	1
195221	1
195262	1
195345	1
195938	1
195940	1
197240	1
197412	1
197486	1
197527	1
197595	1
197759	1
198339	1
198902	1
198956	1
199029	1
199520	1
199636	1
199663	1
199897	1
200372	1
200506	1
200804	1
200860	1
200863	1
200905	1
201327	1
201431	1
201655	1
202394	1
202635	1
202879	1
203108	1
203481	1
203640	1
203652	1
203707	1
204725	1
204746	1
205231	1
205350	1
205398	1
205425	1
205494	1
205719	1
205788	1
205978	1
206003	1
206245	1
206599	1
226374	1
226747	1
226827	1
226839	1
227192	1
227416	1
227499	1
227517	1
227752	1
227833	1
228021	1
228049	1
228082	1
228153	1
228222	1
228235	1
228243	1
228383	1
228481	1
228513	1
228743	1
228784	1
228824	1
228909	1
229179	1
229240	1
229326	1
229361	1
229426	1
229499	1
230081	1
230340	1
230348	1
230383	1
230761	1
231339	1
231554	1
231959	1
232307	1
232539	1
232600	1
232695	1
232745	1
232833	1
233095	1
233102	1
233317	1
233444	1
233752	1
233957	1
234068	1
234311	1
234740	1
234929	1
235068	1
235097	1
235175	1
235258	1
235371	1
235380	1
235428	1
235507	1
236161	1
236205	1
236284	1
236620	1
236875	1
237274	1
237304	1
237913	1
237934	1
238007	1
238144	1
238519	1
238825	1
239707	1
240712	1
240884	1
240993	1
241338	1
241649	1
241729	1
241955	1
242149	1
242390	1
242778	1
242793	1
242858	1
242893	1
243047	1
243351	1
243510	1
243851	1
243909	1
243992	1
244064	1
244246	1
244902	1
244917	1
244977	1
245217	1
245404	1
245494	1
245784	1
245987	1
246248	1
246834	1
247267	1
247292	1
247457	1
247513	1
247819	1
247902	1
247967	1
248103	1
248252	1
248270	1
248581	1
248653	1
248716	1
248800	1
249154	1
249534	1
250092	1
250123	1
251351	1
251385	1
251815	1
252073	1
252257	1
252340	1
252652	1
252863	1
253250	1
253577	1
253859	1
254313	1
254612	1
254625	1
255140	1
255310	1
255347	1
255548	1
255957	1
255998	1
256215	1
256532	1
256815	1
256998	1
258035	1
258268	1
258392	1
258402	1
258587	1
258840	1
258894	1
259182	1
260062	1
260137	1
260179	1
260216	1
260355	1
260623	1
260777	1
260949	1
260955	1
261042	1
261265	1
261332	1
261466	1
261615	1
262011	1
262294	1
262391	1
262454	1
262639	1
262741	1
262934	1
263098	1
263251	1
263448	1
263499	1
263531	1
263543	1
263952	1
264106	1
264152	1
264159	1
264281	1
264285	1
264694	1
264732	1
264744	1
264842	1
265170	1
265405	1
265466	1
265958	1
266040	1
266331	1
266524	1
266558	1
266564	1
266744	1
266915	1
267118	1
267761	1
267774	1
267853	1
268018	1
268073	1
268127	1
268301	1
268589	1
268733	1
269076	1
269082	1
269204	1
269289	1
269510	1
269676	1
270191	1
270256	1
270399	1
270567	1
270646	1
271036	1
271047	1
271251	1
271346	1
271467	1
272000	1
272103	1
272172	1
272580	1
272617	1
273346	1
273731	1
273877	1
274247	1
274577	1
274947	1
274971	1
275006	1
275112	1
275180	1
275296	1
275674	1
275792	1
276717	1
276925	1
277123	1
277537	1
277577	1
277733	1
277809	1
277812	1
277880	1
277967	1
278272	1
278447	1
278773	1
278794	1
278861	1
279238	1
279557	1
279572	1
279868	1
279883	1
280054	1
280140	1
280151	1
280152	1
280439	1
280962	1
281022	1
281077	1
281250	1
281261	1
281564	1
281589	1
281636	1
281801	1
282038	1
282161	1
282193	1
282713	1
282785	1
282821	1
283131	1
283564	1
283798	1
283978	1
284076	1
284246	1
284589	1
284593	1
284762	1
284812	1
284906	1
285050	1
285170	1
285315	1
285470	1
285475	1
285567	1
285633	1
285912	1
285992	1
286338	1
286402	1
286488	1
286690	1
286914	1
286947	1
287004	1
287040	1
287107	1
287204	1
287210	1
287309	1
287548	1
287679	1
288086	1
288380	1
288655	1
288717	1
288967	1
288990	1
288994	1
289009	1
289108	1
289397	1
289449	1
289753	1
289965	1
289993	1
290089	1
290164	1
290184	1
290201	1
290382	1
290550	1
290757	1
290914	1
291037	1
291194	1
291334	1
291544	1
291701	1
291805	1
291844	1
291848	1
292027	1
292525	1
292537	1
292775	1
292813	1
292923	1
293387	1
293699	1
293712	1
293754	1
293760	1
293824	1
293989	1
293992	1
294134	1
294381	1
294496	1
294513	1",,,,,
테이블 1개,university_learning,최소 2번 이상 같은 모듈을 시도한 학생 찾고 학생과 모듈 조회,Find students who have attempted the same module at least twice and search for students and modules,,"SELECT id_student, code_module FROM studentInfo WHERE num_of_prev_attempts >= 2 GROUP BY id_student, code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,256,,"23629	BBB
25997	BBB
26677	BBB
27891	BBB",,,,,
테이블 1개,university_learning,모든 학생의 평균 등록 일수를 계산,Calculate the average number of days enrolled for all students,,SELECT AVG(date_registration) AS average_registration_days FROM studentRegistration;,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,-73.3473,,,,,
테이블 1개,university_learning,등록 취소한 학생이 10명 이상인 모듈과 프레젠테이션 조회,View modules and presentations with more than 10 students who have canceled their registration,,"SELECT code_module, code_presentation FROM studentRegistration WHERE date_unregistration IS NOT NULL GROUP BY code_module, code_presentation HAVING COUNT(*) >= 10;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,7,,"AAA	2013J
AAA	2014J
BBB	2013B
BBB	2013J
BBB	2014B
BBB	2014J
CCC	2014B",,,,,
테이블 2개,university_learning,각 모듈별 평균 학점을 계산하고 모듈과 평균 학점 조회,Calculate the average grade for each module and view the module and average grade,,"SELECT si.code_module, AVG(si.studied_credits) AS average_credits FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"AAA	84.4101
BBB	83.6031
CCC	78.2688",,,,,
테이블 4개,university_learning,"각 모듈 프레젠테이션별 장애가 있는 학생의 평균 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 점수를 조회","Calculate the average score of students with disabilities for each module presentation and view the module code, presentation code, and average score",,"SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentRegistration sr ON a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"AAA	2013J	69.4316370324954
AAA	2014J	68.5986798679868
BBB	2013B	73.6403803950256",,,,,
테이블 1개,university_learning,모든 최종시험(Exam)의 평균 가중치를 계산 결과,Results of calculating the average weight of all final 'Exam',,SELECT AVG(weight) AS average_weight FROM assessments WHERE assessment_type = 'Exam';,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,100,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에서 제출된 과제점수가 아직 입력되지 않은 학생ID, 평가ID, 모듈 코드, 프레젠테이션 코드를 조회","In each module presentation, check the student ID, evaluation ID, module code, and presentation code for which the submitted assignment score has not yet been entered.",,"SELECT si.id_student, sa.id_assessment, sr.code_module, sr.code_presentation FROM studentassessment sa INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student WHERE sa.score IS NULL AND sa.date_submitted IS NOT NULL;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1000,,"721259	1752	AAA	2013J
260355	1754	AAA	2013J
2606802	1760	AAA	2014J
186780	14984	BBB	2013B
531205	14984	BBB	2013B
534151	14984	BBB	2013B
549713	14984	BBB	2013B
554393	14984	BBB	2013B
186780	14985	BBB	2013B
33666	14986	BBB	2013B
511527	14986	BBB	2013B
554818	14986	BBB	2013B
484039	14987	BBB	2013B
554818	14987	BBB	2013B
262294	14988	BBB	2013B
554818	14988	BBB	2013B
478317	14989	BBB	2013B
502717	14989	BBB	2013B
515497	14989	BBB	2013B",,,,,
테이블 2개,university_learning,특정 모듈에 대해 가중치가 50%를 넘는 모든 평가(유형 포함)와 가중치 조회,View all assessments (including their types) and weights with a weight greater than 50% for a specific module,,"SELECT a.assessment_type, a.weight FROM assessments a INNER JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND a.weight > 50;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,4,,"Exam	100
Exam	100
Exam	100
Exam	100",,,,,
테이블 2개,university_learning,특정 모듈 프레젠테이션에 사용된 모든 VLE 자료(활동 유형)를 나열,List all VLE materials (activity types) used in a specific module presentation,,SELECT v.activity_type FROM vle v INNER JOIN courses c ON v.code_module = c.code_module AND v.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND c.code_presentation = '2013B';,"CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,315,,"forumng
forumng
forumng
forumng
forumng
forumng
forumng
forumng
forumng
forumng
forumng
forumng
forumng
forumng
forumng
forumng
forumng
glossary
homepage
oucontent
quiz
quiz
quiz
quiz
quiz
url
url
url
url
url
url
url
url
url
url
url
url
url
url
url
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
subpage
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
resource
sharedsubpage
ouelluminate",,,,,
테이블 1개,university_learning,장애가 있는 학생('Y'로 표시된 경우) 중에서 'studentvle' 테이블에 등록되지 않은 학생의 ID를 검색,Retrieves the ID of students with disabilities (marked as 'Y') who are not registered in the 'studentvle' table.,,SELECT si.id_student FROM studentinfo si WHERE si.disability = 'Y' AND si.id_student NOT IN (SELECT id_student FROM studentvle);,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,853,,"26734
27759
27891
30091
34353
38711
50993
51301
55026
58520
59541
63721
64275
72400
74574
75118
76196
79378
88340
94484
98452
98720
105851
108377
108859
114402
120994
123598
123860
125055
125874
126395
126411
127209
129198
130013
132191
133104
133269
135400
139549
143741
146503
150398
151697
152867
164944
165498
165733
168178
170864
174094
178963
183287
183806
184236
186780
187793
189428
190565
191459
193822
198339
203652
205719
205788
228909
232745
235097
235175
235258
240993
243851
245987
248800
250123
251815
252340
254313
256215
261332
262294
262391
262454
264842
266558
267118
268589
269510
272103
272617
274247
277733
278794
280140
280151
283978
285633
288380
289397
289753
290914
291544
292813
293989
294496
295893
296408
299561
300059
300594
305373
305876
306964
314555
316061
316076
321346
322574
325887
329659
340661
341229
341509
342192
342685
345083
349401
352339
355591
356386
357214
357851
358289
359114
359460
360489
363151
365111
365452
369234
369715
370307
371113
372624
374102
374515
377546
377759
379720
380151
381525
383015
384884
385040
385820
386348
386889
388052
388750
389471
390233
390442
392060
393327
394791
395073
395164
395169
395229
396599
396655
397414
397590
397763
398965
399792
401319
402727
403093
404239
405961
406265
408112
409160
412284
412343
413052
414350
417971
418206
418623
419924
420087
421209
422752
423613
423652
426610
426616
427704
429777
435282
437030
440323
440591
440912
442466
442530
444408
444926
447759
465764
466714
466810
467179
467330
467606
468482
468949
469803
470464
472182
474071
474408
474759
475241
475594
475688
476710
476868
479267
479753
480928
482680
482945
483243
483485
483744
484301
485006
485439
485853
486282
486737
488431
488908
488929
489320
490282
490297
490587
490665
491097
491232
491279
491843
492153
492229
492468
492676
492900
493377
493515
493793
494389
494919
495035
495625
495674
495786
496220
497084
497278
498296
499067
499790
500006
500135
500585
500659
500836
501339
501637
501955
502088
502621
503516
503663
503878
504057
505417
505595
505815
505899
506206
507279
508047
508470
509390
509901
510141
510650
511001
511506
511527
512180
513016
513076
513077
513210
513751
514031
514186
514526
514776
515046
515311
515329
515648
515936
516057
516926
517016
518223
518389
518496
518879
519602
519622
520749
521081
521164
521297
521341
521903
522383
522478
523857
524769
525332
525501
525877
525942
527020
527382
528175
529000
529118
529597
530226
530514
530753
531573
532534
532710
533301
533324
533545
534360
534671
534765
535530
535590
536205
536510
536767
537622
537640
537654
537698
539695
541013
541073
541196
541995
542259
542260
542562
543124
543165
543170
543180
543963
544632
545297
545521
545697
546196
546250
546333
546909
547268
547873
548097
548488
548791
548885
549636
549713
550208
550381
550400
550898
550941
551053
551129
551172
551628
551770
552039
552399
552667
552698
552749
552931
553125
553196
553410
553508
553807
553840
554206
554599
554951
555015
555061
555338
555346
555552
555747
555880
555909
556012
556290
556521
556986
557827
557935
558092
558595
558983
559350
560074
560114
560494
561060
561979
562495
563819
563820
564325
564958
566339
566392
567013
567033
567273
567402
567958
567963
569108
569712
570437
570872
570970
571129
571395
571897
572378
572416
572496
572538
572987
573130
573208
573275
573409
573831
574348
574580
574708
575251
575290
575892
576445
577007
577376
578264
578447
578551
579550
580477
580540
580689
580722
581647
581826
581877
582460
582694
582806
582878
583007
583012
583240
584534
584586
584664
585695
585764
585915
585963
586111
586436
586473
586535
586561
586818
586975
587071
587923
588059
588504
588590
588592
588685
589108
589508
589525
590408
591159
591895
592051
592284
592624
593189
593871
593898
593930
594193
594199
594468
594529
595164
595499
595672
595854
596451
596964
596988
597255
597316
597451
597689
598202
598315
598395
598901
599016
599037
599207
599323
599423
599547
599615
599644
599769
600121
600436
600463
600476
600541
600606
600856
601285
601346
601551
601706
601882
602011
602666
602891
603113
604079
604196
604543
604610
604655
604939
605089
605207
605595
605691
605771
605832
605901
606027
606282
606313
606335
606417
606531
607411
607436
607861
607896
608000
608319
608549
608623
608738
610385
610449
610589
611046
612212
612750
613199
613447
613703
614059
614265
614601
614804
615018
615025
615165
615218
615229
616332
616333
616526
617287
618151
618539
618590
618649
618673
618744
618882
619161
620215
620320
620408
620713
620974
621303
621322
622573
622867
623055
623069
624427
624544
624661
624799
624879
625493
626123
626159
626386
626806
627252
627316
627403
627680
627968
628088
628580
628827
629538
630090
630345
630346
630443
630476
630586
631132
631190
631197
631442
631561
631563
632148
632302
633650
634298
635755
635793
636302
637295
638997
641540
641992
643608
643953
645678
646798
648201
648693
649351
651925
652886
652906
653027
653059
653086
653295
654415
654796
655878
657099
674501
675085
675161
677230
677338
677879
677922
678144
678213
678244
678623
678702
680453
680471
680862
681710
682289
683140
683987
684375
684687
684704
684931
686822
687060
688130
688144
689069
689131
689298
689329
689727
690902
690967
692164
692384
692553
692609
693269
694190
694554
694682
695049
695356
695405
695631
696348
696527
696634
697065
698586
1018682
1341507
1411627
1432518
1436591
1472925
1503056
1508708
1541133
1560989
1721462
1732219
1733023
1778145
1829654
1840034
1863244
1904710
1939695
1967783
1993672
2001687
2035022
2072166
2087747
2103305
2132811
2133207
2184026
2192113
2213814
2230457
2231614
2232976
2246708
2251500
2271743
2273256
2287671
2291598
2293443
2300913
2303034
2322046
2375975
2392789
2399380
2410331
2411595
2414945
2415962
2417841
2418877
2425333
2429854
2444501
2444641
2446599
2458984
2464683
2464901
2466123
2476144
2481224
2497189
2497624
2521865
2528966
2534033
2534954
2575914
2584834
2585937
2592923
2594368
2603534
2609574
2616787
2620432
2626511
2629503
2631545
2641682
2656860
2660510
2680885
2687644
2694788
2694919
",,,,,
테이블 4개,university_learning,이전에 모듈을 시도하지 않은 학생의 평균 점수가 가장 높은 평가와 평균 점수 조회,View the highest average score and the average score for students who have not attempted the module before,,"SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts = 0 GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,14991	94.18181818181819,,,,,
테이블 2개,university_learning,"낙제 성적을 받은 학생의 비율이 가장 높은 모듈, 프레젠테이션, 학생의 비율을 조회","View the modules, presentations, and percentage of students with the highest percentage of students failing.",,"SELECT sr.code_module, sr.code_presentation, (COUNT(si.final_result) - COUNT(CASE WHEN si.final_result >= 40 THEN si.final_result END)) / COUNT(si.final_result) * 100 AS fail_percentage FROM studentregistration sr INNER JOIN studentinfo si ON si.id_student = sr.id_student WHERE si.final_result IS NOT NULL GROUP BY sr.code_module, sr.code_presentation ORDER BY fail_percentage DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,AAA	2014J	100.0000,,,,,
테이블 4개,university_learning,모듈을 한 번 이상 시도한 적이 있는 학생들의 평균 점수를 평가 유형별로 계산하고 평균 점수가 가장 낮은 평가 유형과 평균 점수 조회,Calculate the average score by assessment type for students who have attempted a module at least once and view the assessment type with the lowest average score and average score,,"SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts > 0 GROUP BY a.assessment_type ORDER BY avg_score ASC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,TMA	69.68636796949475,,,,,
테이블 1개,university_learning,"자퇴한(탈퇴비율) 학생 수가 전체 등록 학생 수의 20%를 넘는 모듈, 프레젠테이션, 탈퇴 비율 조회","Check modules, presentations, and withdrawal rates where the number of students who have dropped out (withdrawal rate) exceeds 20% of the total number of enrolled students.",,"SELECT sr.code_module, sr.code_presentation, (COUNT(sr.date_unregistration) / CAST(COUNT(*) AS FLOAT)) * 100 AS withdrawal_percentage FROM studentregistration sr GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(sr.date_unregistration) / CAST(COUNT(*) AS FLOAT)) * 100 > 20;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,5,,"BBB	2013B	28.5795
BBB	2013J	28.7278
BBB	2014B	30.3090
BBB	2014J	32.1574
CCC	2014B	46.6865",,,,,
테이블 2개,university_learning,평가를 제출하지 않은 학생의 비율이 가장 높은 평가 유형과 학생 비율 조회,View the assessment type and percentage of students with the highest percentage of students who did not submit an assessment,,"SELECT a.assessment_type, (COUNT(sa.id_student) - COUNT(sa.date_submitted)) / COUNT(sa.id_student) * 100 AS non_submission_percentage FROM assessments a LEFT JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type ORDER BY non_submission_percentage DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,TMA	0.0000,,,,,
테이블 3개,university_learning,"학생당 평균 VLE 상호 작용 수가 가장 낮은 모듈, 프레젠테이션, 평균 VLE 상호 작용 수를 조회","Look up which module, presentation, and average number of VLE interactions have the lowest average number of VLE interactions per student.",,"SELECT sr.code_module, sr.code_presentation, AVG(sve.sum_click) AS avg_clicks_per_student FROM studentvle sve INNER JOIN studentinfo si ON si.id_student = sve.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation ORDER BY avg_clicks_per_student ASC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	2013J	4.3352,,,,,
테이블 4개,university_learning,"교육 수준이 가장 높은 학생 중에서 평균 점수가 가장 높은 평가를 식별하고 평가ID, 평균 점수를 조회",Identify the assessment with the highest average score among students with the highest level of education and retrieve the assessment ID and average score.,,"SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.highest_education = (SELECT MAX(highest_education) FROM studentinfo) GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,14991	100,,,,,
테이블 4개,university_learning,"모듈 발표에 처음 등록한 학생 중 평균 점수가 가장 높은 평가를 식별하고 평가ID, 평균 점수를 조회","Among students who initially registered for a module presentation, identify the assessment with the highest average score and retrieve the assessment ID and average score.",,"SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts = 0 GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,14991	94.18181818181819,,,,,
테이블 2개,university_learning,"각 모듈 프레젠테이션의 평균 평가 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 평가점수를 조회","Calculate the average evaluation score of each module presentation and view the module code, presentation code, and average evaluation score",,"SELECT code_module, code_presentation, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	2013J	69.4316370324954
AAA	2014J	68.5986798679868
BBB	2013B	73.6403803950256",,,,,
테이블 1개,university_learning,"각 모듈에 대해 최종 결과가 'Pass'인 학생의 수를 계산하고 모듈 코드, 학생 수를 조회","For each module, calculate the number of students whose final result is ''Pass'' and look up the module code and number of students.",,"SELECT code_module, COUNT(id_student) AS pass_count FROM studentInfo WHERE final_result = 'Pass' GROUP BY code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	469
BBB	3015
CCC	330",,,,,
테이블 4개,university_learning,"각 모듈 프레젠테이션에 대해 가장 많은 평가를 받은 학생의 성별과 평가 유형을 식별하고 모듈 코드, 프레젠테이션 코드, 성별, 평가 유형, 평가수를 조회","Identify the gender and evaluation type of the student who received the most evaluations for each module presentation and view the module code, presentation code, gender, evaluation type, and number of evaluations",,"SELECT sr.code_module, sr.code_presentation, si.gender, a.assessment_type, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentregistration sr ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.gender, a.assessment_type ORDER BY assessment_count DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,BBB	2013B	F	TMA	5497,,,,,
테이블 1개,university_learning,"각 모듈 프레젠테이션에 대해 평균 가중 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 가중 점수를 조회","Calculate the average weighted score for each module presentation and look up the module code, presentation code, and average weighted score",,"SELECT code_module, code_presentation, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module, code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,22,,"AAA        2013J        33.3333
AAA        2014J        33.3333
BBB        2013B        16.6667
BBB        2013J        16.6667
BBB        2014B        16.6667
BBB        2014J        33.3333
CCC        2014B        30.0000
CCC        2014J        30.0000
DDD        2013B        14.3571
DDD        2013J        28.7143
DDD        2014B        28.7143
DDD        2014J        28.5714
EEE        2013J        40.0000
EEE        2014B        40.0000
EEE        2014J        40.0000
FFF        2013B        15.4615
FFF        2013J        15.4615
FFF        2014B        15.4615
FFF        2014J        15.4615
GGG        2013J        10.0000
GGG        2014B        10.0000
GGG        2014J        10.0000",,,,,
테이블 1개,university_learning,"각 모듈 프레젠테이션에 대해 최고 학력이 'A Level or Equivalent'인 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","For each module presentation, calculate the number of students with the highest academic level of 'A Level or Equivalent' and look up the module code, presentation code, and number of students.",,"SELECT code_module, code_presentation, COUNT(id_student) AS a_level_count FROM studentInfo WHERE highest_education = 'A Level or Equivalent' GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"BBB	2013J	899
BBB	2014B	643
AAA	2014J	181
BBB	2014J	905
CCC	2014B	616
AAA	2013J	194
BBB	2013B	751",,,,,
테이블 3개,university_learning,"평가 유형별로 가장 많은 평가를 받은 모듈과 평가유형을 식별하고 평가 유형, 모듈 코드, 평가수를 조회","Identify the modules and evaluation types that have received the most evaluations by evaluation type and view the evaluation type, module code, and number of evaluations.",,"SELECT a.assessment_type, sr.code_module, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentregistration sr ON sa.id_student = sr.id_student GROUP BY a.assessment_type, sr.code_module ORDER BY assessment_count DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,TMA	BBB	6207,,,,,
테이블 1개,university_learning,장애가 있는 학생 중에서 가장 많은 다른 모듈에 등록된 학생ID와 학생 수 조회,Check the student ID and number of students enrolled in the most different modules among students with disabilities,,"SELECT si.id_student, COUNT(DISTINCT si.code_module) AS distinct_module_count FROM studentInfo si WHERE si.disability = 'Y' GROUP BY si.id_student ORDER BY distinct_module_count DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,26734	1,,,,,
테이블 2개,university_learning,"학생 평가 데이터와 평가 데이터를 결합하여 모든 과목 모듈 및 프레젠테이션에 대한 평균 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 점수를 조회","Combine student evaluation data with assessment data to calculate average scores for all subject modules and presentations, and look up module codes, presentation codes, and average scores.",,"SELECT code_module, code_presentation, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	2013J	69.4316370324954
AAA	2014J	68.5986798679868
BBB	2013B	73.6403803950256",,,,,
테이블 2개,university_learning,모든 평가 유형에서 가장 높은 평균 점수를 가진 모듈을 식별,Identify modules with the highest average scores across all assessment types,,"SELECT code_module FROM ( SELECT code_module, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, a.assessment_type ) AS avg_scores GROUP BY code_module ORDER BY MAX(avg_score) DESC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,BBB,,,,,
테이블 1개,university_learning,여러 모듈에 등록한 학생 중 가장 많은 학생이 등록한 모듈 코드를 식별,"Among students enrolled in multiple modules, identify the module code in which the most students are enrolled",,"SELECT code_module FROM ( SELECT code_module, COUNT(DISTINCT id_student) AS student_count FROM studentInfo GROUP BY code_module ) AS module_counts ORDER BY student_count DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,BBB,,,,,
테이블 1개,university_learning,"각 모듈 프레젠테이션에서 장애를 신고한 여학생의 비율을 계산하고 모듈 코드, 프레젠테이션 코드, 비율 계산값을 조회","Calculate the percentage of female students who reported a disability in each module presentation and view the module code, presentation code, and percentage calculation value.",,"SELECT si.code_module, si.code_presentation, SUM(CASE WHEN si.gender = 'F' AND si.disability = 'Yes' THEN 1 ELSE 0 END) / COUNT(*) AS female_disabled_ratio FROM studentInfo si GROUP BY si.code_module, si.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"AAA        2014J        0.0000
AAA        2013J        0.0000
BBB        2013B        0.0000
BBB        2013J        0.0000
BBB        2014B        0.0000
BBB        2014J        0.0000
CCC        2014B        0.0000",,,,,
테이블 2개,university_learning,"모든 모듈에 대해 최종 결과가 'Pass'로 기록된 학생 중 시험 점수가 40점 미만인 학생 수를 계산하고 모듈 코드, 학생수를 조회","Calculate the number of students whose final result is ''Pass'' for all modules with a test score of less than 40, and look up the module code and number of students.",,"SELECT si.code_module, COUNT(si.id_student) AS pass_fail_count FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Pass' AND sa.score < 40 GROUP BY si.code_module;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"AAA	30
BBB	48",,,,,
테이블 2개,university_learning,"최근 평가를 제출한 학생의 평가 유형과 평가 일자를 식별하고 평가 유형, 평가 일자를 조회",Identify the assessment type and assessment date for students who recently submitted an assessment and view the assessment type and assessment date,,"SELECT a.assessment_type, sa.date_submitted FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment ORDER BY sa.date_submitted DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,TMA	193,,,,,
테이블 2개,university_learning,"각 모듈에 대해 가장 많은 시도 횟수를 가진 학생의 최종 결과를 식별하고 모듈 코드, 최종 결과를 조회","Identify the final result of the student with the highest number of attempts for each module, look up the module code, and the final result",,"SELECT sr.code_module, si.final_result FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(num_of_prev_attempts) AS max_attempts FROM studentInfo GROUP BY id_student ) AS max_attempts ON si.id_student = max_attempts.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1000,,"AAA	Pass
AAA	Pass
BBB	Fail
BBB	Withdrawn
BBB	Distinction
AAA	Pass",,,,,
테이블 3개,university_learning,"평가 결과가 'Distinction'이고 가장 많은 평가를 받은 모듈을 식별하고 모듈 코드, 평가의 수를 조회","If the evaluation result is 'Distinction', identify the module with the most evaluations and query the module code and number of evaluations.",,"SELECT sr.code_module, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student WHERE si.final_result = 'Distinction' GROUP BY sr.code_module ORDER BY assessment_count DESC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,BBB	998,,,,,
테이블 2개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 가장 많은 모듈을 이수한 학생의 나이를 식별하고 모듈 코드, 프레젠테이션 코드, 연령대를 조회","Among students enrolled in each module presentation, identify the age of the student who completed the most modules and look up the module code, presentation code, and age range",,"SELECT sr.code_module, sr.code_presentation, MAX(si.age_band) AS max_age_band FROM studentInfo si INNER JOIN studentregistration sr ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,7,,"AAA        2013J        55<=
AAA        2014J        55<=
BBB        2013B        35-55
BBB        2013J        55<=
BBB        2014B        55<=
BBB        2014J        55<=
CCC        2014B        55<=",,,,,
테이블 3개,university_learning,"각 모듈에 등록한 학생 중 최고 학력이 'Lower Than A Level'이고 모든 평가 결과가 'Pass'인 학생의 수를 계산하고 모듈 코드, 학생수를 조회","Calculate the number of students enrolled in each module whose highest academic background is 'Lower Than A Level' and all evaluation results are ''Pass'', and look up the module code and number of students.",,"SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS lower_than_a_level_pass_count FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.highest_education = 'Lower Than A Level' AND sa.score >= 40 GROUP BY sr.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,2,,"AAA	144
BBB	584",,,,,
테이블 2개,university_learning,"모든 모듈 프레젠테이션에 대해 평균 평가 점수가 가장 높은 모듈을 식별하고 모듈 코드, 평균 점수를 조회","For all module presentations, identify the module with the highest average evaluation score and look up the module code and average score.",,"SELECT sr.code_module, AVG(sa.score) AS avg_score FROM studentAssessment sa INNER JOIN studentregistration sr ON sa.id_student = sr.id_student GROUP BY sr.code_module ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,BBB	73.6403803950256,,,,,
테이블 2개,university_learning,"각 모듈 프레젠테이션에서 가장 많은 시도 횟수를 가진 학생의 성별을 식별하고 모듈 코드, 프레젠테이션 코드, 성별을 조회","Identify the gender of the student with the highest number of attempts in each module presentation and look up the module code, presentation code, and gender",,"SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(num_of_prev_attempts) AS max_attempts FROM studentInfo GROUP BY id_student ) AS max_attempts ON si.id_student = max_attempts.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1000,,"AAA	2014J	M
AAA	2013J	M
BBB	2013B	F
BBB	2013J	F
BBB	2013J	M
AAA	2014J	F
BBB	2013B	F
BBB	2013J	F
BBB	2014B	F
AAA	2014J	F
BBB	2014J	F
BBB	2013J	M
BBB	2014J	M
BBB	2013J	F
BBB	2013J	M
BBB	2013B	M
AAA	2014J	M
AAA	2013J	F
CCC	2014B	F
BBB	2013B	M
CCC	2014B	M
CCC	2014B	M
BBB	2013J	F
AAA	2013J	F
BBB	2013J	F
AAA	2014J	F
AAA	2013J	F
BBB	2013B	M
BBB	2013J	F
BBB	2014J	F
AAA	2013J	F
BBB	2014J	F
BBB	2013B	F
BBB	2013B	F
BBB	2013B	M
BBB	2013B	F
BBB	2014J	F
BBB	2013B	M
BBB	2013B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013J	F
AAA	2013J	M
BBB	2013J	F
BBB	2014J	M
BBB	2014B	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
CCC	2014B	M
BBB	2014J	F
CCC	2014B	M
AAA	2013J	M
AAA	2013J	F
CCC	2014B	M
CCC	2014B	M
AAA	2014J	M
BBB	2013J	F
BBB	2014J	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
BBB	2014B	F
CCC	2014B	M
BBB	2013B	F
BBB	2013J	F
CCC	2014B	F
AAA	2013J	F
BBB	2014B	F
AAA	2014J	F
BBB	2013J	F
BBB	2013B	F
AAA	2013J	M
BBB	2014J	F
BBB	2013J	F
BBB	2013J	M
CCC	2014B	M
BBB	2013J	F
AAA	2014J	F
BBB	2014B	F
BBB	2013J	F
BBB	2013J	F
BBB	2013J	F
BBB	2014J	F
CCC	2014B	F
BBB	2013J	M
AAA	2013J	M
AAA	2014J	M
BBB	2013B	F
AAA	2014J	F
BBB	2014J	F
BBB	2014J	F
AAA	2013J	F
AAA	2013J	M
BBB	2014J	F
CCC	2014B	M
BBB	2014B	F
BBB	2014B	F
BBB	2014B	F
BBB	2013J	F
BBB	2014J	F
AAA	2013J	F
CCC	2014B	M
AAA	2014J	F
BBB	2013B	F
BBB	2013J	F
AAA	2014J	M
AAA	2013J	M
BBB	2014J	F
BBB	2014B	F
BBB	2013J	F
BBB	2014B	F
CCC	2014B	M
AAA	2013J	F
BBB	2013J	F
CCC	2014B	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
CCC	2014B	F
CCC	2014B	M
BBB	2013J	F
AAA	2014J	F
CCC	2014B	M
AAA	2013J	F
BBB	2014J	F
BBB	2013B	F
BBB	2014J	F
CCC	2014B	M
AAA	2013J	M
BBB	2013B	F
BBB	2014J	F
BBB	2013J	F
BBB	2013B	M
BBB	2014J	F
BBB	2014B	F
BBB	2013J	F
BBB	2014J	F
BBB	2014J	F
BBB	2013J	M
CCC	2014B	M
AAA	2013J	M
BBB	2014J	F
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
AAA	2013J	M
BBB	2014B	F
AAA	2014J	M
BBB	2013B	F
CCC	2014B	M
CCC	2014B	M
CCC	2014B	F
BBB	2014B	F
AAA	2013J	M
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
AAA	2014J	M
CCC	2014B	M
BBB	2014B	F
CCC	2014B	M
BBB	2013J	F
BBB	2013B	F
CCC	2014B	M
BBB	2014J	F
BBB	2013B	F
CCC	2014B	F
BBB	2013B	F
CCC	2014B	M
BBB	2013B	M
CCC	2014B	M
BBB	2014J	F
BBB	2013B	F
BBB	2013J	F
AAA	2014J	F
AAA	2014J	M
AAA	2014J	M
CCC	2014B	F
BBB	2013B	F
AAA	2014J	M
BBB	2013B	F
BBB	2013B	M
BBB	2014B	F
BBB	2013B	F
CCC	2014B	M
BBB	2014B	F
BBB	2014B	M
BBB	2014J	F
BBB	2013J	F
BBB	2014B	F
AAA	2013J	M
BBB	2013B	F
BBB	2013B	F
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013B	F
BBB	2014B	F
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
AAA	2014J	M
CCC	2014B	F
BBB	2013B	F
BBB	2013J	M
CCC	2014B	M
BBB	2014B	F
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
BBB	2014B	F
AAA	2013J	M
BBB	2013J	F
BBB	2013B	F
BBB	2014J	M
BBB	2013J	F
BBB	2014J	F
BBB	2014J	F
BBB	2014B	F
BBB	2013J	F
CCC	2014B	M
AAA	2013J	M
AAA	2014J	F
AAA	2013J	M
BBB	2014J	F
AAA	2013J	M
BBB	2013B	F
AAA	2013J	M
BBB	2014J	F
BBB	2014B	F
BBB	2014J	F
BBB	2013B	F
BBB	2014B	F
AAA	2013J	M
CCC	2014B	M
BBB	2013J	F
BBB	2013J	F
BBB	2013J	F
BBB	2014J	F
AAA	2013J	M
BBB	2014J	F
AAA	2013J	M
BBB	2013J	F
BBB	2014J	M
CCC	2014B	M
CCC	2014B	F
AAA	2014J	F
BBB	2014B	F
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
BBB	2013J	F
BBB	2014B	F
CCC	2014B	M
BBB	2014J	M
AAA	2014J	M
CCC	2014B	M
AAA	2014J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013J	F
BBB	2013B	F
AAA	2013J	M
BBB	2013B	F
BBB	2014J	F
AAA	2014J	M
AAA	2013J	F
BBB	2013J	F
AAA	2013J	M
AAA	2013J	F
BBB	2014J	F
AAA	2013J	M
BBB	2014B	F
CCC	2014B	M
CCC	2014B	M
AAA	2013J	M
BBB	2013B	F
BBB	2014J	M
AAA	2013J	M
BBB	2013B	M
CCC	2014B	M
BBB	2014J	F
BBB	2014J	F
BBB	2014B	F
AAA	2014J	F
CCC	2014B	M
BBB	2014J	F
BBB	2014J	F
AAA	2013J	M
CCC	2014B	M
BBB	2014J	F
BBB	2014J	F
BBB	2014B	F
CCC	2014B	M
BBB	2013J	F
AAA	2014J	F
BBB	2013B	F
AAA	2014J	F
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
BBB	2014J	F
BBB	2014B	F
BBB	2013B	F
BBB	2014B	M
CCC	2014B	M
BBB	2013J	M
BBB	2013B	F
AAA	2014J	F
CCC	2014B	F
CCC	2014B	M
BBB	2013J	M
AAA	2014J	M
BBB	2014B	F
BBB	2014J	F
BBB	2013J	F
BBB	2013B	F
CCC	2014B	M
CCC	2014B	M
CCC	2014B	M
BBB	2013B	F
BBB	2014B	M
BBB	2014B	F
BBB	2014J	F
BBB	2014J	F
BBB	2013B	F
AAA	2013J	F
BBB	2013J	M
CCC	2014B	F
BBB	2013B	F
BBB	2013J	F
CCC	2014B	F
CCC	2014B	F
CCC	2014B	M
AAA	2013J	M
BBB	2014B	F
AAA	2014J	F
AAA	2014J	F
AAA	2014J	M
BBB	2013J	F
CCC	2014B	M
AAA	2014J	M
CCC	2014B	F
CCC	2014B	M
BBB	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2014J	F
BBB	2014B	F
AAA	2013J	F
CCC	2014B	M
BBB	2013B	F
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
AAA	2014J	F
AAA	2014J	M
CCC	2014B	M
AAA	2013J	F
BBB	2013J	F
CCC	2014B	M
AAA	2013J	F
AAA	2013J	F
AAA	2014J	M
CCC	2014B	M
AAA	2013J	M
BBB	2013J	F
BBB	2014J	F
BBB	2013J	F
AAA	2014J	M
CCC	2014B	M
BBB	2014B	F
BBB	2013J	F
BBB	2014B	F
AAA	2013J	F
AAA	2013J	M
AAA	2014J	M
BBB	2013B	F
BBB	2013J	F
BBB	2013B	F
AAA	2013J	F
CCC	2014B	F
BBB	2013B	F
BBB	2013B	F
AAA	2013J	F
AAA	2013J	M
BBB	2014J	F
CCC	2014B	M
BBB	2013B	M
CCC	2014B	M
BBB	2013J	F
AAA	2013J	F
AAA	2014J	M
BBB	2013J	F
CCC	2014B	M
AAA	2013J	M
AAA	2013J	F
BBB	2013B	M
BBB	2014B	F
AAA	2013J	F
AAA	2014J	F
AAA	2014J	M
BBB	2014J	F
AAA	2013J	F
CCC	2014B	M
AAA	2014J	F
BBB	2013B	F
BBB	2013J	F
BBB	2013J	F
BBB	2013B	F
CCC	2014B	F
AAA	2014J	F
BBB	2013J	F
BBB	2013B	M
BBB	2013B	F
CCC	2014B	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	F
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013J	F
CCC	2014B	M
BBB	2014J	F
AAA	2013J	M
BBB	2014B	F
BBB	2013B	F
AAA	2013J	F
CCC	2014B	M
AAA	2013J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013J	M
BBB	2013B	F
BBB	2013J	F
BBB	2014B	F
CCC	2014B	F
AAA	2013J	F
BBB	2014J	F
BBB	2013J	M
AAA	2014J	F
BBB	2014B	M
AAA	2013J	M
BBB	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2013B	F
BBB	2014J	F
BBB	2013J	F
CCC	2014B	M
AAA	2013J	M
AAA	2014J	F
BBB	2014J	F
AAA	2014J	F
BBB	2013B	M
BBB	2014J	F
CCC	2014B	F
CCC	2014B	M
BBB	2013J	F
BBB	2014B	F
CCC	2014B	F
CCC	2014B	M
AAA	2013J	F
AAA	2014J	M
CCC	2014B	M
AAA	2013J	F
BBB	2014J	M
BBB	2013J	F
CCC	2014B	M
BBB	2014J	F
BBB	2013B	F
CCC	2014B	F
BBB	2013B	F
BBB	2014B	F
CCC	2014B	M
BBB	2013B	F
BBB	2014B	F
CCC	2014B	F
AAA	2013J	M
BBB	2014B	F
CCC	2014B	M
AAA	2013J	F
CCC	2014B	M
BBB	2014J	F
BBB	2013B	F
BBB	2013B	F
AAA	2014J	M
AAA	2014J	F
BBB	2013J	F
BBB	2013B	F
BBB	2013J	F
BBB	2013J	F
AAA	2014J	F
AAA	2013J	M
CCC	2014B	F
AAA	2013J	M
AAA	2014J	M
CCC	2014B	F
AAA	2014J	F
AAA	2013J	M
AAA	2013J	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
CCC	2014B	M
CCC	2014B	M
CCC	2014B	F
BBB	2013J	F
BBB	2013J	M
BBB	2014J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
AAA	2013J	M
CCC	2014B	M
AAA	2013J	F
BBB	2013J	F
BBB	2013B	F
AAA	2014J	M
AAA	2013J	F
BBB	2014B	F
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
BBB	2014J	F
BBB	2013J	M
AAA	2013J	M
BBB	2014J	F
BBB	2013J	F
BBB	2014J	F
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
AAA	2014J	M
AAA	2013J	M
BBB	2013J	F
AAA	2013J	M
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013B	F
AAA	2013J	M
BBB	2014B	F
CCC	2014B	F
BBB	2014B	F
BBB	2013B	F
BBB	2013J	F
BBB	2013B	M
AAA	2013J	M
BBB	2014J	F
BBB	2014B	F
BBB	2013J	F
CCC	2014B	F
CCC	2014B	M
AAA	2013J	M
BBB	2014B	F
BBB	2014B	F
BBB	2014B	F
CCC	2014B	M
BBB	2013J	F
BBB	2014J	F
BBB	2014J	F
CCC	2014B	F
BBB	2014J	F
AAA	2013J	F
BBB	2013B	M
BBB	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2014J	F
BBB	2013B	F
BBB	2014B	F
CCC	2014B	F
BBB	2013J	F
BBB	2014J	F
AAA	2013J	M
BBB	2014J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
BBB	2014J	F
BBB	2013B	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
BBB	2013B	M
BBB	2013J	F
BBB	2013B	F
AAA	2014J	M
BBB	2013J	M
AAA	2014J	M
CCC	2014B	M
BBB	2014B	F
AAA	2014J	M
AAA	2013J	M
BBB	2013B	F
BBB	2013B	F
CCC	2014B	M
BBB	2014B	F
BBB	2014J	F
BBB	2014B	F
AAA	2013J	F
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
BBB	2013J	M
BBB	2013B	F
CCC	2014B	M
CCC	2014B	M
BBB	2013B	F
BBB	2013B	F
AAA	2013J	M
CCC	2014B	M
CCC	2014B	M
AAA	2014J	M
AAA	2013J	M
BBB	2013J	F
BBB	2014J	F
BBB	2014B	F
CCC	2014B	M
CCC	2014B	M
BBB	2013B	M
BBB	2014B	F
BBB	2013B	F
BBB	2014J	F
CCC	2014B	M
BBB	2013J	M
AAA	2013J	F
AAA	2013J	M
CCC	2014B	F
CCC	2014B	F
AAA	2014J	M
BBB	2013B	F
AAA	2013J	M
CCC	2014B	M
AAA	2013J	M
BBB	2013B	F
BBB	2013J	M
AAA	2014J	M
BBB	2014B	F
BBB	2013J	F
CCC	2014B	M
BBB	2014B	F
BBB	2014B	F
BBB	2014J	M
AAA	2013J	M
BBB	2013B	F
BBB	2014J	F
AAA	2013J	M
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
CCC	2014B	M
BBB	2013B	F
BBB	2014J	F
CCC	2014B	M
CCC	2014B	F
AAA	2013J	M
BBB	2013J	F
AAA	2014J	M
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013B	F
CCC	2014B	M
BBB	2014B	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
CCC	2014B	M
CCC	2014B	M
BBB	2013J	F
AAA	2014J	F
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
BBB	2014J	M
BBB	2014B	F
BBB	2013J	M
AAA	2013J	M
BBB	2014B	F
CCC	2014B	M
AAA	2013J	M
CCC	2014B	M
AAA	2014J	M
AAA	2014J	M
BBB	2013B	M
BBB	2013B	F
CCC	2014B	M
AAA	2013J	M
BBB	2014J	F
BBB	2014B	M
BBB	2013J	F
CCC	2014B	M
AAA	2013J	M
AAA	2013J	M
BBB	2013J	F
BBB	2013J	F
AAA	2013J	M
AAA	2013J	F
CCC	2014B	M
BBB	2013B	F
BBB	2014B	F
CCC	2014B	M
AAA	2013J	M
CCC	2014B	M
BBB	2013J	F
BBB	2013J	M
CCC	2014B	M
AAA	2014J	F
BBB	2013J	F
BBB	2013J	F
BBB	2013J	F
BBB	2014B	F
AAA	2014J	F
CCC	2014B	M
BBB	2013J	F
CCC	2014B	M
CCC	2014B	M
BBB	2013B	F
CCC	2014B	M
BBB	2014J	F
BBB	2013J	F
CCC	2014B	F
AAA	2013J	M
BBB	2013B	M
BBB	2014B	F
BBB	2014J	F
BBB	2014B	F
CCC	2014B	M
BBB	2013J	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	F
AAA	2013J	M
AAA	2014J	F
BBB	2013J	M
BBB	2013J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
BBB	2014B	F
BBB	2013B	F
CCC	2014B	F
BBB	2013J	F
AAA	2014J	F
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
BBB	2014J	M
BBB	2013B	F
BBB	2013J	F
CCC	2014B	M
BBB	2014J	F
BBB	2014J	M
AAA	2014J	M
CCC	2014B	M
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
BBB	2014J	F
BBB	2013B	F
BBB	2013B	F
CCC	2014B	M
AAA	2013J	M
BBB	2013J	F
BBB	2013J	F
BBB	2014J	F
AAA	2013J	F
BBB	2013B	F
AAA	2014J	M
BBB	2014J	F
AAA	2013J	F
BBB	2013B	M
CCC	2014B	M
BBB	2014J	M
BBB	2013J	F
BBB	2014J	F
AAA	2013J	F
AAA	2014J	M
BBB	2014J	F
CCC	2014B	F
BBB	2014B	F
CCC	2014B	M
CCC	2014B	M
BBB	2013J	M
BBB	2013J	F
CCC	2014B	M
AAA	2013J	M
BBB	2013B	F
CCC	2014B	F
BBB	2013B	F
BBB	2013J	F
BBB	2013B	F
AAA	2013J	F
BBB	2014B	M
AAA	2014J	M
BBB	2014J	F
BBB	2013B	F
BBB	2013B	F
AAA	2014J	M
AAA	2014J	M
BBB	2014B	F
BBB	2013J	F
CCC	2014B	M
BBB	2014J	M
CCC	2014B	M
BBB	2014J	F
BBB	2014J	F
BBB	2013J	F
BBB	2013J	F
BBB	2013J	F
BBB	2013B	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
AAA	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
CCC	2014B	F
BBB	2013B	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
AAA	2013J	M
CCC	2014B	F
BBB	2014B	M
BBB	2013J	F
AAA	2013J	M
BBB	2013B	F
BBB	2013J	F
BBB	2013J	F
BBB	2013B	F
BBB	2014J	F
CCC	2014B	M
BBB	2014J	F
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013J	F
BBB	2013B	F
BBB	2014J	F
AAA	2013J	M
BBB	2013J	F
BBB	2014B	F
BBB	2014J	M
CCC	2014B	M
BBB	2013J	F
BBB	2013B	F
BBB	2013J	F
AAA	2014J	M
BBB	2013B	F
BBB	2013B	M
BBB	2013J	F
BBB	2013J	F
AAA	2014J	M
BBB	2013J	F
BBB	2014B	F
BBB	2014B	F
BBB	2014J	F
BBB	2014J	F
AAA	2014J	F
AAA	2014J	F
BBB	2013B	F
BBB	2013J	F
AAA	2014J	F
BBB	2013J	M
CCC	2014B	F
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
AAA	2013J	F
BBB	2014J	M
BBB	2013J	M
BBB	2013B	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
BBB	2014J	M
BBB	2014B	F
AAA	2013J	M
CCC	2014B	F
CCC	2014B	M
BBB	2014J	F
BBB	2013J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013J	F
BBB	2013B	F
AAA	2013J	F
AAA	2014J	F
AAA	2013J	M
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
AAA	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2014B	F
CCC	2014B	M
BBB	2014B	F
BBB	2013J	F
AAA	2013J	M
BBB	2014B	M
BBB	2014B	F
CCC	2014B	M
BBB	2014B	F
BBB	2013B	F
BBB	2014J	F
BBB	2014B	F
BBB	2014B	F
BBB	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2013J	M
CCC	2014B	M
AAA	2014J	M
BBB	2014J	F
CCC	2014B	M
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
BBB	2014J	F
BBB	2014J	F
BBB	2013J	F
AAA	2013J	M
BBB	2013J	F
BBB	2014B	F
BBB	2014J	F
BBB	2014B	F
AAA	2014J	F
BBB	2013J	F
AAA	2014J	M
AAA	2014J	M
BBB	2013J	F
AAA	2013J	M
BBB	2013J	F
BBB	2014J	F
BBB	2013B	F
BBB	2014J	F
BBB	2014B	F
BBB	2014B	M
BBB	2013B	M
AAA	2014J	M
CCC	2014B	M
BBB	2014B	F
CCC	2014B	M
AAA	2014J	M
BBB	2013J	F
BBB	2013J	F
BBB	2014B	F
BBB	2013J	M
AAA	2014J	F
BBB	2014J	F
AAA	2013J	M
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
BBB	2014B	M
BBB	2013B	F
BBB	2013B	F
AAA	2013J	M
BBB	2013J	F
BBB	2013B	F
CCC	2014B	F
BBB	2014B	F
BBB	2014B	F
BBB	2013B	M
AAA	2014J	M
BBB	2013J	F
AAA	2014J	M
BBB	2014J	F
AAA	2013J	F
BBB	2014J	F
AAA	2013J	M
BBB	2013J	F
BBB	2013J	M
BBB	2013J	F
AAA	2014J	F
BBB	2014J	F
BBB	2014B	F
BBB	2014J	F
BBB	2013B	F
AAA	2014J	M
BBB	2014B	F",,,,,
테이블 2개,university_learning,최종 결과가 'Fail'이고 평가 점수가 40보다 낮은 모든 학생 중 가장 많은 학점을 취득한 학생의 학점 수를 식별,"Among all students whose final result is 'Fail' and whose assessment score is lower than 40, identify the number of credits of the student who earned the most credits",,SELECT MAX(si.studied_credits) AS max_credits FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Fail' AND sa.score < 40;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,300,,,,,
테이블 2개,university_learning,"각 모듈에 등록한 학생 중 가장 많은 시도 횟수를 가진 학생의 연령대를 식별하고 모듈 코드, 프레젠테이션 코드, 연령대를 조회","Among students enrolled in each module, identify the age group of the student with the highest number of attempts and look up the module code, presentation code, and age group.",,"SELECT sr.code_module, sr.code_presentation, si.age_band FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(num_of_prev_attempts) AS max_attempts FROM studentInfo GROUP BY id_student ) AS max_attempts ON si.id_student = max_attempts.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1000,,"AAA	2014J	55<=
AAA	2013J	55<=
BBB	2013B	0-35
BBB	2013J	0-35
BBB	2013J	0-35
AAA	2014J	0-35
BBB	2013B	0-35
BBB	2013J	0-35
BBB	2014B	0-35
AAA	2014J	35-55
BBB	2014J	35-55
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2013J	35-55
BBB	2013J	35-55
BBB	2013B	0-35
AAA	2014J	35-55
AAA	2013J	35-55
CCC	2014B	0-35
BBB	2013B	0-35
CCC	2014B	0-35
CCC	2014B	0-35
BBB	2013J	0-35
AAA	2013J	35-55
BBB	2013J	35-55
AAA	2014J	0-35
AAA	2013J	35-55
BBB	2013B	35-55
BBB	2013J	35-55
BBB	2014J	0-35
AAA	2013J	0-35
BBB	2014J	35-55
BBB	2013B	0-35
BBB	2013B	35-55
BBB	2013B	35-55
BBB	2013B	0-35
BBB	2014J	35-55
BBB	2013B	35-55
BBB	2013B	0-35
BBB	2013B	0-35
BBB	2013B	0-35
BBB	2013J	0-35
AAA	2013J	35-55
BBB	2013J	0-35
BBB	2014J	35-55
BBB	2014B	0-35
BBB	2014J	35-55
BBB	2013B	0-35
CCC	2014B	35-55
CCC	2014B	35-55
BBB	2014J	0-35
CCC	2014B	35-55
AAA	2013J	0-35
AAA	2013J	0-35
CCC	2014B	0-35
CCC	2014B	35-55
AAA	2014J	35-55
BBB	2013J	35-55
BBB	2014J	0-35
BBB	2013J	35-55
BBB	2013J	0-35
CCC	2014B	0-35
BBB	2014B	0-35
CCC	2014B	35-55
BBB	2013B	0-35
BBB	2013J	0-35
CCC	2014B	0-35
AAA	2013J	0-35
BBB	2014B	35-55
AAA	2014J	35-55
BBB	2013J	35-55
BBB	2013B	35-55
AAA	2013J	55<=
BBB	2014J	0-35
BBB	2013J	35-55
BBB	2013J	35-55
CCC	2014B	0-35
BBB	2013J	35-55
AAA	2014J	0-35
BBB	2014B	0-35
BBB	2013J	0-35
BBB	2013J	35-55
BBB	2013J	35-55
BBB	2014J	0-35
CCC	2014B	0-35
BBB	2013J	35-55
AAA	2013J	35-55
AAA	2014J	55<=
BBB	2013B	0-35
AAA	2014J	0-35
BBB	2014J	35-55
BBB	2014J	35-55
AAA	2013J	0-35
AAA	2013J	35-55
BBB	2014J	0-35
CCC	2014B	0-35
BBB	2014B	35-55
BBB	2014B	0-35
BBB	2014B	0-35
BBB	2013J	0-35
BBB	2014J	0-35
AAA	2013J	0-35
CCC	2014B	0-35
AAA	2014J	0-35
BBB	2013B	0-35
BBB	2013J	0-35
AAA	2014J	35-55
AAA	2013J	35-55
BBB	2014J	35-55
BBB	2014B	0-35
BBB	2013J	35-55
BBB	2014B	0-35
CCC	2014B	0-35
AAA	2013J	0-35
BBB	2013J	0-35
CCC	2014B	0-35
BBB	2013J	35-55
BBB	2013J	0-35
CCC	2014B	0-35
CCC	2014B	0-35
CCC	2014B	0-35
BBB	2013J	35-55
AAA	2014J	0-35
CCC	2014B	35-55
AAA	2013J	35-55
BBB	2014J	0-35
BBB	2013B	35-55
BBB	2014J	0-35
CCC	2014B	0-35
AAA	2013J	35-55
BBB	2013B	0-35
BBB	2014J	35-55
BBB	2013J	0-35
BBB	2013B	35-55
BBB	2014J	0-35
BBB	2014B	0-35
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2014J	35-55
BBB	2013J	35-55
CCC	2014B	0-35
AAA	2013J	35-55
BBB	2014J	0-35
BBB	2013J	35-55
BBB	2013B	0-35
BBB	2013B	0-35
AAA	2013J	35-55
BBB	2014B	0-35
AAA	2014J	0-35
BBB	2013B	35-55
CCC	2014B	0-35
CCC	2014B	0-35
CCC	2014B	35-55
BBB	2014B	35-55
AAA	2013J	0-35
BBB	2013J	0-35
BBB	2013B	0-35
BBB	2013B	35-55
AAA	2014J	35-55
CCC	2014B	0-35
BBB	2014B	0-35
CCC	2014B	0-35
BBB	2013J	35-55
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2014J	0-35
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2013B	35-55
CCC	2014B	35-55
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2014J	0-35
BBB	2013B	35-55
BBB	2013J	0-35
AAA	2014J	0-35
AAA	2014J	35-55
AAA	2014J	35-55
CCC	2014B	0-35
BBB	2013B	35-55
AAA	2014J	35-55
BBB	2013B	0-35
BBB	2013B	35-55
BBB	2014B	0-35
BBB	2013B	0-35
CCC	2014B	35-55
BBB	2014B	0-35
BBB	2014B	0-35
BBB	2014J	0-35
BBB	2013J	35-55
BBB	2014B	35-55
AAA	2013J	0-35
BBB	2013B	35-55
BBB	2013B	0-35
BBB	2014B	0-35
BBB	2013B	0-35
BBB	2013B	35-55
BBB	2013B	0-35
BBB	2014B	0-35
CCC	2014B	35-55
BBB	2013B	0-35
AAA	2013J	35-55
AAA	2014J	0-35
CCC	2014B	0-35
BBB	2013B	0-35
BBB	2013J	0-35
CCC	2014B	0-35
BBB	2014B	35-55
BBB	2013B	0-35
CCC	2014B	35-55
BBB	2013J	35-55
BBB	2014B	0-35
AAA	2013J	35-55
BBB	2013J	35-55
BBB	2013B	35-55
BBB	2014J	0-35
BBB	2013J	35-55
BBB	2014J	0-35
BBB	2014J	0-35
BBB	2014B	0-35
BBB	2013J	0-35
CCC	2014B	35-55
AAA	2013J	0-35
AAA	2014J	35-55
AAA	2013J	35-55
BBB	2014J	0-35
AAA	2013J	0-35
BBB	2013B	35-55
AAA	2013J	0-35
BBB	2014J	35-55
BBB	2014B	0-35
BBB	2014J	0-35
BBB	2013B	35-55
BBB	2014B	0-35
AAA	2013J	35-55
CCC	2014B	35-55
BBB	2013J	35-55
BBB	2013J	0-35
BBB	2013J	35-55
BBB	2014J	0-35
AAA	2013J	35-55
BBB	2014J	35-55
AAA	2013J	0-35
BBB	2013J	35-55
BBB	2014J	35-55
CCC	2014B	0-35
CCC	2014B	0-35
AAA	2014J	0-35
BBB	2014B	0-35
BBB	2013J	35-55
BBB	2013B	35-55
BBB	2013B	0-35
BBB	2013J	35-55
BBB	2014B	35-55
CCC	2014B	0-35
BBB	2014J	0-35
AAA	2014J	55<=
CCC	2014B	0-35
AAA	2014J	0-35
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2013J	0-35
BBB	2013B	0-35
AAA	2013J	35-55
BBB	2013B	0-35
BBB	2014J	0-35
AAA	2014J	0-35
AAA	2013J	35-55
BBB	2013J	35-55
AAA	2013J	35-55
AAA	2013J	35-55
BBB	2014J	0-35
AAA	2013J	35-55
BBB	2014B	0-35
CCC	2014B	35-55
CCC	2014B	0-35
AAA	2013J	0-35
BBB	2013B	35-55
BBB	2014J	35-55
AAA	2013J	35-55
BBB	2013B	35-55
CCC	2014B	0-35
BBB	2014J	35-55
BBB	2014J	0-35
BBB	2014B	0-35
AAA	2014J	35-55
CCC	2014B	0-35
BBB	2014J	35-55
BBB	2014J	0-35
AAA	2013J	0-35
CCC	2014B	35-55
BBB	2014J	0-35
BBB	2014J	0-35
BBB	2014B	35-55
CCC	2014B	35-55
BBB	2013J	0-35
AAA	2014J	35-55
BBB	2013B	35-55
AAA	2014J	35-55
CCC	2014B	35-55
BBB	2013B	0-35
AAA	2013J	35-55
BBB	2014J	0-35
BBB	2014B	35-55
BBB	2013B	0-35
BBB	2014B	0-35
CCC	2014B	0-35
BBB	2013J	0-35
BBB	2013B	35-55
AAA	2014J	0-35
CCC	2014B	0-35
CCC	2014B	35-55
BBB	2013J	35-55
AAA	2014J	35-55
BBB	2014B	0-35
BBB	2014J	35-55
BBB	2013J	35-55
BBB	2013B	35-55
CCC	2014B	0-35
CCC	2014B	0-35
CCC	2014B	0-35
BBB	2013B	0-35
BBB	2014B	0-35
BBB	2014B	0-35
BBB	2014J	0-35
BBB	2014J	35-55
BBB	2013B	0-35
AAA	2013J	0-35
BBB	2013J	35-55
CCC	2014B	0-35
BBB	2013B	35-55
BBB	2013J	35-55
CCC	2014B	35-55
CCC	2014B	35-55
CCC	2014B	35-55
AAA	2013J	0-35
BBB	2014B	0-35
AAA	2014J	35-55
AAA	2014J	35-55
AAA	2014J	0-35
BBB	2013J	0-35
CCC	2014B	0-35
AAA	2014J	35-55
CCC	2014B	0-35
CCC	2014B	35-55
BBB	2014J	0-35
CCC	2014B	0-35
BBB	2013J	0-35
BBB	2014J	35-55
BBB	2014B	0-35
AAA	2013J	35-55
CCC	2014B	0-35
BBB	2013B	35-55
BBB	2013J	0-35
BBB	2013B	0-35
BBB	2013B	35-55
AAA	2014J	35-55
AAA	2014J	0-35
CCC	2014B	0-35
AAA	2013J	35-55
BBB	2013J	0-35
CCC	2014B	35-55
AAA	2013J	0-35
AAA	2013J	35-55
AAA	2014J	35-55
CCC	2014B	0-35
AAA	2013J	35-55
BBB	2013J	0-35
BBB	2014J	35-55
BBB	2013J	0-35
AAA	2014J	35-55
CCC	2014B	0-35
BBB	2014B	0-35
BBB	2013J	0-35
BBB	2014B	0-35
AAA	2013J	0-35
AAA	2013J	0-35
AAA	2014J	35-55
BBB	2013B	0-35
BBB	2013J	0-35
BBB	2013B	35-55
AAA	2013J	35-55
CCC	2014B	35-55
BBB	2013B	0-35
BBB	2013B	35-55
AAA	2013J	35-55
AAA	2013J	0-35
BBB	2014J	35-55
CCC	2014B	0-35
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2013J	35-55
AAA	2013J	0-35
AAA	2014J	35-55
BBB	2013J	0-35
CCC	2014B	35-55
AAA	2013J	0-35
AAA	2013J	0-35
BBB	2013B	0-35
BBB	2014B	0-35
AAA	2013J	35-55
AAA	2014J	35-55
AAA	2014J	0-35
BBB	2014J	0-35
AAA	2013J	0-35
CCC	2014B	35-55
AAA	2014J	0-35
BBB	2013B	0-35
BBB	2013J	0-35
BBB	2013J	0-35
BBB	2013B	0-35
CCC	2014B	0-35
AAA	2014J	0-35
BBB	2013J	0-35
BBB	2013B	0-35
BBB	2013B	35-55
CCC	2014B	35-55
BBB	2014J	35-55
BBB	2013B	35-55
CCC	2014B	35-55
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2013J	0-35
BBB	2013B	0-35
BBB	2013B	0-35
BBB	2013B	0-35
BBB	2013J	35-55
CCC	2014B	35-55
BBB	2014J	35-55
AAA	2013J	35-55
BBB	2014B	0-35
BBB	2013B	0-35
AAA	2013J	35-55
CCC	2014B	0-35
AAA	2013J	0-35
BBB	2013J	35-55
BBB	2014J	0-35
BBB	2013J	35-55
BBB	2013B	35-55
BBB	2013J	0-35
BBB	2014B	35-55
CCC	2014B	0-35
AAA	2013J	0-35
BBB	2014J	0-35
BBB	2013J	35-55
AAA	2014J	0-35
BBB	2014B	0-35
AAA	2013J	35-55
BBB	2014J	0-35
CCC	2014B	35-55
BBB	2013J	0-35
BBB	2013B	0-35
BBB	2014J	0-35
BBB	2013J	0-35
CCC	2014B	35-55
AAA	2013J	0-35
AAA	2014J	0-35
BBB	2014J	0-35
AAA	2014J	0-35
BBB	2013B	35-55
BBB	2014J	35-55
CCC	2014B	0-35
CCC	2014B	0-35
BBB	2013J	35-55
BBB	2014B	0-35
CCC	2014B	0-35
CCC	2014B	35-55
AAA	2013J	35-55
AAA	2014J	55<=
CCC	2014B	35-55
AAA	2013J	35-55
BBB	2014J	35-55
BBB	2013J	0-35
CCC	2014B	35-55
BBB	2014J	0-35
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2013B	35-55
BBB	2014B	0-35
CCC	2014B	35-55
BBB	2013B	0-35
BBB	2014B	35-55
CCC	2014B	0-35
AAA	2013J	35-55
BBB	2014B	35-55
CCC	2014B	0-35
AAA	2013J	35-55
CCC	2014B	35-55
BBB	2014J	35-55
BBB	2013B	0-35
BBB	2013B	0-35
AAA	2014J	35-55
AAA	2014J	35-55
BBB	2013J	0-35
BBB	2013B	0-35
BBB	2013J	0-35
BBB	2013J	0-35
AAA	2014J	35-55
AAA	2013J	55<=
CCC	2014B	35-55
AAA	2013J	35-55
AAA	2014J	35-55
CCC	2014B	0-35
AAA	2014J	35-55
AAA	2013J	35-55
AAA	2013J	0-35
BBB	2014J	0-35
BBB	2013B	0-35
CCC	2014B	0-35
CCC	2014B	0-35
CCC	2014B	0-35
CCC	2014B	35-55
BBB	2013J	0-35
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2013J	0-35
BBB	2014J	35-55
BBB	2013B	0-35
CCC	2014B	0-35
AAA	2013J	0-35
CCC	2014B	35-55
AAA	2013J	35-55
BBB	2013J	35-55
BBB	2013B	35-55
AAA	2014J	0-35
AAA	2013J	0-35
BBB	2014B	0-35
CCC	2014B	0-35
BBB	2013B	35-55
AAA	2013J	0-35
BBB	2014J	0-35
BBB	2013J	0-35
AAA	2013J	35-55
BBB	2014J	0-35
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2014B	0-35
BBB	2013B	35-55
BBB	2013B	35-55
AAA	2014J	35-55
AAA	2013J	0-35
BBB	2013J	0-35
AAA	2013J	35-55
BBB	2014B	0-35
BBB	2013B	35-55
BBB	2013B	35-55
BBB	2013B	0-35
AAA	2013J	35-55
BBB	2014B	35-55
CCC	2014B	35-55
BBB	2014B	35-55
BBB	2013B	35-55
BBB	2013J	0-35
BBB	2013B	0-35
AAA	2013J	35-55
BBB	2014J	35-55
BBB	2014B	0-35
BBB	2013J	0-35
CCC	2014B	0-35
CCC	2014B	0-35
AAA	2013J	0-35
BBB	2014B	0-35
BBB	2014B	0-35
BBB	2014B	35-55
CCC	2014B	0-35
BBB	2013J	35-55
BBB	2014J	0-35
BBB	2014J	0-35
CCC	2014B	0-35
BBB	2014J	35-55
AAA	2013J	0-35
BBB	2013B	35-55
BBB	2014J	35-55
CCC	2014B	35-55
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2013B	35-55
BBB	2014B	0-35
CCC	2014B	0-35
BBB	2013J	0-35
BBB	2014J	0-35
AAA	2013J	0-35
BBB	2014J	0-35
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2013J	0-35
BBB	2013J	0-35
CCC	2014B	0-35
BBB	2014J	0-35
BBB	2013B	35-55
BBB	2013J	35-55
BBB	2013J	35-55
CCC	2014B	0-35
BBB	2013B	35-55
BBB	2013J	0-35
BBB	2013B	0-35
AAA	2014J	35-55
BBB	2013J	35-55
AAA	2014J	35-55
CCC	2014B	35-55
BBB	2014B	35-55
AAA	2014J	0-35
AAA	2013J	35-55
BBB	2013B	0-35
BBB	2013B	0-35
CCC	2014B	35-55
BBB	2014B	35-55
BBB	2014J	0-35
BBB	2014B	0-35
AAA	2013J	0-35
BBB	2013J	0-35
BBB	2013B	0-35
BBB	2013B	0-35
BBB	2013J	0-35
BBB	2013B	0-35
CCC	2014B	0-35
CCC	2014B	0-35
BBB	2013B	0-35
BBB	2013B	35-55
AAA	2013J	35-55
CCC	2014B	35-55
CCC	2014B	0-35
AAA	2014J	35-55
AAA	2013J	0-35
BBB	2013J	35-55
BBB	2014J	0-35
BBB	2014B	35-55
CCC	2014B	35-55
CCC	2014B	0-35
BBB	2013B	35-55
BBB	2014B	0-35
BBB	2013B	0-35
BBB	2014J	0-35
CCC	2014B	0-35
BBB	2013J	0-35
AAA	2013J	35-55
AAA	2013J	0-35
CCC	2014B	35-55
CCC	2014B	35-55
AAA	2014J	35-55
BBB	2013B	35-55
AAA	2013J	0-35
CCC	2014B	0-35
AAA	2013J	0-35
BBB	2013B	35-55
BBB	2013J	35-55
AAA	2014J	0-35
BBB	2014B	0-35
BBB	2013J	0-35
CCC	2014B	35-55
BBB	2014B	0-35
BBB	2014B	0-35
BBB	2014J	35-55
AAA	2013J	0-35
BBB	2013B	0-35
BBB	2014J	35-55
AAA	2013J	0-35
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2013J	0-35
CCC	2014B	0-35
BBB	2013B	0-35
BBB	2014J	0-35
CCC	2014B	0-35
CCC	2014B	0-35
AAA	2013J	0-35
BBB	2013J	35-55
AAA	2014J	35-55
BBB	2014B	0-35
BBB	2013B	0-35
BBB	2013B	0-35
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2014B	0-35
BBB	2013J	0-35
BBB	2013J	0-35
CCC	2014B	0-35
BBB	2013J	35-55
BBB	2013J	0-35
CCC	2014B	35-55
CCC	2014B	0-35
CCC	2014B	0-35
BBB	2013J	0-35
AAA	2014J	35-55
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2014B	0-35
BBB	2013J	35-55
AAA	2013J	0-35
BBB	2014B	35-55
CCC	2014B	35-55
AAA	2013J	0-35
CCC	2014B	35-55
AAA	2014J	0-35
AAA	2014J	0-35
BBB	2013B	0-35
BBB	2013B	0-35
CCC	2014B	0-35
AAA	2013J	55<=
BBB	2014J	35-55
BBB	2014B	0-35
BBB	2013J	0-35
CCC	2014B	35-55
AAA	2013J	0-35
AAA	2013J	0-35
BBB	2013J	35-55
BBB	2013J	35-55
AAA	2013J	35-55
AAA	2013J	35-55
CCC	2014B	0-35
BBB	2013B	0-35
BBB	2014B	0-35
CCC	2014B	35-55
AAA	2013J	35-55
CCC	2014B	0-35
BBB	2013J	0-35
BBB	2013J	35-55
CCC	2014B	0-35
AAA	2014J	0-35
BBB	2013J	0-35
BBB	2013J	0-35
BBB	2013J	35-55
BBB	2014B	0-35
AAA	2014J	0-35
CCC	2014B	0-35
BBB	2013J	0-35
CCC	2014B	0-35
CCC	2014B	0-35
BBB	2013B	35-55
CCC	2014B	35-55
BBB	2014J	35-55
BBB	2013J	35-55
CCC	2014B	0-35
AAA	2013J	35-55
BBB	2013B	0-35
BBB	2014B	35-55
BBB	2014J	0-35
BBB	2014B	35-55
CCC	2014B	0-35
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2013B	0-35
CCC	2014B	35-55
AAA	2013J	0-35
AAA	2014J	0-35
BBB	2013J	0-35
BBB	2013J	35-55
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2013B	35-55
CCC	2014B	0-35
BBB	2014B	0-35
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2013J	35-55
AAA	2014J	35-55
BBB	2013J	35-55
BBB	2013B	0-35
BBB	2013B	35-55
BBB	2014J	35-55
BBB	2013B	0-35
BBB	2013J	0-35
CCC	2014B	0-35
BBB	2014J	35-55
BBB	2014J	0-35
AAA	2014J	35-55
CCC	2014B	0-35
CCC	2014B	0-35
BBB	2013B	0-35
AAA	2013J	35-55
BBB	2014J	0-35
BBB	2013B	35-55
BBB	2013B	35-55
CCC	2014B	35-55
AAA	2013J	0-35
BBB	2013J	0-35
BBB	2013J	35-55
BBB	2014J	0-35
AAA	2013J	0-35
BBB	2013B	0-35
AAA	2014J	35-55
BBB	2014J	0-35
AAA	2013J	35-55
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2014J	0-35
BBB	2013J	0-35
BBB	2014J	0-35
AAA	2013J	35-55
AAA	2014J	0-35
BBB	2014J	0-35
CCC	2014B	0-35
BBB	2014B	35-55
CCC	2014B	0-35
CCC	2014B	0-35
BBB	2013J	35-55
BBB	2013J	35-55
CCC	2014B	0-35
AAA	2013J	35-55
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2013B	0-35
BBB	2013J	0-35
BBB	2013B	0-35
AAA	2013J	35-55
BBB	2014B	0-35
AAA	2014J	35-55
BBB	2014J	0-35
BBB	2013B	35-55
BBB	2013B	0-35
AAA	2014J	35-55
AAA	2014J	35-55
BBB	2014B	35-55
BBB	2013J	0-35
CCC	2014B	35-55
BBB	2014J	55<=
CCC	2014B	0-35
BBB	2014J	0-35
BBB	2014J	0-35
BBB	2013J	0-35
BBB	2013J	0-35
BBB	2013J	0-35
BBB	2013B	35-55
BBB	2014J	35-55
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2013J	0-35
AAA	2014J	0-35
CCC	2014B	0-35
BBB	2013J	35-55
BBB	2013J	0-35
CCC	2014B	35-55
CCC	2014B	0-35
BBB	2013B	0-35
BBB	2014J	0-35
BBB	2013B	35-55
CCC	2014B	0-35
AAA	2013J	35-55
CCC	2014B	35-55
BBB	2014B	35-55
BBB	2013J	35-55
AAA	2013J	0-35
BBB	2013B	0-35
BBB	2013J	0-35
BBB	2013J	35-55
BBB	2013B	0-35
BBB	2014J	0-35
CCC	2014B	35-55
BBB	2014J	0-35
BBB	2014B	0-35
BBB	2013B	0-35
BBB	2013B	0-35
BBB	2013J	0-35
BBB	2013B	35-55
BBB	2014J	0-35
AAA	2013J	35-55
BBB	2013J	0-35
BBB	2014B	35-55
BBB	2014J	0-35
CCC	2014B	35-55
BBB	2013J	0-35
BBB	2013B	35-55
BBB	2013J	0-35
AAA	2014J	35-55
BBB	2013B	0-35
BBB	2013B	35-55
BBB	2013J	0-35
BBB	2013J	0-35
AAA	2014J	0-35
BBB	2013J	35-55
BBB	2014B	0-35
BBB	2014B	35-55
BBB	2014J	35-55
BBB	2014J	0-35
AAA	2014J	0-35
AAA	2014J	0-35
BBB	2013B	0-35
BBB	2013J	35-55
AAA	2014J	35-55
BBB	2013J	35-55
CCC	2014B	35-55
BBB	2013B	0-35
CCC	2014B	35-55
BBB	2013J	35-55
AAA	2013J	0-35
BBB	2014J	0-35
BBB	2013J	35-55
BBB	2013B	0-35
BBB	2013J	0-35
BBB	2013J	0-35
CCC	2014B	0-35
BBB	2014J	0-35
BBB	2014B	35-55
AAA	2013J	0-35
CCC	2014B	0-35
CCC	2014B	0-35
BBB	2014J	0-35
BBB	2013J	0-35
BBB	2013J	0-35
BBB	2014J	0-35
BBB	2013J	0-35
BBB	2013B	0-35
AAA	2013J	0-35
AAA	2014J	0-35
AAA	2013J	35-55
CCC	2014B	0-35
BBB	2013B	0-35
AAA	2013J	0-35
AAA	2014J	0-35
CCC	2014B	35-55
BBB	2013J	0-35
BBB	2014B	0-35
CCC	2014B	0-35
BBB	2014B	35-55
BBB	2013J	0-35
AAA	2013J	35-55
BBB	2014B	0-35
BBB	2014B	0-35
CCC	2014B	35-55
BBB	2014B	35-55
BBB	2013B	0-35
BBB	2014J	35-55
BBB	2014B	0-35
BBB	2014B	35-55
BBB	2014J	0-35
CCC	2014B	35-55
BBB	2013J	0-35
BBB	2013J	0-35
CCC	2014B	35-55
AAA	2014J	0-35
BBB	2014J	0-35
CCC	2014B	0-35
BBB	2014B	35-55
BBB	2013B	0-35
BBB	2013B	35-55
BBB	2014J	0-35
BBB	2014J	35-55
BBB	2013J	35-55
AAA	2013J	35-55
BBB	2013J	0-35
BBB	2014B	35-55
BBB	2014J	0-35
BBB	2014B	35-55
AAA	2014J	35-55
BBB	2013J	35-55
AAA	2014J	0-35
AAA	2014J	35-55
BBB	2013J	0-35
AAA	2013J	0-35
BBB	2013J	35-55
BBB	2014J	0-35
BBB	2013B	0-35
BBB	2014J	0-35
BBB	2014B	0-35
BBB	2014B	35-55
BBB	2013B	35-55
AAA	2014J	0-35
CCC	2014B	35-55
BBB	2014B	35-55
CCC	2014B	0-35
AAA	2014J	35-55
BBB	2013J	0-35
BBB	2013J	0-35
BBB	2014B	0-35
BBB	2013J	0-35
AAA	2014J	35-55
BBB	2014J	0-35
AAA	2013J	0-35
CCC	2014B	0-35
BBB	2013B	0-35
AAA	2013J	0-35
BBB	2014B	0-35
BBB	2013B	35-55
BBB	2013B	0-35
AAA	2013J	35-55
BBB	2013J	0-35
BBB	2013B	0-35
CCC	2014B	0-35
BBB	2014B	0-35
BBB	2014B	35-55
BBB	2013B	0-35
AAA	2014J	0-35
BBB	2013J	0-35
AAA	2014J	0-35
BBB	2014J	0-35
AAA	2013J	35-55
BBB	2014J	35-55
AAA	2013J	0-35
BBB	2013J	0-35
BBB	2013J	35-55
BBB	2013J	0-35
AAA	2014J	35-55
BBB	2014J	0-35
BBB	2014B	0-35
BBB	2014J	0-35
BBB	2013B	0-35
AAA	2014J	35-55
BBB	2014B	0-35",,,,,
테이블 2개,university_learning,"studentAssessment 테이블에서 가장 늦게 제출된 과제(또는 과제들)에 대해, 점수가 40 미만인 경우 해당 과제의 유형","For the latest submitted assignment (or assignments) in the studentAssessment table, the type of assignment if the score is less than 40.",,SELECT a.assessment_type FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.date_submitted = ( SELECT MAX(date_submitted) FROM studentAssessment WHERE score < 40 ) AND sa.score < 40;,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,TMA,,,,,
테이블 2개,university_learning,"각 모듈 프레젠테이션에서 가장 많은 모듈을 이수한 학생의 최종 결과를 식별하고 모듈 코드, 최종 결과를 조회","In each module presentation, identify the final result of the student who completed the most modules and look up the module code and final result.",,"SELECT sr.code_module, si.final_result FROM studentInfo si INNER JOIN ( SELECT id_student, COUNT(DISTINCT code_module) AS module_count FROM studentInfo GROUP BY id_student ORDER BY module_count DESC LIMIT 1 ) AS max_modules ON si.id_student = max_modules.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,AAA	Pass,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에서 가장 높은 점수를 받은 학생의 최종 결과를 식별하고 모듈 코드, 프레젠테이션 코드, 최종 결과를 조회","Identify the final result of the student with the highest score in each module presentation and look up the module code, presentation code, and final result",,"SELECT sr.code_module, sr.code_presentation, si.final_result FROM studentInfo si INNER JOIN ( SELECT sa.id_student, sa.score FROM studentAssessment sa INNER JOIN ( SELECT id_assessment, MAX(score) AS max_score FROM studentAssessment GROUP BY id_assessment ) AS max_scores ON sa.id_assessment = max_scores.id_assessment AND sa.score = max_scores.max_score ) AS max_scores ON si.id_student = max_scores.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,517,,"AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2014J        Pass
AAA        2014J        Distinction
AAA        2014J        Pass
AAA        2013J        Withdrawn
AAA        2014J        Pass
AAA        2014J        Distinction
AAA        2014J        Distinction
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Withdrawn
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Withdrawn
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Withdrawn
BBB        2013B        Withdrawn
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Withdrawn
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Withdrawn
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Withdrawn
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Withdrawn
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Withdrawn
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Withdrawn
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Withdrawn
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Withdrawn
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Withdrawn
BBB        2013B        Fail
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Distinction
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Fail
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Pass
BBB        2013B        Withdrawn
BBB        2013B        Pass
BBB        2013B        Pass",,,,,
테이블 2개,university_learning,"각 모듈 프레젠테이션에서 최근에 등록한 학생의 성별을 식별하고 모듈 코드, 프레젠테이션 코드, 성별을 조회","Identify the gender of the most recently enrolled student in each module presentation and look up the module code, presentation code, and gender",,"SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(code_presentation) AS latest_presentation FROM studentregistration GROUP BY id_student ) AS latest_registration ON si.id_student = latest_registration.id_student AND si.code_presentation = latest_registration.latest_presentation INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1000,,"AAA	2014J	M
AAA	2013J	M
BBB	2013B	F
BBB	2013J	F
BBB	2013J	M
AAA	2014J	F
BBB	2013B	F
BBB	2013J	F
BBB	2014B	F
AAA	2014J	F
BBB	2014J	F
BBB	2013J	M
BBB	2014J	M
BBB	2013J	F
BBB	2013J	M
BBB	2013B	M
AAA	2014J	M
AAA	2013J	F
CCC	2014B	F
BBB	2013B	M
CCC	2014B	M
CCC	2014B	M
BBB	2013J	F
AAA	2013J	F
BBB	2013J	F
AAA	2014J	F
AAA	2013J	F
BBB	2013B	M
BBB	2013J	F
BBB	2014J	F
AAA	2013J	F
BBB	2014J	F
BBB	2013B	F
BBB	2013B	F
BBB	2013B	M
BBB	2013B	F
BBB	2014J	F
BBB	2013B	M
BBB	2013B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013J	F
AAA	2013J	M
BBB	2013J	F
BBB	2014J	M
BBB	2014B	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
CCC	2014B	M
BBB	2014J	F
CCC	2014B	M
AAA	2013J	M
AAA	2013J	F
CCC	2014B	M
CCC	2014B	M
AAA	2014J	M
BBB	2013J	F
BBB	2014J	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
BBB	2014B	F
CCC	2014B	M
BBB	2013B	F
BBB	2013J	F
CCC	2014B	F
AAA	2013J	F
BBB	2014B	F
AAA	2014J	F
BBB	2013J	F
BBB	2013B	F
AAA	2013J	M
BBB	2014J	F
BBB	2013J	F
BBB	2013J	M
CCC	2014B	M
BBB	2013J	F
AAA	2014J	F
BBB	2014B	F
BBB	2013J	F
BBB	2013J	F
BBB	2013J	F
BBB	2014J	F
CCC	2014B	F
BBB	2013J	M
AAA	2013J	M
AAA	2014J	M
BBB	2013B	F
AAA	2014J	F
BBB	2014J	F
BBB	2014J	F
AAA	2013J	F
AAA	2013J	M
BBB	2014J	F
CCC	2014B	M
BBB	2014B	F
BBB	2014B	F
BBB	2014B	F
BBB	2013J	F
BBB	2014J	F
AAA	2013J	F
CCC	2014B	M
AAA	2014J	F
BBB	2013B	F
BBB	2013J	F
AAA	2014J	M
AAA	2013J	M
BBB	2014J	F
BBB	2014B	F
BBB	2013J	F
BBB	2014B	F
CCC	2014B	M
AAA	2013J	F
BBB	2013J	F
CCC	2014B	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
CCC	2014B	F
CCC	2014B	M
BBB	2013J	F
AAA	2014J	F
CCC	2014B	M
AAA	2013J	F
BBB	2014J	F
BBB	2013B	F
BBB	2014J	F
CCC	2014B	M
AAA	2013J	M
BBB	2013B	F
BBB	2014J	F
BBB	2013J	F
BBB	2013B	M
BBB	2014J	F
BBB	2014B	F
BBB	2013J	F
BBB	2014J	F
BBB	2014J	F
BBB	2013J	M
CCC	2014B	M
AAA	2013J	M
BBB	2014J	F
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
AAA	2013J	M
BBB	2014B	F
AAA	2014J	M
BBB	2013B	F
CCC	2014B	M
CCC	2014B	M
CCC	2014B	F
BBB	2014B	F
AAA	2013J	M
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
AAA	2014J	M
CCC	2014B	M
BBB	2014B	F
CCC	2014B	M
BBB	2013J	F
BBB	2013B	F
CCC	2014B	M
BBB	2014J	F
BBB	2013B	F
CCC	2014B	F
BBB	2013B	F
CCC	2014B	M
BBB	2013B	M
CCC	2014B	M
BBB	2014J	F
BBB	2013B	F
BBB	2013J	F
AAA	2014J	F
AAA	2014J	M
AAA	2014J	M
CCC	2014B	F
BBB	2013B	F
AAA	2014J	M
BBB	2013B	F
BBB	2013B	M
BBB	2014B	F
BBB	2013B	F
CCC	2014B	M
BBB	2014B	F
BBB	2014B	M
BBB	2014J	F
BBB	2013J	F
BBB	2014B	F
AAA	2013J	M
BBB	2013B	F
BBB	2013B	F
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013B	F
BBB	2014B	F
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
AAA	2014J	M
CCC	2014B	F
BBB	2013B	F
BBB	2013J	M
CCC	2014B	M
BBB	2014B	F
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
BBB	2014B	F
AAA	2013J	M
BBB	2013J	F
BBB	2013B	F
BBB	2014J	M
BBB	2013J	F
BBB	2014J	F
BBB	2014J	F
BBB	2014B	F
BBB	2013J	F
CCC	2014B	M
AAA	2013J	M
AAA	2014J	F
AAA	2013J	M
BBB	2014J	F
AAA	2013J	M
BBB	2013B	F
AAA	2013J	M
BBB	2014J	F
BBB	2014B	F
BBB	2014J	F
BBB	2013B	F
BBB	2014B	F
AAA	2013J	M
CCC	2014B	M
BBB	2013J	F
BBB	2013J	F
BBB	2013J	F
BBB	2014J	F
AAA	2013J	M
BBB	2014J	F
AAA	2013J	M
BBB	2013J	F
BBB	2014J	M
CCC	2014B	M
CCC	2014B	F
AAA	2014J	F
BBB	2014B	F
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
BBB	2013J	F
BBB	2014B	F
CCC	2014B	M
BBB	2014J	M
AAA	2014J	M
CCC	2014B	M
AAA	2014J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013J	F
BBB	2013B	F
AAA	2013J	M
BBB	2013B	F
BBB	2014J	F
AAA	2014J	M
AAA	2013J	F
BBB	2013J	F
AAA	2013J	M
AAA	2013J	F
BBB	2014J	F
AAA	2013J	M
BBB	2014B	F
CCC	2014B	M
CCC	2014B	M
AAA	2013J	M
BBB	2013B	F
BBB	2014J	M
AAA	2013J	M
BBB	2013B	M
CCC	2014B	M
BBB	2014J	F
BBB	2014J	F
BBB	2014B	F
AAA	2014J	F
CCC	2014B	M
BBB	2014J	F
BBB	2014J	F
AAA	2013J	M
CCC	2014B	M
BBB	2014J	F
BBB	2014J	F
BBB	2014B	F
CCC	2014B	M
BBB	2013J	F
AAA	2014J	F
BBB	2013B	F
AAA	2014J	F
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
BBB	2014J	F
BBB	2014B	F
BBB	2013B	F
BBB	2014B	M
CCC	2014B	M
BBB	2013J	M
BBB	2013B	F
AAA	2014J	F
CCC	2014B	F
CCC	2014B	M
BBB	2013J	M
AAA	2014J	M
BBB	2014B	F
BBB	2014J	F
BBB	2013J	F
BBB	2013B	F
CCC	2014B	M
CCC	2014B	M
CCC	2014B	M
BBB	2013B	F
BBB	2014B	M
BBB	2014B	F
BBB	2014J	F
BBB	2014J	F
BBB	2013B	F
AAA	2013J	F
BBB	2013J	M
CCC	2014B	F
BBB	2013B	F
BBB	2013J	F
CCC	2014B	F
CCC	2014B	F
CCC	2014B	M
AAA	2013J	M
BBB	2014B	F
AAA	2014J	F
AAA	2014J	F
AAA	2014J	M
BBB	2013J	F
CCC	2014B	M
AAA	2014J	M
CCC	2014B	F
CCC	2014B	M
BBB	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2014J	F
BBB	2014B	F
AAA	2013J	F
CCC	2014B	M
BBB	2013B	F
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
AAA	2014J	F
AAA	2014J	M
CCC	2014B	M
AAA	2013J	F
BBB	2013J	F
CCC	2014B	M
AAA	2013J	F
AAA	2013J	F
AAA	2014J	M
CCC	2014B	M
AAA	2013J	M
BBB	2013J	F
BBB	2014J	F
BBB	2013J	F
AAA	2014J	M
CCC	2014B	M
BBB	2014B	F
BBB	2013J	F
BBB	2014B	F
AAA	2013J	F
AAA	2013J	M
AAA	2014J	M
BBB	2013B	F
BBB	2013J	F
BBB	2013B	F
AAA	2013J	F
CCC	2014B	F
BBB	2013B	F
BBB	2013B	F
AAA	2013J	F
AAA	2013J	M
BBB	2014J	F
CCC	2014B	M
BBB	2013B	M
CCC	2014B	M
BBB	2013J	F
AAA	2013J	F
AAA	2014J	M
BBB	2013J	F
CCC	2014B	M
AAA	2013J	M
AAA	2013J	F
BBB	2013B	M
BBB	2014B	F
AAA	2013J	F
AAA	2014J	F
AAA	2014J	M
BBB	2014J	F
AAA	2013J	F
CCC	2014B	M
AAA	2014J	F
BBB	2013B	F
BBB	2013J	F
BBB	2013J	F
BBB	2013B	F
CCC	2014B	F
AAA	2014J	F
BBB	2013J	F
BBB	2013B	M
BBB	2013B	F
CCC	2014B	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	F
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013J	F
CCC	2014B	M
BBB	2014J	F
AAA	2013J	M
BBB	2014B	F
BBB	2013B	F
AAA	2013J	F
CCC	2014B	M
AAA	2013J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013J	M
BBB	2013B	F
BBB	2013J	F
BBB	2014B	F
CCC	2014B	F
AAA	2013J	F
BBB	2014J	F
BBB	2013J	M
AAA	2014J	F
BBB	2014B	M
AAA	2013J	M
BBB	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2013B	F
BBB	2014J	F
BBB	2013J	F
CCC	2014B	M
AAA	2013J	M
AAA	2014J	F
BBB	2014J	F
AAA	2014J	F
BBB	2013B	M
BBB	2014J	F
CCC	2014B	F
CCC	2014B	M
BBB	2013J	F
BBB	2014B	F
CCC	2014B	F
CCC	2014B	M
AAA	2013J	F
AAA	2014J	M
CCC	2014B	M
AAA	2013J	F
BBB	2014J	M
BBB	2013J	F
CCC	2014B	M
BBB	2014J	F
BBB	2013B	F
CCC	2014B	F
BBB	2013B	F
BBB	2014B	F
CCC	2014B	M
BBB	2013B	F
BBB	2014B	F
CCC	2014B	F
AAA	2013J	M
BBB	2014B	F
CCC	2014B	M
AAA	2013J	F
CCC	2014B	M
BBB	2014J	F
BBB	2013B	F
BBB	2013B	F
AAA	2014J	M
AAA	2014J	F
BBB	2013J	F
BBB	2013B	F
BBB	2013J	F
BBB	2013J	F
AAA	2014J	F
AAA	2013J	M
CCC	2014B	F
AAA	2013J	M
AAA	2014J	M
CCC	2014B	F
AAA	2014J	F
AAA	2013J	M
AAA	2013J	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
CCC	2014B	M
CCC	2014B	M
CCC	2014B	F
BBB	2013J	F
BBB	2013J	M
BBB	2014J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
AAA	2013J	M
CCC	2014B	M
AAA	2013J	F
BBB	2013J	F
BBB	2013B	F
AAA	2014J	M
AAA	2013J	F
BBB	2014B	F
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
BBB	2014J	F
BBB	2013J	M
AAA	2013J	M
BBB	2014J	F
BBB	2013J	F
BBB	2014J	F
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
AAA	2014J	M
AAA	2013J	M
BBB	2013J	F
AAA	2013J	M
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013B	F
AAA	2013J	M
BBB	2014B	F
CCC	2014B	F
BBB	2014B	F
BBB	2013B	F
BBB	2013J	F
BBB	2013B	M
AAA	2013J	M
BBB	2014J	F
BBB	2014B	F
BBB	2013J	F
CCC	2014B	F
CCC	2014B	M
AAA	2013J	M
BBB	2014B	F
BBB	2014B	F
BBB	2014B	F
CCC	2014B	M
BBB	2013J	F
BBB	2014J	F
BBB	2014J	F
CCC	2014B	F
BBB	2014J	F
AAA	2013J	F
BBB	2013B	M
BBB	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2014J	F
BBB	2013B	F
BBB	2014B	F
CCC	2014B	F
BBB	2013J	F
BBB	2014J	F
AAA	2013J	M
BBB	2014J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
BBB	2014J	F
BBB	2013B	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
BBB	2013B	M
BBB	2013J	F
BBB	2013B	F
AAA	2014J	M
BBB	2013J	M
AAA	2014J	M
CCC	2014B	M
BBB	2014B	F
AAA	2014J	M
AAA	2013J	M
BBB	2013B	F
BBB	2013B	F
CCC	2014B	M
BBB	2014B	F
BBB	2014J	F
BBB	2014B	F
AAA	2013J	F
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
BBB	2013J	M
BBB	2013B	F
CCC	2014B	M
CCC	2014B	M
BBB	2013B	F
BBB	2013B	F
AAA	2013J	M
CCC	2014B	M
CCC	2014B	M
AAA	2014J	M
AAA	2013J	M
BBB	2013J	F
BBB	2014J	F
BBB	2014B	F
CCC	2014B	M
CCC	2014B	M
BBB	2013B	M
BBB	2014B	F
BBB	2013B	F
BBB	2014J	F
CCC	2014B	M
BBB	2013J	M
AAA	2013J	F
AAA	2013J	M
CCC	2014B	F
CCC	2014B	F
AAA	2014J	M
BBB	2013B	F
AAA	2013J	M
CCC	2014B	M
AAA	2013J	M
BBB	2013B	F
BBB	2013J	M
AAA	2014J	M
BBB	2014B	F
BBB	2013J	F
CCC	2014B	M
BBB	2014B	F
BBB	2014B	F
BBB	2014J	M
AAA	2013J	M
BBB	2013B	F
BBB	2014J	F
AAA	2013J	M
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
CCC	2014B	M
BBB	2013B	F
BBB	2014J	F
CCC	2014B	M
CCC	2014B	F
AAA	2013J	M
BBB	2013J	F
AAA	2014J	M
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013B	F
CCC	2014B	M
BBB	2014B	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
CCC	2014B	M
CCC	2014B	M
BBB	2013J	F
AAA	2014J	F
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
BBB	2014J	M
BBB	2014B	F
BBB	2013J	M
AAA	2013J	M
BBB	2014B	F
CCC	2014B	M
AAA	2013J	M
CCC	2014B	M
AAA	2014J	M
AAA	2014J	M
BBB	2013B	M
BBB	2013B	F
CCC	2014B	M
AAA	2013J	M
BBB	2014J	F
BBB	2014B	M
BBB	2013J	F
CCC	2014B	M
AAA	2013J	M
AAA	2013J	M
BBB	2013J	F
BBB	2013J	F
AAA	2013J	M
AAA	2013J	F
CCC	2014B	M
BBB	2013B	F
BBB	2014B	F
CCC	2014B	M
AAA	2013J	M
CCC	2014B	M
BBB	2013J	F
BBB	2013J	M
CCC	2014B	M
AAA	2014J	F
BBB	2013J	F
BBB	2013J	F
BBB	2013J	F
BBB	2014B	F
AAA	2014J	F
CCC	2014B	M
BBB	2013J	F
CCC	2014B	M
CCC	2014B	M
BBB	2013B	F
CCC	2014B	M
BBB	2014J	F
BBB	2013J	F
CCC	2014B	F
AAA	2013J	M
BBB	2013B	M
BBB	2014B	F
BBB	2014J	F
BBB	2014B	F
CCC	2014B	M
BBB	2013J	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	F
AAA	2013J	M
AAA	2014J	F
BBB	2013J	M
BBB	2013J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
BBB	2014B	F
BBB	2013B	F
CCC	2014B	F
BBB	2013J	F
AAA	2014J	F
BBB	2013J	F
BBB	2013B	F
BBB	2013B	F
BBB	2014J	M
BBB	2013B	F
BBB	2013J	F
CCC	2014B	M
BBB	2014J	F
BBB	2014J	M
AAA	2014J	M
CCC	2014B	M
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
BBB	2014J	F
BBB	2013B	F
BBB	2013B	F
CCC	2014B	M
AAA	2013J	M
BBB	2013J	F
BBB	2013J	F
BBB	2014J	F
AAA	2013J	F
BBB	2013B	F
AAA	2014J	M
BBB	2014J	F
AAA	2013J	F
BBB	2013B	M
CCC	2014B	M
BBB	2014J	M
BBB	2013J	F
BBB	2014J	F
AAA	2013J	F
AAA	2014J	M
BBB	2014J	F
CCC	2014B	F
BBB	2014B	F
CCC	2014B	M
CCC	2014B	M
BBB	2013J	M
BBB	2013J	F
CCC	2014B	M
AAA	2013J	M
BBB	2013B	F
CCC	2014B	F
BBB	2013B	F
BBB	2013J	F
BBB	2013B	F
AAA	2013J	F
BBB	2014B	M
AAA	2014J	M
BBB	2014J	F
BBB	2013B	F
BBB	2013B	F
AAA	2014J	M
AAA	2014J	M
BBB	2014B	F
BBB	2013J	F
CCC	2014B	M
BBB	2014J	M
CCC	2014B	M
BBB	2014J	F
BBB	2014J	F
BBB	2013J	F
BBB	2013J	F
BBB	2013J	F
BBB	2013B	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
AAA	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
CCC	2014B	F
BBB	2013B	F
BBB	2014J	F
BBB	2013B	F
CCC	2014B	M
AAA	2013J	M
CCC	2014B	F
BBB	2014B	M
BBB	2013J	F
AAA	2013J	M
BBB	2013B	F
BBB	2013J	F
BBB	2013J	F
BBB	2013B	F
BBB	2014J	F
CCC	2014B	M
BBB	2014J	F
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
BBB	2013J	F
BBB	2013B	F
BBB	2014J	F
AAA	2013J	M
BBB	2013J	F
BBB	2014B	F
BBB	2014J	M
CCC	2014B	M
BBB	2013J	F
BBB	2013B	F
BBB	2013J	F
AAA	2014J	M
BBB	2013B	F
BBB	2013B	M
BBB	2013J	F
BBB	2013J	F
AAA	2014J	M
BBB	2013J	F
BBB	2014B	F
BBB	2014B	F
BBB	2014J	F
BBB	2014J	F
AAA	2014J	F
AAA	2014J	F
BBB	2013B	F
BBB	2013J	F
AAA	2014J	F
BBB	2013J	M
CCC	2014B	F
BBB	2013B	F
CCC	2014B	M
BBB	2013J	F
AAA	2013J	F
BBB	2014J	M
BBB	2013J	M
BBB	2013B	F
BBB	2013J	F
BBB	2013J	F
CCC	2014B	M
BBB	2014J	M
BBB	2014B	F
AAA	2013J	M
CCC	2014B	F
CCC	2014B	M
BBB	2014J	F
BBB	2013J	F
BBB	2013J	F
BBB	2014J	F
BBB	2013J	F
BBB	2013B	F
AAA	2013J	F
AAA	2014J	F
AAA	2013J	M
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
AAA	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2014B	F
CCC	2014B	M
BBB	2014B	F
BBB	2013J	F
AAA	2013J	M
BBB	2014B	M
BBB	2014B	F
CCC	2014B	M
BBB	2014B	F
BBB	2013B	F
BBB	2014J	F
BBB	2014B	F
BBB	2014B	F
BBB	2014J	F
CCC	2014B	M
BBB	2013J	F
BBB	2013J	M
CCC	2014B	M
AAA	2014J	M
BBB	2014J	F
CCC	2014B	M
BBB	2014B	F
BBB	2013B	F
BBB	2013B	F
BBB	2014J	F
BBB	2014J	F
BBB	2013J	F
AAA	2013J	M
BBB	2013J	F
BBB	2014B	F
BBB	2014J	F
BBB	2014B	F
AAA	2014J	F
BBB	2013J	F
AAA	2014J	M
AAA	2014J	M
BBB	2013J	F
AAA	2013J	M
BBB	2013J	F
BBB	2014J	F
BBB	2013B	F
BBB	2014J	F
BBB	2014B	F
BBB	2014B	M
BBB	2013B	M
AAA	2014J	M
CCC	2014B	M
BBB	2014B	F
CCC	2014B	M
AAA	2014J	M
BBB	2013J	F
BBB	2013J	F
BBB	2014B	F
BBB	2013J	M
AAA	2014J	F
BBB	2014J	F
AAA	2013J	M
CCC	2014B	M
BBB	2013B	F
AAA	2013J	M
BBB	2014B	M
BBB	2013B	F
BBB	2013B	F
AAA	2013J	M
BBB	2013J	F
BBB	2013B	F
CCC	2014B	F
BBB	2014B	F
BBB	2014B	F
BBB	2013B	M
AAA	2014J	M
BBB	2013J	F
AAA	2014J	M
BBB	2014J	F
AAA	2013J	F
BBB	2014J	F
AAA	2013J	M
BBB	2013J	F
BBB	2013J	M
BBB	2013J	F
AAA	2014J	F
BBB	2014J	F
BBB	2014B	F
BBB	2014J	F
BBB	2013B	F
AAA	2014J	M
BBB	2014B	F",,,,,
테이블 2개,university_learning,평가 결과가 'Distinction'이고 모든 평가 유형에서 평균 점수가 80보다 높은 모든 학생의 수를 계산,Count all students whose assessment result is 'Distinction' and who have an average score greater than 80 across all assessment types,,SELECT COUNT(*) AS distinction_count FROM ( SELECT si.id_student FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Distinction' GROUP BY si.id_student HAVING AVG(sa.score) > 80 ) AS high_scores;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,173,,,,,
테이블 3개,university_learning,"각 모듈에 등록한 학생 중 최고 학력이 'No Formal quals'이고 최근 평가를 제출한 여학생의 수를 계산하고 모듈 코드, 학생수를 조회","Among students enrolled in each module, calculate the number of female students with the highest academic level of 'No Formal quals' and who submitted the most recent evaluation, and look up the module code and number of students.",,"SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS recent_female_count FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(date_submitted) AS latest_submission FROM studentAssessment GROUP BY id_student ) AS latest_submissions ON si.id_student = latest_submissions.id_student INNER JOIN studentRegistration sr ON sr.id_student = si.id_student WHERE si.gender = 'F' AND si.highest_education = 'No Formal quals' GROUP BY sr.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,BBB	16,,,,,
테이블 2개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 가장 많이 이용한 학생을 식별하고 모듈 코드, 프레젠테이션 코드, 학생ID, 총 클릭수를 조회","Among students registered for each module presentation, identify students who used VLE materials the most and retrieve module code, presentation code, student ID, and total number of clicks.",,"SELECT sr.code_module, sr.code_presentation, sv.id_student, SUM(sv.sum_click) AS total_clicks FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation, sv.id_student ORDER BY total_clicks DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	2013J	2649826	61,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 최근에 VLE 자료를 이용한 학생의 성별을 식별하고 모듈 코드, 프레젠테이션 코드, 성별을 조회","Among students registered for each module presentation, identify the gender of students who have recently used VLE materials and query the module code, presentation code, and gender",,"SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student INNER JOIN studentvle sv ON si.id_student = sv.id_student AND sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE sv.date = ( SELECT MAX(date) FROM studentvle sv2 WHERE sv2.code_module = sv.code_module AND sv2.code_presentation = sv.code_presentation ) GROUP BY sr.code_module, sr.code_presentation, si.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	2013J	M,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 여학생의 비율을 계산하고 모듈 코드, 프레젠테이션 코드, VLE를 이용한 여학생의 비율을 조회","Calculate the proportion of female students who used VLE materials among students registered for each module presentation and query the proportion of female students who used module code, presentation code, and VLE",,"SELECT sr.code_module, sr.code_presentation, SUM(CASE WHEN si.gender = 'F' THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT sv.id_student) AS female_ratio FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student INNER JOIN studentInfo si ON sv.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,AAA	2013J	0.3897,,,,,
테이블 2개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 클릭 수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 클릭수를 조회","Among students registered for each module presentation, calculate the average number of clicks by students using VLE materials and view the module code, presentation code, and average number of clicks.",,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_clicks FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	2013J	4.3352,,,,,
테이블 2개,university_learning,VLE 자료를 이용한 모든 학생 중 가장 많은 모듈을 이수한 학생의 최종 결과를 식별,Identify the final result of the student who completed the most modules among all students using VLE materials,,"SELECT si.final_result FROM studentInfo si INNER JOIN ( SELECT id_student, COUNT(DISTINCT code_module) AS module_count FROM studentregistration GROUP BY id_student ORDER BY module_count DESC LIMIT 1 ) AS max_modules ON si.id_student = max_modules.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,Pass,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 최종 결과를 식별하고 모듈 코드, 프레젠테이션 코드, 최종 결과를 조회","Among students registered for each module presentation, identify the final results of students who used VLE materials and query the module code, presentation code, and final result",,"SELECT sr.code_module, sr.code_presentation, si.final_result FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student INNER JOIN studentInfo si ON sv.id_student = si.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,349,,"AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Fail
AAA        2013J        Withdrawn
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Withdrawn
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Distinction
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Withdrawn
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Distinction
AAA        2013J        Fail
AAA        2013J        Fail
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Fail
AAA        2013J        Withdrawn
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Fail
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Withdrawn
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Fail
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Distinction
AAA        2013J        Distinction
AAA        2013J        Pass
AAA        2013J        Pass
AAA        2013J        Pass",,,,,
테이블 3개,university_learning,"모든 모듈 프레젠테이션에서 각 학생의 최근 평가 점수를 식별하고 학생id, 모듈 코드, 프레젠테이션 코드, 점수를 조회","Identify each student's most recent assessment score across all module presentations and look up student ID, module code, presentation code, and score",,"SELECT si.id_student, sr.code_module, sr.code_presentation, MAX(sa.score) AS recent_score FROM studentInfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student GROUP BY si.id_student, sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1000,,"11391	AAA	2013J	85
28400	AAA	2013J	70
30268	AAA	2013J	
31604	AAA	2013J	88
32885	AAA	2013J	75
38053	AAA	2013J	79
45462	AAA	2013J	75
45642	AAA	2013J	73
52130	AAA	2013J	75
53025	AAA	2013J	81
57506	AAA	2013J	80
58873	AAA	2013J	78
59185	AAA	2013J	89
62155	AAA	2013J	85
63400	AAA	2013J	83
65002	AAA	2013J	68
70464	AAA	2013J	61
71361	AAA	2013J	86
74372	AAA	2013J	67
75091	AAA	2013J	67
77367	AAA	2013J	76
91265	AAA	2013J	75
94961	AAA	2013J	74
98094	AAA	2013J	62
100893	AAA	2013J	74
101781	AAA	2013J	84
102806	AAA	2013J	86
102952	AAA	2013J	83
104476	AAA	2013J	85
106247	AAA	2013J	67
106577	AAA	2013J	65
110175	AAA	2013J	69
111717	AAA	2013J	83
113295	AAA	2013J	81
114017	AAA	2013J	76
114999	AAA	2013J	80
116541	AAA	2013J	76
116692	AAA	2013J	78
118983	AAA	2013J	73
123044	AAA	2013J	75
127582	AAA	2013J	75
129955	AAA	2013J	85
132976	AAA	2013J	75
134143	AAA	2013J	87
135335	AAA	2013J	
135400	AAA	2013J	72
137873	AAA	2013J	87
141355	AAA	2013J	77
141377	AAA	2013J	65
142326	AAA	2013J	82
144801	AAA	2013J	79
145130	AAA	2013J	75
146188	AAA	2013J	62
147756	AAA	2013J	82
147793	AAA	2013J	52
148993	AAA	2013J	90
151358	AAA	2013J	54
155550	AAA	2013J	75
155854	AAA	2013J	82
155984	AAA	2013J	85
157568	AAA	2013J	81
159954	AAA	2013J	75
164259	AAA	2013J	82
167906	AAA	2013J	82
168936	AAA	2013J	79
172112	AAA	2013J	75
172797	AAA	2013J	67
174782	AAA	2013J	83
175392	AAA	2013J	93
175932	AAA	2013J	82
175991	AAA	2013J	51
180753	AAA	2013J	61
181316	AAA	2013J	76
183096	AAA	2013J	57
183947	AAA	2013J	67
184271	AAA	2013J	65
185439	AAA	2013J	74
186149	AAA	2013J	85
187100	AAA	2013J	90
188278	AAA	2013J	79
189879	AAA	2013J	85
192183	AAA	2013J	75
195262	AAA	2013J	50
200860	AAA	2013J	69
202635	AAA	2013J	70
205350	AAA	2013J	87
205719	AAA	2013J	67
227499	AAA	2013J	84
227517	AAA	2013J	67
228082	AAA	2013J	82
228222	AAA	2013J	71
229179	AAA	2013J	73
229361	AAA	2013J	82
231554	AAA	2013J	80
235507	AAA	2013J	69
236284	AAA	2013J	85
238007	AAA	2013J	86
240712	AAA	2013J	82
240884	AAA	2013J	74
241649	AAA	2013J	85
241729	AAA	2013J	64
242793	AAA	2013J	85
246834	AAA	2013J	60
248270	AAA	2013J	82
255548	AAA	2013J	84
256815	AAA	2013J	80
258392	AAA	2013J	64
258894	AAA	2013J	75
260355	AAA	2013J	60
262011	AAA	2013J	79
262934	AAA	2013J	81
268073	AAA	2013J	83
268733	AAA	2013J	51
271251	AAA	2013J	85
277880	AAA	2013J	70
279572	AAA	2013J	83
281022	AAA	2013J	77
281250	AAA	2013J	65
281589	AAA	2013J	
282821	AAA	2013J	74
286488	AAA	2013J	80
287548	AAA	2013J	70
290201	AAA	2013J	78
290757	AAA	2013J	80
291334	AAA	2013J	86
292923	AAA	2013J	
293699	AAA	2013J	55
294570	AAA	2013J	82
294594	AAA	2013J	61
295741	AAA	2013J	55
296332	AAA	2013J	95
298696	AAA	2013J	87
300398	AAA	2013J	82
302302	AAA	2013J	59
305152	AAA	2013J	64
305386	AAA	2013J	83
305539	AAA	2013J	
306107	AAA	2013J	73
306466	AAA	2013J	88
306897	AAA	2013J	74
307061	AAA	2013J	83
307866	AAA	2013J	73
311917	AAA	2013J	67
312537	AAA	2013J	90
312782	AAA	2013J	89
318933	AAA	2013J	70
319047	AAA	2013J	81
321942	AAA	2013J	82
324002	AAA	2013J	85
324084	AAA	2013J	72
324282	AAA	2013J	74
331358	AAA	2013J	87
332789	AAA	2013J	78
333059	AAA	2013J	74
333323	AAA	2013J	78
334259	AAA	2013J	57
334333	AAA	2013J	36
335764	AAA	2013J	90
336207	AAA	2013J	75
339972	AAA	2013J	68
341872	AAA	2013J	70
342007	AAA	2013J	95
342514	AAA	2013J	85
342972	AAA	2013J	73
343446	AAA	2013J	86
344282	AAA	2013J	61
345068	AAA	2013J	85
345357	AAA	2013J	91
346025	AAA	2013J	85
346843	AAA	2013J	
350188	AAA	2013J	76
354858	AAA	2013J	
357668	AAA	2013J	63
364177	AAA	2013J	75
365244	AAA	2013J	64
365642	AAA	2013J	77
366483	AAA	2013J	90
368194	AAA	2013J	58
368824	AAA	2013J	68
368963	AAA	2013J	74
376439	AAA	2013J	94
376581	AAA	2013J	88
380953	AAA	2013J	75
383254	AAA	2013J	85
386924	AAA	2013J	80
386952	AAA	2013J	75
388722	AAA	2013J	70
388885	AAA	2013J	75
390890	AAA	2013J	80
392756	AAA	2013J	55
392931	AAA	2013J	75
393207	AAA	2013J	80
396872	AAA	2013J	68
398552	AAA	2013J	54
401869	AAA	2013J	75
402470	AAA	2013J	80
404804	AAA	2013J	52
405088	AAA	2013J	86
405961	AAA	2013J	
414117	AAA	2013J	82
415969	AAA	2013J	67
420087	AAA	2013J	80
429958	AAA	2013J	60
441018	AAA	2013J	66
441888	AAA	2013J	77
442442	AAA	2013J	42
444677	AAA	2013J	91
470588	AAA	2013J	86
489455	AAA	2013J	74
494424	AAA	2013J	
495284	AAA	2013J	76
498857	AAA	2013J	77
508818	AAA	2013J	81
512460	AAA	2013J	83
544103	AAA	2013J	82
550383	AAA	2013J	87
564450	AAA	2013J	64
568601	AAA	2013J	85
572652	AAA	2013J	78
580389	AAA	2013J	75
581129	AAA	2013J	65
588775	AAA	2013J	86
591774	AAA	2013J	88
603861	AAA	2013J	71
606143	AAA	2013J	78
704156	AAA	2013J	70
705379	AAA	2013J	83
721259	AAA	2013J	65
749412	AAA	2013J	83
760729	AAA	2013J	83
905042	AAA	2013J	85
949618	AAA	2013J	72
958987	AAA	2013J	78
968578	AAA	2013J	77
969076	AAA	2013J	82
971027	AAA	2013J	76
978739	AAA	2013J	59
1035023	AAA	2013J	73
1105478	AAA	2013J	90
1352868	AAA	2013J	82
1401935	AAA	2013J	45
1402638	AAA	2013J	80
1414443	AAA	2013J	60
1456619	AAA	2013J	63
1465690	AAA	2013J	87
1472925	AAA	2013J	69
1488959	AAA	2013J	67
1518989	AAA	2013J	78
1618738	AAA	2013J	84
1620151	AAA	2013J	85
1626710	AAA	2013J	86
1640609	AAA	2013J	86
1686521	AAA	2013J	68
1729319	AAA	2013J	82
1746134	AAA	2013J	87
1758449	AAA	2013J	65
1763015	AAA	2013J	
1765788	AAA	2013J	74
1801229	AAA	2013J	79
1801641	AAA	2013J	85
1847830	AAA	2013J	83
1860318	AAA	2013J	72
1889511	AAA	2013J	78
1889577	AAA	2013J	84
1894188	AAA	2013J	76
1938355	AAA	2013J	85
1942396	AAA	2013J	65
1970390	AAA	2013J	90
1976139	AAA	2013J	78
2011876	AAA	2013J	79
2012966	AAA	2013J	82
2051699	AAA	2013J	71
2062879	AAA	2013J	65
2065691	AAA	2013J	40
2073016	AAA	2013J	68
2080474	AAA	2013J	88
2083877	AAA	2013J	75
2084066	AAA	2013J	65
2104505	AAA	2013J	80
2122180	AAA	2013J	86
2139353	AAA	2013J	71
2143752	AAA	2013J	56
2146792	AAA	2013J	78
2149225	AAA	2013J	
2153153	AAA	2013J	71
2155014	AAA	2013J	79
2164705	AAA	2013J	70
2171627	AAA	2013J	72
2182846	AAA	2013J	70
2194100	AAA	2013J	80
2197016	AAA	2013J	76
2208424	AAA	2013J	85
2229865	AAA	2013J	80
2255601	AAA	2013J	71
2268379	AAA	2013J	87
2278464	AAA	2013J	60
2293923	AAA	2013J	72
2312620	AAA	2013J	51
2318055	AAA	2013J	79
2324976	AAA	2013J	
2329342	AAA	2013J	72
2339528	AAA	2013J	85
2342426	AAA	2013J	80
2344901	AAA	2013J	67
2358056	AAA	2013J	79
2358969	AAA	2013J	79
2364471	AAA	2013J	90
2365101	AAA	2013J	
2367155	AAA	2013J	86
2369266	AAA	2013J	57
2376496	AAA	2013J	85
2391984	AAA	2013J	75
2411661	AAA	2013J	57
2411778	AAA	2013J	83
2412002	AAA	2013J	89
2412967	AAA	2013J	80
2429854	AAA	2013J	51
2437837	AAA	2013J	87
2449878	AAA	2013J	66
2456480	AAA	2013J	40
2457256	AAA	2013J	85
2458355	AAA	2013J	95
2460080	AAA	2013J	86
2461190	AAA	2013J	62
2469673	AAA	2013J	52
2470694	AAA	2013J	67
2479954	AAA	2013J	83
2481901	AAA	2013J	83
2482700	AAA	2013J	65
2486127	AAA	2013J	78
2498700	AAA	2013J	81
2516503	AAA	2013J	82
2518069	AAA	2013J	80
2521459	AAA	2013J	70
2523736	AAA	2013J	64
2529279	AAA	2013J	85
2532302	AAA	2013J	72
2536991	AAA	2013J	98
2542724	AAA	2013J	
2550279	AAA	2013J	66
2551220	AAA	2013J	77
2552472	AAA	2013J	62
2555340	AAA	2013J	94
2557283	AAA	2013J	92
2559575	AAA	2013J	85
2562034	AAA	2013J	70
2566163	AAA	2013J	87
2566592	AAA	2013J	86
2569324	AAA	2013J	80
2574528	AAA	2013J	82
2574583	AAA	2013J	77
2576122	AAA	2013J	64
2578995	AAA	2013J	84
2586560	AAA	2013J	84
2594139	AAA	2013J	87
2598871	AAA	2013J	80
2599352	AAA	2013J	80
2600688	AAA	2013J	77
2606098	AAA	2013J	78
2613116	AAA	2013J	85
2617002	AAA	2013J	71
2620584	AAA	2013J	
2639449	AAA	2013J	68
2639540	AAA	2013J	82
2639641	AAA	2013J	75
2641155	AAA	2013J	81
2643002	AAA	2013J	64
2645733	AAA	2013J	89
2649826	AAA	2013J	88
2650282	AAA	2013J	85
2664024	AAA	2013J	78
2666246	AAA	2013J	78
2669816	AAA	2013J	68
2671132	AAA	2013J	78
2676809	AAA	2013J	48
2678643	AAA	2013J	83
2685865	AAA	2013J	83
2688067	AAA	2013J	76
2689958	AAA	2013J	86
2691206	AAA	2013J	90
2691244	AAA	2013J	62
2694424	AAA	2013J	94
2698257	AAA	2013J	76
6516	AAA	2014J	77
24734	AAA	2014J	55
26192	AAA	2014J	88
28061	AAA	2014J	82
31600	AAA	2014J	64
46844	AAA	2014J	73
52765	AAA	2014J	70
55104	AAA	2014J	78
58071	AAA	2014J	87
58316	AAA	2014J	78
62487	AAA	2014J	78
63165	AAA	2014J	57
70011	AAA	2014J	88
75255	AAA	2014J	88
79403	AAA	2014J	72
85092	AAA	2014J	68
85144	AAA	2014J	85
85302	AAA	2014J	76
87431	AAA	2014J	58
95755	AAA	2014J	58
101116	AAA	2014J	90
107489	AAA	2014J	89
108872	AAA	2014J	70
109155	AAA	2014J	72
111512	AAA	2014J	
117818	AAA	2014J	65
119902	AAA	2014J	75
121349	AAA	2014J	88
124064	AAA	2014J	90
125018	AAA	2014J	67
130034	AAA	2014J	87
130547	AAA	2014J	71
130636	AAA	2014J	65
131390	AAA	2014J	82
133816	AAA	2014J	70
133922	AAA	2014J	85
135471	AAA	2014J	88
139033	AAA	2014J	66
141506	AAA	2014J	75
146503	AAA	2014J	68
149741	AAA	2014J	78
149962	AAA	2014J	73
151587	AAA	2014J	73
152668	AAA	2014J	71
158707	AAA	2014J	77
164944	AAA	2014J	65
165226	AAA	2014J	77
167961	AAA	2014J	90
174024	AAA	2014J	68
174094	AAA	2014J	78
174745	AAA	2014J	68
175447	AAA	2014J	74
175772	AAA	2014J	85
183057	AAA	2014J	72
185350	AAA	2014J	75
199636	AAA	2014J	88
199897	AAA	2014J	83
200804	AAA	2014J	78
205494	AAA	2014J	82
228021	AAA	2014J	88
228383	AAA	2014J	76
232307	AAA	2014J	78
235068	AAA	2014J	63
236875	AAA	2014J	50
237274	AAA	2014J	80
243510	AAA	2014J	62
244246	AAA	2014J	78
248581	AAA	2014J	90
252073	AAA	2014J	55
254625	AAA	2014J	86
258587	AAA	2014J	87
260623	AAA	2014J	74
263251	AAA	2014J	85
263543	AAA	2014J	87
263952	AAA	2014J	93
266524	AAA	2014J	59
273346	AAA	2014J	84
274947	AAA	2014J	82
275674	AAA	2014J	50
275792	AAA	2014J	75
277123	AAA	2014J	58
281077	AAA	2014J	77
281636	AAA	2014J	88
285315	AAA	2014J	87
287040	AAA	2014J	77
287204	AAA	2014J	80
287210	AAA	2014J	78
288994	AAA	2014J	
289449	AAA	2014J	78
290164	AAA	2014J	74
292525	AAA	2014J	86
292775	AAA	2014J	88
293824	AAA	2014J	73
294496	AAA	2014J	86
294655	AAA	2014J	81
295060	AAA	2014J	73
295075	AAA	2014J	69
296424	AAA	2014J	87
298034	AAA	2014J	82
298838	AAA	2014J	86
301967	AAA	2014J	62
302476	AAA	2014J	88
303521	AAA	2014J	85
303985	AAA	2014J	88
304465	AAA	2014J	80
306646	AAA	2014J	56
309142	AAA	2014J	71
310412	AAA	2014J	90
311235	AAA	2014J	74
311659	AAA	2014J	
313937	AAA	2014J	88
315076	AAA	2014J	81
315744	AAA	2014J	88
323370	AAA	2014J	88
323805	AAA	2014J	
328024	AAA	2014J	82
328734	AAA	2014J	
329659	AAA	2014J	58
330594	AAA	2014J	65
332884	AAA	2014J	86
334441	AAA	2014J	45
335247	AAA	2014J	86
337748	AAA	2014J	44
338407	AAA	2014J	87
341876	AAA	2014J	69
345440	AAA	2014J	78
345519	AAA	2014J	85
346118	AAA	2014J	78
348275	AAA	2014J	83
348807	AAA	2014J	80
350156	AAA	2014J	63
350939	AAA	2014J	77
351336	AAA	2014J	79
353665	AAA	2014J	75
354170	AAA	2014J	71
356170	AAA	2014J	78
358182	AAA	2014J	80
364957	AAA	2014J	66
369834	AAA	2014J	86
371710	AAA	2014J	86
373872	AAA	2014J	70
375260	AAA	2014J	78
375646	AAA	2014J	80
377546	AAA	2014J	87
381642	AAA	2014J	82
382095	AAA	2014J	85
383180	AAA	2014J	83
383600	AAA	2014J	88
383723	AAA	2014J	85
384203	AAA	2014J	85
384725	AAA	2014J	83
387533	AAA	2014J	68
387954	AAA	2014J	
388147	AAA	2014J	41
391249	AAA	2014J	85
396599	AAA	2014J	62
396655	AAA	2014J	54
398171	AAA	2014J	73
398349	AAA	2014J	87
400147	AAA	2014J	68
400682	AAA	2014J	57
401404	AAA	2014J	81
402204	AAA	2014J	78
402727	AAA	2014J	80
402961	AAA	2014J	71
404356	AAA	2014J	83
406671	AAA	2014J	87
406682	AAA	2014J	86
409100	AAA	2014J	85
409703	AAA	2014J	65
410092	AAA	2014J	71
411971	AAA	2014J	80
418731	AAA	2014J	61
421455	AAA	2014J	90
424577	AAA	2014J	73
429858	AAA	2014J	85
431025	AAA	2014J	60
439305	AAA	2014J	90
440319	AAA	2014J	83
442064	AAA	2014J	72
442132	AAA	2014J	77
446108	AAA	2014J	64
447481	AAA	2014J	65
468120	AAA	2014J	42
468694	AAA	2014J	68
470982	AAA	2014J	65
476603	AAA	2014J	87
481022	AAA	2014J	57
483800	AAA	2014J	78
484897	AAA	2014J	78
485962	AAA	2014J	94
488382	AAA	2014J	
488990	AAA	2014J	62
500113	AAA	2014J	85
503889	AAA	2014J	78
514526	AAA	2014J	
518808	AAA	2014J	85
522482	AAA	2014J	75
527100	AAA	2014J	95
527801	AAA	2014J	67
533068	AAA	2014J	78
537081	AAA	2014J	76
544253	AAA	2014J	78
548120	AAA	2014J	82
561467	AAA	2014J	
567922	AAA	2014J	
569505	AAA	2014J	89
570317	AAA	2014J	79
574505	AAA	2014J	52
588477	AAA	2014J	88
593846	AAA	2014J	76
593987	AAA	2014J	75
596288	AAA	2014J	85
598070	AAA	2014J	
603834	AAA	2014J	64
608440	AAA	2014J	
623710	AAA	2014J	
623840	AAA	2014J	83
626240	AAA	2014J	66
628088	AAA	2014J	80
628312	AAA	2014J	
630142	AAA	2014J	88
637665	AAA	2014J	68
639053	AAA	2014J	74
642878	AAA	2014J	52
648130	AAA	2014J	60
676546	AAA	2014J	77
677186	AAA	2014J	71
677281	AAA	2014J	
684180	AAA	2014J	75
687698	AAA	2014J	58
696073	AAA	2014J	78
696578	AAA	2014J	85
852847	AAA	2014J	42
998493	AAA	2014J	75
1045203	AAA	2014J	81
1112555	AAA	2014J	72
1183831	AAA	2014J	76
1268696	AAA	2014J	82
1336190	AAA	2014J	
1398979	AAA	2014J	78
1469279	AAA	2014J	
1471214	AAA	2014J	77
1484804	AAA	2014J	74
1511033	AAA	2014J	82
1576513	AAA	2014J	90
1609002	AAA	2014J	87
1629771	AAA	2014J	85
1676594	AAA	2014J	
1686551	AAA	2014J	80
1689639	AAA	2014J	78
1715896	AAA	2014J	85
1721270	AAA	2014J	73
1757766	AAA	2014J	75
1773377	AAA	2014J	76
1799111	AAA	2014J	83
1818673	AAA	2014J	86
1839386	AAA	2014J	40
1926668	AAA	2014J	68
1947156	AAA	2014J	87
1967783	AAA	2014J	70
1975209	AAA	2014J	70
2010232	AAA	2014J	90
2045084	AAA	2014J	72
2057803	AAA	2014J	78
2085209	AAA	2014J	90
2086400	AAA	2014J	75
2148681	AAA	2014J	78
2158048	AAA	2014J	86
2158196	AAA	2014J	60
2165164	AAA	2014J	70
2168833	AAA	2014J	24
2207874	AAA	2014J	66
2240349	AAA	2014J	90
2244332	AAA	2014J	86
2273119	AAA	2014J	50
2277857	AAA	2014J	74
2297896	AAA	2014J	74
2313257	AAA	2014J	
2330254	AAA	2014J	78
2355470	AAA	2014J	60
2363863	AAA	2014J	87
2369415	AAA	2014J	87
2375975	AAA	2014J	76
2397661	AAA	2014J	60
2398313	AAA	2014J	73
2404408	AAA	2014J	68
2425993	AAA	2014J	81
2432796	AAA	2014J	67
2434159	AAA	2014J	65
2436812	AAA	2014J	51
2467267	AAA	2014J	80
2473538	AAA	2014J	60
2474849	AAA	2014J	35
2494700	AAA	2014J	88
2500258	AAA	2014J	79
2507842	AAA	2014J	79
2509639	AAA	2014J	73
2514368	AAA	2014J	90
2514898	AAA	2014J	83
2521865	AAA	2014J	71
2522927	AAA	2014J	82
2540168	AAA	2014J	47
2546445	AAA	2014J	73
2551797	AAA	2014J	74
2551932	AAA	2014J	60
2574990	AAA	2014J	66
2578676	AAA	2014J	76
2581477	AAA	2014J	56
2584873	AAA	2014J	73
2595841	AAA	2014J	69
2596621	AAA	2014J	87
2601889	AAA	2014J	88
2602338	AAA	2014J	73
2606802	AAA	2014J	29
2624961	AAA	2014J	68
2630087	AAA	2014J	
2633226	AAA	2014J	66
2642616	AAA	2014J	61
2642935	AAA	2014J	85
2648611	AAA	2014J	82
2649800	AAA	2014J	77
2654628	AAA	2014J	74
2677624	AAA	2014J	79
2680312	AAA	2014J	86
2688166	AAA	2014J	69
2690062	AAA	2014J	58
2692514	AAA	2014J	85
2694788	AAA	2014J	51
23629	BBB	2013B	100
25107	BBB	2013B	100
27891	BBB	2013B	100
29144	BBB	2013B	100
31663	BBB	2013B	100
33666	BBB	2013B	100
34229	BBB	2013B	100
34353	BBB	2013B	100
34431	BBB	2013B	80
34694	BBB	2013B	
34756	BBB	2013B	80
34863	BBB	2013B	100
35812	BBB	2013B	71
39655	BBB	2013B	95
50993	BBB	2013B	80
52899	BBB	2013B	80
58089	BBB	2013B	100
62631	BBB	2013B	100
70608	BBB	2013B	87
71433	BBB	2013B	
72070	BBB	2013B	
74695	BBB	2013B	100
74734	BBB	2013B	80
75399	BBB	2013B	80
78645	BBB	2013B	80
79378	BBB	2013B	
82535	BBB	2013B	80
82741	BBB	2013B	100
83254	BBB	2013B	77
84245	BBB	2013B	100
84664	BBB	2013B	100
86291	BBB	2013B	87
87604	BBB	2013B	
87732	BBB	2013B	100
88580	BBB	2013B	
91322	BBB	2013B	78
92274	BBB	2013B	100
92832	BBB	2013B	100
92947	BBB	2013B	100
92993	BBB	2013B	100
94616	BBB	2013B	85
96291	BBB	2013B	
97154	BBB	2013B	100
98313	BBB	2013B	88
102849	BBB	2013B	
104054	BBB	2013B	100
108377	BBB	2013B	87
108589	BBB	2013B	100
109938	BBB	2013B	93
110881	BBB	2013B	100
116603	BBB	2013B	100
117071	BBB	2013B	100
120994	BBB	2013B	100
122524	BBB	2013B	
123379	BBB	2013B	
123860	BBB	2013B	100
126322	BBB	2013B	86
126411	BBB	2013B	100
127209	BBB	2013B	
128776	BBB	2013B	
133155	BBB	2013B	100
133531	BBB	2013B	
133748	BBB	2013B	100
141823	BBB	2013B	58
142324	BBB	2013B	100
143741	BBB	2013B	100
143854	BBB	2013B	
145544	BBB	2013B	100
147876	BBB	2013B	100
151697	BBB	2013B	100
152153	BBB	2013B	100
152910	BBB	2013B	100
152929	BBB	2013B	100
153212	BBB	2013B	100
153704	BBB	2013B	100
154027	BBB	2013B	81
154125	BBB	2013B	100
154540	BBB	2013B	83
155735	BBB	2013B	
156835	BBB	2013B	83
161678	BBB	2013B	40
165243	BBB	2013B	100
169515	BBB	2013B	70
170356	BBB	2013B	65
171377	BBB	2013B	
173316	BBB	2013B	100
173335	BBB	2013B	100
174321	BBB	2013B	
177639	BBB	2013B	
179605	BBB	2013B	100
182824	BBB	2013B	80
183806	BBB	2013B	100
185240	BBB	2013B	
185349	BBB	2013B	100
186670	BBB	2013B	81
186780	BBB	2013B	
186988	BBB	2013B	100
187793	BBB	2013B	80
188152	BBB	2013B	100
192424	BBB	2013B	100
193822	BBB	2013B	100
197595	BBB	2013B	80
198956	BBB	2013B	100
199520	BBB	2013B	100
200863	BBB	2013B	
200905	BBB	2013B	100
203108	BBB	2013B	100
203481	BBB	2013B	100
203652	BBB	2013B	
204746	BBB	2013B	100
205231	BBB	2013B	
226374	BBB	2013B	100
226827	BBB	2013B	100
228049	BBB	2013B	
228235	BBB	2013B	
229240	BBB	2013B	100
229426	BBB	2013B	100
230348	BBB	2013B	
232600	BBB	2013B	
232695	BBB	2013B	100
232745	BBB	2013B	
235097	BBB	2013B	80
237304	BBB	2013B	100
237913	BBB	2013B	100
242149	BBB	2013B	75
245404	BBB	2013B	100
247267	BBB	2013B	88
248103	BBB	2013B	100
249534	BBB	2013B	82
251351	BBB	2013B	100
252340	BBB	2013B	80
252652	BBB	2013B	
253250	BBB	2013B	
255347	BBB	2013B	100
255998	BBB	2013B	60
256215	BBB	2013B	
258402	BBB	2013B	
259182	BBB	2013B	
262294	BBB	2013B	60
262454	BBB	2013B	100
262741	BBB	2013B	84
263499	BBB	2013B	100
263531	BBB	2013B	
265405	BBB	2013B	
265958	BBB	2013B	82
267761	BBB	2013B	100
267853	BBB	2013B	
269076	BBB	2013B	64
269289	BBB	2013B	
270399	BBB	2013B	
270567	BBB	2013B	85
271036	BBB	2013B	100
272580	BBB	2013B	100
273731	BBB	2013B	100
273877	BBB	2013B	100
276717	BBB	2013B	100
277733	BBB	2013B	81
278447	BBB	2013B	100
280962	BBB	2013B	
281564	BBB	2013B	100
284076	BBB	2013B	100
285633	BBB	2013B	100
285912	BBB	2013B	84
288380	BBB	2013B	80
288990	BBB	2013B	51
290550	BBB	2013B	100
291037	BBB	2013B	80
291194	BBB	2013B	100
291701	BBB	2013B	
292027	BBB	2013B	80
294381	BBB	2013B	100
294961	BBB	2013B	85
294999	BBB	2013B	62
295754	BBB	2013B	100
296408	BBB	2013B	
297484	BBB	2013B	100
298322	BBB	2013B	100
298476	BBB	2013B	100
299561	BBB	2013B	
302550	BBB	2013B	
305945	BBB	2013B	
306886	BBB	2013B	100
306984	BBB	2013B	
309175	BBB	2013B	100
309709	BBB	2013B	100
309734	BBB	2013B	100
311042	BBB	2013B	65
312141	BBB	2013B	68
313810	BBB	2013B	100
315186	BBB	2013B	100
316841	BBB	2013B	100
318056	BBB	2013B	91
318101	BBB	2013B	59
319209	BBB	2013B	100
322745	BBB	2013B	
322960	BBB	2013B	100
323914	BBB	2013B	
324236	BBB	2013B	100
325511	BBB	2013B	100
325879	BBB	2013B	100
326012	BBB	2013B	64
329226	BBB	2013B	100
329321	BBB	2013B	100
329800	BBB	2013B	100
330376	BBB	2013B	
331354	BBB	2013B	100
331844	BBB	2013B	100
333129	BBB	2013B	50
333837	BBB	2013B	85
334291	BBB	2013B	100
334794	BBB	2013B	53
335421	BBB	2013B	82
335600	BBB	2013B	80
335910	BBB	2013B	100
336165	BBB	2013B	35
338056	BBB	2013B	100
338861	BBB	2013B	100
338912	BBB	2013B	
339379	BBB	2013B	100
339526	BBB	2013B	
339946	BBB	2013B	100
340378	BBB	2013B	
340831	BBB	2013B	100
341040	BBB	2013B	100
341229	BBB	2013B	71
341235	BBB	2013B	
341509	BBB	2013B	100
349040	BBB	2013B	80
349424	BBB	2013B	
350622	BBB	2013B	100
350795	BBB	2013B	85
351271	BBB	2013B	100
351290	BBB	2013B	100
351543	BBB	2013B	35
352161	BBB	2013B	100
352364	BBB	2013B	100
353093	BBB	2013B	100
353352	BBB	2013B	82
353918	BBB	2013B	
354058	BBB	2013B	100
354815	BBB	2013B	
354895	BBB	2013B	100
355369	BBB	2013B	80
355998	BBB	2013B	55
357030	BBB	2013B	70
357038	BBB	2013B	
357928	BBB	2013B	80
359170	BBB	2013B	
360188	BBB	2013B	100
360489	BBB	2013B	100
360877	BBB	2013B	100
361603	BBB	2013B	100
362760	BBB	2013B	60
362877	BBB	2013B	57
363401	BBB	2013B	100
363416	BBB	2013B	100
363660	BBB	2013B	100
364323	BBB	2013B	
365439	BBB	2013B	100
365452	BBB	2013B	100
365488	BBB	2013B	100
365707	BBB	2013B	100
366821	BBB	2013B	
367304	BBB	2013B	60
367348	BBB	2013B	73
367609	BBB	2013B	100
368439	BBB	2013B	
369212	BBB	2013B	
370302	BBB	2013B	80
370720	BBB	2013B	100
371679	BBB	2013B	100
372624	BBB	2013B	
374102	BBB	2013B	83
374234	BBB	2013B	100
375312	BBB	2013B	
376617	BBB	2013B	100
377695	BBB	2013B	
377759	BBB	2013B	90
377846	BBB	2013B	100
377905	BBB	2013B	100
378462	BBB	2013B	100
378543	BBB	2013B	100
378721	BBB	2013B	100
379402	BBB	2013B	100
379405	BBB	2013B	
380151	BBB	2013B	
381640	BBB	2013B	
381722	BBB	2013B	73",,,,,
테이블 3개,university_learning,"모든 학생의 평균 평가 점수와 VLE 자료를 이용한 총 클릭 수를 계산하고 학생id, 모듈 코드, 평균 평가점수,총 클릭수를 조회","Calculate the average evaluation score of all students and the total number of clicks using VLE data and view the student ID, module code, average evaluation score, andtotal number of clicks.",,"SELECT si.id_student, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks FROM studentInfo si LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student LEFT JOIN studentvle sv ON si.id_student = sv.id_student GROUP BY si.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1000,,"6516	61.8	
11391	82	80
23629	76.66666666666667	
23632		
23798		
24734	46.8	
25107	64.42857142857143	
25629		
25997		
26192	86.2	
26315		
26677		
26734		
27457		
27759		
27891	73.75	
28061	77.6	
28400	66.4	20
28418		
29144	69.83333333333333	
29764		
29820		
30091		
30268		3
31014		
31600	54.8	
31604	76	5
31663	70.28571428571429	
31849		
32327		
32885	54.4	25
32930		
33666	78.66666666666667	
34229	82	
34353	84.33333333333333	
34431	80	
34662		
34694		
34756	67.33333333333333	
34863	67.57142857142857	
35812	71	
37622		
38053	68	35
38234		
38711		
38941		
39208		
39655	82	
40333		
40604		
41547		
42638		
45462	68	5
45642	72.4	15
45664		
46605		
46844	64.8	
47855		
47891		
48040		
48503		
49119		
50069		
50263		
50993	39.333333333333336	
51301		
51576		
52130	71.4	10
52426		
52765	63	
52797		
52899	76	
53025	78	5
53236		
53360		
54388		
54391		
55026		
55104	71	
55968		
56340		
56789		
57079		
57285		
57340		
57369		
57506	74	15
58071	76	
58089	87.5	
58316	73.4	
58520		
58653		
58873	73.2	40
59185	78.6	70
59272		
59541		
59725		
60416		
60830		
61118		
61352		
62155	76	5
62278		
62487	71.6	
62631	76.6	
63044		
63165	51.4	
63400	71.6	110
63467		
63721		
64246		
64275		
64296		
65002	67	12
65807		
66254		
67863		
68556		
69489		
69494		
69703		
69843		
70011	80.2	
70381		
70464	55.6	10
70569		
70608	78	
70750		
70771		
71361	80.4	125
71433		
71504		
72057		
72070		
72349		
72400		
73489		
73584		
73874		
74169		
74290		
74372	48.5	4
74574		
74585		
74695	93	
74734	75	
75091	66	60
75118		
75255	81.8	
75399	64.83333333333333	
75454		
75469		
75728		
76196		
77367	70.4	5
78255		
78645	73.25	
79378		
79403	60.666666666666664	
79461		
80001		
80329		
80717		
82535	64.71428571428571	
82575		
82611		
82741	69.14285714285714	
83219		
83254	63.285714285714285	
83453		
84245	87.28571428571429	
84299		
84541		
84664	82	
84812		
85092	58	
85144	77.6	
85302	71.2	
86047		
86291	87	
87431	50	
87604		
87732	77.66666666666667	
88340		
88580		
88758		
89092		
89778		
89850		
90243		
90361		
91265	70.8	5
91322	73.66666666666667	
92274	63	
92341		
92832	70.16666666666667	
92947	85	
92993	71.16666666666667	
93925		
94484		
94616	69.5	
94961	65.33333333333333	30
95755	45	
95906		
96291		
96475		
96538		
97006		
97154	87.83333333333333	
97486		
97567		
97865		
98094	60.6	10
98268		
98313	78.28571428571429	
98452		
98720		
98842		
99088		
99799		
100282		
100621		
100893	68.4	5
101116	82.6	
101781	72.6	25
102067		
102806	78	15
102849		
102952	76.6	5
103496		
103535		
103998		
104054	91.57142857142857	
104238		
104476	79.6	5
105523		
105527		
105851		
105883		
106095		
106247	60	
106383		
106577	53.4	5
106588		
106793		
107028		
107339		
107489	82	
107713		
108118		
108377	77.66666666666667	
108589	82.28571428571429	
108760		
108799		
108834		
108859		
108872	61.8	
108947		
109155	67.8	
109372		
109441		
109782		
109938	86.85714285714286	
110175	63.4	20
110881	71	
110911		
111512		
111717	81	87
111942		
113295	77.6	10
114017	71.8	10
114402		
114999	72.8	15
115452		
116174		
116518		
116541	62.4	
116603	84	
116606		
116692	74.2	80
117071	73	
117232		
117544		
117545		
117699		
117818	57.6	
118098		
118213		
118877		
118983	61.8	5
119353		
119437		
119444		
119471		
119729		
119898		
119902	67	
120994	85	
121349	76	
122392		
122524		
123044	71.4	10
123087		
123270		
123379		
123462		
123598		
123716		
123860	76.71428571428571	
124064	87.2	
124124		
124193		
124909		
125018	64.8	
125055		
125535		
125874		
126322	77.25	
126337		
126394		
126395		
126411	100	
126608		
126713		
126769		
126800		
127209		
127582	69.6	5
128386		
128510		
128776		
128889		
129198		
129638		
129878		
129955	81	6
130013		
130034	78.4	
130547	58.4	
130636	60	
131051		
131145		
131390	78.6	
131695		
131933		
132055		
132191		
132626		
132924		
132972		
132976	67.4	25
133104		
133155	89	
133269		
133531		
133748	71.2	
133816	65.4	
133922	78.2	
134025		
134143	84.4	5
134563		
135330		
135335		2
135400	53.142857142857146	
135471	84	
135792		
137873	80.2	5
138289		
138407		
138920		
139033	61	
139190		
139250		
139549		
140719		
141355	72.6	15
141377	48.833333333333336	
141506	75	
141823	29	
141949		
142324	72.8	
142326	73.6	5
142935		
143741	81	
143854		
144801	68.8	15
145130	54.4	5
145280		
145282		
145544	78	
146125		
146165		
146188	50	20
146503	63.4	
146600		
147675		
147756	68.66666666666667	9
147793	52	2
147876	74	
148427		
148993	79.5	120
149741	66.4	
149962	68.4	
150398		
151358	50	
151549		
151587	67	
151697	82.85714285714286	
151800		
151917		
152153	49.2	
152428		
152668	71	
152867		
152910	80	
152929	74	
152962		
152973		
153212	82.71428571428571	
153687		
153704	85.25	
153788		
154011		
154027	68.83333333333333	
154125	84.66666666666667	
154540	78.71428571428571	
154570		
155067		
155484		
155550	67	5
155631		
155735		
155854	79.8	5
155963		
155984	78.14285714285714	7
156311		
156358		
156788		
156835	81.5	
157060		
157276		
157310		
157568	70.6	5
157752		
157795		
158707	74	
159293		
159954	68.2	5
160026		
160300		
161491		
161678	40	
161811		
162646		
162650		
164259	71.8	5
164944	62.4	
165099		
165226	77	
165243	73.5	
165498		
165647		
165733		
165823		
165904		
166160		
167791		
167906	69.4	60
167961	76	
168178		
168936	66.4	
169008		
169213		
169380		
169400		
169515	59	
170025		
170356	65	
170519		
170864		
171377		
171751		
171896		
172112	69.6	15
172137		
172301		
172797	61.4	25
172965		
173163		
173316	58	
173335	69.33333333333333	
174024	60.4	
174094	75.4	
174222		
174321		
174440		
174487		
174745	65	
174782	80.4	5
174807		
175392	82.4	15
175447	69.6	
175490		
175772	85	
175932	78.2	5
175991	37.6	10
177554		
177639		
177967		
178072		
178496		
178654		
178738		
178963		
179073		
179254		
179297		
179605	75.33333333333333	
179904		
180753	53.4	85
180976		
181316	76	2
182661		
182824	73.42857142857143	
183057	65.6	
183096	54	165
183287		
183331		
183806	92.5	
183947	49	5
184234		
184236		
184271	59.8	5
184583		
184897		
184972		
185021		
185240		
185349	80.71428571428571	
185350	59.6	
185439	74	25
185597		
186149	76	5
186565		
186670	66.83333333333333	
186780		
186988	57.8	
187100	89.2	5
187257		
187435		
187601		
187793	63	
188026		
188152	91.85714285714286	
188278	71.66666666666667	12
188766		
189035		
189095		
189428		
189624		
189879	79.4	5
189986		
190352		
190565		
191000		
191269		
191459		
191746		
191797		
191973		
192183	68.4	5
192424	78.14285714285714	
192944		
193163		
193215		
193310		
193822	81.16666666666667	
194073		
194377		
195096		
195221		
195262	50	1
195345		
195938		
195940		
197240		
197412		
197486		
197527		
197595	75.71428571428571	
197759		
198339		
198902		
198956	88.5	
199029		
199520	82.28571428571429	
199636	75.8	
199663		
199897	69.4	
200372		
200506		
200804	66	
200860	54.4	20
200863		
200905	55.142857142857146	
201327		
201431		
201655		
202394		
202635	66.66666666666667	9
202879		
203108	79.5	
203481	74.71428571428571	
203640		
203652		
203707		
204725		
204746	75.28571428571429	
205231		
205350	72.2	55
205398		
205425		
205494	66.4	
205719	56.666666666666664	
205788		
205978		
206003		
206245		
206599		
226374	76	
226747		
226827	85.42857142857143	
226839		
227192		
227416		
227499	83.6	10
227517	62.6	20
227752		
227833		
228021	83	
228049		
228082	72.4	15
228153		
228222	61.8	
228235		
228243		
228383	70.6	
228481		
228513		
228743		
228784		
228824		
228909		
229179	66	160
229240	75.57142857142857	
229326		
229361	78	15
229426	84.71428571428571	
229499		
230081		
230340		
230348		
230383		
230761		
231339		
231554	67.75	16
231959		
232307	66.2	
232539		
232600		
232695	77.71428571428571	
232745		
232833		
233095		
233102		
233317		
233444		
233752		
233957		
234068		
234311		
234740		
234929		
235068	59.6	
235097	71	
235175		
235258		
235371		
235380		
235428		
235507	57.833333333333336	6
236161		
236205		
236284	78	
236620		
236875	46.4	
237274	72.4	
237304	73.75	
237913	85.5	
237934		
238007	79.2	55
238144		
238519		
238825		
239707		
240712	75.8	5
240884	58.4	10
240993		
241338		
241649	78.8	20
241729	58.6	5
241955		
242149	63	
242390		
242778		
242793	77.4	5
242858		
242893		
243047		
243351		
243510	43.6	
243851		
243909		
243992		
244064		
244246	67.2	
244902		
244917		
244977		
245217		
245404	83.66666666666667	
245494		
245784		
245987		
246248		
246834	55.6	5
247267	70	
247292		
247457		
247513		
247819		
247902		
247967		
248103	80.57142857142857	
248252		
248270	78.4	20
248581	85	
248653		
248716		
248800		
249154		
249534	72.57142857142857	
250092		
250123		
251351	85.33333333333333	
251385		
251815		
252073	49	
252257		
252340	77.5	
252652		
252863		
253250		
253577		
253859		
254313		
254612		
254625	82.8	
255140		
255310		
255347	89.5	
255548	71.4	5
255957		
255998	50.857142857142854	
256215		
256532		
256815	76.8	10
256998		
258035		
258268		
258392	58.8	15
258402		
258587	80.6	
258840		
258894	64.8	5
259182		
260062		
260137		
260179		
260216		
260355	57.5	9
260623	70.2	
260777		
260949		
260955		
261042		
261265		
261332		
261466		
261615		
262011	71	10
262294	49.333333333333336	
262391		
262454	70.16666666666667	
262639		
262741	71.42857142857143	
262934	76.6	5
263098		
263251	74	
263448		
263499	70	
263531		
263543	79.6	
263952	88.8	
264106		
264152		
264159		
264281		
264285		
264694		
264732		
264744		
264842		
265170		
265405		
265466		
265958	80.66666666666667	
266040		
266331		
266524	53.8	
266558		
266564		
266744		
266915		
267118		
267761	70.5	
267774		
267853		
268018		
268073	74.6	10
268127		
268301		
268589		
268733	43	2
269076	64	
269082		
269204		
269289		
269510		
269676		
270191		
270256		
270399		
270567	73	
270646		
271036	75.14285714285714	
271047		
271251	76.4	5
271346		
271467		
272000		
272103		
272172		
272580	81.57142857142857	
272617		
273346	81.8	
273731	75.66666666666667	
273877	59.666666666666664	
274247		
274577		
274947	54	
274971		
275006		
275112		
275180		
275296		
275674	45	
275792	73	
276717	86	
276925		
277123	46	
277537		
277577		
277733	69.66666666666667	
277809		
277812		
277880	67.66666666666667	18
277967		
278272		
278447	83.28571428571429	
278773		
278794		
278861		
279238		
279557		
279572	79.2	80
279868		
279883		
280054		
280140		
280151		
280152		
280439		
280962		
281022	73.4	5
281077	72.4	
281250	55.4	5
281261		
281564	68.85714285714286	
281589		6
281636	83	
281801		
282038		
282161		
282193		
282713		
282785		
282821	60.6	5
283131		
283564		
283798		
283978		
284076	72	
284246		
284589		
284593		
284762		
284812		
284906		
285050		
285170		
285315	86.2	
285470		
285475		
285567		
285633	62.57142857142857	
285912	76.14285714285714	
285992		
286338		
286402		
286488	71	10
286690		
286914		
286947		
287004		
287040	72.8	
287107		
287204	73.6	
287210	73.4	
287309		
287548	67.8	5
287679		
288086		
288380	67	
288655		
288717		
288967		
288990	45	
288994		
289009		
289108		
289397		
289449	75.2	
289753		
289965		
289993		
290089		
290164	66	
290184		
290201	70.4	20
290382		
290550	83.85714285714286	
290757	75	5
290914		
291037	64.42857142857143	
291194	78.66666666666667	
291334	83.6	105
291544		
291701		
291805		
291844		
291848		
292027	80	
292525	84.6	
292537		
292775	81.6	
292813		
292923		
293387		
293699	46.75	
293712		
293754		
293760		
293824	60	
293989		
293992		
294134		
294381	79.5	
294496	80.6	
294513		",,,,,
테이블 3개,university_learning,각 모듈 프레젠테이션에서 최근 VLE 자료 이용일과 최근 제출일을 비교하여 최신 활동을 식별,"In each module presentation, identify the most recent activities by comparing the most recent VLE material use date with the most recent submission date.",,"SELECT sr.code_module, sr.code_presentation, CASE WHEN MAX(sv.date) > MAX(sa.date_submitted) THEN 'VLE 자료 이용' WHEN MAX(sv.date) < MAX(sa.date_submitted) THEN '평가 제출' ELSE '동시에 VLE 자료 이용 및 평가 제출' END AS recent_activity FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,7,,"AAA        2013J        동시에 VLE 자료 이용 및 평가 제출
AAA        2014J        동시에 VLE 자료 이용 및 평가 제출
BBB        2013B        동시에 VLE 자료 이용 및 평가 제출
BBB        2013J        동시에 VLE 자료 이용 및 평가 제출
BBB        2014B        동시에 VLE 자료 이용 및 평가 제출
BBB        2014J        동시에 VLE 자료 이용 및 평가 제출
CCC        2014B        동시에 VLE 자료 이용 및 평가 제출",,,,,
테이블 3개,university_learning,모든 학생의 최종 결과와 해당 결과를 도출하는 모든 평가 유형을 조회,View the final results for every student and all assessment types that lead to those results,,"SELECT si.id_student, si.final_result, GROUP_CONCAT(DISTINCT a.assessment_type) AS assessment_types FROM studentInfo si LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student LEFT JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY si.id_student, si.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1000,,"6516	Pass	TMA
11391	Pass	TMA
23629	Fail	CMA,TMA
23632	Withdrawn	
23798	Distinction	
24734	Pass	TMA
25107	Pass	CMA,TMA
25629	Withdrawn	
25997	Withdrawn	
26192	Distinction	TMA
26315	Pass	
26677	Withdrawn	
26734	Fail	
27457	Withdrawn	
27759	Fail	
27891	Withdrawn	CMA,TMA
28061	Pass	TMA
28400	Pass	TMA
28418	Fail	
29144	Fail	CMA,TMA
29764	Distinction	
29820	Pass	
30091	Pass	
30268	Withdrawn	
31014	Withdrawn	
31600	Pass	TMA
31604	Pass	TMA
31663	Pass	CMA,TMA
31849	Pass	
32327	Withdrawn	
32885	Pass	TMA
32930	Pass	
33666	Withdrawn	CMA,TMA
34229	Pass	CMA,TMA
34353	Fail	CMA,TMA
34431	Withdrawn	CMA
34662	Withdrawn	
34694	Withdrawn	
34756	Withdrawn	CMA,TMA
34863	Pass	CMA,TMA
35812	Fail	TMA
37622	Pass	
38053	Pass	TMA
38234	Fail	
38711	Withdrawn	
38941	Fail	
39208	Pass	
39655	Distinction	CMA,TMA
40333	Withdrawn	
40604	Pass	
41547	Pass	
42638	Pass	
45462	Pass	TMA
45642	Pass	TMA
45664	Withdrawn	
46605	Distinction	
46844	Pass	TMA
47855	Withdrawn	
47891	Fail	
48040	Pass	
48503	Pass	
49119	Distinction	
50069	Fail	
50263	Withdrawn	
50993	Fail	CMA,TMA
51301	Withdrawn	
51576	Withdrawn	
52130	Pass	TMA
52426	Fail	
52765	Pass	TMA
52797	Pass	
52899	Withdrawn	CMA,TMA
53025	Pass	TMA
53236	Withdrawn	
53360	Withdrawn	
54388	Withdrawn	
54391	Withdrawn	
55026	Pass	
55104	Pass	TMA
55968	Fail	
56340	Fail	
56789	Pass	
57079	Fail	
57285	Pass	
57340	Pass	
57369	Withdrawn	
57506	Pass	TMA
58071	Pass	TMA
58089	Fail	CMA,TMA
58316	Pass	TMA
58520	Withdrawn	
58653	Pass	
58873	Pass	TMA
59185	Pass	TMA
59272	Pass	
59541	Withdrawn	
59725	Distinction	
60416	Pass	
60830	Pass	
61118	Withdrawn	
61352	Withdrawn	
62155	Pass	TMA
62278	Fail	
62487	Pass	TMA
62631	Fail	CMA,TMA
63044	Fail	
63165	Pass	TMA
63400	Pass	TMA
63467	Pass	
63721	Distinction	
64246	Withdrawn	
64275	Pass	
64296	Fail	
65002	Withdrawn	TMA
65807	Withdrawn	
66254	Fail	
67863	Withdrawn	
68556	Fail	
69489	Withdrawn	
69494	Withdrawn	
69703	Pass	
69843	Withdrawn	
70011	Pass	TMA
70381	Pass	
70464	Pass	TMA
70569	Pass	
70608	Distinction	CMA,TMA
70750	Withdrawn	
70771	Withdrawn	
71361	Pass	TMA
71433	Fail	
71504	Pass	
72057	Withdrawn	
72070	Withdrawn	
72349	Withdrawn	
72400	Distinction	
73489	Pass	
73584	Withdrawn	
73874	Withdrawn	
74169	Withdrawn	
74290	Withdrawn	
74372	Fail	TMA
74574	Withdrawn	
74585	Distinction	
74695	Distinction	CMA,TMA
74734	Pass	TMA
75091	Pass	TMA
75118	Withdrawn	
75255	Pass	TMA
75399	Pass	CMA,TMA
75454	Pass	
75469	Withdrawn	
75728	Fail	
76196	Withdrawn	
77367	Pass	TMA
78255	Withdrawn	
78645	Fail	CMA,TMA
79378	Fail	
79403	Withdrawn	TMA
79461	Withdrawn	
80001	Fail	
80329	Withdrawn	
80717	Distinction	
82535	Pass	CMA,TMA
82575	Distinction	
82611	Withdrawn	
82741	Pass	CMA,TMA
83219	Pass	
83254	Pass	CMA,TMA
83453	Withdrawn	
84245	Distinction	CMA,TMA
84299	Withdrawn	
84541	Fail	
84664	Pass	CMA,TMA
84812	Pass	
85092	Pass	TMA
85144	Pass	TMA
85302	Pass	TMA
86047	Withdrawn	
86291	Withdrawn	TMA
87431	Withdrawn	TMA
87604	Withdrawn	
87732	Pass	CMA,TMA
88340	Withdrawn	
88580	Withdrawn	
88758	Withdrawn	
89092	Pass	
89778	Distinction	
89850	Distinction	
90243	Pass	
90361	Pass	
91265	Pass	TMA
91322	Pass	TMA
92274	Withdrawn	CMA,TMA
92341	Fail	
92832	Pass	CMA,TMA
92947	Distinction	CMA,TMA
92993	Pass	CMA,TMA
93925	Withdrawn	
94484	Pass	
94616	Fail	CMA,TMA
94961	Withdrawn	TMA
95755	Withdrawn	TMA
95906	Pass	
96291	Withdrawn	
96475	Pass	
96538	Fail	
97006	Pass	
97154	Pass	CMA,TMA
97486	Withdrawn	
97567	Pass	
97865	Withdrawn	
98094	Pass	TMA
98268	Pass	
98313	Pass	CMA,TMA
98452	Withdrawn	
98720	Pass	
98842	Pass	
99088	Withdrawn	
99799	Pass	
100282	Withdrawn	
100621	Withdrawn	
100893	Pass	TMA
101116	Pass	TMA
101781	Pass	TMA
102067	Withdrawn	
102806	Pass	TMA
102849	Withdrawn	
102952	Pass	TMA
103496	Pass	
103535	Pass	
103998	Fail	
104054	Distinction	CMA,TMA
104238	Withdrawn	
104476	Pass	TMA
105523	Pass	
105527	Pass	
105851	Pass	
105883	Pass	
106095	Pass	
106247	Withdrawn	TMA
106383	Withdrawn	
106577	Pass	TMA
106588	Distinction	
106793	Fail	
107028	Withdrawn	
107339	Pass	
107489	Pass	TMA
107713	Withdrawn	
108118	Pass	
108377	Pass	CMA,TMA
108589	Pass	CMA,TMA
108760	Fail	
108799	Distinction	
108834	Withdrawn	
108859	Pass	
108872	Pass	TMA
108947	Withdrawn	
109155	Pass	TMA
109372	Pass	
109441	Pass	
109782	Withdrawn	
109938	Distinction	CMA,TMA
110175	Pass	TMA
110881	Pass	CMA,TMA
110911	Pass	
111512	Fail	
111717	Pass	TMA
111942	Pass	
113295	Pass	TMA
114017	Pass	TMA
114402	Distinction	
114999	Pass	TMA
115452	Fail	
116174	Withdrawn	
116518	Pass	
116541	Pass	TMA
116603	Distinction	CMA,TMA
116606	Pass	
116692	Pass	TMA
117071	Fail	CMA,TMA
117232	Pass	
117544	Pass	
117545	Fail	
117699	Distinction	
117818	Pass	TMA
118098	Fail	
118213	Fail	
118877	Withdrawn	
118983	Pass	TMA
119353	Withdrawn	
119437	Withdrawn	
119444	Withdrawn	
119471	Fail	
119729	Withdrawn	
119898	Pass	
119902	Withdrawn	TMA
120994	Fail	CMA,TMA
121349	Pass	TMA
122392	Pass	
122524	Fail	
123044	Pass	TMA
123087	Pass	
123270	Fail	
123379	Withdrawn	
123462	Pass	
123598	Withdrawn	
123716	Pass	
123860	Pass	CMA,TMA
124064	Distinction	TMA
124124	Withdrawn	
124193	Distinction	
124909	Pass	
125018	Pass	TMA
125055	Pass	
125535	Pass	
125874	Withdrawn	
126322	Pass	CMA,TMA
126337	Withdrawn	
126394	Pass	
126395	Pass	
126411	Fail	CMA
126608	Pass	
126713	Pass	
126769	Pass	
126800	Pass	
127209	Withdrawn	
127582	Pass	TMA
128386	Fail	
128510	Withdrawn	
128776	Withdrawn	
128889	Pass	
129198	Withdrawn	
129638	Withdrawn	
129878	Fail	
129955	Withdrawn	TMA
130013	Pass	
130034	Pass	TMA
130547	Pass	TMA
130636	Pass	TMA
131051	Pass	
131145	Distinction	
131390	Pass	TMA
131695	Withdrawn	
131933	Withdrawn	
132055	Withdrawn	
132191	Withdrawn	
132626	Withdrawn	
132924	Fail	
132972	Pass	
132976	Pass	TMA
133104	Distinction	
133155	Pass	CMA,TMA
133269	Withdrawn	
133531	Fail	
133748	Fail	CMA,TMA
133816	Pass	TMA
133922	Pass	TMA
134025	Withdrawn	
134143	Distinction	TMA
134563	Pass	
135330	Fail	
135335	Withdrawn	
135400	Withdrawn	TMA
135471	Distinction	TMA
135792	Fail	
137873	Pass	TMA
138289	Fail	
138407	Withdrawn	
138920	Fail	
139033	Fail	TMA
139190	Withdrawn	
139250	Distinction	
139549	Pass	
140719	Fail	
141355	Pass	TMA
141377	Withdrawn	TMA
141506	Fail	TMA
141823	Withdrawn	TMA
141949	Pass	
142324	Fail	CMA,TMA
142326	Pass	TMA
142935	Pass	
143741	Distinction	CMA,TMA
143854	Withdrawn	
144801	Pass	TMA
145130	Pass	TMA
145280	Pass	
145282	Distinction	
145544	Pass	CMA,TMA
146125	Withdrawn	
146165	Pass	
146188	Fail	TMA
146503	Pass	TMA
146600	Pass	
147675	Withdrawn	
147756	Fail	TMA
147793	Withdrawn	TMA
147876	Fail	CMA,TMA
148427	Pass	
148993	Withdrawn	TMA
149741	Pass	TMA
149962	Pass	TMA
150398	Distinction	
151358	Pass	TMA
151549	Fail	
151587	Withdrawn	TMA
151697	Pass	CMA,TMA
151800	Fail	
151917	Fail	
152153	Withdrawn	CMA,TMA
152428	Pass	
152668	Withdrawn	TMA
152867	Withdrawn	
152910	Pass	CMA,TMA
152929	Pass	CMA,TMA
152962	Pass	
152973	Pass	
153212	Distinction	CMA,TMA
153687	Withdrawn	
153704	Withdrawn	CMA,TMA
153788	Withdrawn	
154011	Pass	
154027	Pass	CMA,TMA
154125	Fail	CMA,TMA
154540	Pass	CMA,TMA
154570	Withdrawn	
155067	Fail	
155484	Distinction	
155550	Pass	TMA
155631	Pass	
155735	Withdrawn	
155854	Pass	TMA
155963	Distinction	
155984	Withdrawn	TMA
156311	Pass	
156358	Withdrawn	
156788	Withdrawn	
156835	Pass	CMA,TMA
157060	Pass	
157276	Distinction	
157310	Withdrawn	
157568	Pass	TMA
157752	Fail	
157795	Pass	
158707	Withdrawn	TMA
159293	Distinction	
159954	Withdrawn	TMA
160026	Pass	
160300	Pass	
161491	Distinction	
161678	Fail	TMA
161811	Withdrawn	
162646	Fail	
162650	Fail	
164259	Pass	TMA
164944	Pass	TMA
165099	Fail	
165226	Fail	TMA
165243	Pass	CMA,TMA
165498	Withdrawn	
165647	Withdrawn	
165733	Withdrawn	
165823	Withdrawn	
165904	Distinction	
166160	Distinction	
167791	Pass	
167906	Pass	TMA
167961	Pass	TMA
168178	Pass	
168936	Pass	TMA
169008	Pass	
169213	Pass	
169380	Pass	
169400	Distinction	
169515	Withdrawn	TMA
170025	Withdrawn	
170356	Withdrawn	TMA
170519	Withdrawn	
170864	Distinction	
171377	Fail	
171751	Pass	
171896	Withdrawn	
172112	Pass	TMA
172137	Pass	
172301	Withdrawn	
172797	Pass	TMA
172965	Distinction	
173163	Fail	
173316	Fail	CMA,TMA
173335	Fail	CMA,TMA
174024	Pass	TMA
174094	Pass	TMA
174222	Pass	
174321	Withdrawn	
174440	Fail	
174487	Pass	
174745	Pass	TMA
174782	Pass	TMA
174807	Withdrawn	
175392	Pass	TMA
175447	Pass	TMA
175490	Distinction	
175772	Withdrawn	TMA
175932	Pass	TMA
175991	Fail	TMA
177554	Fail	
177639	Withdrawn	
177967	Pass	
178072	Withdrawn	
178496	Distinction	
178654	Withdrawn	
178738	Fail	
178963	Pass	
179073	Withdrawn	
179254	Fail	
179297	Fail	
179605	Withdrawn	CMA,TMA
179904	Fail	
180753	Pass	TMA
180976	Pass	
181316	Withdrawn	TMA
182661	Pass	
182824	Pass	CMA,TMA
183057	Pass	TMA
183096	Pass	TMA
183287	Withdrawn	
183331	Withdrawn	
183806	Fail	CMA,TMA
183947	Pass	TMA
184234	Fail	
184236	Withdrawn	
184271	Pass	TMA
184583	Fail	
184897	Withdrawn	
184972	Pass	
185021	Pass	
185240	Withdrawn	
185349	Pass	CMA,TMA
185350	Fail	TMA
185439	Fail	TMA
185597	Withdrawn	
186149	Pass	TMA
186565	Fail	
186670	Fail	CMA,TMA
186780	Withdrawn	TMA
186988	Fail	CMA,TMA
187100	Distinction	TMA
187257	Pass	
187435	Distinction	
187601	Pass	
187793	Fail	CMA,TMA
188026	Fail	
188152	Distinction	CMA,TMA
188278	Withdrawn	TMA
188766	Pass	
189035	Pass	
189095	Fail	
189428	Pass	
189624	Pass	
189879	Pass	TMA
189986	Withdrawn	
190352	Fail	
190565	Pass	
191000	Withdrawn	
191269	Pass	
191459	Fail	
191746	Fail	
191797	Pass	
191973	Pass	
192183	Pass	TMA
192424	Pass	CMA,TMA
192944	Pass	
193163	Fail	
193215	Fail	
193310	Pass	
193822	Pass	CMA,TMA
194073	Withdrawn	
194377	Withdrawn	
195096	Pass	
195221	Fail	
195262	Withdrawn	TMA
195345	Pass	
195938	Distinction	
195940	Pass	
197240	Pass	
197412	Pass	
197486	Withdrawn	
197527	Fail	
197595	Pass	CMA,TMA
197759	Pass	
198339	Withdrawn	
198902	Fail	
198956	Pass	CMA,TMA
199029	Distinction	
199520	Pass	CMA,TMA
199636	Pass	TMA
199663	Pass	
199897	Pass	TMA
200372	Withdrawn	
200506	Withdrawn	
200804	Pass	TMA
200860	Pass	TMA
200863	Withdrawn	
200905	Fail	CMA,TMA
201327	Fail	
201431	Pass	
201655	Withdrawn	
202394	Distinction	
202635	Withdrawn	TMA
202879	Fail	
203108	Fail	CMA,TMA
203481	Pass	CMA,TMA
203640	Pass	
203652	Fail	
203707	Withdrawn	
204725	Pass	
204746	Distinction	CMA,TMA
205231	Fail	
205350	Pass	TMA
205398	Fail	
205425	Distinction	
205494	Pass	TMA
205719	Fail	TMA
205788	Pass	
205978	Withdrawn	
206003	Distinction	
206245	Pass	
206599	Fail	
226374	Fail	CMA,TMA
226747	Distinction	
226827	Pass	CMA,TMA
226839	Pass	
227192	Pass	
227416	Fail	
227499	Distinction	TMA
227517	Fail	TMA
227752	Fail	
227833	Withdrawn	
228021	Distinction	TMA
228049	Withdrawn	
228082	Pass	TMA
228153	Fail	
228222	Pass	TMA
228235	Withdrawn	
228243	Withdrawn	
228383	Pass	TMA
228481	Pass	
228513	Withdrawn	
228743	Fail	
228784	Pass	
228824	Pass	
228909	Withdrawn	
229179	Pass	TMA
229240	Distinction	CMA,TMA
229326	Withdrawn	
229361	Pass	TMA
229426	Distinction	CMA,TMA
229499	Fail	
230081	Pass	
230340	Withdrawn	
230348	Withdrawn	
230383	Pass	
230761	Fail	
231339	Distinction	
231554	Pass	TMA
231959	Withdrawn	
232307	Pass	TMA
232539	Distinction	
232600	Withdrawn	
232695	Pass	CMA,TMA
232745	Withdrawn	
232833	Withdrawn	
233095	Pass	
233102	Withdrawn	
233317	Pass	
233444	Withdrawn	
233752	Pass	
233957	Fail	
234068	Fail	
234311	Fail	
234740	Withdrawn	
234929	Fail	
235068	Pass	TMA
235097	Fail	CMA,TMA
235175	Withdrawn	
235258	Withdrawn	
235371	Pass	
235380	Fail	
235428	Withdrawn	
235507	Withdrawn	TMA
236161	Pass	
236205	Pass	
236284	Pass	TMA
236620	Pass	
236875	Pass	TMA
237274	Pass	TMA
237304	Fail	CMA,TMA
237913	Fail	CMA,TMA
237934	Fail	
238007	Pass	TMA
238144	Fail	
238519	Withdrawn	
238825	Withdrawn	
239707	Withdrawn	
240712	Pass	TMA
240884	Pass	TMA
240993	Pass	
241338	Fail	
241649	Pass	TMA
241729	Fail	TMA
241955	Fail	
242149	Withdrawn	CMA,TMA
242390	Fail	
242778	Withdrawn	
242793	Pass	TMA
242858	Pass	
242893	Withdrawn	
243047	Withdrawn	
243351	Withdrawn	
243510	Fail	TMA
243851	Pass	
243909	Fail	
243992	Pass	
244064	Distinction	
244246	Pass	TMA
244902	Withdrawn	
244917	Withdrawn	
244977	Pass	
245217	Withdrawn	
245404	Fail	CMA,TMA
245494	Withdrawn	
245784	Fail	
245987	Pass	
246248	Fail	
246834	Pass	TMA
247267	Fail	CMA,TMA
247292	Pass	
247457	Distinction	
247513	Pass	
247819	Pass	
247902	Pass	
247967	Withdrawn	
248103	Pass	CMA,TMA
248252	Withdrawn	
248270	Pass	TMA
248581	Distinction	TMA
248653	Distinction	
248716	Pass	
248800	Withdrawn	
249154	Fail	
249534	Pass	CMA,TMA
250092	Fail	
250123	Distinction	
251351	Pass	CMA,TMA
251385	Distinction	
251815	Fail	
252073	Pass	TMA
252257	Pass	
252340	Fail	CMA,TMA
252652	Withdrawn	
252863	Pass	
253250	Withdrawn	
253577	Pass	
253859	Distinction	
254313	Withdrawn	
254612	Fail	
254625	Distinction	TMA
255140	Withdrawn	
255310	Pass	
255347	Pass	CMA,TMA
255548	Pass	TMA
255957	Withdrawn	
255998	Pass	CMA,TMA
256215	Withdrawn	
256532	Withdrawn	
256815	Pass	TMA
256998	Pass	
258035	Distinction	
258268	Pass	
258392	Pass	TMA
258402	Withdrawn	
258587	Distinction	TMA
258840	Pass	
258894	Pass	TMA
259182	Withdrawn	
260062	Withdrawn	
260137	Pass	
260179	Pass	
260216	Fail	
260355	Withdrawn	TMA
260623	Pass	TMA
260777	Withdrawn	
260949	Pass	
260955	Fail	
261042	Fail	
261265	Fail	
261332	Fail	
261466	Pass	
261615	Pass	
262011	Pass	TMA
262294	Withdrawn	CMA,TMA
262391	Withdrawn	
262454	Fail	CMA,TMA
262639	Pass	
262741	Pass	CMA,TMA
262934	Pass	TMA
263098	Withdrawn	
263251	Pass	TMA
263448	Pass	
263499	Pass	CMA,TMA
263531	Withdrawn	
263543	Pass	TMA
263952	Distinction	TMA
264106	Pass	
264152	Pass	
264159	Pass	
264281	Withdrawn	
264285	Withdrawn	
264694	Fail	
264732	Withdrawn	
264744	Pass	
264842	Withdrawn	
265170	Fail	
265405	Withdrawn	
265466	Pass	
265958	Withdrawn	CMA,TMA
266040	Withdrawn	
266331	Distinction	
266524	Pass	TMA
266558	Withdrawn	
266564	Pass	
266744	Withdrawn	
266915	Withdrawn	
267118	Withdrawn	
267761	Pass	CMA,TMA
267774	Withdrawn	
267853	Fail	
268018	Withdrawn	
268073	Fail	TMA
268127	Withdrawn	
268301	Distinction	
268589	Pass	
268733	Withdrawn	TMA
269076	Withdrawn	TMA
269082	Distinction	
269204	Pass	
269289	Withdrawn	
269510	Fail	
269676	Pass	
270191	Withdrawn	
270256	Withdrawn	
270399	Fail	
270567	Pass	CMA,TMA
270646	Pass	
271036	Pass	CMA,TMA
271047	Withdrawn	
271251	Pass	TMA
271346	Withdrawn	
271467	Fail	
272000	Fail	
272103	Withdrawn	
272172	Fail	
272580	Pass	CMA,TMA
272617	Withdrawn	
273346	Pass	TMA
273731	Pass	CMA,TMA
273877	Fail	CMA,TMA
274247	Fail	
274577	Withdrawn	
274947	Withdrawn	TMA
274971	Pass	
275006	Withdrawn	
275112	Fail	
275180	Pass	
275296	Fail	
275674	Withdrawn	TMA
275792	Pass	TMA
276717	Distinction	CMA,TMA
276925	Withdrawn	
277123	Fail	TMA
277537	Fail	
277577	Withdrawn	
277733	Pass	CMA,TMA
277809	Withdrawn	
277812	Distinction	
277880	Withdrawn	TMA
277967	Pass	
278272	Fail	
278447	Pass	CMA,TMA
278773	Withdrawn	
278794	Pass	
278861	Withdrawn	
279238	Withdrawn	
279557	Withdrawn	
279572	Distinction	TMA
279868	Pass	
279883	Withdrawn	
280054	Fail	
280140	Fail	
280151	Fail	
280152	Distinction	
280439	Withdrawn	
280962	Fail	
281022	Pass	TMA
281077	Pass	TMA
281250	Fail	TMA
281261	Withdrawn	
281564	Pass	CMA,TMA
281589	Fail	
281636	Pass	TMA
281801	Distinction	
282038	Withdrawn	
282161	Withdrawn	
282193	Pass	
282713	Pass	
282785	Withdrawn	
282821	Pass	TMA
283131	Fail	
283564	Fail	
283798	Pass	
283978	Fail	
284076	Pass	CMA,TMA
284246	Fail	
284589	Withdrawn	
284593	Withdrawn	
284762	Pass	
284812	Distinction	
284906	Pass	
285050	Fail	
285170	Pass	
285315	Pass	TMA
285470	Pass	
285475	Pass	
285567	Pass	
285633	Fail	CMA,TMA
285912	Pass	CMA,TMA
285992	Withdrawn	
286338	Pass	
286402	Distinction	
286488	Pass	TMA
286690	Fail	
286914	Pass	
286947	Pass	
287004	Withdrawn	
287040	Pass	TMA
287107	Distinction	
287204	Pass	TMA
287210	Pass	TMA
287309	Pass	
287548	Pass	TMA
287679	Pass	
288086	Pass	
288380	Fail	CMA,TMA
288655	Withdrawn	
288717	Withdrawn	
288967	Pass	
288990	Withdrawn	CMA,TMA
288994	Fail	
289009	Pass	
289108	Pass	
289397	Withdrawn	
289449	Pass	TMA
289753	Withdrawn	
289965	Fail	
289993	Withdrawn	
290089	Distinction	
290164	Pass	TMA
290184	Pass	
290201	Pass	TMA
290382	Withdrawn	
290550	Pass	CMA,TMA
290757	Pass	TMA
290914	Distinction	
291037	Pass	CMA,TMA
291194	Pass	CMA,TMA
291334	Distinction	TMA
291544	Distinction	
291701	Withdrawn	
291805	Pass	
291844	Pass	
291848	Fail	
292027	Withdrawn	TMA
292525	Pass	TMA
292537	Pass	
292775	Pass	TMA
292813	Withdrawn	
292923	Withdrawn	
293387	Pass	
293699	Pass	TMA
293712	Distinction	
293754	Distinction	
293760	Pass	
293824	Pass	TMA
293989	Withdrawn	
293992	Pass	
294134	Pass	
294381	Fail	CMA,TMA
294496	Pass	TMA
294513	Distinction	",,,,,
테이블 3개,university_learning,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생 수를 조회","Calculate the number of students enrolled in each module who received evaluation scores related to the use of VLE materials and view the module code, presentation code, and number of students.",,"SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	2013J	339,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료 이용일과 평가 제출일의 차이를 계산하여 학습 시간을 확인하고 모듈 코드, 프레젠테이션 코드, 학습시간을 조회","Among students registered for each module presentation, calculate the difference between the VLE material use date and the evaluation submission date to check the study time and check the module code, presentation code, and study time.",,"SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,7,,"AAA	2013J	
AAA	2014J	
BBB	2013B	
BBB	2013J	
BBB	2014B	
BBB	2014J	
CCC	2014B	",,,,,
테이블 4개,university_learning,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생 중 여성 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","Among students enrolled in each module, calculate the number of female students among those who received evaluation scores related to the use of VLE materials and query the module code, presentation code, and number of students.",,"SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS female_students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,AAA	2013J	130,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료 이용일과 평가 제출일의 차이의 평균과 표준 편차를 계산하여 학습 시간의 변동성을 확인하고 모듈 코드, 프레젠테이션 코드, 학습시간의 변동성을 조회","Among students registered for each module presentation, calculate the average and standard deviation of the difference between the date of VLE material use and the date of evaluation submission to check the variability of learning time and check the variability of module code, presentation code, and learning time.",,"SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time, STDDEV(DATEDIFF(sa.date_submitted, sv.date)) AS std_dev_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,7,,"AAA        2013J                
AAA        2014J                
BBB        2013B                
BBB        2013J                
BBB        2014B                
BBB        2014J                
CCC        2014B                ",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료 이용일과 평가 제출일의 차이를 계산하여 학습 시간을 확인하고 모듈 코드, 프레젠테이션 코드, 학습시간을 조회","Among students registered for each module presentation, calculate the difference between the VLE material use date and the evaluation submission date to check the study time and check the module code, presentation code, and study time.",,"SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,7,,"AAA	2013J	
AAA	2014J	
BBB	2013B	
BBB	2013J	
BBB	2014B	
BBB	2014J	
CCC	2014B	",,,,,
테이블 4개,university_learning,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생 중 여성 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","Among students enrolled in each module, calculate the number of female students among those who received evaluation scores related to the use of VLE materials and query the module code, presentation code, and number of students.",,"SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS female_students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,AAA	2013J	130,,,,,
테이블 3개,university_learning,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","Among students enrolled in each module, calculate the number of students who received evaluation scores related to the use of VLE materials and view the module code, presentation code, and number of students.",,"SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,AAA	2013J	339,,,,,
테이블 3개,university_learning,"과제 제출 날짜 이후 및 이전에 가상 학습 환경(VLE) 상호작용을 한 평균 횟수를 각 모듈 및 세션별로 계산하고 모듈 코드, 프레젠테이션 코드, 상호작용 평균 횟수를 조회","Calculate the average number of virtual learning environment (VLE) interactions for each module and session before and after the assignment submission date, and view module code, presentation code, and average number of interactions.",,"SELECT sr.code_module, sr.code_presentation, AVG(CASE WHEN sv.date >= sa.date_submitted THEN sv.sum_click END) AS avg_recent_interaction_submitted, AVG(CASE WHEN sv.date < sa.date_submitted THEN sv.sum_click END) AS avg_recent_interaction_not_submitted FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,7,,"AAA	2013J		4.5388
AAA	2014J		
BBB	2013B		
BBB	2013J		
BBB	2014B		
BBB	2014J		
CCC	2014B		",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 여학생의 평균 학습 시간과 남학생의 평균 학습 시간을 비교하여 분석하고 모듈 코드, 프레젠테이션 코드, 성별과 평균 자료 상호작용시간(학습시간)을 조회","Among students registered for each module presentation, compare and analyze the average learning time of female students and the average learning time of male students, and search for module code, presentation code, gender, and average material interaction time (learning time).",,"SELECT sr.code_module, sr.code_presentation, si.gender, AVG(sv.sum_click) AS avg_learning_time FROM studentregistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentvle sv ON sr.id_student = sv.id_student WHERE si.gender IN ('M', 'F') GROUP BY sr.code_module, sr.code_presentation, si.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,2,,"AAA	2013J	F	4.4191
AAA	2013J	M	4.2817",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 모듈 프레젠테이션 진행 일수가 가장 긴 모듈의 평균 평가 가중치를 계산하고 모듈 코드, 프레젠테이션 코드, 평가 가중치를 조회","Among students registered for each module presentation, calculate the average evaluation weight of the module with the longest module presentation days and query the module code, presentation code, and evaluation weight.",,"SELECT sr.code_module, sr.code_presentation, AVG(a.weight) AS avg_weight_of_longest_module FROM studentregistration sr INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation WHERE c.module_presentation_length = ( SELECT MAX(module_presentation_length) FROM courses ) GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)); CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,AAA        2014J        33.3333,,,,,
테이블 2개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 모든 평가의 가중치 합이 100이 아닌 모듈 프레젠테이션을 식별하고 모듈 코드, 프레젠테이션 코드를 조회","Among students registered for each module presentation, identify module presentations where the sum of the weights of all assessments is not 100 and look up the module code and presentation code.",,"SELECT sr.code_module, sr.code_presentation FROM studentregistration sr INNER JOIN ( SELECT code_module, code_presentation, SUM(weight) AS total_weight FROM assessments GROUP BY code_module, code_presentation HAVING total_weight <> 100 ) AS subquery ON sr.code_module = subquery.code_module AND sr.code_presentation = subquery.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1000,,"AAA	2013J
AAA	2013J
AAA	2013J
AAA	2013J
AAA	2013J
AAA	2013J",,,,,
테이블 3개,university_learning,"각 모듈에 등록한 학생 중 VLE 자료 이용일과 평가 제출일의 차이를 계산하여 학생들의 평균 학습 시간을 확인하고 모듈 코드, 프레젠테이션 코드, 평균 학습 시간을 조회","Among students enrolled in each module, calculate the difference between the VLE material use date and the evaluation submission date to check the average study time of students and search the module code, presentation code, and average study time.",,"SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,7,,"AAA	2013J	
AAA	2014J	
BBB	2013B	
BBB	2013J	
BBB	2014B	
BBB	2014J	
CCC	2014B	",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 여학생의 평균 학습 시간과 남학생의 평균 학습 시간을 비교하여 분석하고 모듈 코드, 프레젠테이션 코드, 각 성별의 평균 학습 시간을 조회","Among students registered for each module presentation, compare and analyze the average learning time for female students and the average learning time for male students, and look up the module code, presentation code, and average learning time for each gender.",,"SELECT sr.code_module, sr.code_presentation, AVG(CASE WHEN si.gender = 'F' THEN DATEDIFF(sv.date, sr.date_registration) END) AS avg_female_learning_time, AVG(CASE WHEN si.gender = 'M' THEN DATEDIFF(sv.date, sr.date_registration) END) AS avg_male_learning_time FROM studentregistration sr LEFT JOIN studentInfo si ON sr.id_student = si.id_student LEFT JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,7,,"AAA        2013J                
AAA        2014J                
BBB        2013B                
BBB        2013J                
BBB        2014B                
BBB        2014J                
CCC        2014B                ",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 가장 많이 이용한 학생의 평균 평가 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 평가 점수를 조회","Among students registered for each module presentation, calculate the average evaluation score of the student who used the VLE materials the most and view the module code, presentation code, and average evaluation score.",,"SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score_of_top_vle_user FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN ( SELECT id_student FROM studentvle GROUP BY id_student ORDER BY SUM(sum_click) DESC LIMIT 1 ) AS top_vle_user ON sr.id_student = top_vle_user.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,AAA	2013J	83.4,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 여학생이 VLE 자료를 이용한 평균 학습 시간을 계산하고 모듈 코드, 프레젠테이션 코드, 평균 학습 시간을 조회","Calculate the average learning time using VLE materials among female students enrolled in each module presentation and view the module code, presentation code, and average learning time.",,"SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sv.date, sr.date_registration)) AS avg_learning_time_female_with_vle_activity FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	2013J	,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 최근에 VLE 자료를 이용한 학생과 최근에 제출한 평가를 완료한 학생 간의 비율을 분석하고 모듈 코드, 프레젠테이션 코드, 비율을 조회","Among students registered for each module presentation, we analyze the ratio between students who recently used VLE materials and those who completed the recently submitted evaluation, and look up the module code, presentation code, and ratio.",,"SELECT sr.code_module, sr.code_presentation, (COUNT(DISTINCT CASE WHEN sv.date >= sa.date_submitted THEN sr.id_student END) / COUNT(DISTINCT sr.id_student)) AS recent_interaction_to_submission_ratio FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,7,,"AAA	2013J	0.0000
AAA	2014J	0.0000
BBB	2013B	0.0000
BBB	2013J	0.0000
BBB	2014B	0.0000
BBB	2014J	0.0000
CCC	2014B	0.0000",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 가장 많이 이용한 학생의 평균 평가 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 평가점수를 조회","Among students registered for each module presentation, calculate the average evaluation score of the student who used the VLE materials the most and view the module code, presentation code, and average evaluation score.",,"SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score_of_top_vle_user FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN ( SELECT id_student FROM studentvle GROUP BY id_student ORDER BY SUM(sum_click) DESC LIMIT 1 ) AS top_vle_user ON sr.id_student = top_vle_user.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,AAA	2013J	83.4,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 여학생이 VLE 자료를 이용한 평균 학습 시간을 계산하고 모듈 코드, 프레젠테이션 코드, 평균 학습시간을 조회","Calculate the average learning time using VLE materials among female students registered for each module presentation and view the module code, presentation code, and average learning time.",,"SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sv.date, sr.date_registration)) AS avg_learning_time_female_with_vle_activity FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,BBB	2013B	,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 점수와 VLE 자료 이용량 사이의 상관 관계를 분석하고 모듈 코드, 프레젠테이션 코드, 학생의 평균점수, VLE 자료 이용량도 함께 조회","Among students registered for each module presentation, the correlation between the average score of students who used VLE materials and the amount of VLE material usage is analyzed, and module codes, presentation codes, students' average scores, and VLE material usage are also searched.",,"SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,AAA	2013J	70.11282367447596	7371,,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 사이의 관계를 분석하고 모듈 코드, 모듈 프레젠테이션, 평균 상호작용 횟수, 모듈 프레젠테이션 길이를 조회","Among students enrolled in each module presentation, we analyzed the relationship between the average number of student interactions using VLE materials and the length of the module presentation, and looked up the module code, module presentation, average number of interactions, and module presentation length.",,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,2,,"BBB	2013B	2.4000	240
CCC	2014B	1.0000	241",,,,,
테이블 3개,university_learning,"각 모듈 프레젠테이션에 등록한 학생 중 여학생이 VLE 자료를 이용한 평균 상호 작용 횟수와 최종 결과 간의 관계를 분석하고 성별, 모듈 코드와 프레젠테이션 코드도 함께 조회","Analyze the relationship between the average number of interactions using VLE materials among female students enrolled in each module presentation and the final results, and also look up gender, module code, and presentation code.",,"SELECT si.gender, sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY si.gender, sr.code_module, sr.code_presentation, si.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,4,,"F	AAA	2013J	4.8043	Pass
F	AAA	2013J	4.6000	Withdrawn
F	AAA	2013J	4.0000	Distinction
F	AAA	2013J	1.7143	Fail",,,,,
테이블 3개,university_learning,각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 최종 결과 간의 관계를 분석하고 모듈 코드와 프레젠테이션 코드도 함께 조회,"Among students registered for each module presentation, we analyze the relationship between the average number of student interactions using VLE materials and the final results, and also view the module code and presentation code.",,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,4,,"AAA	2013J	4.1934	Pass
AAA	2013J	4.2400	Withdrawn
AAA	2013J	9.0500	Distinction
AAA	2013J	2.8056	Fail",,,,,
테이블 3개,university_learning,각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 최종 결과 간의 관계를 분석하고 모듈 코드와 프레젠테이션 코드도 함께 조회,"Among students registered for each module presentation, we analyze the relationship between the average number of student interactions using VLE materials and the final results, and also view the module code and presentation code.",,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,4,,"AAA	2013J	4.1934	Pass
AAA	2013J	4.2400	Withdrawn
AAA	2013J	9.0500	Distinction
AAA	2013J	2.8056	Fail",,,,,
테이블 3개,university_learning,"각 모듈 코드, 각 프레젠테이션 코드, 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 사이의 관계를 분석","Analyze the relationship between each module code, each presentation code, the average number of student interactions with VLE materials among students enrolled in the module presentation, and the length of the module presentation.",,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,AAA	2013J	4.3352	268,,,,,
테이블 4개,university_learning,각 모듈 코드와 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 및 최종 결과 간의 관계를 분석,"Analyze the relationship between the average number of student interactions with VLE materials among students enrolled in each module code and presentation, and the length and final outcome of the module presentation.",,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"AAA	2013J	4.1934	268	Pass
AAA	2013J	4.2400	268	Withdrawn
AAA	2013J	9.0500	268	Distinction
AAA	2013J	2.8056	268	Fail",,,,,
테이블 4개,university_learning,각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 및 평가 유형 간의 관계를 분석,Analyzing the relationship between the average number of student interactions with VLE materials among students enrolled in each module presentation and the length and type of assessment of the module presentation.,,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length, a.assessment_type FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY sr.code_module, sr.code_presentation, a.assessment_type;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"AAA	2013J	4.3352	268	TMA
AAA	2013J	4.3352	268	Exam",,,,,
테이블 1개,university_learning,모든 프레젠테이션에 대한 모듈과 모듈의 평균 프레젠테이션 길이를 조회,View the modules for all presentations and the average presentation length for those modules,,"SELECT code_module, AVG(module_presentation_length) as avg_length FROM courses GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"AAA        268.5000
BBB        251.0000
CCC        255.0000
DDD        251.0000
EEE        259.3333
FFF        254.5000
GGG        257.0000",,,,,
테이블 1개,university_learning,모든 프레젠테이션에 대한 평가 유형과 평가 유형별 평균 가중치를 조회,View the evaluation type and average weight for each evaluation type for all presentations,,"SELECT assessment_type, AVG(weight) as avg_weight FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"TMA	17.1415
Exam	100.0000
CMA	1.1842",,,,,
테이블 1개,university_learning,VLE의 모든 활동 유형과 활동 유형별 평균 활동 기간을 조회,View all activity types in VLE and average activity duration by activity type,,"SELECT activity_type, AVG(week_to - week_from) as avg_activity_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,20,,"homepage        
forumng        
glossary        
oucontent        0.0315
quiz        0.0000
questionnaire        0.0000
page        0.0000
ouwiki        0.0000
subpage        0.0000
url        0.0000
resource        0.0000
dualpane        0.0000
ouelluminate        
dataplus        0.0000
sharedsubpage        
oucollaborate        
externalquiz        
folder        
repeatactivity        0.0000
htmlactivity        ",,,,,
테이블 1개,university_learning,모든 모듈에 대한 학생들의 평균 학점을 조회,View students' average grade for all modules,,"SELECT code_module, AVG(studied_credits) as avg_credits FROM studentInfo GROUP BY code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	84.4101
BBB	83.6031
CCC	78.2688",,,,,
테이블 1개,university_learning,모든 모듈에 등록된 학생들의 연령대와 평균 나이를 조회,View the age range and average age of students enrolled in all modules,,"SELECT code_module, age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,9,,"AAA	55<=	42
BBB	0-35	5147
AAA	0-35	337
AAA	35-55	333
BBB	35-55	2537
CCC	0-35	1039
CCC	35-55	301
BBB	55<=	8
CCC	55<=	3",,,,,
테이블 1개,university_learning,모든 프레젠테이션에 대한 최대 및 최소 평가 가중치를 조회,Look up the maximum and minimum evaluation weights for all presentations,,"SELECT code_presentation, (SELECT MAX(weight) FROM assessments AS a2 WHERE a1.code_presentation = a2.code_presentation) AS max_weight, (SELECT MIN(weight) FROM assessments AS a3 WHERE a1.code_presentation = a3.code_presentation) AS min_weight FROM assessments AS a1 GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"2013B	100	0
2013J	100	0
2014B	100	0
2014J	100	0",,,,,
테이블 1개,university_learning,모듈 코드와 모든 모듈에 등록된 학생들 중 장애를 가진 학생의 비율을 조회,View the module code and percentage of students with disabilities enrolled in all modules.,,"SELECT code_module, SUM(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) / COUNT(*) AS disability_ratio FROM studentInfo GROUP BY code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	0.0534
BBB	0.0914
CCC	0.0961",,,,,
테이블 1개,university_learning,모든 학생들의 평균 평가 점수를 조회,View the average evaluation score of all students,,"SELECT AVG(score) AS avg_score FROM ( SELECT id_student, AVG(score) AS score FROM studentAssessment GROUP BY id_student ) AS student_scores;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,70.87977765,,,,,
테이블 1개,university_learning,모든 학생의 VLE 자료 클릭 수의 총 합을 조회,View the total number of clicks on VLE materials for all students,,"SELECT SUM(sum_click) as total_clicks FROM ( SELECT id_student, SUM(sum_click) AS sum_click FROM studentVle GROUP BY id_student ) AS student_clicks;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,1513,,,,,
테이블 1개,university_learning,모든 학생의 VLE 자료 클릭 수 평균을 조회,View the average number of clicks on VLE materials for all students,,"SELECT AVG(avg_clicks) as avg_clicks FROM ( SELECT id_student, AVG(sum_click) AS avg_clicks FROM studentVle GROUP BY id_student ) AS student_avg_clicks;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,4.33524355,,,,,
테이블 1개,university_learning,모든 학생들의 평균 학점을 조회,Check the average grade of all students,,"SELECT AVG(avg_credits) as avg_credits FROM ( SELECT id_student, SUM(studied_credits) AS avg_credits FROM studentInfo GROUP BY id_student ) AS student_avg_credits;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,82.9271,,,,,
테이블 1개,university_learning,모든 학생의 평균 나이를 조회,Find the average age of all students,,SELECT AVG(age_band) as avg_age FROM studentInfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,11.68564687,,,,,
테이블 1개,university_learning,등록된 학생의 총 수를 조회,Check the total number of registered students,,SELECT COUNT(id_student) as total_students FROM studentInfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,9747,,,,,
테이블 2개,university_learning,학생의 등록 모듈과 해당 모듈의 평균 프레젠테이션 길이를 조회,View the modules a student is enrolled in and the average presentation length for those modules,,"SELECT r.code_module, AVG(c.module_presentation_length) as avg_length FROM studentRegistration r JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY r.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,3,,"AAA	268.4621
BBB	253.1201
CCC	241.0000",,,,,
테이블 3개,university_learning,"학생 코드, 학생의 평가 점수와 평가 유형을 조회","Look up student code, student evaluation score and evaluation type",,"SELECT s.id_student, a.assessment_type, sa.score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo s ON sa.id_student = s.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1000,,"11391        TMA        78
28400        TMA        70
31604        TMA        72
32885        TMA        69
38053        TMA        79
45462        TMA        70
45642        TMA        72
52130        TMA        72
53025        TMA        71
57506        TMA        68
58873        TMA        73
59185        TMA        67
62155        TMA        73
63400        TMA        83
65002        TMA        66
70464        TMA        59
71361        TMA        82
74372        TMA        60
75091        TMA        67
77367        TMA        73
91265        TMA        75
94961        TMA        74
98094        TMA        62
100893        TMA        63
101781        TMA        84
102806        TMA        80
102952        TMA        76
104476        TMA        85
106247        TMA        67
106577        TMA        57",,,,,
테이블 2개,university_learning,학생의 VLE 자료 클릭 수와 활동 유형을 조회,View the number of student clicks on VLE materials and activity types,,"SELECT v.id_student, m.activity_type, v.sum_click FROM vle m JOIN studentvle v ON v.id_site = m.id_site WHERE v.code_module = m.code_module AND v.code_presentation = m.code_presentation;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,349,,"id_student	activity_type	sum_click
28400	forumng	4
30268	forumng	3
31604	oucontent	1
32885	oucontent	5
38053	subpage	7
45462	oucontent	1
58873	forumng	8
59185	oucontent	14
62155	resource	1
63400	oucontent	22
65002	homepage	3
70464	glossary	2
71361	homepage	25
75091	forumng	12
57506	homepage	3
77367	resource	1
94961	subpage	5
98094	resource	2
101781	homepage	5
102806	oucontent	3
106577	resource	1
104476	resource	1
110175	oucontent	4
114999	oucontent	3
111717	oucontent	29
116692	homepage	16
127582	subpage	1
129955	subpage	1
132976	homepage	5",,,,,
테이블 2개,university_learning,등록된 학생의 모듈과 프레젠테이션 코드와 프레젠테이션에 대한 평균 학점을 조회,View the average grade for a registered student's modules and presentation codes and presentations,,"SELECT r.code_module, r.code_presentation, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY r.code_module, r.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,7,,"AAA	2013J	87.4413
AAA	2014J	80.8815
BBB	2013B	88.9502
BBB	2013J	83.0917
BBB	2014B	83.0802
BBB	2014J	80.1967
CCC	2014B	78.2688",,,,,
테이블 3개,university_learning,평가 점수가 40점 미만인 학생들의 평균 학점을 조회,Check the average grade of students whose evaluation score is less than 40 points,,"SELECT r.code_module, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE sa.score < 40 GROUP BY r.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,2,,"AAA	114
BBB	83.1675",,,,,
테이블 2개,university_learning,모듈 코드 별 장애를 가진 학생의 모듈 코드와 평균 학점을 조회,Check the module code and average grade point average of students with disabilities by module code.,,"SELECT r.code_module, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"BBB        91.4509
AAA        105.7895
CCC        90.3876",,,,,
테이블 2개,university_learning,평가 점수가 40점 미만인 학생의 평가 유형과 점수를 조회,Check the evaluation type and score of students whose evaluation score is less than 40 points.,,"SELECT a.assessment_type, sa.score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,281,,"TMA	38
TMA	38
TMA	36
TMA	39
TMA	30
TMA	11
TMA	25
TMA	38
TMA	34
TMA	36
TMA	30
TMA	18
TMA	37
TMA	28
TMA	33
TMA	35
TMA	25
TMA	15
TMA	37
TMA	34
TMA	35
TMA	0
TMA	35
TMA	35
TMA	38
TMA	32
TMA	38
TMA	39
TMA	37
TMA	39",,,,,
테이블 2개,university_learning,등록 모듈과 프레젠테이션에 대해 VLE 자료의 총 클릭 수를 조회,View the total number of clicks on VLE materials for registered modules and presentations,,"SELECT r.code_module, r.code_presentation, SUM(v.sum_click) as total_clicks FROM studentRegistration r JOIN studentVle v ON r.id_student = v.id_student GROUP BY r.code_module, r.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	2013J	1513,,,,,
테이블 3개,university_learning,장애를 가진 학생들의 VLE 자료 클릭 수의 평균과 등록 모듈을 조회,View the average number of clicks on VLE materials and registered modules for students with disabilities,,"SELECT r.code_module, AVG(v.sum_click) as avg_clicks FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON r.id_student = v.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	4.5882,,,,,
테이블 1개,university_learning,전체 학생의 등록된 모듈 수를 조회,Check the number of registered modules for all students,,SELECT COUNT(DISTINCT code_module) AS total_modules FROM studentRegistration;,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,3,,,,,
테이블 1개,university_learning,학생의 나이대 분포를 조회,Check the age distribution of students,,"SELECT age_band, COUNT(*) AS count FROM studentInfo GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"55<=	53
0-35	6523
35-55	3171",,,,,
테이블 1개,university_learning,모든 학생의 최대 및 최소 나이대를 조회,View maximum and minimum age range for all students,,"SELECT MAX(age_band) AS max_age, MIN(age_band) AS min_age FROM studentInfo;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,55<=	0-35,,,,,
테이블 1개,university_learning,전체 학생의 장애 여부 분포를 조회,Check the distribution of disabilities among all students,,"SELECT disability, COUNT(*) AS count FROM studentInfo GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"N	8877
Y	870",,,,,
테이블 1개,university_learning,학생의 최대 및 최소 이전 시도 횟수를 조회,View a student's maximum and minimum number of transfer attempts,,"SELECT MAX(num_of_prev_attempts) AS max_attempts, MIN(num_of_prev_attempts) AS min_attempts FROM studentInfo;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,6	0,,,,,
테이블 1개,university_learning,등록된 학생의 평균 등록 및 탈퇴 기간을 조회,Check the average registration and withdrawal period of registered students,,"SELECT AVG(date_registration) AS avg_registration_duration, AVG(date_unregistration) AS avg_unregistration_duration FROM studentRegistration;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,-73.3473	38.1515,,,,,
테이블 1개,university_learning,평가 점수가 60점 이상을 받은 학생 수와 합격율 조회,View the number of students who received an evaluation score of 60 or higher and the passing rate,,"SELECT COUNT(*) AS passed_count, (COUNT(*) / (SELECT COUNT(*) FROM studentAssessment)) * 100 AS pass_rate FROM studentAssessment WHERE score >= 60;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,8311	83.1100,,,,,
테이블 2개,university_learning,모든 학생의 등록 모듈과 프레젠테이션별 평균 VLE 자료 클릭 수를 조회,View the average number of clicks on VLE materials by module and presentation for all students enrolled,,"SELECT r.code_module, r.code_presentation, AVG(v.sum_click) AS avg_clicks FROM studentRegistration r JOIN studentVle v ON r.id_student = v.id_student GROUP BY r.code_module, r.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA        2013J        4.3352,,,,,
테이블 2개,university_learning,등록된 학생의 성별과 평균 학점을 조회,Check the gender and average grade of a registered student,,"SELECT s.gender, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,2,,"M	80.8918
F	83.5693",,,,,
테이블 2개,university_learning,평가 유형과 평가 유형별로 가장 높은 평가 점수를 조회,View the highest evaluation score by evaluation type and evaluation type,,"SELECT a.assessment_type, MAX(sa.score) AS max_score FROM assessments a LEFT JOIN studentAssessment sa ON sa.id_assessment = a.id_assessment GROUP BY a.assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,3,,"TMA	100
Exam	
CMA	100",,,,,
테이블 2개,university_learning,VLE의 활동 유형별 평균 클릭 수를 조회,View the average number of clicks by activity type in VLE,,"SELECT m.activity_type, AVG(v.sum_click) AS avg_clicks FROM studentVle v JOIN vle m ON v.id_site = m.id_site GROUP BY m.activity_type;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,8,,"forumng        3.5179
oucontent        5.6587
subpage        2.4222
resource        1.1389
homepage        5.4634
glossary        2.0000
url        1.0000
dataplus        1.0000",,,,,
테이블 2개,university_learning,학생의 성별과 평균 평가 점수를 조회,Check student gender and average evaluation score,,"SELECT s.gender, AVG(sa.score) AS avg_score FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student GROUP BY s.gender;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M	71.18355140186915
F	72.55488639474405",,,,,
테이블 2개,university_learning,학생의 평가 점수가 가장 높은 모듈 코드와 평균 프레젠테이션 기간을 조회,View the module code for which a student has the highest evaluation score and the average presentation duration,,"SELECT r.code_module, AVG(c.module_presentation_length) AS avg_length FROM studentRegistration r JOIN courses c ON r.code_module = c.code_module GROUP BY r.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,3,,"AAA	268.5000
BBB	251.0000
CCC	255.0000",,,,,
테이블 2개,university_learning,장애를 가진 학생들의 평균 학점을 조회,Check the average grade of students with disabilities,,"SELECT r.code_module, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y'","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"BBB	91.4509
AAA	105.7895
CCC	90.3876",,,,,
테이블 1개,university_learning,모든 학생의 최고 학력 수준 분포를 조회,View the distribution of the highest academic level of all students,,"SELECT highest_education, COUNT(*) AS count FROM studentInfo GROUP BY highest_education;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,5,,"HE Qualification	1347
Lower Than A Level	4042
A Level or Equivalent	4189
Post Graduate Qualification	51
No Formal quals	118",,,,,
테이블 1개,university_learning,학생의 등록 모듈별 모듈 코드와 평균 등록 기간을 조회,View the module code and average enrollment period for each module a student is enrolled in.,,"SELECT code_module, AVG(date_registration) AS avg_registration FROM studentRegistration GROUP BY code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"AAA	-76.2205
BBB	-68.2093
CCC	-101.3010",,,,,
테이블 1개,university_learning,지역명과 등록된 학생의 지역별 등록 수를 조회,Check the region name and number of registered students by region.,,"SELECT region, COUNT(*) AS registration_count FROM studentInfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"Scotland	964
East Anglian Region	1032
Wales	908
South Region	854
London Region	866
West Midlands Region	838
South West Region	704
South East Region	653
North Western Region	751
Yorkshire Region	640
North Region	357
Ireland	464
East Midlands Region	716",,,,,
테이블 1개,university_learning,평가 점수가 70점 이상인 학생들의 총 수와 비율을 조회,View the total number and percentage of students with an assessment score of 70 or higher,,"SELECT COUNT(*) AS passed_count, (COUNT(*) / (SELECT COUNT(*) FROM studentAssessment)) * 100 AS pass_rate FROM studentAssessment WHERE score >= 70;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,2,,6212	62.1200,,,,,
테이블 2개,university_learning,각 학생의 등록된 모듈과 해당 모듈의 평균 평가 점수를 조회,View each student's registered modules and the average evaluation score for that module,,"SELECT r.code_module, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"BBB	91.4509
AAA	105.7895
CCC	90.3876",,,,,
테이블 1개,university_learning,학생의 성별 및 장애 여부에 따른 평균 학점을 조회,Check average grade based on student's gender and disability,,"SELECT gender, disability, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY gender, disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"M	N	79.5894
F	N	82.8274
M	Y	95.2051
F	Y	90.9704",,,,,
테이블 1개,university_learning,모든 학생의 평균 나이와 성별을 조회,Find the average age and gender of all students,,"SELECT s.gender, AVG(s.age_band) AS avg_age FROM studentInfo s GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M	13.000427715996578
F	11.270751788365502",,,,,
테이블 2개,university_learning,평가 점수가 40점 미만인 학생들의 평균 평가 점수와 평가 유형을 조회,View the average evaluation score and evaluation type of students whose evaluation score is less than 40 points.,,"SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40 GROUP BY a.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"TMA	27.384892086330936
CMA	13.333333333333334",,,,,
테이블 2개,university_learning,학생의 등록 모듈과 프레젠테이션에 대한 평균 학점과 장애 여부를 조회,Check the grade point average and disability status for the modules and presentations a student is enrolled in.,,"SELECT r.code_module, r.code_presentation, s.disability, AVG(s.studied_credits) AS avg_credits FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY r.code_module, r.code_presentation, s.disability;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,14,,"AAA	2013J	N	85.6944
AAA	2013J	Y	114.7826
AAA	2014J	N	80.3503
AAA	2014J	Y	92.0000
BBB	2013B	N	88.1372
BBB	2013B	Y	96.2079
BBB	2013J	N	82.0121
BBB	2013J	Y	93.0233
BBB	2014B	N	82.5361
BBB	2014B	Y	88.5766
BBB	2014J	N	79.6295
BBB	2014J	Y	86.8786
CCC	2014B	N	76.9811
CCC	2014B	Y	90.3876",,,,,
테이블 1개,university_learning,남성과 여성 학생의 수를 조회,Look up the number of male and female students,,"SELECT gender, COUNT(*) AS count FROM studentInfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M	2338
F	7409",,,,,
테이블 1개,university_learning,성별에 따른 학생들의 최고 학력 수준 분포를 조회,Check the distribution of students’ highest educational level by gender,,"SELECT gender, highest_education, COUNT(*) AS count FROM studentInfo GROUP BY gender, highest_education;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,10,,"M	HE Qualification	462
F	Lower Than A Level	3227
F	A Level or Equivalent	3175
M	A Level or Equivalent	1014
M	Lower Than A Level	815
F	HE Qualification	885
M	Post Graduate Qualification	34
F	No Formal quals	105
F	Post Graduate Qualification	17
M	No Formal quals	13",,,,,
테이블 2개,university_learning,각 성별로 등록된 모듈 수를 조회,Check the number of modules registered for each gender,,"SELECT studentInfo.gender, COUNT(DISTINCT studentRegistration.code_module) AS module_count FROM studentRegistration JOIN studentInfo ON studentRegistration.id_student = studentInfo.id_student GROUP BY studentInfo.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"F	3
M	3",,,,,
테이블 2개,university_learning,성별에 따른 학생들의 평균 VLE 자료 클릭 수를 조회,View the average number of clicks on VLE materials by students by gender,,"SELECT gender, AVG(v.sum_click) AS avg_clicks FROM studentInfo s JOIN studentVle v ON s.id_student = v.id_student GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,2,,"F	2.4000
M	1.0000",,,,,
테이블 1개,university_learning,남성과 여성 학생들의 성별 최대 및 최소 학점을 조회,View maximum and minimum GPA by gender for male and female students,,"SELECT gender, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M	655	30
F	585	30",,,,,
테이블 1개,university_learning,"성별로 지역명, 학생들의 지역별 등록 수를 조회",Search regional name and number of students registered by region by gender,,"SELECT gender, region, COUNT(*) AS registration_count FROM studentInfo GROUP BY gender, region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,26,,"M	Scotland	286
M	East Anglian Region	219
F	East Anglian Region	813
M	Wales	186
F	South Region	623
F	Scotland	678
F	London Region	656
M	West Midlands Region	212
M	South West Region	156
F	South East Region	487
M	North Western Region	184
M	Yorkshire Region	132
F	West Midlands Region	626
M	South Region	231
F	South West Region	548
F	North Western Region	567
M	North Region	115
F	Ireland	362
F	Yorkshire Region	508
F	East Midlands Region	577
F	Wales	722
M	Ireland	102
M	South East Region	166
F	North Region	242
M	East Midlands Region	139
M	London Region	210",,,,,
테이블 1개,university_learning,성별에 따른 학생들의 평균 나이와 최대 학력 수준을 조회,Check the average age and maximum educational level of students by gender,,"SELECT gender, AVG(age_band) AS avg_age, MAX(highest_education) AS max_education FROM studentInfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M        13.000427715996578        Post Graduate Qualification
F        11.270751788365502        Post Graduate Qualification",,,,,
테이블 3개,university_learning,성별에 따른 평가 유형과 평가 유형별 평균 점수를 조회,View evaluation types by gender and average score by evaluation type,,"SELECT s.gender, a.assessment_type, AVG(sa.score) AS avg_score FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY s.gender, a.assessment_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"M	TMA	70.38826707834812
F	TMA	70.82211680996146
F	CMA	93.42857142857143
M	CMA	95.71428571428571",,,,,
테이블 1개,university_learning,각 성별의 학생들의 최대 및 최소 학점을 조회,View the maximum and minimum GPA for students of each gender,,"SELECT s.gender, MAX(s.studied_credits) AS max_credits, MIN(s.studied_credits) AS min_credits FROM studentInfo s GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M	655	30
F	585	30",,,,,
테이블 2개,university_learning,성별에 따른 등록 모듈코드와 모듈별 평균 등록 기간을 조회,Check registration module code and average registration period for each module according to gender,,"SELECT s.gender, r.code_module, AVG(r.date_registration) AS avg_registration FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.gender, r.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,6,,"        gender        code_module        avg_registration
        M        AAA        -74.6102
        F        AAA        -78.4448
        F        BBB        -69.1127
        M        BBB        -61.3490
        F        CCC        -99.3718
        M        CCC        -101.8870",,,,,
테이블 2개,university_learning,각 성별의 학생들의 등록 모듈 수를 조회,View the number of modules enrolled by students of each gender,,"SELECT s.gender, COUNT(DISTINCT r.code_module) AS module_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.gender;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"F	3
M	3",,,,,
테이블 1개,university_learning,남성과 여성 학생들의 평균 나이를 조회,Look up the average age of male and female students,,"SELECT s.gender, AVG(s.age_band) AS avg_age FROM studentInfo s GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M	13.000427715996578
F	11.270751788365502",,,,,
테이블 2개,university_learning,"지역명과 지역별로 가장 많이 등록된 모듈 코드, 학생수를 조회","Check the region name, most registered module code by region, and number of students",,"SELECT si.region, sr.code_module, COUNT(*) AS registration_count FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY si.region, sr.code_module ORDER BY registration_count DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,Wales	BBB	812,,,,,
테이블 1개,university_learning,각 지역의 지역명과 학생들의 평균 나이를 조회,Look up the region name and average age of students in each region,,"SELECT region, AVG(CAST(SUBSTRING(age_band, 1, 2) AS UNSIGNED)) AS avg_age FROM studentInfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"Scotland	13.8693
East Anglian Region	11.3227
Wales	12.0264
South Region	12.7283
London Region	12.2229
West Midlands Region	8.2995
South West Region	13.4943
South East Region	12.2358
North Western Region	11.0320
Yorkshire Region	9.6563
North Region	9.0896
Ireland	13.6530
East Midlands Region	11.1453",,,,,
테이블 1개,university_learning,"각 지역의 지역명, 학생들의 최고 학력 수준과 최고 학력 수준 별 분포를 조회","Check the regional name of each region, the highest academic level of students, and the distribution by highest academic level.",,"SELECT region, highest_education, COUNT(*) AS count FROM studentInfo GROUP BY region, highest_education;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,58,,"Scotland	HE Qualification	327
East Anglian Region	HE Qualification	102
East Anglian Region	Lower Than A Level	434
East Anglian Region	A Level or Equivalent	471
Wales	A Level or Equivalent	335
South Region	Lower Than A Level	330
Scotland	Lower Than A Level	304
London Region	A Level or Equivalent	363
West Midlands Region	A Level or Equivalent	403
South West Region	A Level or Equivalent	337
South East Region	Lower Than A Level	259
North Western Region	Lower Than A Level	348
Yorkshire Region	Lower Than A Level	246
North Western Region	A Level or Equivalent	313
West Midlands Region	Lower Than A Level	354
South East Region	A Level or Equivalent	304
North Region	A Level or Equivalent	146
South West Region	Lower Than A Level	292
South Region	A Level or Equivalent	395
Ireland	A Level or Equivalent	184
Scotland	A Level or Equivalent	312
East Midlands Region	Lower Than A Level	328
East Midlands Region	A Level or Equivalent	320
North Region	HE Qualification	45
Yorkshire Region	A Level or Equivalent	306
Yorkshire Region	HE Qualification	76
Wales	Lower Than A Level	413
Ireland	HE Qualification	45
West Midlands Region	HE Qualification	72
London Region	Lower Than A Level	352",,,,,
테이블 1개,university_learning,"각 지역의 지역명, 학생들의 평균 학점을 조회",Check the region name and average grade of students in each region,,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"Scotland	78.1535
East Anglian Region	84.0165
Wales	80.8040
South Region	80.9251
London Region	87.8753
West Midlands Region	83.3413
South West Region	85.2983
South East Region	84.8851
North Western Region	83.6551
Yorkshire Region	85.4297
North Region	82.3810
Ireland	73.5453
East Midlands Region	85.6285",,,,,
테이블 1개,university_learning,"각 지역의 지역명, 학생들의 최대 및 최소 학점을 조회",Check the name of each region and the maximum and minimum GPA of students.,,"SELECT region, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"Scotland	300	30
East Anglian Region	585	30
Wales	390	30
South Region	400	30
London Region	420	30
West Midlands Region	300	30
South West Region	345	30
South East Region	300	30
North Western Region	655	30
Yorkshire Region	270	30
North Region	330	30
Ireland	325	30
East Midlands Region	270	30",,,,,
테이블 1개,university_learning,각 지역의 지역명과 학생들의 VLE 자료 클릭 수 평균을 조회,Check the average number of clicks on VLE materials by students and the name of each region.,,"SELECT region, AVG(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) AS disability_ratio FROM studentInfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"Scotland        0.1089
East Anglian Region        0.1066
Wales        0.0705
South Region        0.1007
London Region        0.0843
West Midlands Region        0.0823
South West Region        0.1023
South East Region        0.1087
North Western Region        0.1172
Yorkshire Region        0.0500
North Region        0.0280
Ireland        0.0280
East Midlands Region        0.1075",,,,,
테이블 2개,university_learning,각 지역의 지역명과 등록된 모듈 수를 조회,Check the region name and number of registered modules for each region.,,"SELECT s.region, COUNT(DISTINCT r.code_module) AS module_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.region;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"East Anglian Region	3
East Midlands Region	3
Ireland	3
London Region	3
North Region	3
North Western Region	3
Scotland	3
South East Region	3
South Region	3
South West Region	3
Wales	3
West Midlands Region	3
Yorkshire Region	3",,,,,
테이블 1개,university_learning,"각 지역의 지역명, 학생들의 평균 나이와 최대 학력 수준을 조회","Check the name of each region, the average age of students, and the maximum academic level.",,"SELECT s.region, AVG(s.age_band) AS avg_age, MAX(s.highest_education) AS max_education FROM studentInfo s GROUP BY s.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"Scotland	13.869294605809129	Post Graduate Qualification
East Anglian Region	11.32267441860465	Post Graduate Qualification
Wales	12.026431718061675	Post Graduate Qualification
South Region	12.728337236533958	Post Graduate Qualification
London Region	12.222863741339491	Post Graduate Qualification
West Midlands Region	8.299522673031026	No Formal quals
South West Region	13.494318181818182	No Formal quals
South East Region	12.23583460949464	No Formal quals
North Western Region	11.031957390146472	No Formal quals
Yorkshire Region	9.65625	No Formal quals
North Region	9.089635854341736	Post Graduate Qualification
Ireland	13.65301724137931	Post Graduate Qualification
East Midlands Region	11.145251396648044	No Formal quals",,,,,
테이블 2개,university_learning,"각 지역명, 등록 모듈코드, 모듈 별 평균 등록 기간을 조회","Search for each region name, registration module code, and average registration period for each module.",,"SELECT s.region, r.code_module, AVG(r.date_registration) AS avg_registration FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.region, r.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,39,,"East Anglian Region	AAA	-74.0632
Scotland	AAA	-65.6515
North Western Region	AAA	-80.8679
South East Region	AAA	-86.0000
West Midlands Region	AAA	-86.2105
Wales	AAA	-75.8462
North Region	AAA	-85.9231
South Region	AAA	-71.5476
Ireland	AAA	-81.5263
South West Region	AAA	-81.0704
East Midlands Region	AAA	-78.1400
Yorkshire Region	AAA	-55.7872
London Region	AAA	-77.8361
East Anglian Region	BBB	-73.5111
Scotland	BBB	-59.0524
South Region	BBB	-74.5516
North Region	BBB	-76.4315
London Region	BBB	-69.9794
Ireland	BBB	-36.7037
Yorkshire Region	BBB	-75.4462
West Midlands Region	BBB	-74.5852
East Midlands Region	BBB	-74.1927
North Western Region	BBB	-76.8149
South East Region	BBB	-73.4717
Wales	BBB	-50.7241
South West Region	BBB	-73.3891
West Midlands Region	CCC	-114.9912
East Anglian Region	CCC	-96.2266
North Region	CCC	-97.3333
Ireland	CCC	-64.3077",,,,,
테이블 2개,university_learning,각 지역명과 지역의 학습 기간을 조회,Check the name of each region and the study period for each region.,,"SELECT s.region, AVG(c.module_presentation_length) AS avg_length FROM courses c JOIN studentInfo s ON c.code_presentation = s.code_presentation GROUP BY s.region;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"Scotland	255.4308
East Anglian Region	256.1918
Wales	256.7487
South Region	255.1497
London Region	254.4789
West Midlands Region	254.6839
South West Region	255.3780
South East Region	255.5740
North Western Region	254.7741
Yorkshire Region	256.6691
North Region	252.9879
Ireland	261.0088
East Midlands Region	255.2537",,,,,
테이블 3개,university_learning,"각 지역의 지역명, 등록 모듈 코드, 모듈 별 학생 수를 조회","Check the region name, registration module code, and number of students per module for each region.",,"SELECT s.region, c.code_module, COUNT(*) AS student_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student JOIN courses c ON r.code_module = c.code_module GROUP BY s.region, c.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,39,,"East Anglian Region        AAA        190
Scotland        AAA        132
North Western Region        AAA        106
South East Region        AAA        114
West Midlands Region        AAA        114
Wales        AAA        52
North Region        AAA        52
South Region        AAA        168
Ireland        AAA        38
South West Region        AAA        142
East Midlands Region        AAA        100
Yorkshire Region        AAA        94
London Region        AAA        122
East Anglian Region        BBB        3236
Scotland        BBB        2824
South Region        BBB        2560
North Region        BBB        964
London Region        BBB        2728
Ireland        BBB        1624
Yorkshire Region        BBB        2044
West Midlands Region        BBB        2664
East Midlands Region        BBB        2304
North Western Region        BBB        2316
South East Region        BBB        2056
Wales        BBB        3248
South West Region        BBB        2200
West Midlands Region        CCC        230
East Anglian Region        CCC        256
North Region        CCC        180
Ireland        CCC        78
Scotland        CCC        384
Yorkshire Region        CCC        164
London Region        CCC        246
South West Region        CCC        166
East Midlands Region        CCC        180
South Region        CCC        260
Wales        CCC        140
North Western Region        CCC        238
South East Region        CCC        164",,,,,
테이블 1개,university_learning,각 모듈 코드와 평균 가중치를 조회,Look up each module code and average weight,,"SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"AAA	33.3333
BBB	19.0476
CCC	30.0000
DDD	22.9429
EEE	40.0000
FFF	15.4615
GGG	10.0000",,,,,
테이블 1개,university_learning,"각 모듈 코드,  프레젠테이션 코드, 프레젠테이션 별 평가 결과를 조회","Search evaluation results for each module code, presentation code, and presentation",,"SELECT code_module, code_presentation, assessment_type FROM assessments;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,206,,"AAA	2013J	TMA
AAA	2013J	TMA
AAA	2013J	TMA
AAA	2013J	TMA
AAA	2013J	TMA
AAA	2013J	Exam
AAA	2014J	TMA
AAA	2014J	TMA
AAA	2014J	TMA
AAA	2014J	TMA
AAA	2014J	TMA
AAA	2014J	Exam
BBB	2013B	TMA
BBB	2013B	TMA
BBB	2013B	TMA
BBB	2013B	TMA
BBB	2013B	TMA
BBB	2013B	TMA
BBB	2013B	Exam
BBB	2013B	CMA
BBB	2013B	CMA
BBB	2013B	CMA
BBB	2013B	CMA
BBB	2013B	CMA
BBB	2013J	TMA
BBB	2013J	TMA
BBB	2013J	TMA
BBB	2013J	TMA
BBB	2013J	TMA
BBB	2013J	TMA",,,,,
테이블 1개,university_learning,평균 가중치 중 가장 낮은 유형을 조회,Find the lowest type among average weights,,"SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type ORDER BY avg_weight ASC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,"        assessment_type        avg_weight
        CMA        1.1842",,,,,
테이블 1개,university_learning,각 활동 유형과 활동 유형별 평균 활동 기간 조회,View each activity type and the average activity period for each activity type,,"SELECT activity_type, AVG(week_to - week_from) AS avg_duration FROM vle GROUP BY activity_type ORDER BY avg_duration DESC;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,20,,"oucontent        0.0315
quiz        0.0000
questionnaire        0.0000
page        0.0000
ouwiki        0.0000
subpage        0.0000
url        0.0000
resource        0.0000
dualpane        0.0000
dataplus        0.0000
repeatactivity        0.0000
homepage        
forumng        
glossary        
ouelluminate        
sharedsubpage        
oucollaborate        
externalquiz        
folder        
htmlactivity        ",,,,,
테이블 1개,university_learning,"각 모듈 코드와 지역명, 지역별 학생 수와 해당 지역에 거주하는 학생의 비율","Each module code and region name, number of students in each region and percentage of students residing in that region",,"SELECT si.code_module, si.region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module) AS percentage FROM studentInfo si GROUP BY si.code_module, si.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,39,,"AAA	Scotland	66	9.26966
AAA	East Anglian Region	95	13.34270
BBB	East Anglian Region	809	10.51742
BBB	Wales	812	10.55642
AAA	South Region	84	11.79775
BBB	Scotland	706	9.17837
BBB	London Region	682	8.86635
BBB	West Midlands Region	666	8.65835
BBB	South West Region	550	7.15029
BBB	South East Region	514	6.68227
BBB	North Western Region	579	7.52730
AAA	Yorkshire Region	47	6.60112
CCC	West Midlands Region	115	8.56292
BBB	South Region	640	8.32033
CCC	East Anglian Region	128	9.53090
AAA	North Western Region	53	7.44382
AAA	South West Region	71	9.97191
AAA	South East Region	57	8.00562
BBB	North Region	241	3.13313
AAA	West Midlands Region	57	8.00562
BBB	Ireland	406	5.27821
BBB	Yorkshire Region	511	6.64327
BBB	East Midlands Region	576	7.48830
AAA	Wales	26	3.65169
CCC	North Region	90	6.70141
CCC	Ireland	39	2.90395
CCC	Scotland	192	14.29635
CCC	Yorkshire Region	82	6.10573
AAA	North Region	26	3.65169
CCC	London Region	123	9.15860",,,,,
테이블 1개,university_learning,각 모듈코드와 성별로 등록된 학생의 수를 조회,Check the number of registered students by each module code and gender.,,"SELECT code_module, gender, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,6,,"AAA	M	413
BBB	F	6797
BBB	M	895
AAA	F	299
CCC	F	313
CCC	M	1030",,,,,
테이블 1개,university_learning,수강한 모든 모듈 중 평가 유형의 평균 가중치를 조회,View the average weight of each assessment type among all modules taken,,SELECT AVG(weight) AS avg_weight FROM assessments;,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,20.9078,,,,,
테이블 1개,university_learning,각 모듈의 프레젠테이션 길이가 평균 이상인 모듈,Modules with above-average presentation length for each module,,SELECT code_module FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) >= (SELECT AVG(module_presentation_length) FROM courses);,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,3,,"AAA
EEE
GGG",,,,,
테이블 1개,university_learning,각 활동 유형과 활동 유형별로 가장 많이 사용된 기간 조회,View each activity type and the most used period for each activity type,,"SELECT activity_type, MAX(week_to - week_from) AS max_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,20,,"homepage	
forumng	
glossary	
oucontent	2
quiz	0
questionnaire	0
page	0
ouwiki	0
subpage	0
url	0
resource	0
dualpane	0
ouelluminate	
dataplus	0
sharedsubpage	
oucollaborate	
externalquiz	
folder	
repeatactivity	0
htmlactivity	",,,,,
테이블 1개,university_learning,가장 많은 학생이 등록한 모듈과 학생 수 조회,View the modules with the most students enrolled and the number of students,,"SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentRegistration GROUP BY code_module ORDER BY num_students DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,BBB	7692,,,,,
테이블 1개,university_learning,평균 이상으로 평가가 많이 이루어진 모듈,Modules rated above average,,SELECT code_module FROM assessments GROUP BY code_module HAVING COUNT(*) > ( SELECT AVG(module_count) FROM ( SELECT COUNT(*) AS module_count FROM assessments GROUP BY code_module ) AS module_counts );,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"BBB
DDD
FFF
GGG",,,,,
테이블 1개,university_learning,가장 많은 모듈을 학습한 학생 id와 모듈의 수를 조회,Check the ID of the student who studied the most modules and the number of modules,,"SELECT id_student, COUNT(DISTINCT code_module) AS num_modules FROM studentRegistration GROUP BY id_student ORDER BY num_modules DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,6516	1,,,,,
테이블 1개,university_learning,모든 프레젠테이션의 평균 길이,Average length of all presentations,,SELECT AVG(module_presentation_length) AS avg_length FROM courses;,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,255.5455,,,,,
테이블 1개,university_learning,가장 최근에 등록한 학생,Most recently enrolled student,,"SELECT id_student, MAX(date_registration) AS max_registration_date FROM studentRegistration GROUP BY id_student;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1000,,"6516	-52
11391	-159
23629	-47
23632	-194
23798	-27
24734	-18
25107	-73
25629	-31
25997	-139
26192	-38
26315	-92
26677	-60
26734	-101
27457	-36
27759	-43
27891	-58
28061	-130
28400	-53
28418	-37
29144	-24
29764	-34
29820	-57
30091	-145
30268	-92
31014	-43
31600	-52
31604	-52
31663	-60
31849	-128
32327	-92",,,,,
테이블 1개,university_learning,각 활동 유형과 활동 유형 별로 가장 짧은 기간을 가진 활동 조회,Search for each activity type and the activity with the shortest duration for each activity type,,"SELECT activity_type, MIN(week_to - week_from) AS min_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,20,,"homepage	
forumng	
glossary	
oucontent	0
quiz	0
questionnaire	0
page	0
ouwiki	0
subpage	0
url	0
resource	0
dualpane	0
ouelluminate	
dataplus	0
sharedsubpage	
oucollaborate	
externalquiz	
folder	
repeatactivity	0
htmlactivity	",,,,,
테이블 1개,university_learning,각 모듈 코드와 모듈에 속한 학생 중 특정 지역에 거주하는 학생의 비율이 가장 높은순 대로 정렬,Sorted by each module code and the highest percentage of students in that module who live in a specific region.,,"SELECT code_module, region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module) AS percentage FROM studentInfo si GROUP BY code_module, region ORDER BY percentage DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,39,,"CCC	Scotland	192	14.29635
AAA	East Anglian Region	95	13.34270
AAA	South Region	84	11.79775
BBB	Wales	812	10.55642
BBB	East Anglian Region	809	10.51742
AAA	South West Region	71	9.97191
CCC	South Region	130	9.67982
CCC	East Anglian Region	128	9.53090
AAA	Scotland	66	9.26966
BBB	Scotland	706	9.17837
CCC	London Region	123	9.15860
BBB	London Region	682	8.86635
CCC	North Western Region	119	8.86076
BBB	West Midlands Region	666	8.65835
AAA	London Region	61	8.56742
CCC	West Midlands Region	115	8.56292
BBB	South Region	640	8.32033
AAA	South East Region	57	8.00562
AAA	West Midlands Region	57	8.00562
BBB	North Western Region	579	7.52730
BBB	East Midlands Region	576	7.48830
AAA	North Western Region	53	7.44382
BBB	South West Region	550	7.15029
AAA	East Midlands Region	50	7.02247
CCC	East Midlands Region	90	6.70141
CCC	North Region	90	6.70141
BBB	South East Region	514	6.68227
BBB	Yorkshire Region	511	6.64327
AAA	Yorkshire Region	47	6.60112
CCC	South West Region	83	6.18019",,,,,
테이블 1개,university_learning,각 모듈 코드와 모듈에 속한 학생 중 장애를 가진 학생의 비율이 가장 높은순대로 정렬,Sorted by the highest percentage of students with disabilities among students in each module code and module.,,"SELECT code_module, AVG(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) AS percentage_with_disability FROM studentInfo GROUP BY code_module ORDER BY percentage_with_disability DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"CCC	0.0961
BBB	0.0914
AAA	0.0534",,,,,
테이블 1개,university_learning,각 모듈의 평균 가중치 중 가장 낮은 유형,The lowest type of average weight for each module,,"SELECT code_module, MIN(avg_weight) AS min_avg_weight FROM ( SELECT a.code_module, a.assessment_type, AVG(a.weight) AS avg_weight FROM assessments a GROUP BY a.code_module, a.assessment_type ) AS avg_weights GROUP BY code_module ORDER BY min_avg_weight ASC;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"FFF	0.0000
GGG	0.0000
BBB	1.0000
DDD	3.5714
CCC	6.2500
AAA	20.0000
EEE	25.0000",,,,,
테이블 2개,university_learning,각 모듈코드와 모듈에 등록된 학생들의 평균 나이 조회,Check each module code and the average age of students enrolled in the module.,,"SELECT sr.code_module, ROUND(AVG(si.age_band)) AS avg_age FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	20
BBB	12
CCC	8",,,,,
테이블 1개,university_learning,각 모듈에 속한 학생 중 특정 지역에 거주하는 학생의 비율,Percentage of students in each module living in a specific region,,"SELECT code_module, region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module) AS percentage FROM studentInfo si GROUP BY code_module, region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,39,,"AAA	Scotland	66	9.26966
AAA	East Anglian Region	95	13.34270
BBB	East Anglian Region	809	10.51742
BBB	Wales	812	10.55642
AAA	South Region	84	11.79775
BBB	Scotland	706	9.17837
BBB	London Region	682	8.86635
BBB	West Midlands Region	666	8.65835
BBB	South West Region	550	7.15029
BBB	South East Region	514	6.68227
BBB	North Western Region	579	7.52730
AAA	Yorkshire Region	47	6.60112
CCC	West Midlands Region	115	8.56292
BBB	South Region	640	8.32033
CCC	East Anglian Region	128	9.53090
AAA	North Western Region	53	7.44382
AAA	South West Region	71	9.97191
AAA	South East Region	57	8.00562
BBB	North Region	241	3.13313
AAA	West Midlands Region	57	8.00562
BBB	Ireland	406	5.27821
BBB	Yorkshire Region	511	6.64327
BBB	East Midlands Region	576	7.48830
AAA	Wales	26	3.65169
CCC	North Region	90	6.70141
CCC	Ireland	39	2.90395
CCC	Scotland	192	14.29635
CCC	Yorkshire Region	82	6.10573
AAA	North Region	26	3.65169
CCC	London Region	123	9.15860",,,,,
테이블 1개,university_learning,각 평가 유형별로 평균 가중치 조회,Average weight query for each evaluation type,,"SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"TMA	17.1415
Exam	100.0000
CMA	1.1842",,,,,
테이블 1개,university_learning,VLE 활동 유형별로 평균 활동 기간 조회,View average activity duration by VLE activity type,,"SELECT activity_type, AVG(week_to - week_from) AS avg_activity_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,20,,"homepage	
forumng	
glossary	
oucontent	0.0315
quiz	0.0000
questionnaire	0.0000
page	0.0000
ouwiki	0.0000
subpage	0.0000
url	0.0000
resource	0.0000
dualpane	0.0000
ouelluminate	
dataplus	0.0000
sharedsubpage	
oucollaborate	
externalquiz	
folder	
repeatactivity	0.0000
htmlactivity	",,,,,
테이블 1개,university_learning,각 학생의 등록된 모든 모듈의 평균 학점 조회,View average grade across all registered modules for each student,,"SELECT id_student, AVG(score) AS avg_score FROM studentAssessment GROUP BY id_student;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,17,,"1752	70.3072625698324
1753	66.80116959064327
1754	70.43939393939394
1755	70.56765676567657
1756	69.12751677852349
1758	69.25519287833828
1759	66.21766561514195
1760	68.87458745874588
1761	69.58571428571429
1762	69.22302158273381
14984	71.21529324424647
14985	70.10526315789474
14986	70.97363465160075
14987	71.17438105489774
14988	72.72768878718536
14989	74.36173001310615
14991	93.72670807453416",,,,,
테이블 1개,university_learning,최대 및 최소 평가 가중치 조회,Maximum and minimum evaluation weight lookup,,"SELECT MAX(CAST(weight AS DECIMAL(10,2))) AS max_weight, MIN(CAST(weight AS DECIMAL(10,2))) AS min_weight FROM assessments;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,100	0,,,,,
테이블 1개,university_learning,모든 학생의 학생 코드와 VLE 자료 클릭 수의 총 합 조회,View the total number of student codes and VLE material clicks for all students,,"SELECT id_student, SUM(sum_click) AS total_clicks FROM studentVle GROUP BY id_student;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,38,,"546614	5.4634
546652	3.5179
546660	2.0000
546662	11.2250
546667	3.4706
546668	1.0000
546669	6.3333
546670	1.1429
546671	1.2000
546672	1.0000
546681	2.4000
546688	4.5000
546689	1.0000
546700	3.0000
546701	3.0000
546714	1.5000
546719	3.6154
546723	1.0000
546731	1.0000
546732	19.5000
546740	7.0000
546871	1.6667
546873	2.0000
546874	1.0000
546876	3.5000
546879	2.7333
546883	1.0000
546900	1.0000
546911	2.0000
546948	1.0000",,,,,
테이블 1개,university_learning,각 학생의 학생코드와 평균 VLE 자료 클릭 수 조회,View each student’s student code and average number of VLE data clicks,,"SELECT id_student, AVG(sum_click) AS avg_clicks FROM studentVle GROUP BY id_student;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,38,,"546614	5.4634
546652	3.5179
546660	2.0000
546662	11.2250
546667	3.4706
546668	1.0000
546669	6.3333
546670	1.1429
546671	1.2000
546672	1.0000
546681	2.4000
546688	4.5000
546689	1.0000
546700	3.0000
546701	3.0000
546714	1.5000
546719	3.6154
546723	1.0000
546731	1.0000
546732	19.5000
546740	7.0000
546871	1.6667
546873	2.0000
546874	1.0000
546876	3.5000
546879	2.7333
546883	1.0000
546900	1.0000
546911	2.0000
546948	1.0000",,,,,
테이블 2개,university_learning,"모듈 코드, 각 모듈의 평균 프레젠테이션 길이와 평가 유형, 평가 유형별 평균 가중치 조회","View module codes, average presentation length and assessment type for each module, and average weight for each assessment type.",,"SELECT c.code_module, a.assessment_type, AVG(c.module_presentation_length) AS avg_presentation_length, AVG(a.weight) AS avg_weight FROM courses c JOIN assessments a ON c.code_module = a.code_module GROUP BY c.code_module, a.assessment_type;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,19,,"AAA        268.5000        TMA        20.0000
AAA        268.5000        Exam        100.0000
BBB        251.0000        TMA        16.7391
BBB        251.0000        Exam        100.0000
BBB        251.0000        CMA        1.0000
CCC        255.0000        TMA        18.7500
CCC        255.0000        CMA        6.2500
CCC        255.0000        Exam        100.0000
DDD        251.0000        TMA        15.7500
DDD        251.0000        Exam        100.0000
DDD        251.0000        CMA        3.5714
EEE        259.3333        TMA        25.0000
EEE        259.3333        Exam        100.0000
FFF        254.5000        TMA        20.2000
FFF        254.5000        CMA        0.0000
FFF        254.5000        Exam        100.0000
GGG        257.0000        TMA        0.0000
GGG        257.0000        CMA        0.0000
GGG        257.0000        Exam        100.0000",,,,,
테이블 2개,university_learning,각 모듈의 등록된 학생 수와 평균 나이 조회,View the number of enrolled students and their average age for each module,,"SELECT r.code_module, COUNT(r.id_student) AS num_students, AVG(CAST(i.age_band AS UNSIGNED)) AS avg_age FROM studentRegistration r JOIN studentInfo i ON r.id_student = i.id_student GROUP BY r.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"AAA	712	19.6138
BBB	7692	11.6010
CCC	1343	7.9672",,,,,
테이블 3개,university_learning,"지역명, 각 지역별로 등록된 학생 수와 VLE 자료 클릭 수의 총 합 조회","Search for the total number of region names, number of students registered in each region, and number of clicks on VLE materials",,"SELECT i.region, COUNT(r.id_student) AS num_students, SUM(v.sum_click) AS total_clicks FROM studentInfo i JOIN studentRegistration r ON i.id_student = r.id_student JOIN studentVle v ON r.id_student = v.id_student GROUP BY i.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,2,,"North Western Region	10	24
London Region	2	2",,,,,
테이블 2개,university_learning,"모듈 코드, 각 모듈의 평균 가중치와 최소 평가 가중치 조회","Module code, lookup average weight and minimum evaluation weight for each module",,"SELECT a.code_module, AVG(a.weight) AS avg_weight, MIN(a.weight) AS min_weight FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY a.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"AAA	33.3333	10
BBB	19.0476	0
CCC	30.0000	2
DDD	22.9429	2
EEE	40.0000	16
FFF	15.4615	0
GGG	10.0000	0",,,,,
테이블 3개,university_learning,"모듈 코드, 각 모듈의 평균 프레젠테이션 길이, 평가 유형별 평균 가중치, 학생들의 평균 나이 조회","View module codes, average presentation length for each module, average weight for each type of assessment, and average age of students.",,"SELECT c.code_module, AVG(c.module_presentation_length) AS avg_presentation_length, a.assessment_type, AVG(a.weight) AS avg_weight, AVG(i.age_band) AS avg_age FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation JOIN studentInfo i ON c.code_module = i.code_module AND c.code_presentation = i.code_presentation GROUP BY c.code_module, a.assessment_type;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,8,,"AAA        268.4621        TMA        20.0000        19.61376404494382
AAA        268.4621        Exam        100.0000        19.61376404494382
BBB        252.6733        TMA        16.8816        11.586673038847545
BBB        253.1201        Exam        100.0000        11.601014040561623
BBB        249.5380        CMA        1.0000        11.486042692939245
CCC        241.0000        TMA        18.7500        7.967237527922562
CCC        241.0000        CMA        6.2500        7.967237527922562
CCC        241.0000        Exam        100.0000        7.967237527922562",,,,,
테이블 3개,university_learning,"모듈 코드, 각 모듈의 평균 프레젠테이션 길이, VLE 자료 활동 유형별 평균 활동 기간, 학생들의 최대 등록일 조회","Module code, average presentation length for each module, average activity duration for each type of VLE material activity, and maximum enrollment date for students.",,"SELECT c.code_module, AVG(c.module_presentation_length) AS avg_presentation_length, v.activity_type, AVG(v.week_to - v.week_from) AS avg_activity_duration FROM courses c JOIN vle v ON c.code_module = v.code_module AND c.code_presentation = v.code_presentation JOIN studentRegistration r ON c.code_module = r.code_module AND c.code_presentation = r.code_presentation GROUP BY c.code_module, v.activity_type;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,30,,"AAA        268.4621        homepage        
AAA        268.2557        forumng        
AAA        268.4621        glossary        
AAA        268.4621        oucontent        0.0000
AAA        268.4621        subpage        
AAA        268.4883        url        
AAA        268.4568        resource        
AAA        268.4621        dataplus        
AAA        268.4621        oucollaborate        
BBB        251.1085        forumng        
BBB        255.1027        glossary        
BBB        253.1201        homepage        
BBB        261.2416        oucontent        0.0000
BBB        252.5785        quiz        0.0000
BBB        251.5490        url        0.0000
BBB        250.9296        subpage        0.0000
BBB        251.5064        resource        0.0000
BBB        249.5380        sharedsubpage        
BBB        240.0000        ouelluminate        
BBB        260.7024        oucollaborate        
BBB        262.0000        questionnaire        
CCC        241.0000        homepage        
CCC        241.0000        forumng        
CCC        241.0000        quiz        
CCC        241.0000        page        
CCC        241.0000        oucontent        1.2000
CCC        241.0000        subpage        
CCC        241.0000        resource        
CCC        241.0000        oucollaborate        
CCC        241.0000        url        ",,,,,
테이블 3개,university_learning,"모듈 코드, 각 모듈별 최근 프레젠테이션과 해당 프레젠테이션의 평균 평가 가중치 조회","View module codes, recent presentations for each module, and average evaluation weight for those presentations",,"SELECT c.code_module, c.code_presentation, AVG(a.weight) AS avg_weight FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation JOIN (SELECT code_module, MAX(code_presentation) AS max_code_presentation FROM courses GROUP BY code_module) AS latest ON c.code_module = latest.code_module AND c.code_presentation = latest.max_code_presentation GROUP BY c.code_module, c.code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"AAA	2014J	33.3333
BBB	2014J	33.3333
CCC	2014J	30.0000
DDD	2014J	28.5714
EEE	2014J	40.0000
FFF	2014J	15.4615
GGG	2014J	10.0000",,,,,
테이블 1개,university_learning,가장 많은 클릭을 한 모듈과 그 학생의 클릭 수 조회,View the most clicked modules and the number of clicks by those students,,"SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentInfo GROUP BY code_module ORDER BY num_students DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,546662	449,,,,,
테이블 1개,university_learning,총 학생 수가 가장 많은 모듈과 해당 학생 수 조회,View which module has the highest total number of students and how many students there are,,"SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentInfo GROUP BY code_module ORDER BY num_students DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,BBB	7692,,,,,
테이블 1개,university_learning,평균 등록일보다 더 늦게 등록한 학생들의 모듈과 프레젠테이션 코드 조회,View module and presentation codes for students who registered later than the average registration date,,"SELECT code_module, code_presentation FROM studentRegistration GROUP BY code_module, code_presentation HAVING AVG(date_registration) > (SELECT AVG(date_registration) FROM studentRegistration);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"BBB	2013B
BBB	2013J
BBB	2014J",,,,,
테이블 1개,university_learning,가장 많은 평가 유형을 가진 모듈과 해당 평가 유형 수 조회,View which modules have the most assessment types and the number of corresponding assessment types,,"SELECT code_module, COUNT(DISTINCT assessment_type) AS num_assessment_types FROM assessments GROUP BY code_module ORDER BY num_assessment_types DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,GGG	3,,,,,
테이블 1개,university_learning,평균 평가 가중치보다 높은 모듈과 해당 평가 유형 조회,View modules with a higher than average assessment weight and their assessment type,,"SELECT code_module, assessment_type FROM assessments GROUP BY code_module, assessment_type HAVING AVG(weight) > (SELECT AVG(weight) FROM assessments);","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,8,,"AAA	Exam
BBB	Exam
CCC	Exam
DDD	Exam
EEE	TMA
EEE	Exam
FFF	Exam
GGG	Exam",,,,,
테이블 1개,university_learning,평균 평가 가중치 이상의 모듈과 해당 프레젠테이션 코드 조회,View modules with above average evaluation weight and their presentation code,,"SELECT code_module, code_presentation FROM assessments GROUP BY code_module, code_presentation HAVING AVG(weight) >= (SELECT AVG(weight) FROM assessments);","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,11,,"AAA	2013J
AAA	2014J
BBB	2014J
CCC	2014B
CCC	2014J
DDD	2013J
DDD	2014B
DDD	2014J
EEE	2013J
EEE	2014B
EEE	2014J",,,,,
테이블 1개,university_learning,각 모듈의 최신 프레젠테이션 조회,View the latest presentations for each module,,"SELECT code_module, code_presentation FROM courses WHERE (code_module, code_presentation) IN ( SELECT code_module, MAX(code_presentation) AS latest_presentation FROM courses GROUP BY code_module );","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"AAA        2014J
BBB        2014J
CCC        2014J
DDD        2014J
EEE        2014J
FFF        2014J
GGG        2014J
        ",,,,,
테이블 1개,university_learning,평균 프레젠테이션 길이보다 긴 모듈과 해당 프레젠테이션 코드와 프레젠테이션 길이 조회,Look up modules that are longer than the average presentation length and their presentation code and presentation length.,,"SELECT code_module, code_presentation, module_presentation_length FROM courses WHERE module_presentation_length > ( SELECT AVG(module_presentation_length) FROM courses );","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,14,,"AAA        2013J        268
AAA        2014J        269
BBB        2013J        268
BBB        2014J        262
CCC        2014J        269
DDD        2013J        261
DDD        2014J        262
EEE        2013J        268
EEE        2014J        269
FFF        2013J        268
FFF        2014J        269
GGG        2013J        261
GGG        2014J        269
                ",,,,,
테이블 1개,university_learning,각 모듈별 프레젠테이션 수 조회,View the number of presentations for each module,,"SELECT code_module, COUNT(DISTINCT code_presentation) AS num_presentations FROM courses GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"AAA	2
BBB	4
CCC	2
DDD	4
EEE	3
FFF	4
GGG	3",,,,,
테이블 1개,university_learning,평가 유형별 평가 수 조회,View the number of evaluations by evaluation type,,"SELECT assessment_type, COUNT(*) AS num_assessments FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"TMA	106
Exam	24
CMA	76",,,,,
테이블 1개,university_learning,각 프레젠테이션의 최대 평가 가중치 조회,Look up the maximum evaluation weight for each presentation,,"SELECT code_presentation, MAX(weight) AS max_weight FROM assessments GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"2013B	100
2013J	100
2014B	100
2014J	100",,,,,
테이블 1개,university_learning,프레젠테이션 코드와 평가 일자가 있는 프레젠테이션의 평가 일자의 평균 조회,Average views by evaluation date for presentations with presentation code and evaluation date,,"SELECT code_presentation, AVG(date) AS avg_assessment_date FROM assessments WHERE date IS NOT NULL GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"2013B	134.8421
2013J	151.9412
2014B	143.4259
2014J	147.2692",,,,,
테이블 1개,university_learning,모듈 코드와 모듈 별 평가 수와 해당 모듈의 평균 평가 가중치 조회,"View module code, number of evaluations per module, and average evaluation weight for that module",,"SELECT code_module, COUNT(*) AS num_assessments, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"AAA        12        33.3333
BBB        42        19.0476
CCC        20        30.0000
DDD        35        22.9429
EEE        15        40.0000
FFF        52        15.4615
GGG        30        10.0000",,,,,
테이블 1개,university_learning,학생의 나이대와 해당 나이대의 학생 수 조회,Check a student's age range and the number of students in that age range,,"SELECT age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"55<=	53
0-35	6523
35-55	3171",,,,,
테이블 2개,university_learning,모듈 코드와 모듈 별 평가 유형과 해당 유형의 평가 수 조회,View the evaluation type and number of evaluations for each module code and module,,"SELECT a.code_module, a.assessment_type, COUNT(*) AS num_assessments FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY a.code_module, a.assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,19,,"AAA	TMA	10
AAA	Exam	2
BBB	TMA	23
BBB	Exam	4
BBB	CMA	15
CCC	TMA	8
CCC	CMA	8
CCC	Exam	4
DDD	TMA	24
DDD	Exam	4
DDD	CMA	7
EEE	TMA	12
EEE	Exam	3
FFF	TMA	20
FFF	CMA	28
FFF	Exam	4
GGG	TMA	9
GGG	CMA	18
GGG	Exam	3",,,,,
테이블 2개,university_learning,"프레젠테이션 코드, 평가 일자가 있는 프레젠테이션의 평가 일자와 해당 프레젠테이션의 평균 평가 점수 조회","View the presentation code, evaluation date of a presentation with evaluation date, and average evaluation score for that presentation.",,"SELECT a.code_presentation, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.date IS NOT NULL GROUP BY a.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,2013B	67.57142857142857,,,,,
테이블 2개,university_learning,"프레젠테이션 코드, 각 프레젠테이션의 최소 평가 일자와 해당 프레젠테이션의 평균 평가 점수 조회","View the presentation code, the minimum evaluation date for each presentation, and the average evaluation score for that presentation.",,"SELECT a.code_presentation, MIN(a.date) AS min_assessment_date, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,2013B	131	67.57142857142857,,,,,
테이블 2개,university_learning,학생의 성별과 나이대 그리고 해당 성별 및 나이대의 학생 수 조회,Check the student's gender and age group and the number of students in that gender and age group,,"SELECT gender, age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY gender, age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,6,,"M	55<=	48
F	0-35	5026
M	0-35	1497
F	35-55	2378
M	35-55	793
F	55<=	5",,,,,
테이블 1개,university_learning,모듈코드와 각 모듈별 최대 평가 가중치와 해당 모듈의 평균 평가 점수 조회,"View module code, maximum evaluation weight for each module, and average evaluation score for that module",,"SELECT a.code_module, MAX(a.weight) AS max_weight, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,FFF	25	67.57142857142857,,,,,
테이블 2개,university_learning,평가 유형과 평가 유형별 평가 수와 해당 평가 유형의 평균 평가 점수와 최소 평가 가중치 조회,"View the evaluation type and number of evaluations by evaluation type, as well as the average evaluation score and minimum evaluation weight for that evaluation type.",,"SELECT a.assessment_type, COUNT(*) AS num_assessments, AVG(sa.score) AS avg_score, MIN(a.weight) AS min_weight FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,TMA	7	67.57142857142857	25,,,,,
테이블 2개,university_learning,"모듈 코드, 각 모듈의 최대 평가 일자와 해당 모듈의 평균 평가 점수와 최대 평가 가중치 조회","View module code, maximum evaluation date for each module, average evaluation score and maximum evaluation weight for that module",,"SELECT a.code_module, MAX(a.date) AS max_assessment_date, AVG(sa.score) AS avg_score, MAX(a.weight) AS max_weight FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,FFF	131	67.57142857142857	25,,,,,
테이블 2개,university_learning,프레젠테이션 코드와 각 프레젠테이션의 최소 평가 일자와 해당 프레젠테이션의 평균 평가 점수와 최대 평가 일자 조회,"View the presentation code and minimum evaluation date for each presentation, as well as the average evaluation score and maximum evaluation date for that presentation.",,"SELECT a.code_presentation, MIN(a.date) AS min_assessment_date, AVG(sa.score) AS avg_score, MAX(a.date) AS max_assessment_date FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,2013B	131	67.57142857142857	131,,,,,
테이블 1개,university_learning,프레젠테이션 코드와 프레젠테이션 별 평균 진행기간 조회,View presentation code and average progress time for each presentation,,"SELECT code_presentation, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,4,,"2013B	240.0000
2013J	265.6667
2014B	239.8333
2014J	267.0000",,,,,
테이블 1개,university_learning,평가 일자가 있는 평가 수 조회,View evaluation count with evaluation date,,SELECT COUNT(*) AS num_assessments_with_date FROM assessments WHERE date IS NOT NULL;,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,195,,,,,
테이블 1개,university_learning,모듈 코드와 각 모듈의 평균 평가 가중치 조회,View module code and average evaluation weight of each module,,"SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"AAA	33.3333
BBB	19.0476
CCC	30.0000
DDD	22.9429
EEE	40.0000
FFF	15.4615
GGG	10.0000",,,,,
테이블 1개,university_learning,평가 유형과 평가 유형별 평가 가중치 합 조회,Search for evaluation type and evaluation weight sum by evaluation type,,"SELECT assessment_type, SUM(weight) AS total_weight FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"TMA	1817
Exam	2400
CMA	90",,,,,
테이블 1개,university_learning,평가 유형과 평가 유형별 최소 평가 일자 조회,View evaluation type and minimum evaluation date by evaluation type,,"SELECT assessment_type, MIN(date) AS min_assessment_date FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"TMA	12
Exam	222
CMA	18",,,,,
테이블 1개,university_learning,학생id와 학생의 총 수강 모듈 수와 평균 학습 점수 조회,"View student ID, total number of modules taken, and average learning score",,"SELECT id_student, COUNT(*) AS num_modules_enrolled, AVG(score) AS avg_learning_score FROM studentAssessment GROUP BY id_student;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,17,,"1752	359	70.3072625698324
1753	342	66.80116959064327
1754	331	70.43939393939394
1755	303	70.56765676567657
1756	298	69.12751677852349
1758	337	69.25519287833828
1759	317	66.21766561514195
1760	304	68.87458745874588
1761	280	69.58571428571429
1762	278	69.22302158273381
14984	1352	71.21529324424647
14985	1217	70.10526315789474
14986	1065	70.97363465160075
14987	931	71.17438105489774
14988	876	72.72768878718536
14989	766	74.36173001310615
14991	644	93.72670807453416",,,,,
테이블 1개,university_learning,프레젠테이션과 평가 일자가 있는 각 프레젠테이션의 최소 평가 일자 조회,View minimum evaluation date for each presentation with presentation and evaluation date,,"SELECT code_presentation, MIN(date) AS min_assessment_date FROM assessments WHERE date IS NOT NULL GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"2013B	19
2013J	19
2014B	12
2014J	18",,,,,
테이블 2개,university_learning,"모듈코드, 모듈 별 평균 평가 가중치와 평균 학습 점수 조회","View module code, average evaluation weight and average learning score for each module",,"SELECT a.code_module, AVG(a.weight) AS avg_weight, AVG(sa.score) AS avg_learning_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1,,FFF	25.0000	67.57142857142857,,,,,
테이블 2개,university_learning,"모듈코드, 모듈 별 평균 평가 점수와 평균 학습 점수 조회","View module code, average evaluation score and average learning score for each module",,"SELECT a.code_module, AVG(sa.score) AS avg_assessment_score, AVG(sa_learning.score) AS avg_learning_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment JOIN ( SELECT id_student, AVG(score) AS score FROM studentAssessment GROUP BY id_student ) sa_learning ON sa.id_student = sa_learning.id_student GROUP BY a.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,2,,"AAA	69.03051493960585	69.01286122578615
BBB	73.6403803950256	73.62165741552293",,,,,
테이블 2개,university_learning,"학생 코드, 학생이 수강한 각 모듈과 해당 모듈의 총 평가 수 조회","View the student code, each module the student has taken, and the total number of assessments for that module.",,"SELECT sr.id_student, sr.code_module, COUNT(sa.id_assessment) AS total_assessments FROM studentRegistration sr LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.id_student, sr.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,1000,,"11391	AAA	5
28400	AAA	5
30268	AAA	0
31604	AAA	5
32885	AAA	5
38053	AAA	5
45462	AAA	5
45642	AAA	5
52130	AAA	5
53025	AAA	5
57506	AAA	5
58873	AAA	5
59185	AAA	5
62155	AAA	5
63400	AAA	5
65002	AAA	4
70464	AAA	5
71361	AAA	5
74372	AAA	4
75091	AAA	5
77367	AAA	5
91265	AAA	5
94961	AAA	6
98094	AAA	5
100893	AAA	5
101781	AAA	5
102806	AAA	5
102952	AAA	5
104476	AAA	5
106247	AAA	3
106577	AAA	5
110175	AAA	5
111717	AAA	3
113295	AAA	5
114017	AAA	5
114999	AAA	5
116541	AAA	5
116692	AAA	5
118983	AAA	5
123044	AAA	5
127582	AAA	5
129955	AAA	6
132976	AAA	5
134143	AAA	5
135335	AAA	0
135400	AAA	7
137873	AAA	5
141355	AAA	5
141377	AAA	6
142326	AAA	5
144801	AAA	5
145130	AAA	5
146188	AAA	5
147756	AAA	9
147793	AAA	1
148993	AAA	8
151358	AAA	5
155550	AAA	5
155854	AAA	5
155984	AAA	7
157568	AAA	5
159954	AAA	5
164259	AAA	5
167906	AAA	5
168936	AAA	5
172112	AAA	5
172797	AAA	5
174782	AAA	5
175392	AAA	5
175932	AAA	5
175991	AAA	5
180753	AAA	5
181316	AAA	1
183096	AAA	5
183947	AAA	5
184271	AAA	5
185439	AAA	1
186149	AAA	5
187100	AAA	5
188278	AAA	6
189879	AAA	5
192183	AAA	5
195262	AAA	1
200860	AAA	5
202635	AAA	3
205350	AAA	5
205719	AAA	3
227499	AAA	5
227517	AAA	5
228082	AAA	5
228222	AAA	5
229179	AAA	5
229361	AAA	5
231554	AAA	4
235507	AAA	6
236284	AAA	5
238007	AAA	5
240712	AAA	5
240884	AAA	5
241649	AAA	5
241729	AAA	5
242793	AAA	5
246834	AAA	5
248270	AAA	5
255548	AAA	5
256815	AAA	5
258392	AAA	5
258894	AAA	5
260355	AAA	3
262011	AAA	5
262934	AAA	5
268073	AAA	5
268733	AAA	2
271251	AAA	5
277880	AAA	6
279572	AAA	5
281022	AAA	5
281250	AAA	5
281589	AAA	0
282821	AAA	5
286488	AAA	5
287548	AAA	5
290201	AAA	5
290757	AAA	5
291334	AAA	5
292923	AAA	0
293699	AAA	4
294570	AAA	5
294594	AAA	5
295741	AAA	5
296332	AAA	5
298696	AAA	5
300398	AAA	5
302302	AAA	3
305152	AAA	1
305386	AAA	5
305539	AAA	0
306107	AAA	5
306466	AAA	5
306897	AAA	5
307061	AAA	5
307866	AAA	4
311917	AAA	5
312537	AAA	5
312782	AAA	5
318933	AAA	5
319047	AAA	5
321942	AAA	5
324002	AAA	5
324084	AAA	5
324282	AAA	5
331358	AAA	6
332789	AAA	5
333059	AAA	5
333323	AAA	5
334259	AAA	2
334333	AAA	1
335764	AAA	8
336207	AAA	5
339972	AAA	5
341872	AAA	5
342007	AAA	6
342514	AAA	5
342972	AAA	5
343446	AAA	5
344282	AAA	5
345068	AAA	5
345357	AAA	5
346025	AAA	5
346843	AAA	0
350188	AAA	5
354858	AAA	0
357668	AAA	3
364177	AAA	4
365244	AAA	5
365642	AAA	5
366483	AAA	5
368194	AAA	5
368824	AAA	5
368963	AAA	5
376439	AAA	5
376581	AAA	5
380953	AAA	5
383254	AAA	5
386924	AAA	5
386952	AAA	5
388722	AAA	5
388885	AAA	5
390890	AAA	8
392756	AAA	5
392931	AAA	5
393207	AAA	5
396872	AAA	5
398552	AAA	5
401869	AAA	5
402470	AAA	5
404804	AAA	5
405088	AAA	5
405961	AAA	0
414117	AAA	5
415969	AAA	6
420087	AAA	3
429958	AAA	5
441018	AAA	5
441888	AAA	5
442442	AAA	2
444677	AAA	5
470588	AAA	3
489455	AAA	5
494424	AAA	0
495284	AAA	5
498857	AAA	5
508818	AAA	5
512460	AAA	5
544103	AAA	5
550383	AAA	5
564450	AAA	5
568601	AAA	2
572652	AAA	5
580389	AAA	5
581129	AAA	2
588775	AAA	5
591774	AAA	5
603861	AAA	10
606143	AAA	2
704156	AAA	5
705379	AAA	5
721259	AAA	2
749412	AAA	5
760729	AAA	5
905042	AAA	5
949618	AAA	5
958987	AAA	5
968578	AAA	5
969076	AAA	4
971027	AAA	5
978739	AAA	5
1035023	AAA	5
1105478	AAA	5
1352868	AAA	7
1401935	AAA	2
1402638	AAA	5
1414443	AAA	2
1456619	AAA	1
1465690	AAA	5
1472925	AAA	10
1488959	AAA	5
1518989	AAA	5
1618738	AAA	5
1620151	AAA	2
1626710	AAA	5
1640609	AAA	5
1686521	AAA	1
1729319	AAA	5
1746134	AAA	5
1758449	AAA	2
1763015	AAA	0
1765788	AAA	5
1801229	AAA	5
1801641	AAA	5
1847830	AAA	5
1860318	AAA	5
1889511	AAA	5
1889577	AAA	5
1894188	AAA	5
1938355	AAA	5
1942396	AAA	5
1970390	AAA	10
1976139	AAA	4
2011876	AAA	5
2012966	AAA	5
2051699	AAA	5
2062879	AAA	5
2065691	AAA	3
2073016	AAA	7
2080474	AAA	5
2083877	AAA	5
2084066	AAA	4
2104505	AAA	5
2122180	AAA	5
2139353	AAA	8
2143752	AAA	5
2146792	AAA	5
2149225	AAA	0
2153153	AAA	5
2155014	AAA	5
2164705	AAA	1
2171627	AAA	5
2182846	AAA	5
2194100	AAA	5
2197016	AAA	5
2208424	AAA	5
2229865	AAA	5
2255601	AAA	2
2268379	AAA	5
2278464	AAA	5
2293923	AAA	5
2312620	AAA	3
2318055	AAA	5
2324976	AAA	0
2329342	AAA	5
2339528	AAA	5
2342426	AAA	5
2344901	AAA	4
2358056	AAA	5
2358969	AAA	6
2364471	AAA	5
2365101	AAA	0
2367155	AAA	5
2369266	AAA	5
2376496	AAA	5
2391984	AAA	4
2411661	AAA	5
2411778	AAA	2
2412002	AAA	5
2412967	AAA	5
2429854	AAA	1
2437837	AAA	5
2449878	AAA	5
2456480	AAA	3
2457256	AAA	5
2458355	AAA	5
2460080	AAA	5
2461190	AAA	2
2469673	AAA	4
2470694	AAA	2
2479954	AAA	5
2481901	AAA	5
2482700	AAA	5
2486127	AAA	5
2498700	AAA	5
2516503	AAA	5
2518069	AAA	5
2521459	AAA	5
2523736	AAA	4
2529279	AAA	5
2532302	AAA	5
2536991	AAA	5
2542724	AAA	0
2550279	AAA	5
2551220	AAA	5
2552472	AAA	2
2555340	AAA	5
2557283	AAA	5
2559575	AAA	5
2562034	AAA	5
2566163	AAA	5
2566592	AAA	5
2569324	AAA	5
2574528	AAA	5
2574583	AAA	5
2576122	AAA	2
2578995	AAA	5
2586560	AAA	5
2594139	AAA	5
2598871	AAA	5
2599352	AAA	5
2600688	AAA	5
2606098	AAA	5
2613116	AAA	5
2617002	AAA	5
2620584	AAA	0
2639449	AAA	4
2639540	AAA	5
2639641	AAA	5
2641155	AAA	5
2643002	AAA	5
2645733	AAA	5
2649826	AAA	5
2650282	AAA	5
2664024	AAA	5
2666246	AAA	5
2669816	AAA	5
2671132	AAA	5
2676809	AAA	3
2678643	AAA	5
2685865	AAA	5
2688067	AAA	5
2689958	AAA	5
2691206	AAA	5
2691244	AAA	4
2694424	AAA	5
2698257	AAA	5
6516	AAA	5
24734	AAA	5
26192	AAA	5
28061	AAA	5
31600	AAA	5
46844	AAA	5
52765	AAA	5
55104	AAA	5
58071	AAA	5
58316	AAA	5
62487	AAA	5
63165	AAA	5
70011	AAA	5
75255	AAA	5
79403	AAA	3
85092	AAA	4
85144	AAA	5
85302	AAA	5
87431	AAA	3
95755	AAA	2
101116	AAA	5
107489	AAA	5
108872	AAA	5
109155	AAA	5
111512	AAA	0
117818	AAA	5
119902	AAA	4
121349	AAA	5
124064	AAA	5
125018	AAA	5
130034	AAA	5
130547	AAA	5
130636	AAA	5
131390	AAA	5
133816	AAA	5
133922	AAA	5
135471	AAA	5
139033	AAA	5
141506	AAA	1
146503	AAA	5
149741	AAA	5
149962	AAA	5
151587	AAA	3
152668	AAA	1
158707	AAA	3
164944	AAA	5
165226	AAA	1
167961	AAA	5
174024	AAA	5
174094	AAA	5
174745	AAA	5
175447	AAA	5
175772	AAA	1
183057	AAA	5
185350	AAA	5
199636	AAA	5
199897	AAA	5
200804	AAA	5
205494	AAA	5
228021	AAA	5
228383	AAA	5
232307	AAA	5
235068	AAA	5
236875	AAA	5
237274	AAA	5
243510	AAA	5
244246	AAA	5
248581	AAA	5
252073	AAA	5
254625	AAA	5
258587	AAA	5
260623	AAA	5
263251	AAA	5
263543	AAA	5
263952	AAA	5
266524	AAA	5
273346	AAA	5
274947	AAA	5
275674	AAA	3
275792	AAA	5
277123	AAA	5
281077	AAA	5
281636	AAA	5
285315	AAA	5
287040	AAA	5
287204	AAA	5
287210	AAA	5
288994	AAA	0
289449	AAA	5
290164	AAA	5
292525	AAA	5
292775	AAA	5
293824	AAA	5
294496	AAA	5
294655	AAA	5
295060	AAA	5
295075	AAA	5
296424	AAA	5
298034	AAA	5
298838	AAA	5
301967	AAA	5
302476	AAA	5
303521	AAA	5
303985	AAA	5
304465	AAA	5
306646	AAA	5
309142	AAA	5
310412	AAA	5
311235	AAA	5
311659	AAA	0
313937	AAA	5
315076	AAA	5
315744	AAA	5
323370	AAA	5
323805	AAA	0
328024	AAA	5
328734	AAA	0
329659	AAA	5
330594	AAA	5
332884	AAA	5
334441	AAA	5
335247	AAA	5
337748	AAA	1
338407	AAA	5
341876	AAA	2
345440	AAA	5
345519	AAA	5
346118	AAA	5
348275	AAA	2
348807	AAA	5
350156	AAA	5
350939	AAA	5
351336	AAA	5
353665	AAA	5
354170	AAA	5
356170	AAA	4
358182	AAA	5
364957	AAA	5
369834	AAA	5
371710	AAA	5
373872	AAA	5
375260	AAA	5
375646	AAA	5
377546	AAA	5
381642	AAA	5
382095	AAA	5
383180	AAA	3
383600	AAA	5
383723	AAA	5
384203	AAA	5
384725	AAA	5
387533	AAA	2
387954	AAA	0
388147	AAA	2
391249	AAA	5
396599	AAA	4
396655	AAA	5
398171	AAA	5
398349	AAA	5
400147	AAA	5
400682	AAA	5
401404	AAA	5
402204	AAA	5
402727	AAA	5
402961	AAA	5
404356	AAA	5
406671	AAA	5
406682	AAA	5
409100	AAA	5
409703	AAA	5
410092	AAA	5
411971	AAA	5
418731	AAA	5
421455	AAA	5
424577	AAA	5
429858	AAA	5
431025	AAA	5
439305	AAA	5
440319	AAA	3
442064	AAA	5
442132	AAA	5
446108	AAA	5
447481	AAA	5
468120	AAA	2
468694	AAA	5
470982	AAA	5
476603	AAA	5
481022	AAA	3
483800	AAA	5
484897	AAA	5
485962	AAA	5
488382	AAA	0
488990	AAA	5
500113	AAA	5
503889	AAA	5
514526	AAA	0
518808	AAA	5
522482	AAA	1
527100	AAA	5
527801	AAA	4
533068	AAA	5
537081	AAA	5
544253	AAA	5
548120	AAA	5
561467	AAA	0
567922	AAA	0
569505	AAA	5
570317	AAA	5
574505	AAA	5
588477	AAA	5
593846	AAA	5
593987	AAA	5
596288	AAA	5
598070	AAA	0
603834	AAA	5
608440	AAA	0
623710	AAA	0
623840	AAA	5
626240	AAA	5
628088	AAA	1
628312	AAA	0
630142	AAA	2
637665	AAA	5
639053	AAA	5
642878	AAA	2
648130	AAA	5
676546	AAA	4
677186	AAA	5
677281	AAA	0
684180	AAA	5
687698	AAA	5
696073	AAA	5
696578	AAA	3
852847	AAA	2
998493	AAA	5
1045203	AAA	5
1112555	AAA	5
1183831	AAA	3
1268696	AAA	5
1336190	AAA	0
1398979	AAA	4
1469279	AAA	0
1471214	AAA	5
1484804	AAA	5
1511033	AAA	5
1576513	AAA	5
1609002	AAA	5
1629771	AAA	5
1676594	AAA	0
1686551	AAA	1
1689639	AAA	2
1715896	AAA	5
1721270	AAA	5
1757766	AAA	5
1773377	AAA	5
1799111	AAA	5
1818673	AAA	1
1839386	AAA	1
1926668	AAA	5
1947156	AAA	5
1967783	AAA	5
1975209	AAA	5
2010232	AAA	5
2045084	AAA	1
2057803	AAA	5
2085209	AAA	5
2086400	AAA	5
2148681	AAA	5
2158048	AAA	1
2158196	AAA	2
2165164	AAA	5
2168833	AAA	1
2207874	AAA	3
2240349	AAA	5
2244332	AAA	5
2273119	AAA	3
2277857	AAA	5
2297896	AAA	5
2313257	AAA	0
2330254	AAA	5
2355470	AAA	5
2363863	AAA	5
2369415	AAA	4
2375975	AAA	5
2397661	AAA	5
2398313	AAA	5
2404408	AAA	2
2425993	AAA	5
2432796	AAA	5
2434159	AAA	5
2436812	AAA	2
2467267	AAA	5
2473538	AAA	5
2474849	AAA	1
2494700	AAA	5
2500258	AAA	5
2507842	AAA	1
2509639	AAA	5
2514368	AAA	5
2514898	AAA	5
2521865	AAA	5
2522927	AAA	5
2540168	AAA	3
2546445	AAA	1
2551797	AAA	5
2551932	AAA	2
2574990	AAA	5
2578676	AAA	5
2581477	AAA	5
2584873	AAA	5
2595841	AAA	5
2596621	AAA	5
2601889	AAA	5
2602338	AAA	2
2606802	AAA	2
2624961	AAA	5
2630087	AAA	0
2633226	AAA	5
2642616	AAA	5
2642935	AAA	5
2648611	AAA	5
2649800	AAA	5
2654628	AAA	5
2677624	AAA	5
2680312	AAA	5
2688166	AAA	4
2690062	AAA	1
2692514	AAA	5
2694788	AAA	3
23629	BBB	3
25107	BBB	7
27891	BBB	4
29144	BBB	6
31663	BBB	7
33666	BBB	4
34229	BBB	6
34353	BBB	6
34431	BBB	1
34694	BBB	0
34756	BBB	3
34863	BBB	7
35812	BBB	1
39655	BBB	7
50993	BBB	6
52899	BBB	2
58089	BBB	2
62631	BBB	5
70608	BBB	7
71433	BBB	0
72070	BBB	0
74695	BBB	6
74734	BBB	6
75399	BBB	6
78645	BBB	4
79378	BBB	0
82535	BBB	7
82741	BBB	7
83254	BBB	7
84245	BBB	7
84664	BBB	6
86291	BBB	1
87604	BBB	0
87732	BBB	6
88580	BBB	0
91322	BBB	6
92274	BBB	4
92832	BBB	6
92947	BBB	7
92993	BBB	6
94616	BBB	6
96291	BBB	0
97154	BBB	6
98313	BBB	7
102849	BBB	0
104054	BBB	7
108377	BBB	6
108589	BBB	7
109938	BBB	7
110881	BBB	7
116603	BBB	6
117071	BBB	2
120994	BBB	2
122524	BBB	0
123379	BBB	0
123860	BBB	7
126322	BBB	4
126411	BBB	1
127209	BBB	0
128776	BBB	0
133155	BBB	7
133531	BBB	0
133748	BBB	5
141823	BBB	2
142324	BBB	5
143741	BBB	7
143854	BBB	0
145544	BBB	7
147876	BBB	5
151697	BBB	7
152153	BBB	5
152910	BBB	6
152929	BBB	6
153212	BBB	7
153704	BBB	4
154027	BBB	6
154125	BBB	6
154540	BBB	7
155735	BBB	0
156835	BBB	6
161678	BBB	1
165243	BBB	6
169515	BBB	2
170356	BBB	1
171377	BBB	0
173316	BBB	5
173335	BBB	6
174321	BBB	0
177639	BBB	0
179605	BBB	3
182824	BBB	7
183806	BBB	2
185240	BBB	0
185349	BBB	7
186670	BBB	6
186780	BBB	2
186988	BBB	5
187793	BBB	6
188152	BBB	7
192424	BBB	7
193822	BBB	6
197595	BBB	7
198956	BBB	6
199520	BBB	7
200863	BBB	0
200905	BBB	7
203108	BBB	4
203481	BBB	7
203652	BBB	0
204746	BBB	7
205231	BBB	0
226374	BBB	6
226827	BBB	7
228049	BBB	0
228235	BBB	0
229240	BBB	7
229426	BBB	7
230348	BBB	0
232600	BBB	0
232695	BBB	7
232745	BBB	0
235097	BBB	3
237304	BBB	4
237913	BBB	4
242149	BBB	3
245404	BBB	3
247267	BBB	5
248103	BBB	7
249534	BBB	7
251351	BBB	6
252340	BBB	4
252652	BBB	0
253250	BBB	0
255347	BBB	6
255998	BBB	7
256215	BBB	0
258402	BBB	0
259182	BBB	0
262294	BBB	4
262454	BBB	6
262741	BBB	7
263499	BBB	7
263531	BBB	0
265405	BBB	0
265958	BBB	3
267761	BBB	6
267853	BBB	0
269076	BBB	1
269289	BBB	0
270399	BBB	0
270567	BBB	6
271036	BBB	7
272580	BBB	7
273731	BBB	6
273877	BBB	6
276717	BBB	7
277733	BBB	6
278447	BBB	7
280962	BBB	0
281564	BBB	7
284076	BBB	7
285633	BBB	7
285912	BBB	7
288380	BBB	2
288990	BBB	4
290550	BBB	7
291037	BBB	7
291194	BBB	6
291701	BBB	0
292027	BBB	1
294381	BBB	4
294961	BBB	5
294999	BBB	2
295754	BBB	7
296408	BBB	0
297484	BBB	6
298322	BBB	7
298476	BBB	7
299561	BBB	0
302550	BBB	0
305945	BBB	0
306886	BBB	7
306984	BBB	0
309175	BBB	6
309709	BBB	5
309734	BBB	6
311042	BBB	1
312141	BBB	1
313810	BBB	6
315186	BBB	6
316841	BBB	7
318056	BBB	7
318101	BBB	1
319209	BBB	7
322745	BBB	0
322960	BBB	3
323914	BBB	0
324236	BBB	4
325511	BBB	6
325879	BBB	6
326012	BBB	1
329226	BBB	7
329321	BBB	4
329800	BBB	6
330376	BBB	0
331354	BBB	6
331844	BBB	7
333129	BBB	1
333837	BBB	1
334291	BBB	4
334794	BBB	1
335421	BBB	7
335600	BBB	1
335910	BBB	5
336165	BBB	1
338056	BBB	7
338861	BBB	3
338912	BBB	0
339379	BBB	7
339526	BBB	0
339946	BBB	4
340378	BBB	0
340831	BBB	4
341040	BBB	4
341229	BBB	2
341235	BBB	0
341509	BBB	6
349040	BBB	3
349424	BBB	0
350622	BBB	6
350795	BBB	6
351271	BBB	6
351290	BBB	7
351543	BBB	1
352161	BBB	2
352364	BBB	7
353093	BBB	6
353352	BBB	1
353918	BBB	0
354058	BBB	3
354815	BBB	0
354895	BBB	4
355369	BBB	2
355998	BBB	1
357030	BBB	2
357038	BBB	0
357928	BBB	4
359170	BBB	0
360188	BBB	7
360489	BBB	5
360877	BBB	6
361603	BBB	7
362760	BBB	6
362877	BBB	1
363401	BBB	7
363416	BBB	7
363660	BBB	7
364323	BBB	0
365439	BBB	3
365452	BBB	6
365488	BBB	3
365707	BBB	7
366821	BBB	0
367304	BBB	5
367348	BBB	3
367609	BBB	7
368439	BBB	0
369212	BBB	0
370302	BBB	6
370720	BBB	6
371679	BBB	7
372624	BBB	0
374102	BBB	5
374234	BBB	6
375312	BBB	0
376617	BBB	6
377695	BBB	0
377759	BBB	6
377846	BBB	7
377905	BBB	4
378462	BBB	6
378543	BBB	7
378721	BBB	3
379402	BBB	2
379405	BBB	0
380151	BBB	0
381640	BBB	0
381722	BBB	1",,,,,
테이블 2개,university_learning,코드 모듈과 모듈 별 평균 평가 가중치와 평균 클릭 수 조회,View average evaluation weight and average number of clicks by code module and module,,"SELECT a.code_module, AVG(a.weight) AS avg_weight, AVG(sv.sum_click) AS avg_clicks FROM assessments a JOIN studentVle sv ON a.code_module = sv.code_module GROUP BY a.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,AAA	33.3333	4.3352,,,,,
테이블 1개,university_learning,특정 프레젠테이션의 평균 모듈 프레젠테이션 길이 조회,Find the average module presentation length for a specific presentation,,SELECT AVG(module_presentation_length) AS avg_presentation_length FROM courses WHERE code_presentation = '2014B';,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,239.8333,,,,,
테이블 1개,university_learning,특정 모듈의 총 프레젠테이션 수 조회,View the total number of presentations for a specific module,,SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE code_module = 'AAA';,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,2,,,,,
테이블 1개,university_learning,모듈 코드와 각 모듈의 최소 모듈 프레젠테이션 길이 조회,Look up module codes and minimum module presentation length for each module,,"SELECT code_module, MIN(module_presentation_length) AS min_presentation_length FROM courses GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"AAA        268
BBB        234
CCC        241
DDD        240
EEE        241
FFF        240
GGG        241",,,,,
테이블 1개,university_learning,특정 모듈의 최대 모듈 프레젠테이션 길이 조회,Query the maximum module presentation length for a specific module,,SELECT MAX(module_presentation_length) AS max_presentation_length FROM courses WHERE code_module = 'BBB';,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,268,,,,,
테이블 1개,university_learning,모듈 프레젠테이션 길이가 평균 이상인 모듈 조회,Module views with above-average module presentation length,,SELECT code_module FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) > (SELECT AVG(module_presentation_length) FROM courses);,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,3,,"AAA
EEE
GGG",,,,,
테이블 1개,university_learning,모듈과 각 모듈의 평균 모듈 프레젠테이션 길이와 최대 모듈 프레젠테이션 길이 조회,View modules and the average module presentation length and maximum module presentation length for each module.,,"SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length, MAX(module_presentation_length) AS max_presentation_length FROM courses GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"AAA	268.5000	269
BBB	251.0000	268
CCC	255.0000	269
DDD	251.0000	262
EEE	259.3333	269
FFF	254.5000	269
GGG	257.0000	269",,,,,
테이블 1개,university_learning,특정 모듈의 평균 모듈 프레젠테이션 길이와 최소 모듈 프레젠테이션 길이 조회,View average module presentation length and minimum module presentation length for a specific module,,"SELECT AVG(module_presentation_length) AS avg_presentation_length, MIN(module_presentation_length) AS min_presentation_length FROM courses WHERE code_module = 'CCC';","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,255.0000	241,,,,,
테이블 1개,university_learning,각 프레젠테이션의 평균 모듈 프레젠테이션 길이와 총 모듈 수 조회,View the average module presentation length and total number of modules for each presentation,,"SELECT AVG(module_presentation_length) AS avg_presentation_length, COUNT(DISTINCT code_module) AS num_modules FROM courses;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,255.5455	7,,,,,
테이블 1개,university_learning,프레젠테이션 길이가 200보다 큰 각 프레젠테이션의 수 조회,Retrieve the number of presentations for each presentation with presentation length greater than 200,,SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE module_presentation_length > 200;,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,4,,,,,
테이블 1개,university_learning,프레젠테이션 길이가 150보다 작은 각 모듈 코드의 수 조회,Retrieve the number of codes in each module whose presentation length is less than 150,,SELECT COUNT(DISTINCT code_module) AS num_modules FROM courses WHERE module_presentation_length < 150;,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,0,,,,,
테이블 1개,university_learning,2017년에 시작하는 각 모듈 코드의 수 조회,View the number of codes for each module starting in 2017,,SELECT COUNT(DISTINCT code_module) AS num_modules FROM courses WHERE code_presentation LIKE '2017%';,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,0,,,,,
테이블 1개,university_learning,모듈 코드와 모듈 코드별로 프레젠테이션 수를 내림차순으로 조회,View module code and number of presentations by module code in descending order,,"SELECT code_module, COUNT(DISTINCT code_presentation) AS num_presentations FROM courses GROUP BY code_module ORDER BY num_presentations DESC;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"BBB	4
DDD	4
FFF	4
EEE	3
GGG	3
AAA	2
CCC	2",,,,,
테이블 1개,university_learning,모듈 코드와 평균 프레젠테이션 길이가 150보다 큰 경우 평균 길이를 내림차순으로 반환,"If module code and average presentation length are greater than 150, return average length in descending order",,"SELECT code_module, AVG(module_presentation_length) AS avg_length FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) > 150 ORDER BY avg_length DESC;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"AAA	268.5000
EEE	259.3333
GGG	257.0000
CCC	255.0000
FFF	254.5000
BBB	251.0000
DDD	251.0000",,,,,
테이블 1개,university_learning,모듈 코드와 모듈 코드별 평가 수 내림차순으로 반환,Returns the module code and the number of evaluations for each module code in descending order.,,"SELECT code_module, COUNT(*) AS num_assessments FROM assessments GROUP BY code_module ORDER BY num_assessments DESC;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,7,,"FFF	52
BBB	42
DDD	35
GGG	30
CCC	20
EEE	15
AAA	12",,,,,
테이블 1개,university_learning,프레젠테이션 코드와 각 프레젠테이션 코드별 학생 평균 수강 학점 내림차순으로 반환,Returns presentation codes and student average course credits for each presentation code in descending order.,,"SELECT code_presentation, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY code_presentation ORDER BY avg_credits DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"2013B	88.9502
2013J	83.7384
2014B	80.8240
2014J	80.2854",,,,,
테이블 1개,university_learning,"모듈 코드, 프레젠테이션 코드와 프레젠테이션 코드별 학생 수 내림차순으로 반환","Returns module code, presentation code, and number of students by presentation code in descending order.",,"SELECT code_module, code_presentation, COUNT(*) AS num_students FROM studentRegistration GROUP BY code_module, code_presentation ORDER BY num_students DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,7,,"BBB	2014J	2211
BBB	2013J	2193
BBB	2013B	1767
BBB	2014B	1521
CCC	2014B	1343
AAA	2013J	383
AAA	2014J	329",,,,,
테이블 1개,university_learning,모듈 코드와 모듈 코드별 학생 수 내림차순으로 반환,Returns module code and number of students by module code in descending order.,,"SELECT code_module, COUNT(DISTINCT id_student) AS num_unique_students FROM studentRegistration GROUP BY code_module ORDER BY num_unique_students DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"BBB	7692
CCC	1343
AAA	712",,,,,
테이블 1개,university_learning,모듈 코드와 프레젠테이션 코드와 모듈 프레젠테이션 코드별 가장 최근 등록된 날짜를 반환하여 최근 등록된 날짜를 기준으로 내림차순 정렬,"Returns the most recent registration date for each module code, presentation code, and module presentation code, sorted in descending order based on the most recent registration date.",,"SELECT sr.code_module, sr.code_presentation, sr.date_registration AS last_registration FROM studentRegistration sr JOIN ( SELECT code_module, code_presentation, MAX(date_registration) AS max_date FROM studentRegistration GROUP BY code_module, code_presentation ) AS max_dates ON sr.code_module = max_dates.code_module AND sr.code_presentation = max_dates.code_presentation AND sr.date_registration = max_dates.max_date ORDER BY last_registration DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,7,,"BBB	2013B	69
AAA	2013J	48
BBB	2014J	44
BBB	2013J	32
BBB	2014B	27
CCC	2014B	12
AAA	2014J	10",,,,,
테이블 3개,university_learning,학생 연령대와 학생 연령대별 모듈 프레젠테이션의 평균 길이,Average length of module presentations by student age group and student age group,,"SELECT s.age_band, AVG(c.module_presentation_length) AS avg_length FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,3,,"55<=	265.5660
0-35	251.8162
35-55	253.9060",,,,,
테이블 2개,university_learning,학생 연령대와 학생 연령대별 평균 클릭 횟수 조회,View student age group and average number of clicks by student age group,,"SELECT s.age_band, AVG(sv.sum_click) AS avg_clicks FROM studentInfo s JOIN studentVle sv ON s.id_student = sv.id_student GROUP BY s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,3,,"35-55	4.6182
0-35	3.6962
55<=	6.4231",,,,,
테이블 2개,university_learning,성적 최종 결과와 학생의 최종 결과에 따른 학생 수 조회,Check the number of students according to the final result of the grade and the final result of the student,,"SELECT s.final_result, COUNT(*) AS num_students FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,4,,"Pass        3814
Fail        2041
Withdrawn        3061
Distinction        831",,,,,
테이블 1개,university_learning,학생들이 현재 공부하고 있는 모든 모듈의 평균학점 수,Average number of credits across all modules students are currently studying,,SELECT AVG(studied_credits) AS avg_credits FROM studentInfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,82.9271,,,,,
테이블 2개,university_learning,학생 성별과 성별에 따른 학생의 평균 등록일,Average days of enrollment for students by student gender and gender,,"SELECT s.gender, AVG(r.date_registration) AS avg_reg_date FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,"M	-81.5330
F	-70.7655",,,,,
테이블 1개,university_learning,모듈 코드와 모듈 프레젠테이션 기간이 150일을 초과하는 모든 모듈과 프레젠테이션,All modules and presentations whose module code and module presentation duration exceeds 150 days.,,"SELECT DISTINCT code_module, code_presentation FROM courses WHERE module_presentation_length > 150;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,22,,"AAA	2013J
AAA	2014J
BBB	2013B
BBB	2013J
BBB	2014B
BBB	2014J
CCC	2014B
CCC	2014J
DDD	2013B
DDD	2013J
DDD	2014B
DDD	2014J
EEE	2013J
EEE	2014B
EEE	2014J
FFF	2013B
FFF	2013J
FFF	2014B
FFF	2014J
GGG	2013J
GGG	2014B
GGG	2014J
	",,,,,
테이블 1개,university_learning,모듈 프레젠테이션 기간이 120일 미만인 프레젠테이션 수,Number of presentations with a module presentation duration of less than 120 days,,SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE module_presentation_length < 120;,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,1,,0,,,,,
테이블 1개,university_learning,모듈 코드와 각 모듈의 평균 프레젠테이션 길이 조회,View module codes and average presentation length for each module,,"SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,7,,"AAA	268.5000
BBB	251.0000
CCC	255.0000
DDD	251.0000
EEE	259.3333
FFF	254.5000
GGG	257.0000",,,,,
테이블 1개,university_learning,장애가 있는 학생들의 최고 학력 조회,Check the highest academic achievement of students with disabilities,,SELECT DISTINCT highest_education FROM studentInfo WHERE disability = 'Y';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"A Level or Equivalent
Lower Than A Level
HE Qualification
No Formal quals",,,,,
테이블 2개,university_learning,학생 성별과 성별에 따른 학생들의 평균 수강 기간 조회,View students' average course duration by gender and gender,,"SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_course_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,2,,"M	148.6726
F	116.0621",,,,,
테이블 1개,university_learning,장애가 있는 학생들의 거주 지역명 조회,Search for residential area names of students with disabilities,,SELECT DISTINCT region FROM studentInfo WHERE disability = 'Y';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"South West Region
North Western Region
Scotland
West Midlands Region
Wales
London Region
South Region
East Anglian Region
South East Region
East Midlands Region
North Region
Yorkshire Region
Ireland",,,,,
테이블 1개,university_learning,학생들의 평균 모듈 재시도 횟수,Average number of module retries by students,,SELECT AVG(num_of_prev_attempts) AS avg_attempts FROM studentInfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,0.14,,,,,
테이블 1개,university_learning,Pass 등급을 받은 학생들의 연령대와 연령대별 평균 학점,Age group and average grade point average for students who received a 'Pass' grade,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"55<=	73.5484
0-35	79.9916
35-55	74.8172",,,,,
테이블 1개,university_learning,장애를 가진 학생의 최고 학력 수준과 그에 따른 학생 수,Highest educational level and corresponding number of students with disabilities,,"SELECT highest_education, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY highest_education;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"A Level or Equivalent	386
Lower Than A Level	431
HE Qualification	52
No Formal quals	1",,,,,
테이블 2개,university_learning,지역명과 각 지역별로 사용된 VLE 자료의 수 조회,Search for region name and number of VLE materials used in each region,,"SELECT s.region, COUNT(DISTINCT v.id_site) AS num_materials FROM studentInfo s JOIN vle v ON s.code_module = v.code_module AND s.code_presentation = v.code_presentation GROUP BY s.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"East Anglian Region	1763
East Midlands Region	1763
Ireland	1763
London Region	1763
North Region	1763
North Western Region	1763
Scotland	1763
South East Region	1763
South Region	1763
South West Region	1763
Wales	1763
West Midlands Region	1763
Yorkshire Region	1763",,,,,
테이블 1개,university_learning,A Level 또는 해당 학위'를 가진 학생이 거주하는 지역명 조회,Search for the name of the region where a student with an 'A Level or Equivalent' degree resides,,SELECT DISTINCT region FROM studentInfo WHERE highest_education = 'A Level or Equivalent';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"East Anglian Region
Wales
London Region
West Midlands Region
South West Region
North Western Region
South East Region
North Region
South Region
Ireland
Scotland
East Midlands Region
Yorkshire Region",,,,,
테이블 3개,university_learning,등록 및 평가가 있는 학생 중 지역명과 지역별 등록된 학생 수,"Among students with registration and evaluation, region name and number of registered students by region",,"SELECT s.region, COUNT(DISTINCT r.id_student) AS num_students FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student GROUP BY s.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,13,,"East Anglian Region	1032
East Midlands Region	716
Ireland	464
London Region	866
North Region	357
North Western Region	751
Scotland	964
South East Region	653
South Region	854
South West Region	704
Wales	908
West Midlands Region	838
Yorkshire Region	640",,,,,
테이블 1개,university_learning,Fail 등급을 받은 학생들의 연령대와 연령대별 평균 학점 ,Age group of students who received a 'Fail' grade and average grade by age group,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	82.5388
35-55	78.8357
55<=	75.0000",,,,,
테이블 1개,university_learning,Withdrawn 등급을 받은 학생들의 연령대와 연령대별 평균 학점 ,Age group and average grade point average for students who received a 'Withdrawn' grade,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	90.5819
35-55	90.4715
55<=	77.2727",,,,,
테이블 1개,university_learning,Distinction 등급을 받은 연령대와 연령대 별 평균 학점 조회,View the age group that received the 'Distinction' grade and the average grade by age group,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	83.0694
35-55	78.3333
55<=	68.5714",,,,,
테이블 1개,university_learning,지역명과 지역별 Pass 등급을 받은 학생들의 평균 학점,Average grade point average of students who received a 'Pass' grade by region and region,,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"Scotland        71.3780
East Anglian Region        77.8605
South Region        77.2853
Yorkshire Region        79.1304
South West Region        79.7711
South East Region        80.4259
North Region        78.4553
West Midlands Region        81.1356
Ireland        71.5532
London Region        85.8304
Wales        77.5515
North Western Region        77.2851
East Midlands Region        79.5977",,,,,
테이블 1개,university_learning,지역명과 지역별 Fail 등급을 받은 학생들의 평균 학점,Average grade point average of students who received a 'Fail' grade by region and region,,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"East Anglian Region	82.9710
South West Region	88.5938
North Western Region	78.3708
West Midlands Region	76.5868
South Region	81.4286
Scotland	80.3965
East Midlands Region	89.7426
Wales	79.0476
London Region	83.5337
Ireland	70.3723
South East Region	83.1977
North Region	84.4286
Yorkshire Region	83.6194",,,,,
테이블 1개,university_learning,지역명과 지역별 Withdrawn 등급을 받은 학생들의 평균 학점,Average grade point average for students who received a regional name and 'Withdrawn' grade by region,,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"East Anglian Region	94.2675
Scotland	89.0244
London Region	94.6573
West Midlands Region	89.9846
South East Region	91.2439
North Western Region	92.2459
South West Region	91.8837
Yorkshire Region	94.1089
East Midlands Region	90.3704
North Region	87.8400
Wales	88.0588
Ireland	78.9706
South Region	83.8697",,,,,
테이블 1개,university_learning,지역명과 지역별 Distinction 등급을 받은 학생들의 평균 학점 조회,Check the average grade of students who received the regional name and 'Distinction' grade by region,,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"Wales	87.4026
East Anglian Region	79.6296
Scotland	73.1481
Ireland	80.0000
South East Region	85.3804
North Region	73.5897
South West Region	81.8182
West Midlands Region	75.8824
South Region	85.7576
London Region	75.0000
Yorkshire Region	87.0588
East Midlands Region	80.2041
North Western Region	77.8723",,,,,
테이블 2개,university_learning,연령대와 연령대별 평가 가중치의 평균 조회,Average views of age group and evaluation weight for each age group,,"SELECT s.age_band, AVG(a.weight) AS avg_weight FROM studentInfo s JOIN assessments a ON s.code_module = a.code_module AND s.code_presentation = a.code_presentation GROUP BY s.age_band;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"55<=	31.3218
0-35	21.5374
35-55	21.4332",,,,,
테이블 1개,university_learning,장애가 없는 학생들의 지역명과 지역별 학생수 조회,Check the name of the region and number of students by region for students without disabilities,,"SELECT region, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'N' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"Scotland	859
East Anglian Region	922
Wales	844
South Region	768
London Region	793
West Midlands Region	769
South East Region	582
Yorkshire Region	608
South West Region	632
North Region	347
Ireland	451
East Midlands Region	639
North Western Region	663",,,,,
테이블 1개,university_learning,Withdrawn 등급을 받은 학생 중 장애여부와 학생들의 수 조회,Check the status of students with disabilities and the number of students who received a 'Withdrawn' grade,,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"N	2723
Y	338",,,,,
테이블 1개,university_learning,Pass 등급을 받은 학생 중 장애여부와 학생들의 수 조회,Check whether students have disabilities and the number of students who received a 'Pass' grade,,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Pass' GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"N	3533
Y	281",,,,,
테이블 1개,university_learning,Fail 등급을 받은 학생 중 장애 여부와 학생들의 수 조회,Check whether students have disabilities and the number of students who received a 'Fail' grade,,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Fail' GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"N	1837
Y	204",,,,,
테이블 1개,university_learning,Distinction 등급을 받은 학생 중 장애 여부와 학생 수 조회,Check whether students have disabilities and the number of students who received a 'Distinction' grade,,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Distinction' GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"N	784
Y	47",,,,,
테이블 1개,university_learning,35-55세 연령대 학생들의 지역명과 평균 학점 조회,Check the region name and average grade of students aged '35-55',,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE age_band = '35-55' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"East Anglian Region	82.8681
South East Region	84.8649
North Western Region	80.7112
Yorkshire Region	80.4857
Scotland	74.9461
West Midlands Region	83.2474
North Region	77.4432
South West Region	82.8626
South Region	76.3240
Ireland	70.5801
Wales	75.8173
East Midlands Region	85.0439
London Region	86.4334",,,,,
테이블 1개,university_learning,이전 시도(전학)가 있는 학생들 중 장애 여부와 학생들의 수 조회,Check whether students have disabilities and the number of students who have attempted transfer,,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE num_of_prev_attempts > 1 GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"N	217
Y	39",,,,,
테이블 1개,university_learning,Distinction 등급을 받은 학생들의 성별에 따른 평균 학점,Average grade by gender for students who received a 'Distinction' grade,,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M	75.2162
F	82.5000",,,,,
테이블 1개,university_learning,Pass 등급을 받은 학생들의 성별에 따른 평균 학점,Average grade by gender for students who received a ''Pass'' grade,,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M	77.4799
F	78.2139",,,,,
테이블 1개,university_learning,Fail 등급을 받은 학생들의 성별에 따른 평균 학점,Average GPA by gender for students who received a 'Fail' grade,,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"F	82.3754
M	78.8508",,,,,
테이블 1개,university_learning,Withdrawn 등급을 받은 학생들의 성별에 따른 평균 학점,Average GPA by gender for students who received a 'Withdrawn' grade,,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"F	91.6234
M	87.2716",,,,,
테이블 1개,university_learning,장애여부가 'Y'인 학생들의 최종 결과와 학생 수 조회,View final results and number of students with disability='Y',,"SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"Fail	204
Withdrawn	338
Pass	281
Distinction	47",,,,,
테이블 1개,university_learning,장애여부가 'N'인 학생들의 최종 결과와 학생 수 조회,View final results and number of students without disability='N',,"SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'N' GROUP BY final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"Pass	3533
Fail	1837
Withdrawn	2723
Distinction	784",,,,,
테이블 1개,university_learning,이전 시도(전학)가 있는 학생들의 연령대와 평균 학점 조회,Check the age range and average grade of students with previous attempts (transfer),,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE num_of_prev_attempts > 0 GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	104.4420
35-55	98.8244
55<=	60.0000",,,,,
테이블 1개,university_learning,Withdrawn 등급을 받은 학생들의 연령대와 평균 학점 조회,Check the age group and average grade of students who received a 'Withdrawn' grade,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	90.5819
35-55	90.4715
55<=	77.2727",,,,,
테이블 1개,university_learning,Pass 등급을 받은 학생들의 연령대와 평균 학점 조회,View the age range and average grade of students who received a 'Pass' grade,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"55<=	73.5484
0-35	79.9916
35-55	74.8172",,,,,
테이블 1개,university_learning,Fail 등급을 받은 학생들의 연령대와 평균 학점 조회,Check the age range and average grade of students who received a 'Fail' grade,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	82.5388
35-55	78.8357
55<=	75.0000",,,,,
테이블 1개,university_learning,Distinction 등급을 받은 학생들의 연령대와 평균 학점 조회,View the age range and average grade of students who received 'Distinction' grades,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	83.0694
35-55	78.3333
55<=	68.5714",,,,,
테이블 1개,university_learning,장애가 있는 학생들 중 Distinction 등급으로 수료한 학생들의 연령대와 평균 학점 조회,Check the age range and average grade point average of students with disabilities who completed the course with 'Distinction'.,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Distinction' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"0-35	82.0000
35-55	88.2353",,,,,
테이블 1개,university_learning,장애가 없는 학생들 중 Distinction 등급으로 수료한 학생들의 연령대와 평균 학점 조회,Check the age range and average grade point average of students without disabilities who completed the course with a 'Distinction' grade.,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Distinction' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	83.1439
35-55	77.8468
55<=	68.5714",,,,,
테이블 1개,university_learning,장애가 있는 학생들 중 Pass 성적으로 수료한 학생들의 연령대와 평균 학점 조회,Check the age range and average grade of students with disabilities who completed the course with a 'Pass' grade.,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Pass' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"0-35	80.6349
35-55	83.1522",,,,,
테이블 1개,university_learning,장애가 없는 학생들 중 Pass 성적으로 수료한 학생들의 연령대와 평균 학점 조회,Check the age range and average grade of students without disabilities who completed the course with a 'Pass' grade.,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Pass' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"55<=	73.5484
0-35	79.9363
35-55	74.2287",,,,,
테이블 1개,university_learning,장애가 있는 학생들 중 Fail 성적으로 수료한 학생들의 연령대와 평균 학점 조회,Check the age range and average grade point average of students with disabilities who completed the course with a 'Fail' grade.,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Fail' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"0-35	88.6538
35-55	98.6458",,,,,
테이블 1개,university_learning,장애가 없는 학생들 중 Fail 성적으로 수료한 학생들의 연령대와 평균 학점 조회,Check the age range and average grade of students who completed the course with a 'Fail' grade among students without disabilities.,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Fail' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	81.8199
35-55	76.9565
55<=	75.0000",,,,,
테이블 1개,university_learning,장애가 있는 학생들 중 중도포기한 학생들의 연령대와 평균 학점 조회,Check the age range and average grade point average of students with disabilities who have 'Withdrawn' grade.,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Withdrawn' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"0-35	100.4303
35-55	106.9149",,,,,
테이블 1개,university_learning,장애가 없는 학생들 중 중도포기한 학생들의 연령대와 평균 학점 조회,Check the age range and average grade of students who 'Withdrawn' grade among students without disabilities,,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Withdrawn' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	89.3477
35-55	88.4510
55<=	77.2727",,,,,
테이블 1개,university_learning,나이대가 0-35세이고 학점이 120 이상인 학생들의 최종 결과와 학생 수 조회,View final results and number of students with age range '0-35' and GPA 120 or higher,,"SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE age_band = '0-35' AND studied_credits >= 120 GROUP BY final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"Pass	644
Withdrawn	801
Fail	423
Distinction	154",,,,,
테이블 1개,university_learning,대학 학력을 가진 비장애 학생들 중 학점 평균이 90보다 낮은 지역명과 평균 학점 조회,"Among non-disabled students with a college degree, look up the name of the region and average grade with a grade point average lower than 90.",,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) < 90;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,11,,"Scotland	76.2162
East Anglian Region	85.2941
North Region	87.1111
Yorkshire Region	80.6579
Ireland	77.3333
West Midlands Region	80.2941
Wales	83.7931
South Region	78.9130
North Western Region	78.1333
London Region	81.3964
East Midlands Region	80.4839",,,,,
테이블 1개,university_learning,대학 학력을 가진 장애 학생들 중 학점 평균이 90보다 낮은 지역명과 평균 학점 조회,Check the name of the region and average grade point average among students with disabilities who have a 'HE Qualification' and a grade point average lower than 90.,,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'Y' GROUP BY region HAVING AVG(studied_credits) < 90;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"London Region	84.0000
South Region	82.5000",,,,,
테이블 1개,university_learning,대학 학력을 가진 비장애 학생들 중 학점 평균이 90보다 높은 지역명과 평균 학점 조회,"Among non-disabled students with a 'HE Qualification', look up the name of the region and average grade with a grade point average higher than 90.",,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) > 90;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"South East Region	99.3529
South West Region	90.0714",,,,,
테이블 1개,university_learning,대학 학력을 가진 장애 학생들 중 학점 평균이 90보다 높은 지역명과 평균 학점 조회,Check the name of the region and average grade with a grade point average higher than 90 among disabled students with a 'HE Qualification',,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'Y' GROUP BY region HAVING AVG(studied_credits) > 90;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,5,,"North Western Region	102.0000
Scotland	90.9677
South East Region	150.0000
West Midlands Region	120.0000
South West Region	120.0000",,,,,
테이블 1개,university_learning,55세 이상인 학생들 중 Withdrawn 등급을 받은 학생들의 지역별 평균 학점이 60보다 높은 경우 지역명과 평균 학점 조회,"If the average grade by region for students over 55 years old who received a withdrawal grade is higher than 60, check the name of the region and average grade.",,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE age_band = '55<=' AND final_result = 'Withdrawn' GROUP BY region HAVING AVG(studied_credits) > 60;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"North Western Region	180.0000
London Region	63.3333
South Region	80.0000",,,,,
테이블 1개,university_learning,장애가 있는 학생들 중 Pass 등급을 받은 학생들의 연령대별 학생 수가 10명 이상인 경우 연령대와 학생 수 조회,"If the number of students by age group among students with disabilities who received a 'Pass' grade is 10 or more, check the age group and number of students.",,"SELECT age_band, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Pass' AND disability = 'Y' GROUP BY age_band HAVING COUNT(*) > 10;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"0-35	189
35-55	92",,,,,
테이블 2개,university_learning,아직 등록 중이며 평가에 참여하지 않은 학생들의 성별 평균 학점이 60보다 높은 경우 성별과 평균 학점 조회,View gender and GPA for students who are still enrolled and have not participated in assessments if their GPA by gender is higher than 60,,"SELECT s.gender, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_unregistration IS NULL AND sa.score IS NULL GROUP BY s.gender HAVING AVG(studied_credits) > 60;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,2,,"M	77.6643
F	80.0282",,,,,
테이블 1개,university_learning,스코틀랜드 지역에서 Withdrawn 등급을 받은 학생들의 연령대별 평균 학점이 50보다 높은 경우 연령대와 해당 학점 조회,"If the average grade for each age group of students with a 'Withdrawn' grade in 'Scotland' is higher than 50, look up the age group and corresponding grade.",,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' AND region = 'Scotland' GROUP BY age_band HAVING AVG(studied_credits) > 50;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,3,,"0-35	91.1607
35-55	85.0658
55<=	60.0000",,,,,
테이블 4개,university_learning,등록한 학생들 중 VLE 자료와 상호 작용한 학생들의 연령대별 평균 학점이 80보다 낮은 경우 연령대와 해당 평균 학점 조회,"Among registered students who interacted with VLE materials, if the average GPA by age group is lower than 80, look up the age group and corresponding average GPA",,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON s.id_student = v.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_unregistration IS NULL AND v.id_site IS NOT NULL GROUP BY s.age_band HAVING AVG(studied_credits) < 80;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,0-35	60.0000,,,,,
테이블 3개,university_learning,등록하지 않은 학생들 중 평가에 참여하지 않은 학생들의 연령대별 평균 학점이 50보다 높은 경우 연령대와 해당 학점 조회,"If the average grade by age group of students who did not participate in the evaluation among non-registered students is higher than 50, check the age group and corresponding grade.",,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_registration IS NULL AND sa.score IS NULL GROUP BY s.age_band HAVING AVG(studied_credits) > 50;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;",,2,,"35-55	90.0000
0-35	103.6364",,,,,
테이블 3개,university_learning,VLE 자료와 상호 작용한 학생들의 연령대별 평균 학점이 80보다 낮은 경우 연령대와 평균 학점 조회,"If the average GPA by age group of students who interacted with VLE materials is lower than 80, look up the average GPA by age group",,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.age_band HAVING AVG(studied_credits) < 80;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,55<=	73.7736,,,,,
테이블 2개,university_learning,등록한 학생들의 연령대별 평균 학점이 60보다 높은 경우 연령대와 해당 평균 학점 조회,"If the average GPA by age group of registered students is higher than 60, check the age group and corresponding average GPA",,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.age_band HAVING AVG(studied_credits) > 60;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"55<=	73.7736
0-35	84.3454
35-55	80.1624",,,,,
테이블 3개,university_learning,VLE 자료와 상호 작용한 학생들의 연령대별 평균 학점이 전체 학생들의 평균 학점보다 낮은 경우 해당 연령대와 평균 학점 조회,"If the average grade by age group of students who interacted with VLE materials is lower than the average grade of all students, look up the age group and average grade",,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.age_band HAVING AVG(studied_credits) < (SELECT AVG(studied_credits) FROM studentInfo);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,2,,"55<=	73.7736
35-55	80.1624",,,,,
테이블 2개,university_learning,지역별 평균 학점이 전체 학생들의 평균 학점보다 높은 경우 해당 지역명과 평균 학점 조회,"If the average grade by region is higher than the average grade of all students, look up the name of the region and average grade",,"SELECT s.region, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.region HAVING AVG(studied_credits) > (SELECT AVG(studied_credits) FROM studentInfo);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,8,,"East Anglian Region	84.0165
London Region	87.8753
West Midlands Region	83.3413
South West Region	85.2983
South East Region	84.8851
North Western Region	83.6551
Yorkshire Region	85.4297
East Midlands Region	85.6285",,,,,
테이블 3개,university_learning,VLE 자료와 상호 작용한 학생들의 연령대별 평균 학점이 전체 학생들의 평균 학점보다 낮은 경우 연령대와 평균 학점 조회,"If the average grade by age group of students who interacted with VLE materials is lower than the average grade of all students, look up the age group and average grade",,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.age_band HAVING AVG(studied_credits) < (SELECT AVG(studied_credits) FROM studentInfo);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,2,,"55<=	73.7736
35-55	80.1624",,,,,
테이블 2개,university_learning,성별 평균 학점이 전체 학생들의 평균 학점보다 높은 경우 성별과 평균 학점 조회,"If the average GPA by gender is higher than the average GPA of all students, look up the gender and average GPA",,"SELECT s.gender, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender HAVING AVG(studied_credits) > (SELECT AVG(studied_credits) FROM studentInfo);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,1,,F	83.5693,,,,,
테이블 2개,university_learning,IMD 밴드별 평균 등록 기간이 양수인 경우 IMD 밴드와 평균 등록 기간을 조회,"If the average registration period for each IMD band is a positive number, check the IMD band and average registration period.",,"SELECT s.imd_band, AVG(r.date_unregistration - r.date_registration) AS avg_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.imd_band HAVING AVG(r.date_unregistration - r.date_registration) > 0;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,11,,"80-90%	122.9862
90-100%	121.3934
20-30%	126.3231
40-50%	117.8971
50-60%	128.7293
60-70%	129.4378
0-10%	125.1854
10-20	116.7198
30-40%	124.7112
70-80%	131.3257
	150.8182",,,,,
테이블 3개,university_learning,성별에 따른 평균 등록 기간이 양수인 경우 성별과 평균 등록 기간 조회,"If the average registration period by gender is a positive number, look up the gender and average registration period",,"SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_registration_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.gender HAVING AVG(r.date_unregistration - r.date_registration) > 0;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,1,,M	112.0000,,,,,
테이블 2개,university_learning,성별에 따른 평균 등록 기간이 양수인 경우 성별과 평균 등록 기간 조회,"If the average registration period by gender is a positive number, look up the gender and average registration period",,"SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_registration_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender HAVING AVG(r.date_unregistration - r.date_registration) > 0;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"M	148.6726
F	116.0621",,,,,
테이블 2개,university_learning,모듈별로 가장 많은 학생 수를 가진 상위 5개 모듈명과 학생 수 조회,View the top 5 module names and number of students by module,,"SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module ORDER BY num_students DESC LIMIT 5;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"BBB	7692
CCC	1343
AAA	712",,,,,
테이블 2개,university_learning,등록된 학생 수를 연령대별로 반환,Returns the number of enrolled students by age group,,"SELECT si.age_band, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student WHERE sr.date_registration IS NOT NULL GROUP BY si.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,3,,"0-35	6512
35-55	3169
55<=	53",,,,,
테이블 3개,university_learning,모듈 코드와 연령대별로 자료 상호 작용 횟수의 평균을 내림차순으로 반환,Returns the average number of material interactions by module code and age group in descending order.,,"SELECT sr.code_module, si.age_band, AVG(v.sum_click) AS avg_clicks FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle v ON si.id_student = v.id_student GROUP BY sr.code_module, si.age_band ORDER BY avg_clicks DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,2,,"BBB	0-35	2.4000
CCC	0-35	1.0000",,,,,
테이블 3개,university_learning,성별과 모듈별로 자료 상호 작용 횟수의 평균 조회,Average number of views of material interactions by gender and module,,"SELECT si.gender, sr.code_module, AVG(v.sum_click) AS avg_clicks FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle v ON si.id_student = v.id_student GROUP BY si.gender, sr.code_module ORDER BY avg_clicks DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,2,,"F	BBB	2.4000
M	CCC	1.0000",,,,,
테이블 2개,university_learning,지역별 학생 수가 50명을 초과하는 경우 지역명과 학생 수 조회,"If the number of students per region exceeds 50, look up the region name and number of students.",,"SELECT si.region, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.region HAVING COUNT(DISTINCT si.id_student) > 50;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"East Anglian Region	1032
East Midlands Region	716
Ireland	464
London Region	866
North Region	357
North Western Region	751
Scotland	964
South East Region	653
South Region	854
South West Region	704
Wales	908
West Midlands Region	838
Yorkshire Region	640",,,,,
테이블 2개,university_learning,"성별과 모듈별 학생 수가 10명을 초과하는 경우 성별, 모듈 코드, 학생 수 조회","If the number of students per gender and module exceeds 10, check gender, module code, and number of students.",,"SELECT si.gender, sr.code_module, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.gender, sr.code_module HAVING COUNT(DISTINCT si.id_student) > 10;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;",,6,,"F	AAA	299
F	BBB	6797
F	CCC	313
M	AAA	413
M	BBB	895
M	CCC	1030",,,,,
테이블 3개,university_learning,"모듈별 지역별 자료 상호 작용 횟수의 평균이 20회 미만인 경우 모듈 코드와 지역명, 자료 상호 작용 횟수의 평균 조회","If the average number of data interactions per module and region is less than 20, view the module code, region name, and average number of data interactions.",,"SELECT sr.code_module, si.region, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.region HAVING AVG(v.sum_click) < 20;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,2,,"BBB	North Western Region	2.4000
CCC	London Region	1.0000",,,,,
테이블 3개,university_learning,"모듈별 최고 학력별 자료 상호 작용 횟수의 평균이 25회 미만인 경우 모듈 코드와 최고 학력, 자료 상호 작용 횟수의 평균 조회","If the average number of data interactions by highest academic level for each module is less than 25, view the average number of data interactions by module code, highest academic level, and data.",,"SELECT sr.code_module, si.highest_education, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.highest_education HAVING AVG(v.sum_click) < 25;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,2,,"BBB	Lower Than A Level	2.4000
CCC	HE Qualification	1.0000",,,,,
테이블 3개,university_learning,"자료 상호 작업 횟수의 평균이 15회 미만인 모듈과 성별, 평균 자료 상호작업 횟수","Modules with an average number of data interactions less than 15, gender, and average number of data interactions",,"SELECT sr.code_module, si.gender, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.gender HAVING AVG(v.sum_click) < 15;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,2,,"BBB	F	2.4000
CCC	M	1.0000",,,,,
테이블 4개,university_learning,BBB 수업을 듣는 학생들 중 장애가 있는 학생들과 해당 학생들이 과제를 언제 제출했는지를 파악,Identify students with disabilities taking 'BBB' classes and when they submitted their assignments,,"SELECT si.disability, sa.date_submitted, c.code_module FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student LEFT JOIN assessments a ON sa.id_assessment = a.id_assessment LEFT JOIN courses c ON si.code_module = c.code_module WHERE si.code_module = 'BBB';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,50000,,"N	9	BBB
N	9	BBB
N	9	BBB
N	9	BBB
N	59	BBB
N	59	BBB
N	59	BBB
N	59	BBB
N	60	BBB
N	60	BBB
N	60	BBB
N	60	BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N	20	BBB
N	20	BBB
N	20	BBB
N	20	BBB
N	46	BBB
N	46	BBB
N	46	BBB
N	46	BBB
N	88	BBB
N	88	BBB
N	88	BBB
N	88	BBB
N	124	BBB
N	124	BBB
N	124	BBB
N	124	BBB
N	159	BBB
N	159	BBB
N	159	BBB
N	159	BBB
N	187	BBB
N	187	BBB
N	187	BBB
N	187	BBB
N	60	BBB
N	60	BBB
N	60	BBB
N	60	BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
N		BBB
Y		BBB
Y		BBB
Y		BBB
Y		BBB
N		BBB
N		BBB
N		BBB
N		BBB
Y		BBB
Y		BBB
Y		BBB
Y		BBB
Y	18	BBB
Y	18	BBB
Y	18	BBB
Y	18	BBB
Y	54	BBB
Y	54	BBB
Y	54	BBB
Y	54	BBB
Y	89	BBB
Y	89	BBB
Y	89	BBB
Y	89	BBB
Y	60	BBB
Y	60	BBB
Y	60	BBB
Y	60	BBB
N	18	BBB
N	18	BBB
N	18	BBB
N	18	BBB
N	51	BBB
N	51	BBB
N	51	BBB
N	51	BBB    ....",,,,,
테이블 4개,university_learning,"지역 별 평균 성적, 총 클릭 수, 가장 많이 듣는 수업","Average grades, total clicks, and most popular classes by region",,"SELECT si.region, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks, MAX(c.code_module) AS most_popular_module FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student LEFT JOIN studentvle sv ON si.id_student = sv.id_student LEFT JOIN courses c ON si.code_module = c.code_module GROUP BY si.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;",,13,,"Scotland	74.36427457098284	902	CCC
East Anglian Region	71.00865580448065	2612	CCC
Wales	72.85450954575379	380	CCC
South Region	74.37420584498093	1360	CCC
London Region	67.95125	1346	CCC
West Midlands Region	73.40643863179075	1594	CCC
South West Region	72.33986102337335	1502	CCC
South East Region	76.96671597633136	1068	CCC
North Western Region	72.32107623318386	992	CCC
Yorkshire Region	73.14808206958074	686	CCC
North Region	72.98240469208211	1022	CCC
Ireland	74.57416267942584	508	CCC
East Midlands Region	72.62780269058295	854	CCC",,,,,
테이블 4개,university_learning,지역별로 가장 많은 학생이 수강하는 모듈과 해당 모듈의 평균 점수,Modules taken by the most students by region and average scores for those modules,,"SELECT si.region, SUBSTRING_INDEX(GROUP_CONCAT(c.code_module ORDER BY num_students_taking DESC), ',', 1) AS most_popular_module, MAX(num_students_taking) AS enrollment_count, AVG(sa.score) AS average_score FROM (SELECT region, code_module, COUNT(*) AS num_students_taking FROM studentinfo GROUP BY region, code_module) AS s JOIN courses c ON s.code_module = c.code_module JOIN studentinfo si ON s.region = si.region JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY si.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"East Anglian Region        BBB        809        71.01748542880932
East Midlands Region        BBB        576        71.97781065088758
Ireland        BBB        406        73.85433070866142
London Region        BBB        682        67.875
North Region        BBB        241        72.6029776674938
North Western Region        BBB        579        72.56586826347305
Scotland        BBB        706        74.21846553966189
South East Region        BBB        514        75.85037406483791
South Region        BBB        640        72.9504132231405
South West Region        BBB        550        70.84193888303477
Wales        BBB        812        72.63591635916359
West Midlands Region        BBB        666        72.8246013667426
Yorkshire Region        BBB        511        71.91815476190476",,,,,
테이블 5개,university_learning,각 수업에서 특정 활동 유형이 학생의 평균 성적에 미치는 영향,How specific types of activities affect a student's average grade in each class,,"SELECT c.code_module, c.code_presentation, v.activity_type, AVG(sa.score) AS average_score FROM studentvle sv JOIN vle v ON sv.id_site = v.id_site JOIN studentassessment sa ON sv.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation, v.activity_type ORDER BY c.code_module, c.code_presentation, v.activity_type;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"AAA	2013J	dataplus	40.5
AAA	2013J	forumng	69.32936507936508
AAA	2013J	glossary	55.6
AAA	2013J	homepage	71.71910112359551
AAA	2013J	oucontent	68.14417744916821
AAA	2013J	resource	71.98136645962732
AAA	2013J	subpage	71.45549738219896
AAA	2013J	url	82.8
AAA	2014J	forumng	73.14285714285714
AAA	2014J	homepage	75.92857142857143
AAA	2014J	oucontent	70.18181818181819
AAA	2014J	resource	63.5
AAA	2014J	subpage	72.92307692307692",,,,,
테이블 5개,university_learning,"0-35세의 학생들의 모듈과 평균 점수, 사이트 id, 활동 유형","Modules and average scores, site id, activity type for students aged '0-35'",,"SELECT vle.code_module, AVG(studentassessment.score) AS average_score, vle.id_site, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE studentinfo.age_band = '0-35' GROUP BY vle.code_module, vle.id_site, vle.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;",,22,,"AAA	55.6	546681	oucontent
AAA	67.39473684210526	546662	oucontent
AAA	68.00709219858156	546652	forumng
AAA	73.86666666666666	547009	resource
AAA	72.04166666666667	546614	homepage
AAA	69.74358974358974	546986	resource
AAA	72.32	546719	oucontent
AAA	73.56818181818181	546879	subpage
AAA	65.2	546871	subpage
AAA	54.4	546670	oucontent
AAA	62.36363636363637	546954	resource
AAA	64.14285714285714	546667	oucontent
AAA	67.8	546731	oucontent
AAA	78.14285714285714	546874	subpage
AAA	40.5	547050	dataplus
AAA	74.18518518518519	547013	resource
AAA	67.63636363636364	546668	oucontent
AAA	71.4	546911	resource
AAA	59.1	546688	oucontent
AAA	64.11111111111111	546671	oucontent
AAA	71.28571428571429	546669	oucontent
AAA	68.4	546714	oucontent",,,,,
테이블 4개,university_learning,지역 별로 많이 듣는 수업과 평균 점수를 구해줘,Find the most frequently taken classes and average score by region.,,"SELECT s.region, SUBSTRING_INDEX(GROUP_CONCAT(c.code_module ORDER BY num_students_taking DESC), ',', 1) AS most_popular_module, MAX(num_students_taking) AS enrollment_count, AVG(sa.score) AS average_score FROM (SELECT region, code_module, COUNT(*) AS num_students_taking FROM studentinfo GROUP BY region, code_module) AS s JOIN courses c ON s.code_module = c.code_module JOIN studentinfo si ON s.region = si.region JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY s.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,13,,"East Anglian Region	BBB	809	71.01748542880932
East Midlands Region	BBB	576	71.97781065088758
Ireland	BBB	406	73.85433070866142
London Region	BBB	682	67.875
North Region	BBB	241	72.6029776674938
North Western Region	BBB	579	72.56586826347305
Scotland	BBB	706	74.21846553966189
South East Region	BBB	514	75.85037406483791
South Region	BBB	640	72.9504132231405
South West Region	BBB	550	70.84193888303477
Wales	BBB	812	72.63591635916359
West Midlands Region	BBB	666	72.8246013667426
Yorkshire Region	BBB	511	71.91815476190476",,,,,
테이블 5개,university_learning,수업 모듈과 프레젠테이션에서의 연령대별로 활동 유형에 따른 평균 점수를 비교,Comparison of average scores by activity type by age group in class modules and presentations,,"SELECT c.code_module, c.code_presentation, si.age_band, v.activity_type, AVG(sa.score) AS average_score FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation JOIN studentvle sv ON sa.id_student = sv.id_student JOIN vle v ON sv.id_site = v.id_site GROUP BY c.code_module, c.code_presentation, si.age_band, v.activity_type ORDER BY c.code_module, c.code_presentation, si.age_band, v.activity_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,18,,"AAA	2013J	0-35	dataplus	40.5
AAA	2013J	0-35	forumng	68.00709219858156
AAA	2013J	0-35	homepage	72.04166666666667
AAA	2013J	0-35	oucontent	66.0228310502283
AAA	2013J	0-35	resource	70.8659793814433
AAA	2013J	0-35	subpage	71.23684210526316
AAA	2013J	35-55	forumng	70.47747747747748
AAA	2013J	35-55	glossary	55.6
AAA	2013J	35-55	homepage	71.48255813953489
AAA	2013J	35-55	oucontent	68.79867986798679
AAA	2013J	35-55	resource	70.6875
AAA	2013J	35-55	subpage	71.73584905660377
AAA	2013J	35-55	url	82.8
AAA	2013J	55<=	forumng	77.35714285714286
AAA	2013J	55<=	homepage	76.55
AAA	2013J	55<=	oucontent	74.5576923076923
AAA	2013J	55<=	resource	75.4375
AAA	2013J	55<=	subpage	71.72727272727273",,,,,
테이블 5개,university_learning,"date가 100 이상인 학생들의 평균 성적, 활동 유형 및 이수 학점","Average grade, type of activity, and credits earned for students with date over 100",,"SELECT si.id_student, AVG(sa.score) AS average_score, v.activity_type, si.studied_credits FROM studentassessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentvle sv ON sa.id_student = sv.id_student JOIN vle v ON sv.id_site = v.id_site JOIN studentinfo si ON sa.id_student = si.id_student WHERE a.date >= 100 GROUP BY si.id_student, v.activity_type, si.studied_credits;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,317,,"28400	64.66666666666667	forumng	60
31604	79	oucontent	60
32885	57.666666666666664	oucontent	60
38053	64	subpage	60
45462	68.33333333333333	oucontent	60
58873	73	forumng	60
59185	85	oucontent	60
62155	74	resource	60
63400	77.66666666666667	oucontent	60
70464	53	glossary	60
71361	78	homepage	60
75091	65.66666666666667	forumng	60
57506	75.33333333333333	homepage	60
77367	67.66666666666667	resource	60
94961	59	subpage	60
98094	60.666666666666664	resource	60
101781	71.66666666666667	homepage	60
102806	74.66666666666667	oucontent	60
106577	53	resource	60
104476	78.33333333333333	resource	60
110175	63.333333333333336	oucontent	60
114999	70.33333333333333	oucontent	60
111717	81.5	oucontent	60
116692	74	homepage	60
127582	71	subpage	180
129955	76	subpage	60
132976	69.66666666666667	homepage	120
134143	84	subpage	60
137873	82.66666666666667	oucontent	60
118983	57.666666666666664	subpage	120
123044	70	homepage	60
144801	73	subpage	60
146188	48.333333333333336	oucontent	60
145130	53.333333333333336	oucontent	120
147756	73.6	resource	120
148993	81.75	homepage	60
235507	63.333333333333336	resource	240
238007	80	homepage	60
241649	81	subpage	60
248270	78.66666666666667	forumng	90
255548	66	subpage	60
258392	59.666666666666664	oucontent	60
256815	79.33333333333333	resource	120
258894	67	oucontent	60
241729	62.333333333333336	oucontent	60
242793	82	resource	60
246834	54	oucontent	60
262934	74	subpage	60
271251	80	url	60
279572	78.33333333333333	homepage	60
281250	52.333333333333336	forumng	60
282821	63	forumng	60
291334	83	homepage	60
296332	82.66666666666667	forumng	60
298696	85.66666666666667	resource	60
300398	77.33333333333333	oucontent	60
287548	66.66666666666667	oucontent	120
302302	59	subpage	60
306897	56	oucontent	60
306466	83.66666666666667	oucontent	60
307866	70.5	forumng	60
312537	87	oucontent	60
312782	55.333333333333336	resource	60
155854	79.33333333333333	resource	60
155550	64.66666666666667	resource	420
155984	81.33333333333333	subpage	60
159954	75	oucontent	60
164259	73	oucontent	60
167906	76.33333333333333	oucontent	60
180753	49	oucontent	120
184271	57.333333333333336	oucontent	170
186149	71.33333333333333	resource	60
183096	53.333333333333336	oucontent	60
187100	89.33333333333333	url	60
188278	67.33333333333333	oucontent	120
192183	67	subpage	60
172797	64.33333333333333	forumng	60
172112	73.66666666666667	forumng	60
175392	84.33333333333333	oucontent	60
174782	80	resource	60
175932	80.66666666666667	oucontent	60
200860	48.333333333333336	oucontent	60
202635	62	forumng	60
205350	75.66666666666667	homepage	60
227499	83.66666666666667	subpage	60
227517	61	oucontent	180
229361	77.66666666666667	homepage	60
228082	78.66666666666667	oucontent	60
318933	66.66666666666667	oucontent	120
319047	80	homepage	60
321942	80	forumng	60
324084	65	resource	60
324282	70	homepage	120
331358	85.33333333333333	oucontent	60
333323	72.33333333333333	resource	60
335764	87.25	homepage	60
336207	67.66666666666667	homepage	120
342007	83	homepage	60
342514	81.33333333333333	oucontent	60
342972	61	oucontent	60
343446	80.33333333333333	homepage	120
350188	73	oucontent	60
365642	73	oucontent	60
368963	71.66666666666667	homepage	180
376439	90.66666666666667	oucontent	60
380953	69.33333333333333	oucontent	60
386952	70	homepage	120
392931	71.33333333333333	subpage	120
393207	76.33333333333333	homepage	60
396872	60.666666666666664	subpage	180
388722	66.66666666666667	forumng	60
388885	59	subpage	60
401869	69.33333333333333	forumng	60
405088	76.33333333333333	resource	120
404804	40.666666666666664	oucontent	120
414117	76.33333333333333	homepage	120
415969	60	oucontent	90
489455	70.33333333333333	forumng	60
441018	61.666666666666664	homepage	150
512460	75	oucontent	120
588775	82.66666666666667	homepage	120
603861	66	oucontent	60
544103	81	resource	120
550383	80.66666666666667	homepage	60
749412	72	subpage	60
704156	65	oucontent	120
705379	80	oucontent	120
760729	82	oucontent	60
949618	61	forumng	60
958987	76.66666666666667	oucontent	60
978739	55.333333333333336	forumng	60
971027	65.33333333333333	oucontent	60
968578	73.66666666666667	oucontent	60
1729319	77.66666666666667	subpage	60
1765788	70.33333333333333	homepage	60
1847830	70.66666666666667	forumng	60
1860318	61.333333333333336	subpage	300
1889511	73	subpage	60
1894188	69.66666666666667	oucontent	60
1801641	80.33333333333333	oucontent	60
1938355	77.66666666666667	forumng	60
1970390	83.33333333333333	forumng	60
1976139	59	oucontent	120
2550279	64	forumng	60
2551220	64.33333333333333	homepage	60
2555340	78	oucontent	60
2557283	86.33333333333333	subpage	60
2559575	79.33333333333333	resource	60
2569324	71	oucontent	120
2574583	72.33333333333333	oucontent	60
2574528	80.66666666666667	forumng	60
2598871	77	oucontent	60
2599352	75.66666666666667	resource	120
2600688	71.33333333333333	oucontent	60
2606098	72.33333333333333	resource	60
2671132	72	oucontent	60
2678643	64.66666666666667	oucontent	60
2685865	80.66666666666667	oucontent	60
2617002	68	forumng	60
2688067	69	resource	60
2689958	81.33333333333333	forumng	60
2691206	84.33333333333333	subpage	60
2578995	79.66666666666667	subpage	60
2639641	67.66666666666667	oucontent	120
2639449	44.5	oucontent	120
2641155	79	resource	60
2643002	47.666666666666664	resource	60
2649826	86.66666666666667	homepage	60
2051699	66.66666666666667	oucontent	60
2104505	59.666666666666664	homepage	60
2122180	82	forumng	60
2139353	69.5	homepage	120
2143752	52.333333333333336	oucontent	60
2146792	74	resource	60
2062879	65	forumng	60
2080474	65.33333333333333	forumng	60
2083877	67.66666666666667	oucontent	120
2171627	69	resource	60
2182846	67.33333333333333	oucontent	60
2197016	76	oucontent	60
2194100	70.33333333333333	homepage	60
1035023	70.66666666666667	forumng	60
1105478	79.33333333333333	homepage	60
1488959	59.333333333333336	oucontent	60
1518989	70	subpage	60
1352868	65	oucontent	60
1402638	77	oucontent	60
1620151	70	homepage	60
1626710	85.33333333333333	forumng	60
1640609	85.33333333333333	oucontent	60
2229865	77.66666666666667	homepage	60
2312620	34	oucontent	60
2342426	76.33333333333333	oucontent	60
2358056	74.33333333333333	oucontent	60
2278464	49	homepage	60
2293923	58.333333333333336	forumng	150
2358969	69.66666666666667	resource	180
2364471	80.66666666666667	forumng	60
2369266	51	oucontent	60
2367155	76.66666666666667	homepage	120
2376496	77	homepage	120
2391984	71.5	homepage	60
2412002	85.33333333333333	resource	90
2412967	77	homepage	60
2449878	59	subpage	60
2479954	79.33333333333333	oucontent	60
2481901	75	oucontent	60
2482700	55	homepage	120
2498700	78.66666666666667	forumng	240
2456480	0	subpage	120
2460080	74.33333333333333	oucontent	60
2457256	76.66666666666667	oucontent	180
2458355	93	oucontent	60
2521459	63.666666666666664	forumng	60
2523736	62.5	forumng	120
2529279	79.66666666666667	resource	60
2532302	58.333333333333336	oucontent	60
2536991	86.66666666666667	subpage	60
2437837	76	forumng	60
2516503	80	subpage	60
2518069	78	forumng	60
2566592	72	oucontent	60
2666246	76	forumng	60
2664024	70	oucontent	60
2676809	48	forumng	150
2639540	81	forumng	60
2694424	78	homepage	120
2698257	72.33333333333333	subpage	120
2586560	76	forumng	60
2594139	73.33333333333333	oucontent	60
969076	47.5	homepage	180
1746134	83	homepage	60
1942396	56	oucontent	120
1801229	76.33333333333333	homepage	60
2268379	85.33333333333333	homepage	60
2011876	76.66666666666667	forumng	60
1465690	82.66666666666667	homepage	120
572652	74	homepage	120
365244	55	oucontent	120
368194	49.666666666666664	oucontent	120
364177	73.5	subpage	60
240712	72	oucontent	80
260355		oucontent	60
100893	70.33333333333333	resource	60
45642	72.66666666666667	forumng	120
113295	76.66666666666667	homepage	60
114017	72.33333333333333	subpage	60
141355	70.66666666666667	forumng	240
324002	82.66666666666667	oucontent	60
346025	84	subpage	120
290757	75.33333333333333	homepage	60
307061	82.66666666666667	oucontent	60
231554	64.5	forumng	240
157568	64.33333333333333	oucontent	60
392756	49	forumng	120
402470	69.66666666666667	oucontent	60
390890	59.75	forumng	90
508818	69.33333333333333	homepage	120
189879	78.66666666666667	homepage	120
91265	68.33333333333333	subpage	60
295741	53.666666666666664	homepage	240
277880	68	forumng	60
290201	68.33333333333333	forumng	60
281022	75	forumng	150
333059	62.333333333333336	homepage	120
905042	81.66666666666667	subpage	60
2469673	42.333333333333336	homepage	60
2411661	40.666666666666664	oucontent	120
2691244	58.666666666666664	resource	180
2084066	57	oucontent	60
2155014	76.33333333333333	homepage	60
1889577	75.66666666666667	homepage	60
398552	43	oucontent	240
441888	71.66666666666667	oucontent	120
444677	86	homepage	60
383254	78.33333333333333	homepage	120
564450	59.666666666666664	oucontent	120
334259	49	forumng	150
175991	36.333333333333336	homepage	180
53025	79.66666666666667	resource	60
262011	72	oucontent	60
294570	79	homepage	60
286488	75.66666666666667	homepage	60
591774	72.66666666666667	oucontent	60
2012966	80.33333333333333	homepage	60
2486127	77	forumng	120
229179	66	oucontent	60
332789	75.33333333333333	oucontent	60
345357	85.66666666666667	oucontent	60
240884	54.666666666666664	homepage	120
142326	75.66666666666667	oucontent	60
305386	79.66666666666667	resource	120
311917	65	subpage	120
195262	50	homepage	60
11391	82.33333333333333	oucontent	240
74372	58	oucontent	150
2339528	83.33333333333333	homepage	60
2065691	37	homepage	330
2208424	75.33333333333333	oucontent	60
2613116	84.33333333333333	homepage	60
2669816	50.333333333333336	subpage	60
2566163	72.33333333333333	forumng	60
2562034	65	homepage	60
2645733	81.66666666666667	homepage	180
2650282	84.66666666666667	subpage	60
580389	69	oucontent	120
345068	81.66666666666667	homepage	180
52130	72.33333333333333	homepage	90
102952	79	subpage	60
268073	77	subpage	90
183947	48.333333333333336	forumng	180
339972	45.666666666666664	oucontent	60
368824	49.666666666666664	oucontent	120
366483	75.33333333333333	homepage	60
2073016	62	homepage	60
498857	73.33333333333333	homepage	60
268733	35	homepage	180",,,,,
테이블 6개,university_learning,"성별, 지역, 최고 학력, 최종 결과 및 활동 유형에 따른 학생들의 평균 점수와 활동 수","Average score and number of activities for students by gender, region, highest level of education, final result and activity type",,"SELECT si.gender, si.region, si.highest_education, si.final_result, AVG(sa.score) AS average_score, v.activity_type, COUNT(*) AS activity_count FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student JOIN studentvle sv ON si.id_student = sv.id_student JOIN vle v ON sv.id_site = v.id_site JOIN studentregistration sr ON si.code_module = sr.code_module AND si.code_presentation = sr.code_presentation JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation AND sa.id_assessment = a.id_assessment GROUP BY si.gender, si.region, si.highest_education, si.final_result, v.activity_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,240,,"F	Scotland	HE Qualification	Pass	74.9	forumng	3830
F	South East Region	A Level or Equivalent	Pass	76	oucontent	1915
F	West Midlands Region	Lower Than A Level	Pass	56.6	oucontent	3830
M	Wales	A Level or Equivalent	Pass	68	subpage	1915
M	Scotland	HE Qualification	Pass	73.4	oucontent	3830
F	East Anglian Region	A Level or Equivalent	Pass	74.6	forumng	3830
M	East Anglian Region	Lower Than A Level	Pass	74.3	oucontent	3830
F	North Western Region	HE Qualification	Pass	77	resource	3830
M	Scotland	Lower Than A Level	Pass	74.4	oucontent	3830
F	East Anglian Region	A Level or Equivalent	Withdrawn	67	homepage	766
F	West Midlands Region	A Level or Equivalent	Pass	55.6	glossary	1915
M	Ireland	HE Qualification	Pass	78.53333333333333	homepage	5745
M	South West Region	A Level or Equivalent	Pass	63.3	forumng	3830
M	South Region	Lower Than A Level	Pass	63.4	homepage	7660
M	East Midlands Region	A Level or Equivalent	Pass	70.4	resource	1915
M	South Region	Lower Than A Level	Withdrawn	65.33333333333333	subpage	1149
M	Wales	Lower Than A Level	Pass	60.6	resource	1915
M	North Western Region	A Level or Equivalent	Pass	78.8	oucontent	3830
M	East Midlands Region	Lower Than A Level	Pass	66.3	resource	3830
M	Ireland	Post Graduate Qualification	Pass	79.6	resource	1915
M	East Anglian Region	HE Qualification	Pass	75.26666666666667	oucontent	5745
M	Yorkshire Region	HE Qualification	Pass	66.6	oucontent	3830
F	East Anglian Region	HE Qualification	Pass	72	oucontent	3064
M	East Anglian Region	A Level or Equivalent	Pass	74.83333333333333	homepage	11490
F	East Midlands Region	A Level or Equivalent	Pass	65.1	subpage	3830
M	West Midlands Region	A Level or Equivalent	Withdrawn	81	subpage	1149
F	East Anglian Region	Lower Than A Level	Pass	67.4	homepage	1915
F	South East Region	A Level or Equivalent	Distinction	84.4	subpage	1915
M	South West Region	A Level or Equivalent	Pass	63.06666666666667	oucontent	5745
M	East Midlands Region	HE Qualification	Pass	61.8	subpage	1915
M	South Region	A Level or Equivalent	Pass	64.9	homepage	3830
F	South Region	HE Qualification	Pass	68.8	subpage	1915
F	West Midlands Region	A Level or Equivalent	Fail	50	oucontent	1915
M	South West Region	HE Qualification	Pass	57.1	oucontent	3830
M	North Region	Lower Than A Level	Fail	73.75	resource	1532
F	North Western Region	A Level or Equivalent	Withdrawn	72	homepage	1149
M	Yorkshire Region	A Level or Equivalent	Withdrawn	65	resource	383
M	South Region	HE Qualification	Pass	79.2	homepage	1915
M	East Anglian Region	HE Qualification	Pass	78.8	subpage	1915
M	North Western Region	Lower Than A Level	Pass	78.4	forumng	1915
M	Wales	Lower Than A Level	Pass	71.4	subpage	1915
M	North Western Region	HE Qualification	Pass	75.93333333333334	resource	5745
F	East Anglian Region	Lower Than A Level	Pass	59.2	oucontent	3830
F	East Midlands Region	HE Qualification	Fail	58.6	oucontent	1915
M	London Region	HE Qualification	Pass	77.4	resource	1915
F	North Western Region	A Level or Equivalent	Pass	72.5	subpage	3830
M	Scotland	A Level or Equivalent	Pass	76.4	url	1915
M	London Region	Lower Than A Level	Distinction	79.2	homepage	1915
M	Wales	Lower Than A Level	Fail	55.4	forumng	1915
M	South East Region	A Level or Equivalent	Distinction	83.6	homepage	1915
M	South Region	Post Graduate Qualification	Distinction	86.8	forumng	1915
F	South East Region	HE Qualification	Pass	80.8	resource	1915
M	West Midlands Region	A Level or Equivalent	Pass	74.95	oucontent	7660
M	East Anglian Region	A Level or Equivalent	Pass	74.9	oucontent	3830
F	East Anglian Region	A Level or Equivalent	Fail	58.666666666666664	subpage	1149
F	London Region	A Level or Equivalent	Pass	61.666666666666664	oucontent	5745
M	West Midlands Region	A Level or Equivalent	Pass	60	forumng	1532
M	South Region	Post Graduate Qualification	Distinction	87.8	oucontent	1915
M	South Region	A Level or Equivalent	Pass	60.22222222222222	resource	3447
F	East Midlands Region	A Level or Equivalent	Pass	75.6	resource	3830
M	London Region	A Level or Equivalent	Pass	67	resource	1915
F	East Anglian Region	Lower Than A Level	Withdrawn	80	subpage	766
M	East Midlands Region	A Level or Equivalent	Withdrawn	66.5	oucontent	766
M	Scotland	A Level or Equivalent	Pass	73.46666666666667	oucontent	5745
F	Yorkshire Region	A Level or Equivalent	Pass	69.4	oucontent	1915
F	South West Region	A Level or Equivalent	Withdrawn	76	subpage	383
M	Scotland	HE Qualification	Pass	75.2	resource	3830
M	London Region	HE Qualification	Fail	74	oucontent	383
F	South West Region	A Level or Equivalent	Pass	62.75	oucontent	7660
M	South East Region	A Level or Equivalent	Distinction	89.2	url	1915
M	Yorkshire Region	A Level or Equivalent	Withdrawn	69	oucontent	1149
F	South West Region	Lower Than A Level	Pass	68.4	subpage	1915
F	Ireland	A Level or Equivalent	Pass	61.4	forumng	1915
M	Ireland	HE Qualification	Pass	72.5	forumng	3830
M	North Region	HE Qualification	Pass	82.4	oucontent	1915
M	East Anglian Region	HE Qualification	Pass	80.4	resource	1915
M	North Western Region	HE Qualification	Pass	76.4	oucontent	5745
M	London Region	Lower Than A Level	Pass	72.5	oucontent	3830
F	Wales	A Level or Equivalent	Withdrawn	66.66666666666667	forumng	1149
M	South West Region	HE Qualification	Pass	74.5	homepage	3830
F	London Region	A Level or Equivalent	Distinction	83.6	subpage	1915
M	Ireland	HE Qualification	Fail	62.6	oucontent	1915
M	East Midlands Region	A Level or Equivalent	Pass	78	homepage	1915
M	London Region	HE Qualification	Pass	72.33333333333333	oucontent	5745
F	East Midlands Region	A Level or Equivalent	Pass	78.26666666666667	homepage	5745
M	South Region	HE Qualification	Pass	68.5	forumng	3830
F	South West Region	A Level or Equivalent	Pass	54.4	resource	3830
M	South East Region	A Level or Equivalent	Pass	66.1	homepage	3830
F	South Region	HE Qualification	Withdrawn	63.666666666666664	oucontent	1149
F	South West Region	A Level or Equivalent	Withdrawn	36	homepage	383
F	South East Region	A Level or Equivalent	Withdrawn	86.33333333333333	homepage	1149
F	West Midlands Region	HE Qualification	Withdrawn	75	homepage	383
M	Yorkshire Region	Lower Than A Level	Pass	72	homepage	3830
M	North Region	HE Qualification	Distinction	87	oucontent	1915
M	East Midlands Region	A Level or Equivalent	Pass	65.57142857142857	oucontent	5362
M	Yorkshire Region	A Level or Equivalent	Pass	73.33333333333333	homepage	5745
M	North Western Region	A Level or Equivalent	Pass	74.6	homepage	3830
M	Yorkshire Region	HE Qualification	Pass	71.3	subpage	3830
F	London Region	Lower Than A Level	Pass	64.86666666666666	forumng	5745
M	South West Region	A Level or Equivalent	Pass	59.9	subpage	3830
F	South East Region	Lower Than A Level	Pass	65	forumng	1915
M	North Region	A Level or Equivalent	Pass	77.2	resource	1915
M	Wales	Lower Than A Level	Pass	59.8	oucontent	3830
M	West Midlands Region	HE Qualification	Withdrawn	59.666666666666664	oucontent	1149
M	South East Region	HE Qualification	Withdrawn	86	homepage	383
F	South West Region	A Level or Equivalent	Pass	66.2	forumng	3830
F	South East Region	A Level or Equivalent	Pass	59.8	homepage	1915
M	South West Region	HE Qualification	Withdrawn	40.5	dataplus	766
M	South East Region	HE Qualification	Pass	67.8	oucontent	3830
M	South West Region	A Level or Equivalent	Pass	82.8	homepage	1915
M	North Region	HE Qualification	Withdrawn	63	oucontent	1915
M	South East Region	HE Qualification	Pass	72.13333333333334	homepage	5745
M	South Region	Lower Than A Level	Pass	72	subpage	1915
M	South Region	HE Qualification	Pass	66	oucontent	1915
M	West Midlands Region	A Level or Equivalent	Distinction	81	oucontent	3830
F	South Region	Lower Than A Level	Withdrawn		resource	383
F	West Midlands Region	HE Qualification	Pass	68	oucontent	1915
F	East Anglian Region	A Level or Equivalent	Pass	70.55	oucontent	7660
F	North Western Region	Lower Than A Level	Withdrawn	68	homepage	383
F	Scotland	HE Qualification	Pass	78.2	subpage	1915
M	South West Region	Lower Than A Level	Pass	71	forumng	1915
M	South West Region	Lower Than A Level	Pass	62.6	subpage	1915
M	Yorkshire Region	A Level or Equivalent	Pass	72	subpage	1915
F	East Midlands Region	A Level or Equivalent	Pass	70.4	oucontent	1915
M	South Region	A Level or Equivalent	Pass	67.1	forumng	3830
M	West Midlands Region	Lower Than A Level	Withdrawn	83.6	forumng	1915
M	Ireland	Lower Than A Level	Pass	67.25	oucontent	1532
F	North Region	HE Qualification	Pass	62.6	forumng	1915
F	South Region	Lower Than A Level	Pass	64.8	homepage	1915
F	South Region	HE Qualification	Pass	80.6	oucontent	1915
M	South West Region	Lower Than A Level	Pass	71.2	resource	1915
M	Yorkshire Region	Lower Than A Level	Pass	70.8	oucontent	1915
M	North Western Region	A Level or Equivalent	Withdrawn	64	oucontent	383
F	Scotland	A Level or Equivalent	Pass	76.4	resource	1915
F	South Region	A Level or Equivalent	Pass	71.6	oucontent	3830
F	East Midlands Region	Lower Than A Level	Pass	78.6	oucontent	1915
F	Yorkshire Region	A Level or Equivalent	Pass	64.8	forumng	1915
M	East Anglian Region	A Level or Equivalent	Pass	67.8	resource	1915
M	East Anglian Region	A Level or Equivalent	Distinction	81.6	forumng	1915
F	West Midlands Region	A Level or Equivalent	Distinction	84.8	subpage	1915
F	West Midlands Region	A Level or Equivalent	Pass	79.6	subpage	1915
M	South East Region	Lower Than A Level	Pass	65.6	oucontent	1915
M	East Anglian Region	Lower Than A Level	Distinction	83.4	homepage	1915
F	South West Region	Lower Than A Level	Pass	66.6	oucontent	1915
M	West Midlands Region	Lower Than A Level	Pass	65.6	homepage	1915
F	North Western Region	Lower Than A Level	Distinction	82.4	forumng	1915
M	London Region	A Level or Equivalent	Withdrawn	50.714285714285715	homepage	2681
F	South Region	Lower Than A Level	Pass	52.6	oucontent	1915
F	East Anglian Region	A Level or Equivalent	Fail	61.2	forumng	1915
F	South Region	A Level or Equivalent	Pass	70.7	forumng	3830
F	West Midlands Region	A Level or Equivalent	Pass	67.8	oucontent	1915
F	North Western Region	A Level or Equivalent	Fail	70	resource	383
F	Yorkshire Region	A Level or Equivalent	Pass	69	resource	1915
F	North Western Region	HE Qualification	Pass	75.6	oucontent	1915
F	East Anglian Region	A Level or Equivalent	Pass	71.4	homepage	5745
M	Scotland	HE Qualification	Pass	82.6	homepage	1915
M	London Region	A Level or Equivalent	Pass	66.2	oucontent	3830
F	South East Region	Lower Than A Level	Pass	73	subpage	1915
F	East Midlands Region	HE Qualification	Pass	78.2	oucontent	3830
M	West Midlands Region	A Level or Equivalent	Fail	35	oucontent	766
M	South Region	HE Qualification	Fail	77.5	homepage	766
M	North Western Region	A Level or Equivalent	Distinction	84.6	forumng	1915
F	West Midlands Region	A Level or Equivalent	Pass	76.4	homepage	1915
F	South Region	A Level or Equivalent	Withdrawn	54.5	oucontent	766
F	East Midlands Region	HE Qualification	Withdrawn	32	oucontent	1149
M	Yorkshire Region	Lower Than A Level	Fail	59.8	oucontent	3830
F	North Region	HE Qualification	Fail	67.8	oucontent	1915
F	East Anglian Region	A Level or Equivalent	Withdrawn	68	resource	383
F	London Region	Lower Than A Level	Pass	50.6	oucontent	1915
M	South Region	A Level or Equivalent	Withdrawn	73	homepage	1532
M	South West Region	Lower Than A Level	Distinction	82.8	resource	1915
M	Scotland	HE Qualification	Withdrawn	80	oucontent	766
F	South Region	A Level or Equivalent	Pass	75.6	homepage	3830
F	Scotland	HE Qualification	Withdrawn	67	oucontent	383
F	North Western Region	Lower Than A Level	Pass	77.2	forumng	1915
M	Scotland	Lower Than A Level	Fail	24.666666666666668	subpage	1149
M	South Region	Lower Than A Level	Pass	70	oucontent	1915
M	North Western Region	A Level or Equivalent	Pass	69.66666666666667	forumng	3447
M	South Region	HE Qualification	Distinction	80.8	subpage	1915
F	North Region	A Level or Equivalent	Pass	74.4	forumng	1915
M	South East Region	HE Qualification	Pass	79.4	subpage	1915
M	East Midlands Region	A Level or Equivalent	Pass	76.6	forumng	1915
F	North Region	HE Qualification	Fail	43.333333333333336	forumng	1149
F	North Western Region	A Level or Equivalent	Pass	75.9	forumng	3830
M	East Midlands Region	Lower Than A Level	Pass	67.8	subpage	1915
F	East Anglian Region	Lower Than A Level	Pass	73.6	forumng	1915
M	South West Region	A Level or Equivalent	Withdrawn	59.75	homepage	1532
M	West Midlands Region	HE Qualification	Pass	77.5	homepage	3830
F	Yorkshire Region	A Level or Equivalent	Fail	59	oucontent	766
M	East Anglian Region	Lower Than A Level	Fail	69	subpage	1532
F	London Region	A Level or Equivalent	Withdrawn	57.5	oucontent	1149
M	Yorkshire Region	A Level or Equivalent	Pass	68.4	resource	1915
F	North Region	Lower Than A Level	Withdrawn	52	forumng	383
F	North Region	Post Graduate Qualification	Pass	71.8	subpage	1915
F	East Midlands Region	A Level or Equivalent	Pass	72.6	forumng	1915
M	East Anglian Region	A Level or Equivalent	Pass	82.4	subpage	1915
M	London Region	A Level or Equivalent	Pass	57.333333333333336	forumng	3447
M	West Midlands Region	A Level or Equivalent	Fail	45	forumng	1915
M	South West Region	Lower Than A Level	Pass	72.6	oucontent	1915
M	Scotland	A Level or Equivalent	Withdrawn	69.66666666666667	forumng	1149
M	London Region	A Level or Equivalent	Pass	71.8	homepage	1915
M	Scotland	A Level or Equivalent	Pass	72.6	homepage	3830
M	North Western Region	HE Qualification	Pass	70.8	subpage	1915
M	South East Region	A Level or Equivalent	Fail	50.2	homepage	1915
F	South East Region	A Level or Equivalent	Withdrawn	67.66666666666667	forumng	1149
M	Wales	A Level or Equivalent	Pass	70.4	forumng	1915
M	North Western Region	A Level or Equivalent	Fail	64	homepage	383
F	Scotland	A Level or Equivalent	Pass	73.4	forumng	1915
F	East Anglian Region	A Level or Equivalent	Pass	76.4	subpage	1915
F	Yorkshire Region	Lower Than A Level	Fail	44.5	homepage	1532
F	South Region	A Level or Equivalent	Fail	46.8	oucontent	1915
F	South West Region	Lower Than A Level	Fail	59.75	oucontent	1532
F	West Midlands Region	Lower Than A Level	Pass	73.8	homepage	1915
M	London Region	HE Qualification	Distinction	87.6	homepage	1915
M	West Midlands Region	HE Qualification	Fail	59.2	oucontent	1915
F	London Region	A Level or Equivalent	Fail	53	forumng	766
F	North Western Region	A Level or Equivalent	Fail	37.6	homepage	1915
M	North Region	Post Graduate Qualification	Pass	78	resource	1915
M	South Region	Post Graduate Qualification	Pass	76.2	oucontent	1915
M	North Western Region	Lower Than A Level	Pass	78.4	homepage	1915
F	East Anglian Region	HE Qualification	Pass	73.6	forumng	1915
M	Yorkshire Region	A Level or Equivalent	Distinction	80.4	oucontent	1915
F	North Region	A Level or Equivalent	Pass	73.6	oucontent	1915
M	West Midlands Region	A Level or Equivalent	Pass	78	resource	1915
M	East Anglian Region	A Level or Equivalent	Fail	48.5	oucontent	1532
F	London Region	Lower Than A Level	Distinction	80	homepage	1915
F	London Region	Lower Than A Level	Pass	78.2	homepage	1915
M	Yorkshire Region	A Level or Equivalent	Fail	57.2	subpage	1915
F	South West Region	A Level or Equivalent	Pass	82.6	homepage	1915
M	London Region	A Level or Equivalent	Pass	84.2	subpage	1915
M	Ireland	HE Qualification	Pass	71.4	oucontent	1915
M	Scotland	Post Graduate Qualification	Fail	66	homepage	766
M	London Region	HE Qualification	Pass	76.6	subpage	1915
M	East Anglian Region	A Level or Equivalent	Fail	74.6	subpage	1915
M	North Region	A Level or Equivalent	Pass	49.8	oucontent	1915
M	Wales	HE Qualification	Fail	55.6	oucontent	1915
F	London Region	Lower Than A Level	Withdrawn	60.333333333333336	homepage	1149
M	North Western Region	HE Qualification	Pass	73	homepage	1915
M	South Region	HE Qualification	Fail	56	subpage	766
M	East Anglian Region	A Level or Equivalent	Withdrawn	43	homepage	766",,,,,
테이블 3개,university_learning,"""AAA"" 모듈에서 각 평가 유형과 평가 유형별로 상위 10% 최고 학력 수준과 하위 10% 최고 학력 수준 학생들의 평균 이수 학점 및 차이를 조회","In the ""AAA"" module, view the average credits completed and the difference between the top 10% and bottom 10% of students with the highest academic ability for each assessment type.",,"WITH education_credits AS (SELECT sa.id_student, a.assessment_type, si.highest_education, si.studied_credits,NTILE(10) OVER (PARTITION BY a.assessment_type, si.highest_education ORDER BY si.studied_credits DESC) AS decile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA') SELECT assessment_type, highest_education, AVG(CASE WHEN decile = 10 THEN studied_credits END) AS top_10_avg_credits, AVG(CASE WHEN decile = 1 THEN studied_credits END) AS bottom_10_avg_credits, AVG(CASE WHEN decile = 10 THEN studied_credits END) - AVG(CASE WHEN decile = 1 THEN studied_credits END) AS credit_diff FROM education_credits GROUP BY assessment_type, highest_education;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,4,,"TMA	A Level or Equivalent	60.0000	189.9398	-129.9398
TMA	HE Qualification	60.0000	145.5128	-85.5128
TMA	Lower Than A Level	60.0000	180.8696	-120.8696
TMA	Post Graduate Qualification	60.0000	60.0000	0.0000",,,,,
테이블 3개,university_learning,"""BBB"" 모듈에서 각 평가 유형과 평가 유형별로 상위 40% 연령대와 하위 40% 연령대 학생들의 평균 이전 시도 횟수 및 차이를 조회","In the ""BBB"" module, view the average number of previous attempts and the difference between students in the top 40% and bottom 40% of age groups for each assessment type and assessment type.",,"WITH age_attempts AS ( SELECT sa.id_student, a.assessment_type, si.num_of_prev_attempts, si.age_band, CASE WHEN si.age_band LIKE '0-35' THEN 1 WHEN si.age_band LIKE '35-55' THEN 2 WHEN si.age_band LIKE '55<=' THEN 3 END AS age_band_num, NTILE(5) OVER (PARTITION BY a.assessment_type ORDER BY si.age_band) AS quintile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'BBB') SELECT assessment_type, AVG(CASE WHEN quintile >= 3 THEN num_of_prev_attempts END) AS top_40_avg_attempts, AVG(CASE WHEN quintile <= 2 THEN num_of_prev_attempts END) AS bottom_40_avg_attempts, AVG(CASE WHEN quintile >= 3 THEN num_of_prev_attempts END) - AVG(CASE WHEN quintile <= 2 THEN num_of_prev_attempts END) AS attempt_diff FROM age_attempts GROUP BY assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,2,,"CMA	0.4041	0.4302	-0.0261
TMA	0.2044	0.2093	-0.0049",,,,,
테이블 3개,university_learning,"""AAA"" 모듈에서 각 평가 유형과 평가 유형별로 상위 20%와 하위 20% 학생들의 평균 학점과 두 그룹 간의 평균 학점 차이를 조회","In the ""AAA"" module, view the average grade of the top 20% and bottom 20% of students for each assessment type and the average grade difference between the two groups.",,"WITH region_credits AS (SELECT sa.id_student, a.assessment_type, si.studied_credits, si.imd_band, NTILE(5) OVER (PARTITION BY a.assessment_type, si.imd_band ORDER BY si.studied_credits DESC) AS quintile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA') SELECT assessment_type, AVG(CASE WHEN quintile = 5 THEN studied_credits END) AS top_20_avg_credits, AVG(CASE WHEN quintile = 1 THEN studied_credits END) AS bottom_20_avg_credits, AVG(CASE WHEN quintile = 5 THEN studied_credits END) - AVG(CASE WHEN quintile = 1 THEN studied_credits END) AS credit_diff FROM region_credits GROUP BY assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;",,1,,TMA	60.0000	147.4566	-87.4566,,,,,