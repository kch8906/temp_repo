,input,accept,reject,context
0,모든 모듈에 대해 각 학생이 등록한 총 모듈 수를 계산하고 학생과 등록한 총 모듈 수 조회,"SELECT id_student, COUNT(*) AS total_modules_registered FROM studentRegistration GROUP BY id_student;","SELECT sr.id_student, COUNT(sr.code_module) AS num_modules FROM studentRegistration sr GROUP BY sr.id_student;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
1,지역명과 지역별 Pass 등급을 받은 학생들의 평균 학점,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY region;","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
2,가장 많은 학점을 이수한 모듈의 학생번호 및 최종 성적을 조회,"SELECT sr.id_student, si.final_result FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student JOIN ( SELECT code_module, code_presentation, MAX(studied_credits) AS max_credits FROM studentinfo GROUP BY code_module, code_presentation ) AS max_credits_per_module ON sr.code_module = max_credits_per_module.code_module AND sr.code_presentation = max_credits_per_module.code_presentation WHERE si.studied_credits = max_credits_per_module.max_credits;","SELECT sr.id_student, si.final_result FROM studentinfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.studied_credits = ( SELECT MAX(si.studied_credits) FROM studentinfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student );","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
3,등록한 학생들 중 VLE 자료와 상호 작용한 학생들의 연령대별 평균 학점이 80보다 낮은 경우 연령대와 해당 평균 학점 조회,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON s.id_student = v.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_unregistration IS NULL AND v.id_site IS NOT NULL GROUP BY s.age_band HAVING AVG(studied_credits) < 80;","SELECT studentinfo.age_band, AVG(studentinfo.studied_credits) AS avg_credits FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.age_band HAVING AVG(studentinfo.studied_credits) < 80;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
4,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 사이의 관계를 분석하고 모듈 코드, 모듈 프레젠테이션, 평균 상호작용 횟수, 모듈 프레젠테이션 길이를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module, sr.code_presentation;","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, courses.module_presentation_length FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student INNER JOIN courses ON studentregistration.code_module = courses.code_module AND studentregistration.code_presentation = courses.code_presentation GROUP BY studentregistration.code_module, studentregistration.code_presentation, courses.module_presentation_length;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
5,학생들이 현재 공부하고 있는 모든 모듈의 평균학점 수,SELECT AVG(studied_credits) AS avg_credits FROM studentInfo;,SELECT AVG(studied_credits) AS avg_credits FROM studentInfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
6,코드 모듈과 모듈 별 평균 평가 가중치와 평균 클릭 수 조회,"SELECT a.code_module, AVG(a.weight) AS avg_weight, AVG(sv.sum_click) AS avg_clicks FROM assessments a JOIN studentVle sv ON a.code_module = sv.code_module GROUP BY a.code_module;","SELECT code_module, AVG(weight) AS avg_weight, AVG(sum_click) AS avg_clicks FROM assessments JOIN studentvle ON assessments.code_module = studentvle.code_module AND assessments.code_presentation = studentvle.code_presentation GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
7,모든 학생의 최종 결과와 해당 결과를 도출하는 모든 평가 유형을 조회,"SELECT si.id_student, si.final_result, GROUP_CONCAT(DISTINCT a.assessment_type) AS assessment_types FROM studentInfo si LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student LEFT JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY si.id_student, si.final_result;","SELECT studentinfo.final_result, GROUP_CONCAT(assessments.assessment_type) AS assessment_types FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student INNER JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment GROUP BY studentinfo.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
8,"""AAA"" 모듈에서 각 평가 유형과 평가 유형별로 상위 20%와 하위 20% 학생들의 평균 학점과 두 그룹 간의 평균 학점 차이를 조회","WITH region_credits AS (SELECT sa.id_student, a.assessment_type, si.studied_credits, si.imd_band, NTILE(5) OVER (PARTITION BY a.assessment_type, si.imd_band ORDER BY si.studied_credits DESC) AS quintile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA') SELECT assessment_type, AVG(CASE WHEN quintile = 5 THEN studied_credits END) AS top_20_avg_credits, AVG(CASE WHEN quintile = 1 THEN studied_credits END) AS bottom_20_avg_credits, AVG(CASE WHEN quintile = 5 THEN studied_credits END) - AVG(CASE WHEN quintile = 1 THEN studied_credits END) AS credit_diff FROM region_credits GROUP BY assessment_type;","SELECT a.assessment_type, AVG(sa.score) AS avg_score, AVG(si.studied_credits) AS avg_credits FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
9,장애가 있는 학생들의 최고 학력 조회,SELECT DISTINCT highest_education FROM studentInfo WHERE disability = 'Y';,SELECT DISTINCT highest_education FROM studentInfo WHERE disability = 'Y';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
10,성별 평균 학점이 전체 학생들의 평균 학점보다 높은 경우 성별과 평균 학점 조회,"SELECT s.gender, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender HAVING AVG(studied_credits) > (SELECT AVG(studied_credits) FROM studentInfo);","SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE gender IS NOT NULL GROUP BY gender HAVING AVG(studied_credits) > ( SELECT AVG(studied_credits) FROM studentInfo );","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
11,모든 과목의 평균 최종 점수를 계산,"SELECT code_module, code_presentation, AVG(score) AS average_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;",SELECT AVG(sa.score) AS avg_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
12,"장애가 있는 학생과 없는 학생으로 나누어 가장 많이 듣는 수업, 평균 점수와 평균 이수 학점","SELECT si.disability, courses.code_module, COUNT(*) AS course_count, AVG(sa.score) AS average_score, AVG(si.studied_credits) AS average_credits FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentvle sv ON si.id_student = sv.id_student JOIN vle ON sv.id_site = vle.id_site JOIN courses ON si.code_module = courses.code_module GROUP BY si.disability, courses.code_module ORDER BY course_count DESC;","SELECT vle.code_module, vle.code_presentation, COUNT(*) AS student_count, AVG(sa.score) AS average_score, AVG(studied_credits) AS average_credits FROM studentinfo si INNER JOIN studentassessment sa ON si.id_student = sa.id_student INNER JOIN studentvle sv ON si.id_student = sv.id_student INNER JOIN vle ON sv.id_site = vle.id_site INNER JOIN courses ON si.code_module = courses.code_module AND si.code_presentation = courses.code_presentation INNER JOIN assessments ON courses.code_module = assessments.code_module AND courses.code_presentation = assessments.code_presentation WHERE si.disability = 'Y' GROUP BY vle.code_module, vle.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
13,학생의 성별과 평균 평가 점수를 조회,"SELECT s.gender, AVG(sa.score) AS avg_score FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student GROUP BY s.gender;","SELECT studentinfo.gender, AVG(studentassessment.score) AS avg_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student GROUP BY studentinfo.gender;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
14,모든 평가 유형에서 가장 높은 평균 점수를 가진 모듈을 식별,"SELECT code_module FROM ( SELECT code_module, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, a.assessment_type ) AS avg_scores GROUP BY code_module ORDER BY MAX(avg_score) DESC LIMIT 1;",SELECT code_module FROM assessments GROUP BY code_module ORDER BY AVG(weight) DESC LIMIT 1;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
15,"각 모듈에 등록한 학생 중 최고 학력이 'Lower Than A Level'이고 모든 평가 결과가 'Pass'인 학생의 수를 계산하고 모듈 코드, 학생수를 조회","SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS lower_than_a_level_pass_count FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.highest_education = 'Lower Than A Level' AND sa.score >= 40 GROUP BY sr.code_module;","SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS num_students FROM studentinfo si JOIN studentregistration sr ON si.id_student = sr.id_student JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.highest_education = 'Lower Than A Level' AND sa.score >= 40 GROUP BY sr.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
16,Wales 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Wales' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Wales' ) );,"SELECT studentinfo.id_student, studentinfo.gender, AVG(studentassessment.score) AS avg_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Wales' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student, studentinfo.gender HAVING AVG(studentassessment.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Wales' ) );","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
17,학생의 VLE 자료 클릭 수와 활동 유형을 조회,"SELECT v.id_student, m.activity_type, v.sum_click FROM vle m JOIN studentvle v ON v.id_site = m.id_site WHERE v.code_module = m.code_module AND v.code_presentation = m.code_presentation;","SELECT s.id_student, v.activity_type, SUM(s.sum_click) AS total_clicks FROM studentvle s JOIN vle v ON s.id_site = v.id_site GROUP BY s.id_student, v.activity_type;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
18,각 모듈의 최신 프레젠테이션 조회,"SELECT code_module, code_presentation FROM courses WHERE (code_module, code_presentation) IN ( SELECT code_module, MAX(code_presentation) AS latest_presentation FROM courses GROUP BY code_module );","SELECT code_module, code_presentation FROM courses ORDER BY code_module, code_presentation DESC LIMIT 1;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
19,"각 지역의 지역명, 학생들의 평균 나이와 최대 학력 수준을 조회","SELECT s.region, AVG(s.age_band) AS avg_age, MAX(s.highest_education) AS max_education FROM studentInfo s GROUP BY s.region;","SELECT region, AVG(age_band) AS avg_age, MAX(highest_education) AS highest_education FROM studentInfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
20,모듈 코드 별 장애를 가진 학생의 모듈 코드와 평균 학점을 조회,"SELECT r.code_module, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;","SELECT code_module, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' GROUP BY code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
21,"모듈 정보, 평가 정보, 그리고 학생 정보를 결합하여 학생별 평가 점수 조회","SELECT studentinfo.id_student, studentinfo.gender, studentinfo.age_band, courses.code_module, courses.code_presentation, courses.module_presentation_length, assessments.assessment_type, assessments.weight, assessments.date, assessments.id_assessment FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation JOIN courses ON assessments.code_module = courses.code_module AND assessments.code_presentation = courses.code_presentation ORDER BY studentinfo.id_student, assessments.date;","SELECT s.code_module, a.code_presentation, a.id_assessment, a.assessment_type, si.id_student, si.studied_credits, a.weight, a.date, si.num_of_prev_attempts FROM studentInfo si JOIN assessments a ON si.code_module = a.code_module AND si.code_presentation = a.code_presentation JOIN courses s ON si.code_module = s.code_module AND si.code_presentation = s.code_presentation ORDER BY s.code_module, a.code_presentation, a.id_assessment;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
22,"각 모듈 프레젠테이션에서 장애를 신고한 여학생의 비율을 계산하고 모듈 코드, 프레젠테이션 코드, 비율 계산값을 조회","SELECT si.code_module, si.code_presentation, SUM(CASE WHEN si.gender = 'F' AND si.disability = 'Yes' THEN 1 ELSE 0 END) / COUNT(*) AS female_disabled_ratio FROM studentInfo si GROUP BY si.code_module, si.code_presentation;","SELECT code_module, code_presentation, COUNT(DISTINCT id_student) AS num_disabled_female_students, COUNT(DISTINCT id_student) / (SELECT COUNT(*) FROM studentInfo WHERE code_module = code_module AND code_presentation = code_presentation AND gender = 'F') AS disabled_female_student_percentage FROM studentInfo WHERE disability = 'Y' AND gender = 'F' GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
23,"각 모듈 프레젠테이션에서 가장 많은 시도 횟수를 가진 학생의 성별을 식별하고 모듈 코드, 프레젠테이션 코드, 성별을 조회","SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(num_of_prev_attempts) AS max_attempts FROM studentInfo GROUP BY id_student ) AS max_attempts ON si.id_student = max_attempts.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","SELECT sr.code_module, sr.code_presentation, si.gender FROM studentinfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts = ( SELECT MAX(num_of_prev_attempts) FROM studentinfo WHERE code_module = sr.code_module AND code_presentation = sr.code_presentation );","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
24,각 평가 유형별로 평균 가중치 조회,"SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type;","SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
25,모듈 코드와 프레젠테이션 코드와 모듈 프레젠테이션 코드별 가장 최근 등록된 날짜를 반환하여 최근 등록된 날짜를 기준으로 내림차순 정렬,"SELECT sr.code_module, sr.code_presentation, sr.date_registration AS last_registration FROM studentRegistration sr JOIN ( SELECT code_module, code_presentation, MAX(date_registration) AS max_date FROM studentRegistration GROUP BY code_module, code_presentation ) AS max_dates ON sr.code_module = max_dates.code_module AND sr.code_presentation = max_dates.code_presentation AND sr.date_registration = max_dates.max_date ORDER BY last_registration DESC;","SELECT code_module, code_presentation, MAX(date_registration) AS max_date FROM studentRegistration GROUP BY code_module, code_presentation ORDER BY max_date DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
26,총 클릭 수가 가장 많은 학생의 성적과 학생 id를 알고싶어,"SELECT studentvle.id_student, studentassessment.score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click = (SELECT MAX(sum_click) FROM studentvle);","SELECT sa.score, sa.id_student FROM studentAssessment sa JOIN studentvle sv ON sa.id_student = sv.id_student GROUP BY sa.id_student ORDER BY COUNT(sv.id_site) DESC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
27,"모듈 코드, 각 모듈별 최근 프레젠테이션과 해당 프레젠테이션의 평균 평가 가중치 조회","SELECT c.code_module, c.code_presentation, AVG(a.weight) AS avg_weight FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation JOIN (SELECT code_module, MAX(code_presentation) AS max_code_presentation FROM courses GROUP BY code_module) AS latest ON c.code_module = latest.code_module AND c.code_presentation = latest.max_code_presentation GROUP BY c.code_module, c.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(a.weight) AS avg_weight FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation GROUP BY c.code_module, c.code_presentation ORDER BY c.code_module, c.code_presentation DESC;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
28,"모든 학생의 평균 평가 점수와 VLE 자료를 이용한 총 클릭 수를 계산하고 학생id, 모듈 코드, 평균 평가점수,총 클릭수를 조회""","SELECT si.id_student, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks FROM studentInfo si LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student LEFT JOIN studentvle sv ON si.id_student = sv.id_student GROUP BY si.id_student;","SELECT s.id_student, s.code_module, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student JOIN studentvle sv ON s.id_student = sv.id_student GROUP BY s.id_student, s.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
29,각 모듈에 대해 등록한 학생의 평균 학점 수를 계산하고 모듈과 평균 학점 수 조회,"SELECT si.code_module, AVG(si.studied_credits) AS average_credits FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student AND si.code_module = sr.code_module GROUP BY si.code_module;","SELECT sr.code_module, AVG(si.studied_credits) AS avg_credits FROM studentinfo si JOIN studentregistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
30,여학생의 평균 이수학점이 200학점 미만인 모듈발표를 검색,"SELECT code_module, code_presentation, AVG(studied_credits) AS avg_studied_credits FROM studentinfo WHERE gender = 'F' GROUP BY code_module, code_presentation HAVING AVG(studied_credits) < 200;","SELECT code_module, code_presentation FROM studentInfo WHERE gender = 'F' AND studied_credits < 200;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
31,장애를 가진 학생들의 VLE 자료 클릭 수의 평균과 등록 모듈을 조회,"SELECT r.code_module, AVG(v.sum_click) as avg_clicks FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON r.id_student = v.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;","SELECT sr.code_module, AVG(sv.sum_click) AS avg_clicks FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student INNER JOIN studentvle sv ON si.id_student = sv.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
32,대학 학력을 가진 비장애 학생들 중 학점 평균이 90보다 낮은 지역명과 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) < 90;","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) < 90;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
33,"각 모듈 프레젠테이션별로 평균 최종 점수를 계산하고 모듈, 프레젠테이션, 평균 최종 점수를 조회( 세 개의 테이블(studentAssessment, assessments, studentRegistration)을 결합)","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentRegistration sr ON sa.id_student = sr.id_student AND a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentRegistration sr ON sa.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
34,학생 연령대와 학생 연령대별 모듈 프레젠테이션의 평균 길이,"SELECT s.age_band, AVG(c.module_presentation_length) AS avg_length FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY s.age_band;","SELECT s.age_band, AVG(c.module_presentation_length) AS avg_presentation_length FROM studentinfo s JOIN studentregistration r ON s.id_student = r.id_student JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
35,모듈 코드와 모듈 별 평가 유형과 해당 유형의 평가 수 조회,"SELECT a.code_module, a.assessment_type, COUNT(*) AS num_assessments FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY a.code_module, a.assessment_type;","SELECT c.code_module, a.assessment_type, COUNT(*) AS num_assessments FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY c.code_module, a.assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
36,BBB수업을 듣는 학생 중 성적이 가장 안좋은 학생을 찾아줘,"SELECT id_student, MIN(score) AS min_score FROM studentassessment WHERE id_assessment IN ( SELECT id_assessment FROM assessments WHERE code_module = 'BBB' ) GROUP BY id_student ORDER BY min_score LIMIT 1;","SELECT sa.id_student, sa.score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE a.code_module = 'BBB' ORDER BY sa.score ASC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
37,최대 및 최소 평가 가중치 조회,"SELECT MAX(CAST(weight AS DECIMAL(10,2))) AS max_weight, MIN(CAST(weight AS DECIMAL(10,2))) AS min_weight FROM assessments;","SELECT MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM assessments;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
38,"모듈 코드, 각 모듈의 평균 가중치와 최소 평가 가중치 조회","SELECT a.code_module, AVG(a.weight) AS avg_weight, MIN(a.weight) AS min_weight FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY a.code_module;","SELECT code_module, AVG(weight) AS avg_weight, MIN(weight) AS min_weight FROM assessments GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
39,평균 클릭 수 보다 낮은 클릭 수의 학생들의 평균 성적을 구해줘,SELECT AVG(studentassessment.score) AS average_score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click < ( SELECT AVG(studentvle.sum_click) FROM studentvle );,SELECT AVG(sa.score) AS avg_score FROM studentAssessment sa JOIN studentvle sv ON sa.id_student = sv.id_student WHERE sv.sum_click < (SELECT AVG(sum_click) FROM studentvle);,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
40,장애여부가 'Y'인 학생들의 최종 결과와 학생 수 조회,"SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;","SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
41,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생 중 여성 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS female_students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS female_students_count FROM studentRegistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentVle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
42,각 모듈 프레젠테이션에서 최근 VLE 자료 이용일과 최근 제출일을 비교하여 최신 활동을 식별,"SELECT sr.code_module, sr.code_presentation, CASE WHEN MAX(sv.date) > MAX(sa.date_submitted) THEN 'VLE 자료 이용' WHEN MAX(sv.date) < MAX(sa.date_submitted) THEN '평가 제출' ELSE '동시에 VLE 자료 이용 및 평가 제출' END AS recent_activity FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT r.code_module, r.code_presentation, MAX(v.date) AS max_vle_date, MAX(a.date_submitted) AS max_submission_date FROM studentregistration r INNER JOIN studentvle v ON r.id_student = v.id_student INNER JOIN studentAssessment a ON r.id_student = a.id_student GROUP BY r.code_module, r.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
43,학생의 등록 모듈과 프레젠테이션에 대한 평균 학점과 장애 여부를 조회,"SELECT r.code_module, r.code_presentation, s.disability, AVG(s.studied_credits) AS avg_credits FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY r.code_module, r.code_presentation, s.disability;","SELECT sr.code_module, sr.code_presentation, AVG(si.studied_credits) AS avg_credits, si.disability FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.disability;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
44,"남학생의 비율이 40%를 넘는 모든 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) * 1.0 / (SELECT COUNT(*) FROM studentregistration sr2 WHERE sr2.code_module = studentregistration.code_module AND sr2.code_presentation = studentregistration.code_presentation)) > 0.4;","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentregistration.id_student) * 1.0 / COUNT(studentinfo.id_student)) > 0.4;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
45,학생 성별과 성별에 따른 학생들의 평균 수강 기간 조회,"SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_course_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;","SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_duration FROM studentInfo s INNER JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
46,장애가 있는 학생들 중 Fail 성적으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Fail' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Fail' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
47,등록된 학생의 총 수를 조회,SELECT COUNT(id_student) as total_students FROM studentInfo;,SELECT COUNT(*) AS total_students FROM studentInfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
48,장애가 없는 학생들 중 Fail 성적으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Fail' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Fail' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
49,"자퇴한(탈퇴비율) 학생 수가 전체 등록 학생 수의 20%를 넘는 모듈, 프레젠테이션, 탈퇴 비율 조회","SELECT sr.code_module, sr.code_presentation, (COUNT(sr.date_unregistration) / CAST(COUNT(*) AS FLOAT)) * 100 AS withdrawal_percentage FROM studentregistration sr GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(sr.date_unregistration) / CAST(COUNT(*) AS FLOAT)) * 100 > 20;","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sr.id_student) / (SELECT COUNT(*) FROM studentregistration sr2 WHERE sr.code_module = sr2.code_module AND sr.code_presentation = sr2.code_presentation) * 100 AS withdrawal_rate FROM studentregistration sr GROUP BY sr.code_module, sr.code_presentation HAVING COUNT(DISTINCT sr.id_student) / (SELECT COUNT(*) FROM studentregistration sr2 WHERE sr.code_module = sr2.code_module AND sr.code_presentation = sr2.code_presentation) * 100 > 20;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
50,대학 학력을 가진 비장애 학생들 중 학점 평균이 90보다 높은 지역명과 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) > 90;","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) > 90;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
51,장애가 있는 학생('Y'로 표시된 경우) 중에서 'studentvle' 테이블에 등록되지 않은 학생의 ID를 검색,SELECT si.id_student FROM studentinfo si WHERE si.disability = 'Y' AND si.id_student NOT IN (SELECT id_student FROM studentvle);,SELECT id_student FROM studentInfo WHERE disability = 'Y' AND id_student NOT IN ( SELECT DISTINCT id_student FROM studentvle );,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
52,"장애를 가진 학생들의 과목별 'Pass' 비율을 계산하고 모듈, 프레젠테이션, 비율을 조회","SELECT si.code_module, si.code_presentation, COUNT(CASE WHEN si.final_result = 'Pass' THEN 1 END) / COUNT(*) AS pass_rate FROM studentinfo si WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation;","SELECT code_module, code_presentation, COUNT(CASE WHEN final_result = 'Pass' THEN 1 END) / COUNT(*) AS pass_rate FROM studentInfo WHERE disability = 'Y' GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
53,평균 이상으로 평가가 많이 이루어진 모듈,SELECT code_module FROM assessments GROUP BY code_module HAVING COUNT(*) > ( SELECT AVG(module_count) FROM ( SELECT COUNT(*) AS module_count FROM assessments GROUP BY code_module ) AS module_counts );,"SELECT a.code_module, COUNT(*) AS num_assessments FROM assessments a JOIN ( SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module HAVING AVG(weight) > 50 ) b ON a.code_module = b.code_module GROUP BY a.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
54,프레젠테이션 길이가 150보다 작은 각 모듈 코드의 수 조회,SELECT COUNT(DISTINCT code_module) AS num_modules FROM courses WHERE module_presentation_length < 150;,"SELECT code_module, COUNT(*) AS num_modules FROM courses GROUP BY code_module HAVING COUNT(*) < 150;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
55,"모듈별 지역별 자료 상호 작용 횟수의 평균이 20회 미만인 경우 모듈 코드와 지역명, 자료 상호 작용 횟수의 평균 조회","SELECT sr.code_module, si.region, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.region HAVING AVG(v.sum_click) < 20;","SELECT s.code_module, s.region, AVG(v.sum_click) AS avg_clicks FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.code_module, s.region HAVING AVG(v.sum_click) < 20;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
56,BBB 수업을 듣는 학생들 중 장애가 있는 학생들과 해당 학생들이 과제를 언제 제출했는지를 파악,"SELECT si.disability, sa.date_submitted, c.code_module FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student LEFT JOIN assessments a ON sa.id_assessment = a.id_assessment LEFT JOIN courses c ON si.code_module = c.code_module WHERE si.code_module = 'BBB';","SELECT s.disability, a.date_submitted FROM studentInfo s JOIN studentAssessment a ON s.id_student = a.id_student JOIN assessments a ON a.id_student = a.id_assessment JOIN courses c ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation WHERE c.code_module = 'BBB' AND s.disability = 'Y';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
57,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생 중 최근에 등록한 학생의 평균 점수와 최근 제출일 사이의 상관 관계를 분석하고 모듈, 프레젠테이션, 평균 점수, 최근 제출일을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score, MAX(studentAssessment.date_submitted) AS recent_submission_date FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN ( SELECT id_student, MAX(date) AS max_date FROM studentvle GROUP BY id_student ) top_students ON studentregistration.id_student = top_students.id_student INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student AND studentvle.date = top_students.max_date GROUP BY studentregistration.code_module, studentregistration.code_presentation;","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score, MAX(sa.date_submitted) AS latest_submission FROM studentAssessment sa INNER JOIN studentRegistration sr ON sa.id_student = sr.id_student INNER JOIN studentvle sv ON sa.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
58,"지역명과 지역별로 가장 많이 등록된 모듈 코드, 학생수를 조회","SELECT si.region, sr.code_module, COUNT(*) AS registration_count FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY si.region, sr.code_module ORDER BY registration_count DESC LIMIT 1;","SELECT studentregistration.code_module, COUNT(studentregistration.id_student) AS num_students FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentinfo.region ORDER BY num_students DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
59,"학생 평가 데이터와 평가 데이터를 결합하여 모든 과목 모듈 및 프레젠테이션에 대한 평균 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 점수를 조회","SELECT code_module, code_presentation, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;","SELECT a.code_module, a.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY a.code_module, a.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
60,평가 방법이 TMA인 학생들의 정보,"SELECT studentAssessment.*, studentInfo.gender, studentInfo.region, studentInfo.highest_education, studentInfo.imd_band, studentInfo.age_band, studentInfo.num_of_prev_attempts, studentInfo.studied_credits, studentInfo.disability, studentInfo.final_result FROM studentAssessment JOIN assessments ON studentAssessment.id_assessment = assessments.id_assessment JOIN studentInfo ON studentAssessment.id_student = studentInfo.id_student WHERE assessments.assessment_type = 'TMA';",SELECT DISTINCT studentinfo.* FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE assessments.assessment_type = 'TMA';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
61,학생 성별과 성별에 따른 학생의 평균 등록일,"SELECT s.gender, AVG(r.date_registration) AS avg_reg_date FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;","SELECT studentinfo.gender, AVG(studentregistration.date_registration) AS avg_registration_date FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student GROUP BY studentinfo.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
62,남성과 여성 학생들의 평균 나이를 조회,"SELECT s.gender, AVG(s.age_band) AS avg_age FROM studentInfo s GROUP BY s.gender;",SELECT AVG(age_band) AS avg_age FROM studentInfo WHERE gender = 'M' OR gender = 'F';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
63,"다양한 연령대에 따른 최종 결과의 분포를 계산하고 연령대, 최종 결과, 학생 수를 조회","SELECT si.age_band, si.final_result, COUNT(*) AS num_students FROM studentinfo si GROUP BY si.age_band, si.final_result ORDER BY si.age_band, num_students DESC;","SELECT age_band, final_result, COUNT(*) AS student_count FROM studentInfo GROUP BY age_band, final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
64,South Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South Region' ) );,SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South Region' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) > (SELECT AVG(score) FROM studentassessment WHERE id_student IN (SELECT id_student FROM studentinfo WHERE region = 'South Region'));,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
65,모듈 코드 AAA의 학생들의 평균을 구해줘,SELECT AVG(studentinfo.studied_credits) AS average_studied_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE courses.code_module = 'AAA';,SELECT AVG(studied_credits) AS avg_credits FROM studentInfo WHERE code_module = 'AAA';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
66,VLE 활동 유형별로 평균 활동 기간 조회,"SELECT activity_type, AVG(week_to - week_from) AS avg_activity_duration FROM vle GROUP BY activity_type;","SELECT activity_type, AVG(week_to - week_from) AS avg_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
67,모듈 코드와 모든 모듈에 등록된 학생들 중 장애를 가진 학생의 비율을 조회,"SELECT code_module, SUM(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) / COUNT(*) AS disability_ratio FROM studentInfo GROUP BY code_module;","SELECT code_module, COUNT(*) AS num_disabled_students, COUNT(*)*1.0/ (SELECT COUNT(*) FROM studentInfo WHERE code_module = code_module AND disability = 'Y') AS disabled_student_ratio FROM studentInfo GROUP BY code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
68,발표 시작 전 20일 이상 등록한 학생의 평균 수강 학점이 150학점 미만인 모듈 발표를 나열,"SELECT si.code_module, si.code_presentation FROM studentinfo si INNER JOIN studentregistration sr ON si.code_module = sr.code_module AND si.code_presentation = sr.code_presentation AND si.id_student = sr.id_student WHERE sr.date_registration > -20 GROUP BY si.code_module, si.code_presentation HAVING AVG(si.studied_credits) < 150;","SELECT sr.code_module, sr.code_presentation FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.studied_credits < 150 AND sr.date_registration > -20 GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
69,South West Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South West Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South West Region' ) );,SELECT si.id_student FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.region = 'South West Region' AND si.gender = 'M' GROUP BY si.id_student HAVING AVG(sa.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South West Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
70,최소 2번 이상 같은 모듈을 시도한 학생 찾고 학생과 모듈 조회,"SELECT id_student, code_module FROM studentInfo WHERE num_of_prev_attempts >= 2 GROUP BY id_student, code_module;","SELECT DISTINCT studentinfo.id_student, studentinfo.code_module FROM studentinfo GROUP BY studentinfo.id_student, studentinfo.code_module HAVING COUNT(studentinfo.code_module) >= 2;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
71,장애를 선언한 학생이 공부한 평균 학점이 180학점 미만인 모듈 프레젠테이션을 검색,"SELECT si.code_module, si.code_presentation FROM studentinfo si WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation HAVING AVG(si.studied_credits) < 180;","SELECT code_module, code_presentation FROM studentInfo WHERE disability = 'Y' GROUP BY code_module, code_presentation HAVING AVG(studied_credits) < 180;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
72,평균 점수 이하인 학생의 총 클릭 수를 구하시오,SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentassessment.score < (SELECT AVG(score) FROM studentassessment);,SELECT AVG(sum_click) AS avg_clicks FROM studentVle WHERE id_student IN ( SELECT id_student FROM studentvle GROUP BY id_student HAVING AVG(sum_click) < ( SELECT AVG(sum_click) FROM studentvle ) );,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
73,각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 및 평가 유형 간의 관계를 분석,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length, a.assessment_type FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY sr.code_module, sr.code_presentation, a.assessment_type;","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interactions, c.module_presentation_length, a.assessment_type FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY sr.code_module, sr.code_presentation, c.module_presentation_length, a.assessment_type;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
74,East Midlands Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'East Midlands Region' ));,SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Midlands Region' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'East Midlands Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
75,프레젠테이션 코드와 각 프레젠테이션 코드별 학생 평균 수강 학점 내림차순으로 반환,"SELECT code_presentation, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY code_presentation ORDER BY avg_credits DESC;","SELECT code_presentation, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY code_presentation ORDER BY avg_credits DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
76,모든 학생의 학생 코드와 VLE 자료 클릭 수의 총 합 조회,"SELECT id_student, SUM(sum_click) AS total_clicks FROM studentVle GROUP BY id_student;","SELECT id_student, SUM(sum_click) AS total_clicks FROM studentvle GROUP BY id_student;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
77,평가 점수가 60점 이상을 받은 학생 수와 합격율 조회,"SELECT COUNT(*) AS passed_count, (COUNT(*) / (SELECT COUNT(*) FROM studentAssessment)) * 100 AS pass_rate FROM studentAssessment WHERE score >= 60;","SELECT COUNT(*) AS pass_count, COUNT(CASE WHEN score >= 60 THEN 1 END) / COUNT(*) AS pass_rate FROM studentAssessment;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
78,프레젠테이션과 평가 일자가 있는 각 프레젠테이션의 최소 평가 일자 조회,"SELECT code_presentation, MIN(date) AS min_assessment_date FROM assessments WHERE date IS NOT NULL GROUP BY code_presentation;","SELECT code_presentation, MIN(date) AS min_assessment_date FROM assessments GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
79,Ireland 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Ireland' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Ireland' ) );,SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Ireland' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) > ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Ireland' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
80, BBB 수업을 듣는 학생 중 35-55 연령대이면서 평균 점수 이상인 학생들의 평균 점수,SELECT AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.age_band = '35-55' AND studentinfo.code_module = 'BBB';,SELECT AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.code_module = 'BBB' AND studentinfo.age_band = '35-55';,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
81,"""BBB"" 모듈에서 각 평가 유형과 평가 유형별로 상위 40% 연령대와 하위 40% 연령대 학생들의 평균 이전 시도 횟수 및 차이를 조회","WITH age_attempts AS ( SELECT sa.id_student, a.assessment_type, si.num_of_prev_attempts, si.age_band, CASE WHEN si.age_band LIKE '0-35' THEN 1 WHEN si.age_band LIKE '35-55' THEN 2 WHEN si.age_band LIKE '55<=' THEN 3 END AS age_band_num, NTILE(5) OVER (PARTITION BY a.assessment_type ORDER BY si.age_band) AS quintile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'BBB') SELECT assessment_type, AVG(CASE WHEN quintile >= 3 THEN num_of_prev_attempts END) AS top_40_avg_attempts, AVG(CASE WHEN quintile <= 2 THEN num_of_prev_attempts END) AS bottom_40_avg_attempts, AVG(CASE WHEN quintile >= 3 THEN num_of_prev_attempts END) - AVG(CASE WHEN quintile <= 2 THEN num_of_prev_attempts END) AS attempt_diff FROM age_attempts GROUP BY assessment_type;","SELECT assessments.assessment_type, AVG(CASE WHEN studentinfo.age_band = '25-34' THEN studentinfo.num_of_prev_attempts END) AS avg_attempts_upper_band, AVG(CASE WHEN studentinfo.age_band = '55+' THEN studentinfo.num_of_prev_attempts END) AS avg_attempts_lower_band, AVG(CASE WHEN studentinfo.age_band = '25-34' THEN studentinfo.num_of_prev_attempts END) - AVG(CASE WHEN studentinfo.age_band = '55+' THEN studentinfo.num_of_prev_attempts END) AS age_band_diff FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.code_module = 'BBB' GROUP BY assessments.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
82,"각 지역명, 등록 모듈코드, 모듈 별 평균 등록 기간을 조회","SELECT s.region, r.code_module, AVG(r.date_registration) AS avg_registration FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.region, r.code_module;","SELECT studentregistration.code_module, AVG(studentregistration.date_registration) AS avg_registration_duration FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
83,각 활동 유형과 활동 유형 별로 가장 짧은 기간을 가진 활동 조회,"SELECT activity_type, MIN(week_to - week_from) AS min_duration FROM vle GROUP BY activity_type;","SELECT activity_type, MIN(week_to - week_from) AS min_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
84,각 프레젠테이션의 최대 평가 가중치 조회,"SELECT code_presentation, MAX(weight) AS max_weight FROM assessments GROUP BY code_presentation;","SELECT code_presentation, MAX(weight) AS max_weight FROM assessments GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
85,모듈 코드와 각 모듈의 최소 모듈 프레젠테이션 길이 조회,"SELECT code_module, MIN(module_presentation_length) AS min_presentation_length FROM courses GROUP BY code_module;","SELECT code_module, MIN(module_presentation_length) AS min_presentation_length FROM courses GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
86,장애 학생의 비율이 20%를 초과하는 모듈 프레젠테이션 결정,"SELECT sr.code_module, sr.code_presentation, (COUNT(si.id_student) * 100.0 / (SELECT COUNT(*) FROM studentinfo WHERE disability = 'Y')) AS disability_percentage FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING disability_percentage > 20;","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT si.id_student) / (SELECT COUNT(*) FROM studentinfo WHERE disability = 'Y') AS disability_ratio FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING disability_ratio > 0.2;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
87,학생의 등록 모듈과 해당 모듈의 평균 프레젠테이션 길이를 조회,"SELECT r.code_module, AVG(c.module_presentation_length) as avg_length FROM studentRegistration r JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY r.code_module;","SELECT sr.code_module, AVG(c.module_presentation_length) AS avg_presentation_length FROM studentregistration sr INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
88,남학생 중 평균 점수 이하인 학생,"SELECT studentassessment.id_student, AVG(studentassessment.score) AS average_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' GROUP BY studentassessment.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);","SELECT studentinfo.id_student, AVG(studentassessment.score) AS avg_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'M' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) < ( SELECT AVG(score) FROM studentassessment );","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
89,각 지역의 지역명과 등록된 모듈 수를 조회,"SELECT s.region, COUNT(DISTINCT r.code_module) AS module_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.region;","SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS num_registrations FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
90,"자료 상호 작업 횟수의 평균이 15회 미만인 모듈과 성별, 평균 자료 상호작업 횟수","SELECT sr.code_module, si.gender, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.gender HAVING AVG(v.sum_click) < 15;","SELECT studentinfo.code_module, studentinfo.gender, AVG(studentvle.sum_click) AS average_clicks FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.code_module, studentinfo.gender HAVING AVG(studentvle.sum_click) < 15;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
91,모듈 프레젠테이션 길이가 평균 이상인 모듈 조회,SELECT code_module FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) > (SELECT AVG(module_presentation_length) FROM courses);,"SELECT code_module, code_presentation FROM courses WHERE module_presentation_length >= ( SELECT AVG(module_presentation_length) FROM courses );","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
92,평균 등록일보다 더 늦게 등록한 학생들의 모듈과 프레젠테이션 코드 조회,"SELECT code_module, code_presentation FROM studentRegistration GROUP BY code_module, code_presentation HAVING AVG(date_registration) > (SELECT AVG(date_registration) FROM studentRegistration);","SELECT code_module, code_presentation FROM studentRegistration WHERE date_registration > ( SELECT AVG(date_registration) FROM studentRegistration );","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
93,London Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'London Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'London Region' ) );,"SELECT studentinfo.id_student, studentinfo.gender, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'London Region' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student, studentinfo.gender HAVING AVG(studentassessment.score) > ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'London Region' ) );","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
94,평가를 제출하지 않은 학생의 비율이 가장 높은 평가 유형과 학생 비율 조회,"SELECT a.assessment_type, (COUNT(sa.id_student) - COUNT(sa.date_submitted)) / COUNT(sa.id_student) * 100 AS non_submission_percentage FROM assessments a LEFT JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type ORDER BY non_submission_percentage DESC LIMIT 1;","SELECT a.assessment_type, COUNT(sa.id_student) / (SELECT COUNT(*) FROM assessments) AS student_ratio FROM assessments a LEFT JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE sa.id_student IS NULL GROUP BY a.assessment_type ORDER BY student_ratio DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
95,"특정 모듈에 등록한 학생 중 장애가 있는 학생의 비율을 계산하고 모듈, 프레젠테이션, 장애가 있는 학생의 비율 순으로 조회","SELECT code_module, code_presentation, (COUNT(id_student) / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module AND code_presentation = si.code_presentation)) * 100 AS disability_percentage FROM studentInfo si WHERE disability = 'Y' GROUP BY code_module, code_presentation;","SELECT code_module, code_presentation, COUNT(disability) / COUNT(*) AS disability_ratio FROM studentInfo GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
96,모든 모듈 프레젠테이션에서 평균 점수가 가장 높은 평가 시험유형은 무엇,"SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type ORDER BY avg_score DESC LIMIT 1;","SELECT assessment_type, AVG(score) AS avg_score FROM studentAssessment JOIN assessments ON studentAssessment.id_assessment = assessments.id_assessment GROUP BY assessment_type ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
97,"평균 클릭 수 보다 많은 학생과 적은 학생으로 구분하고 많이 듣는 수업, 평균 점수를 각각 구해줘","WITH AverageClicks AS ( SELECT AVG(sum_click) AS avg_clicks FROM studentvle ), StudentScores AS ( SELECT studentvle.id_student, studentinfo.code_module, AVG(studentassessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student JOIN studentinfo ON studentvle.id_student = studentinfo.id_student GROUP BY studentvle.id_student, studentinfo.code_module ), CourseClickCounts AS ( SELECT code_module, CASE WHEN avg_clicks > (SELECT avg_clicks FROM AverageClicks) THEN 'Above Average Clicks' ELSE 'Below Average Clicks' END AS click_category, COUNT(*) AS student_count FROM StudentScores GROUP BY code_module, click_category ) SELECT CourseClickCounts.code_module, CourseClickCounts.click_category, CourseClickCounts.student_count FROM CourseClickCounts ORDER BY CourseClickCounts.student_count DESC;","SELECT vle.code_module, vle.code_presentation, COUNT(DISTINCT vle.id_student) AS num_students, AVG(sa.score) AS avg_score FROM studentvle vle INNER JOIN studentAssessment sa ON vle.id_student = sa.id_student GROUP BY vle.code_module, vle.code_presentation HAVING COUNT(DISTINCT vle.id_student) > (SELECT AVG(num_students) FROM ( SELECT COUNT(DISTINCT vle.id_student) AS num_students FROM studentvle vle INNER JOIN studentAssessment sa ON vle.id_student = sa.id_student GROUP BY vle.code_module, vle.code_presentation ) AS num_students_avg );","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
98,특정 모듈의 평균 모듈 프레젠테이션 길이와 최소 모듈 프레젠테이션 길이 조회,"SELECT AVG(module_presentation_length) AS avg_presentation_length, MIN(module_presentation_length) AS min_presentation_length FROM courses WHERE code_module = 'CCC';","SELECT AVG(module_presentation_length) AS avg_length, MIN(module_presentation_length) AS min_length FROM courses WHERE code_module = 'MATHS';","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
99,"장애 학생의 비율이 5%를 초과하는 모든 모듈, 프레젠테이션을 조회","SELECT sr.code_module, sr.code_presentation FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(si.id_student) * 1.0 / (SELECT COUNT(*) FROM studentregistration WHERE code_module = sr.code_module AND code_presentation = sr.code_presentation)) > 0.05;","SELECT code_module, code_presentation FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY code_module, code_presentation HAVING COUNT(*) * 1.0 / (SELECT COUNT(*) FROM studentregistration WHERE code_module = sr.code_module AND code_presentation = sr.code_presentation) > 0.05;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
100,평균 가중치 중 가장 낮은 유형을 조회,"SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type ORDER BY avg_weight ASC LIMIT 1;","SELECT assessment_type, AVG(weight) AS average_weight FROM assessments GROUP BY assessment_type ORDER BY average_weight ASC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
101,"Ireland 지역의 성별과 활동 유형, 모듈 별 평균 점수","SELECT studentinfo.gender, vle.activity_type, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE studentinfo.region = 'Ireland' GROUP BY studentinfo.gender, vle.activity_type;","SELECT courses.code_module, studentinfo.gender, studentinfo.activity_type, AVG(studentassessment.score) AS avg_score FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Ireland' GROUP BY courses.code_module, studentinfo.gender, studentinfo.activity_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
102,장애가 없는 학생들 중 중도포기한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Withdrawn' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Withdrawn' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
103,모듈을 Pass 등급을 받은 학생의 비율이 40% 미만인 지역명과 비율을 조회,"SELECT studentinfo.region, COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student) AS pass_percentage FROM studentinfo GROUP BY studentinfo.region HAVING pass_percentage < 0.4;","SELECT region, (COUNT(CASE WHEN final_result = 'Pass' THEN 1 END) * 100.0 / COUNT(*)) AS pass_percentage FROM studentInfo WHERE final_result = 'Pass' GROUP BY region HAVING pass_percentage < 40;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
104,모듈 코드와 모듈 프레젠테이션 기간이 150일을 초과하는 모든 모듈과 프레젠테이션,"SELECT DISTINCT code_module, code_presentation FROM courses WHERE module_presentation_length > 150;","SELECT code_module, code_presentation FROM courses WHERE module_presentation_length > 150;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
105,"프레젠테이션 코드, 각 프레젠테이션의 최소 평가 일자와 해당 프레젠테이션의 평균 평가 점수 조회","SELECT a.code_presentation, MIN(a.date) AS min_assessment_date, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation;","SELECT code_presentation, MIN(date) AS min_assessment_date, AVG(score) AS avg_score FROM assessments LEFT JOIN studentAssessment ON assessments.id_assessment = studentAssessment.id_assessment GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
106,"모든 모듈 프레젠테이션에 대해 평균 평가 점수가 가장 높은 모듈을 식별하고 모듈 코드, 평균 점수를 조회","SELECT sr.code_module, AVG(sa.score) AS avg_score FROM studentAssessment sa INNER JOIN studentregistration sr ON sa.id_student = sr.id_student GROUP BY sr.code_module ORDER BY avg_score DESC LIMIT 1;","SELECT sr.code_module, AVG(sa.score) AS avg_score FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
107,"교육 수준이 가장 높은 학생 중에서 평균 점수가 가장 높은 평가를 식별하고 평가ID, 평균 점수를 조회","SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.highest_education = (SELECT MAX(highest_education) FROM studentinfo) GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student JOIN studentRegistration sr ON si.id_student = sr.id_student WHERE si.highest_education = ( SELECT MAX(highest_education) FROM studentInfo ) GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
108,여러 모듈에 등록한 학생 중 가장 많은 학생이 등록한 모듈 코드를 식별,"SELECT code_module FROM ( SELECT code_module, COUNT(DISTINCT id_student) AS student_count FROM studentInfo GROUP BY code_module ) AS module_counts ORDER BY student_count DESC LIMIT 1;",SELECT code_module FROM studentInfo GROUP BY code_module ORDER BY COUNT(*) DESC LIMIT 1;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
109,"각 모듈에 등록한 학생 중 최고 학력이 'No Formal quals'이고 최근 평가를 제출한 여학생의 수를 계산하고 모듈 코드, 학생수를 조회","SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS recent_female_count FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(date_submitted) AS latest_submission FROM studentAssessment GROUP BY id_student ) AS latest_submissions ON si.id_student = latest_submissions.id_student INNER JOIN studentRegistration sr ON sr.id_student = si.id_student WHERE si.gender = 'F' AND si.highest_education = 'No Formal quals' GROUP BY sr.code_module;","SELECT r.code_module, COUNT(DISTINCT s.id_student) AS num_women_with_no_formal_quals_and_recent_assessment FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentAssessment a ON s.id_student = a.id_student WHERE s.highest_education = 'No Formal quals' AND a.date_submitted <= (SELECT MAX(date_submitted) FROM studentAssessment WHERE id_student = s.id_student) GROUP BY r.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
110,"35-55세 학생들의 가장 많이 듣는 수업, 그 수업의 점수, 지역, 사이트id","SELECT studentinfo.code_module, AVG(studentassessment.score) AS average_score, studentinfo.region, studentvle.id_site FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentinfo.age_band = '35-55' GROUP BY studentinfo.code_module, studentinfo.region, studentvle.id_site ORDER BY COUNT(*) DESC LIMIT 1;","SELECT s.code_module, s.code_presentation, AVG(sa.score) AS average_score, s.region, v.id_site FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student JOIN studentVle v ON s.id_student = v.id_student WHERE s.age_band = '35-55' GROUP BY s.code_module, s.code_presentation, s.region, v.id_site ORDER BY COUNT(*) DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
111,모듈별로 가장 많은 학생 수를 가진 상위 5개 모듈명과 학생 수 조회,"SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module ORDER BY num_students DESC LIMIT 5;","SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student GROUP BY code_module ORDER BY num_students DESC LIMIT 5;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
112,"0-35세의 학생들의 모듈과 평균 점수, 사이트 id, 활동 유형","SELECT vle.code_module, AVG(studentassessment.score) AS average_score, vle.id_site, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE studentinfo.age_band = '0-35' GROUP BY vle.code_module, vle.id_site, vle.activity_type;","SELECT studentinfo.code_module, AVG(studentassessment.score) AS avg_score, studentvle.id_site, studentvle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentinfo.age_band = '0-35' GROUP BY studentinfo.code_module, studentvle.id_site, studentvle.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
113,"평가 결과가 'Distinction'이고 가장 많은 평가를 받은 모듈을 식별하고 모듈 코드, 평가의 수를 조회","SELECT sr.code_module, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student WHERE si.final_result = 'Distinction' GROUP BY sr.code_module ORDER BY assessment_count DESC LIMIT 1;","SELECT sr.code_module, COUNT(sa.id_assessment) AS num_assessments FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.highest_education = 'Distinction' GROUP BY sr.code_module ORDER BY num_assessments DESC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
114,모든 프레젠테이션에 대한 최대 및 최소 평가 가중치를 조회,"SELECT code_presentation, (SELECT MAX(weight) FROM assessments AS a2 WHERE a1.code_presentation = a2.code_presentation) AS max_weight, (SELECT MIN(weight) FROM assessments AS a3 WHERE a1.code_presentation = a3.code_presentation) AS min_weight FROM assessments AS a1 GROUP BY code_presentation;","SELECT code_presentation, MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM assessments GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
115,모든 프레젠테이션에 대한 평가 유형과 평가 유형별 평균 가중치를 조회,"SELECT assessment_type, AVG(weight) as avg_weight FROM assessments GROUP BY assessment_type;","SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
116,평가 점수가 40점 미만인 학생들의 평균 평가 점수와 평가 유형을 조회,"SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40 GROUP BY a.assessment_type;","SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40 GROUP BY a.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
117,각 모듈의 프레젠테이션 길이가 평균 이상인 모듈,SELECT code_module FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) >= (SELECT AVG(module_presentation_length) FROM courses);,"SELECT code_module, code_presentation FROM courses WHERE module_presentation_length >= ( SELECT AVG(module_presentation_length) FROM courses );","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
118,가장 많은 클릭을 한 모듈과 그 학생의 클릭 수 조회,"SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentInfo GROUP BY code_module ORDER BY num_students DESC LIMIT 1;","SELECT code_module, COUNT(*) AS num_clicks FROM studentInfo GROUP BY code_module ORDER BY num_clicks DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
119,"각 모듈 프레젠테이션별 장애가 있는 학생의 평균 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 점수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentRegistration sr ON a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student INNER JOIN studentassessment sa ON sr.id_student = sa.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
120,다양한 모듈 프레젠테이션에서 학생당 공부한 평균 학점이 가장 높은 지역 순으로 정렬,"SELECT si.region, AVG(si.studied_credits) AS avg_credits FROM studentinfo si GROUP BY si.region ORDER BY avg_credits DESC;","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY region ORDER BY avg_credits DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
121,Withdrawn 등급을 받은 학생들의 성별에 따른 평균 학점,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY gender;","SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
122,남학생 중 활동 유형이 homepage인 학생을 찾으시오,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'homepage';,SELECT DISTINCT vle.id_student FROM studentvle vle JOIN studentinfo si ON vle.id_student = si.id_student JOIN courses c ON si.course_id = c.code_module AND si.course_id = c.code_presentation WHERE c.activity_type = 'homepage' AND si.gender = 'M';,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
123,모든 학생의 등록 모듈과 프레젠테이션별 평균 VLE 자료 클릭 수를 조회,"SELECT r.code_module, r.code_presentation, AVG(v.sum_click) AS avg_clicks FROM studentRegistration r JOIN studentVle v ON r.id_student = v.id_student GROUP BY r.code_module, r.code_presentation;","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentvle.sum_click) AS avg_clicks FROM studentregistration JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
124,특정 모듈(AAA)과 프레젠테이션(2013J)에서 평균 점수가 50점 이상인 학생의 목록,"SELECT si.id_student, si.code_module, si.code_presentation, AVG(sa.score) AS average_score FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.code_module = 'AAA' AND si.code_presentation = '2013J' GROUP BY si.id_student HAVING AVG(sa.score) >= 50;",SELECT DISTINCT studentinfo.id_student FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.code_module = 'AAA' AND studentinfo.code_presentation = '2013J' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= 50;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
125,이전 시도(전학)가 있는 학생들 중 장애 여부와 학생들의 수 조회,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE num_of_prev_attempts > 1 GROUP BY disability;","SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE num_of_prev_attempts > 0 GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
126,장애가 있는 학생들의 거주 지역명 조회,SELECT DISTINCT region FROM studentInfo WHERE disability = 'Y';,SELECT DISTINCT region FROM studentInfo WHERE disability = 'Y';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
127,여학생 중 활동 유형이 resource인 학생을 찾으시오,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' AND vle.activity_type = 'resource';,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' AND studentvle.id_site IN (SELECT id_site FROM studentvle GROUP BY id_site HAVING COUNT(*) = 1);,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
128,각 성별의 학생들의 등록 모듈 수를 조회,"SELECT s.gender, COUNT(DISTINCT r.code_module) AS module_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.gender;","SELECT studentregistration.code_module, studentinfo.gender, COUNT(studentregistration.code_module) AS registration_count FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentinfo.gender;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
129,모든 학생의 평균 나이와 성별을 조회,"SELECT s.gender, AVG(s.age_band) AS avg_age FROM studentInfo s GROUP BY s.gender;","SELECT AVG(age_band) AS avg_age, gender FROM studentInfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
130,"VLE에서 학생당 평균 클릭 수가 5 미만인 모듈, 프레젠테이션을 조회","SELECT studentinfo.code_module, studentinfo.code_presentation FROM studentinfo INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.code_module, studentinfo.code_presentation HAVING AVG(studentvle.sum_click) < 5;","SELECT studentinfo.code_module, studentinfo.code_presentation FROM studentvle INNER JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentvle.sum_click < (SELECT AVG(sum_click) FROM studentvle WHERE id_student = studentinfo.id_student) GROUP BY studentinfo.code_module, studentinfo.code_presentation;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
131,학생id와 학생의 총 수강 모듈 수와 평균 학습 점수 조회,"SELECT id_student, COUNT(*) AS num_modules_enrolled, AVG(score) AS avg_learning_score FROM studentAssessment GROUP BY id_student;","SELECT id_student, COUNT(*) AS total_modules, AVG(score) AS average_score FROM studentAssessment GROUP BY id_student;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
132,"각 모듈 프레젠테이션에 등록한 학생 중 여학생의 평균 학습 시간과 남학생의 평균 학습 시간을 비교하여 분석하고 모듈 코드, 프레젠테이션 코드, 각 성별의 평균 학습 시간을 조회","SELECT sr.code_module, sr.code_presentation, AVG(CASE WHEN si.gender = 'F' THEN DATEDIFF(sv.date, sr.date_registration) END) AS avg_female_learning_time, AVG(CASE WHEN si.gender = 'M' THEN DATEDIFF(sv.date, sr.date_registration) END) AS avg_male_learning_time FROM studentregistration sr LEFT JOIN studentInfo si ON sr.id_student = si.id_student LEFT JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT r.code_module, r.code_presentation, AVG(CASE WHEN s.gender = 'F' THEN v.sum_click END) AS female_avg_learning_time, AVG(CASE WHEN s.gender = 'M' THEN v.sum_click END) AS male_avg_learning_time FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student JOIN studentvle v ON r.id_student = v.id_student GROUP BY r.code_module, r.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
133,Pass 등급을 받은 학생들의 연령대와 연령대별 평균 학점,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
134,Pass 등급을 받은 학생 중 장애여부와 학생들의 수 조회,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Pass' GROUP BY disability;","SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Pass' GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
135,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 점수와 VLE 자료 이용량 사이의 상관 관계를 분석하고 모듈 코드, 프레젠테이션 코드, 학생의 평균점수, VLE 자료 이용량도 함께 조회","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentassessment.score) AS avg_score, studentvle.sum_click AS vle_activity FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student INNER JOIN studentassessment ON studentregistration.id_student = studentassessment.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
136,AAA수업을 듣는 학생 중 0-35세 이면서 평균 점수 이상인 학생을 찾아줘,SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.code_module = 'AAA' AND studentinfo.age_band = '0-35' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.age_band = '0-35' AND studentinfo.code_module = 'AAA' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE code_module = 'AAA' );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
137,각 모듈 코드와 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 및 최종 결과 간의 관계를 분석,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_clicks_per_student, c.module_presentation_length, sr.date_unregistration FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation LEFT JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation WHERE a.id_assessment IS NULL GROUP BY sr.code_module, sr.code_presentation, sr.date_unregistration;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
138,"성별과 모듈별 학생 수가 10명을 초과하는 경우 성별, 모듈 코드, 학생 수 조회","SELECT si.gender, sr.code_module, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.gender, sr.code_module HAVING COUNT(DISTINCT si.id_student) > 10;","SELECT studentinfo.gender, studentregistration.code_module, COUNT(studentinfo.id_student) AS student_count FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student GROUP BY studentinfo.gender, studentregistration.code_module HAVING COUNT(studentinfo.id_student) > 10;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
139,"지역명, 각 지역별로 등록된 학생 수와 VLE 자료 클릭 수의 총 합 조회","SELECT i.region, COUNT(r.id_student) AS num_students, SUM(v.sum_click) AS total_clicks FROM studentInfo i JOIN studentRegistration r ON i.id_student = r.id_student JOIN studentVle v ON r.id_student = v.id_student GROUP BY i.region;","SELECT studentinfo.region, COUNT(studentregistration.id_student) AS registered_students, SUM(studentvle.sum_click) AS total_clicks FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
140,최종 결과 pass인 학생들의 평균 점수,SELECT AVG(score) AS average_score FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE final_result = 'pass' );,SELECT AVG(studentassessment.score) AS avg_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'pass';,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
141,지역별 학생 수가 50명을 초과하는 경우 지역명과 학생 수 조회,"SELECT si.region, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.region HAVING COUNT(DISTINCT si.id_student) > 50;","SELECT s.region, COUNT(*) AS num_students FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.region HAVING COUNT(*) > 50;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
142,최종 결과가 'Fail'이고 평가 점수가 40보다 낮은 모든 학생 중 가장 많은 학점을 취득한 학생의 학점 수를 식별,SELECT MAX(si.studied_credits) AS max_credits FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Fail' AND sa.score < 40;,SELECT studentinfo.studied_credits FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.final_result = 'Fail' AND studentassessment.score < 40 ORDER BY studentinfo.studied_credits DESC LIMIT 1;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
143,모든 프레젠테이션의 평균 길이,SELECT AVG(module_presentation_length) AS avg_length FROM courses;,SELECT AVG(module_presentation_length) AS avg_presentation_length FROM courses;,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
144,특정 모듈 프레젠테이션에 사용된 모든 VLE 자료(활동 유형)를 나열,SELECT v.activity_type FROM vle v INNER JOIN courses c ON v.code_module = c.code_module AND v.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND c.code_presentation = '2013B';,SELECT DISTINCT activity_type FROM vle WHERE code_module = 'BBS' AND code_presentation = '2017B';,"CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
145,지역명과 각 지역별로 사용된 VLE 자료의 수 조회,"SELECT s.region, COUNT(DISTINCT v.id_site) AS num_materials FROM studentInfo s JOIN vle v ON s.code_module = v.code_module AND s.code_presentation = v.code_presentation GROUP BY s.region;","SELECT studentinfo.region, COUNT(DISTINCT vle.id_site) AS num_of_vle_materials FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
146,Fail 등급을 받은 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
147,모든 학생의 최대 및 최소 나이대를 조회,"SELECT MAX(age_band) AS max_age, MIN(age_band) AS min_age FROM studentInfo;","SELECT MIN(age_band) AS min_age_band, MAX(age_band) AS max_age_band FROM studentinfo;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
148,최종 결과가 pass인 학생의 비율이 가장 높은 지역,SELECT region FROM studentinfo GROUP BY region ORDER BY SUM(CASE WHEN final_result = 'pass' THEN 1 ELSE 0 END) / COUNT(*) DESC LIMIT 1;,"SELECT region, COUNT(*) AS pass_count FROM studentInfo WHERE final_result = 'pass' GROUP BY region ORDER BY pass_count DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
149,East Anglian Region 지역의 평균 점수를 구하시오,SELECT AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Anglian Region';,SELECT AVG(studentAssessment.score) AS average_score FROM studentAssessment JOIN studentInfo ON studentAssessment.id_student = studentInfo.id_student WHERE studentInfo.region = 'East Anglian Region';,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
150,"여학생의 비율이 60% 이상인 모든 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) * 1.0 / (SELECT COUNT(DISTINCT studentregistration2.id_student) FROM studentregistration studentregistration2 WHERE studentregistration2.code_module = studentregistration.code_module AND studentregistration2.code_presentation = studentregistration.code_presentation)) > 0.6;","SELECT code_module, code_presentation FROM studentregistration r JOIN studentinfo s ON r.id_student = s.id_student WHERE s.gender = 'F' GROUP BY code_module, code_presentation HAVING COUNT(*) / (SELECT COUNT(*) FROM studentregistration r JOIN studentinfo s ON r.id_student = s.id_student WHERE s.gender = 'F') >= 0.6;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
151,등록 취소한 학생이 10명 이상인 모듈과 프레젠테이션 조회,"SELECT code_module, code_presentation FROM studentRegistration WHERE date_unregistration IS NOT NULL GROUP BY code_module, code_presentation HAVING COUNT(*) >= 10;","SELECT code_module, code_presentation FROM studentregistration WHERE date_unregistration IS NOT NULL GROUP BY code_module, code_presentation HAVING COUNT(*) >= 10;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
152,10월 프레젠테이션에 제공되는 모듈과 프레젠테이션 길이를 조회,"SELECT courses.code_module, courses.module_presentation_length FROM courses WHERE courses.code_presentation LIKE '%B' OR courses.code_presentation LIKE '%J';","SELECT code_module, module_presentation_length FROM courses WHERE code_presentation LIKE '%10%';","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
153,VLE의 모든 활동 유형과 활동 유형별 평균 활동 기간을 조회,"SELECT activity_type, AVG(week_to - week_from) as avg_activity_duration FROM vle GROUP BY activity_type;","SELECT activity_type, AVG(week_to - week_from) AS avg_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
154,성별과 모듈별로 자료 상호 작용 횟수의 평균 조회,"SELECT si.gender, sr.code_module, AVG(v.sum_click) AS avg_clicks FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle v ON si.id_student = v.id_student GROUP BY si.gender, sr.code_module ORDER BY avg_clicks DESC;","SELECT studentinfo.gender, studentregistration.code_module, AVG(studentvle.sum_click) AS average_interactions FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.gender, studentregistration.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
155,"각 모듈 프레젠테이션에서 가장 많은 모듈을 이수한 학생의 최종 결과를 식별하고 모듈 코드, 최종 결과를 조회","SELECT sr.code_module, si.final_result FROM studentInfo si INNER JOIN ( SELECT id_student, COUNT(DISTINCT code_module) AS module_count FROM studentInfo GROUP BY id_student ORDER BY module_count DESC LIMIT 1 ) AS max_modules ON si.id_student = max_modules.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","SELECT r.code_module, si.final_result FROM studentInfo si JOIN studentRegistration r ON si.id_student = r.id_student GROUP BY r.code_module, si.final_result ORDER BY COUNT(*) DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
156,"모듈을 Pass 등급을 받은 학생의 비율이 평균 합격률보다 낮은 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student)) < (SELECT AVG(passing_rate) FROM (SELECT COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student) AS passing_rate FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation) AS avg_passing_rates);","SELECT sr.code_module, sr.code_presentation FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student INNER JOIN ( SELECT code_module, code_presentation, AVG(CASE WHEN final_result = 'Pass' THEN 1 ELSE 0 END) / COUNT(*) AS pass_rate FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY code_module, code_presentation ) AS avg_pass_rate ON sr.code_module = avg_pass_rate.code_module AND sr.code_presentation = avg_pass_rate.code_presentation WHERE si.final_result = 'Pass' AND si.final_result = 'Pass' AND avg_pass_rate.pass_rate < ( SELECT AVG(pass_rate) FROM ( SELECT code_module, code_presentation, AVG(CASE WHEN final_result = 'Pass' THEN 1 ELSE 0 END) / COUNT(*) AS pass_rate FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY code_module, code_presentation ) AS avg_pass_rate );","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
157,"런던 지역의 학생들의 성별, 연령대, 장애 여부, 그리고 해당 모듈의 평가 유형 및 가중치 조회","SELECT studentinfo.gender, studentinfo.age_band, studentinfo.disability, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.region = 'London Region';","SELECT s.gender, s.age_band, s.disability, a.assessment_type, a.weight FROM studentInfo s JOIN assessments a ON s.code_module = a.code_module AND s.code_presentation = a.code_presentation WHERE s.region = 'London';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
158,남학생 중 평균 점수 이상인 학생,"SELECT sa.id_student, AVG(sa.score) AS average_score FROM studentassessment AS sa JOIN studentinfo AS si ON sa.id_student = si.id_student WHERE si.gender = 'M' GROUP BY sa.id_student HAVING AVG(sa.score) >= ( SELECT AVG(score) FROM studentassessment );",SELECT si.id_student FROM studentInfo si JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.gender = 'M' AND sa.score >= ( SELECT AVG(score) FROM studentAssessment WHERE id_student IN ( SELECT id_student FROM studentInfo WHERE gender = 'M' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
159,"""23632"" 학생의 성별, 최종 결과, 해당 모듈의 평가 유형 및 가중치 조회","SELECT studentinfo.gender, studentinfo.final_result, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 23632;","SELECT studentinfo.gender, studentinfo.final_result, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 23632;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
160,Fail 등급을 받은 학생들의 연령대와 연령대별 평균 학점 ,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
161,각 활동 유형과 활동 유형별 평균 활동 기간 조회,"SELECT activity_type, AVG(week_to - week_from) AS avg_duration FROM vle GROUP BY activity_type ORDER BY avg_duration DESC;","SELECT activity_type, AVG(week_to - week_from) AS avg_activity_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
162,모듈과 각 모듈의 평균 모듈 프레젠테이션 길이와 최대 모듈 프레젠테이션 길이 조회,"SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length, MAX(module_presentation_length) AS max_presentation_length FROM courses GROUP BY code_module;","SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length, MAX(module_presentation_length) AS max_presentation_length FROM courses GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
163,성별에 따른 학생들의 최고 학력 수준 분포를 조회,"SELECT gender, highest_education, COUNT(*) AS count FROM studentInfo GROUP BY gender, highest_education;","SELECT gender, highest_education, COUNT(*) AS count FROM studentInfo GROUP BY gender, highest_education ORDER BY gender, count DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
164,모든 프레젠테이션의 'BBB' 모듈에서 VLE 자료에 사용되는 가장 일반적인 활동 유형과 해당 활동 유형의 자료개수,"SELECT activity_type, COUNT(*) AS num_materials FROM vle INNER JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE courses.code_module = 'BBB' GROUP BY activity_type ORDER BY num_materials DESC LIMIT 1;","SELECT activity_type, COUNT(*) AS num_activities FROM vle JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE courses.code_module = 'BBB' GROUP BY activity_type ORDER BY num_activities DESC LIMIT 1;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
165,AAA'모듈의 모든 평가에서 가장 높은 평균 가중치를 갖는 평가 유형과 해당 가중치를 조회,"SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments WHERE code_module = 'AAA' GROUP BY assessment_type ORDER BY avg_weight DESC LIMIT 1;","SELECT a.assessment_type, AVG(a.weight) AS avg_weight FROM assessments a WHERE a.code_module = 'AAA' GROUP BY a.assessment_type ORDER BY avg_weight DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
166,가장 많은 모듈을 학습한 학생 id와 모듈의 수를 조회,"SELECT id_student, COUNT(DISTINCT code_module) AS num_modules FROM studentRegistration GROUP BY id_student ORDER BY num_modules DESC LIMIT 1;","SELECT id_student, COUNT(DISTINCT code_module) AS num_modules FROM studentregistration GROUP BY id_student ORDER BY num_modules DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
167,"date가 100 이상인 학생들의 평균 성적, 활동 유형 및 이수 학점","SELECT si.id_student, AVG(sa.score) AS average_score, v.activity_type, si.studied_credits FROM studentassessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentvle sv ON sa.id_student = sv.id_student JOIN vle v ON sv.id_site = v.id_site JOIN studentinfo si ON sa.id_student = si.id_student WHERE a.date >= 100 GROUP BY si.id_student, v.activity_type, si.studied_credits;","SELECT AVG(sa.score) AS avg_score, a.assessment_type, si.studied_credits FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentVle sv ON sa.id_student = sv.id_student INNER JOIN vle v ON sv.id_site = v.id_site WHERE a.date >= 100 GROUP BY a.assessment_type, si.studied_credits;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
168,학생의 최대 및 최소 이전 시도 횟수를 조회,"SELECT MAX(num_of_prev_attempts) AS max_attempts, MIN(num_of_prev_attempts) AS min_attempts FROM studentInfo;","SELECT MAX(num_of_prev_attempts) AS max_attempts, MIN(num_of_prev_attempts) AS min_attempts FROM studentInfo;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
169,"모듈을 Pass 등급을 받은 남학생의 비율보다 여학생의 비율이 낮은 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Pass' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(CASE WHEN studentinfo.gender = 'F' THEN 1 END) / COUNT(studentinfo.id_student)) < (COUNT(CASE WHEN studentinfo.gender = 'M' THEN 1 END) / COUNT(studentinfo.id_student));","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT si.id_student) AS num_passing_students FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student INNER JOIN ( SELECT code_module, code_presentation, COUNT(*) AS num_passing_students FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.gender = 'M' AND si.final_result = 'Pass' GROUP BY code_module, code_presentation HAVING COUNT(*) > ( SELECT COUNT(*) FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' AND si.final_result = 'Pass' ) ) AS passing_students ON sr.code_module = passing_students.code_module AND sr.code_presentation = passing_students.code_presentation WHERE si.gender = 'F' AND si.final_result = 'Pass' GROUP BY sr.code_module, sr.code_presentation HAVING COUNT(DISTINCT si.id_student) < passing_students.num_passing_students;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
170,"각 모듈 프레젠테이션에 등록한 학생 중 여학생이 VLE 자료를 이용한 평균 상호 작용 횟수와 최종 결과 간의 관계를 분석하고 성별, 모듈 코드와 프레젠테이션 코드도 함께 조회","SELECT si.gender, sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY si.gender, sr.code_module, sr.code_presentation, si.final_result;","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.gender, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation, si.gender, si.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
171,Pass 등급을 받은 학생들의 성별에 따른 평균 학점,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY gender;","SELECT gender, AVG(studied_credits) AS average_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
172,모든 학생의 최고 학력 수준 분포를 조회,"SELECT highest_education, COUNT(*) AS count FROM studentInfo GROUP BY highest_education;","SELECT highest_education, COUNT(*) AS count FROM studentInfo GROUP BY highest_education;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
173,"각 모듈 프레젠테이션에 등록한 학생의 평균 상호 작용 횟수와 각 모듈 프레젠테이션의 길이를 모듈 정보와 결합하여 분석하고 모듈, 프레젠테이션, 평균 상호 작용 횟수, 프레젠테이션 길이를 조회","SELECT courses.code_module, courses.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, courses.module_presentation_length FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY courses.code_module, courses.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) AS avg_interactions, c.module_presentation_length FROM courses c LEFT JOIN studentregistration sr ON c.code_module = sr.code_module AND c.code_presentation = sr.code_presentation LEFT JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY c.code_module, c.code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
174,"장애가 있는 학생이 최소 한번 이상 시도한 과목 모듈별로, 학생수를 세고 그 숫자가 가장 많은 상위 3개 과목모듈과 학생수를 조회","SELECT courses.code_module, COUNT(DISTINCT studentinfo.id_student) AS num_attempts FROM studentinfo INNER JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation INNER JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE studentinfo.disability = 'Y' GROUP BY courses.code_module ORDER BY num_attempts DESC LIMIT 3;","SELECT courses.code_module, COUNT(studentinfo.id_student) AS num_attempts FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE studentinfo.disability = 'Y' GROUP BY courses.code_module ORDER BY num_attempts DESC LIMIT 3;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
175,특정 모듈의 최대 모듈 프레젠테이션 길이 조회,SELECT MAX(module_presentation_length) AS max_presentation_length FROM courses WHERE code_module = 'BBB';,SELECT MAX(module_presentation_length) AS max_presentation_length FROM courses WHERE code_module = 'ABC';,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
176,Withdrawn 등급을 받은 학생 중 장애여부와 학생들의 수 조회,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY disability;","SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
177,"모듈이 'BBB'이고 프레젠테이션이 '2014J'에 등록된 모든 학생들과 그들의 최종 성적을 모듈, 프레젠테이션, 학생, 최종 성적을 조회","SELECT si.code_module, si.code_presentation, si.id_student, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.code_module = 'BBB' AND si.code_presentation = '2014J';","SELECT s.code_module, s.code_presentation, s.id_student, s.final_result FROM studentInfo s JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE s.code_module = 'BBB' AND s.code_presentation = '2014J';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
178,모듈 코드와 각 모듈의 평균 프레젠테이션 길이 조회,"SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_module;","SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
179,학생들의 평균 모듈 재시도 횟수,SELECT AVG(num_of_prev_attempts) AS avg_attempts FROM studentInfo;,SELECT AVG(num_of_prev_attempts) AS avg_attempts FROM studentInfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
180,"imd_band 별로 학생 수와 비율, 평균 점수와 활동 유형을 알고 싶어","SELECT studentinfo.imd_band, COUNT(studentinfo.id_student) AS student_count, COUNT(studentinfo.id_student) / (SELECT COUNT(*) FROM studentinfo) * 100 AS student_ratio, AVG(studentassessment.score) AS average_score, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.imd_band, vle.activity_type;","SELECT imd_band, COUNT(*) AS num_students, (COUNT(*) / (SELECT COUNT(*) FROM studentinfo)) * 100 AS percent_of_students, AVG(score) AS avg_score, activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY imd_band, activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
181,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료 이용일과 평가 제출일의 차이를 계산하여 학습 시간을 확인하고 모듈 코드, 프레젠테이션 코드, 학습시간을 조회","SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentRegistration sr INNER JOIN studentVle sv ON sr.id_student = sv.id_student INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
182,이수 학점이 100 이상인 학생과 100 이하인 학생을 구분하고 각각의 평균 점수와 활동 유형을 구해줘,"SELECT CASE WHEN external_studentinfo.studied_credits >= 100 THEN '100 이상' ELSE '100 미만' END AS credit_group, AVG(external_studentassessment.score) AS average_score, SUBSTRING_INDEX(GROUP_CONCAT(sub_v.activity_type ORDER BY activity_count DESC), ',', 1) AS most_common_activity FROM studentinfo AS external_studentinfo JOIN studentassessment AS external_studentassessment ON external_studentinfo.id_student = external_studentassessment.id_student JOIN assessments AS external_assessments ON external_studentassessment.id_assessment = external_assessments.id_assessment JOIN (SELECT code_module, code_presentation, activity_type, COUNT(*) AS activity_count FROM vle WHERE activity_type IS NOT NULL GROUP BY code_module, code_presentation, activity_type) AS sub_v ON external_assessments.code_module = sub_v.code_module AND external_assessments.code_presentation = sub_v.code_presentation GROUP BY CASE WHEN external_studentinfo.studied_credits >= 100 THEN '100 이상' ELSE '100 미만' END;","SELECT si.studied_credits, AVG(sa.score) AS average_score, a.activity_type FROM studentInfo si LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student LEFT JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE si.studied_credits >= 100 GROUP BY si.studied_credits, a.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
183,지역명과 등록된 학생의 지역별 등록 수를 조회,"SELECT region, COUNT(*) AS registration_count FROM studentInfo GROUP BY region;","SELECT region, COUNT(*) AS num_students FROM studentInfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
184,지역별 평균 학점이 전체 학생들의 평균 학점보다 높은 경우 해당 지역명과 평균 학점 조회,"SELECT s.region, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.region HAVING AVG(studied_credits) > (SELECT AVG(studied_credits) FROM studentInfo);","SELECT r.region, AVG(s.studied_credits) AS avg_credits FROM studentinfo s JOIN studentregistration r ON s.id_student = r.id_student GROUP BY r.region HAVING AVG(s.studied_credits) > (SELECT AVG(studied_credits) FROM studentinfo);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
185,"각 지역의 지역명, 학생들의 최고 학력 수준과 최고 학력 수준 별 분포를 조회","SELECT region, highest_education, COUNT(*) AS count FROM studentInfo GROUP BY region, highest_education;","SELECT region, highest_education, COUNT(*) AS num_students FROM studentInfo GROUP BY region, highest_education;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
186,South East Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South East Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South East Region' ) );,"SELECT studentinfo.id_student, studentinfo.gender, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South East Region' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student, studentinfo.gender HAVING AVG(studentassessment.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South East Region' ) );","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
187,학생의 등록 모듈별 모듈 코드와 평균 등록 기간을 조회,"SELECT code_module, AVG(date_registration) AS avg_registration FROM studentRegistration GROUP BY code_module;","SELECT code_module, AVG(date_registration) AS avg_registration_duration FROM studentRegistration GROUP BY code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
188,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 가장 많이 이용한 학생을 식별하고 모듈 코드, 프레젠테이션 코드, 학생ID, 총 클릭수를 조회","SELECT sr.code_module, sr.code_presentation, sv.id_student, SUM(sv.sum_click) AS total_clicks FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation, sv.id_student ORDER BY total_clicks DESC LIMIT 1;","SELECT sr.code_module, sr.code_presentation, sv.id_student, SUM(sv.sum_click) AS total_clicks FROM studentRegistration sr JOIN studentVle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation, sv.id_student ORDER BY total_clicks DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
189,35-55 연령대의 총 클릭 수,SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.age_band = '35-55';,"SELECT studentinfo.age_band, SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.age_band BETWEEN '35-55' GROUP BY studentinfo.age_band;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
190,"각 모듈 프레젠테이션에 등록한 학생 중 가장 많은 모듈을 이수한 학생의 나이를 식별하고 모듈 코드, 프레젠테이션 코드, 연령대를 조회","SELECT sr.code_module, sr.code_presentation, MAX(si.age_band) AS max_age_band FROM studentInfo si INNER JOIN studentregistration sr ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, si.age_band FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN ( SELECT code_module, code_presentation, id_student, COUNT(*) AS num_modules FROM studentRegistration GROUP BY code_module, code_presentation, id_student ORDER BY num_modules DESC LIMIT 1 ) AS max_modules ON sr.id_student = max_modules.id_student GROUP BY sr.code_module, sr.code_presentation, si.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
191,"연령대 별로 어떤 수업을 많이 듣는지 연령대, 수업코드, 학생 수로 알고싶어","SELECT age_band, code_module, COUNT(id_student) AS student_count FROM studentinfo GROUP BY age_band, code_module ORDER BY age_band, student_count DESC;","SELECT age_band, code_module, COUNT(*) AS num_students FROM studentInfo GROUP BY age_band, code_module ORDER BY num_students DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
192,"학생의 평균 연령이 전체 평균 연령보다 높은 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING AVG(studentinfo.age_band) > (SELECT AVG(age_band) FROM studentinfo);","SELECT sr.code_module, sr.code_presentation FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation HAVING AVG(si.age_band) > (SELECT AVG(age_band) FROM studentInfo);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
193,프레젠테이션 길이가 200보다 큰 각 프레젠테이션의 수 조회,SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE module_presentation_length > 200;,SELECT COUNT(*) AS num_presentations FROM courses WHERE module_presentation_length > 200;,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
194,"성별 VLE 자료 사용 분석하고 성별, VLE 자료 사용횟수를 조회","SELECT studentinfo.gender, COUNT(studentvle.id_site) AS total_interactions FROM studentvle INNER JOIN studentinfo ON studentvle.id_student = studentinfo.id_student GROUP BY studentinfo.gender ORDER BY total_interactions DESC;","SELECT studentinfo.gender, COUNT(studentvle.id_site) AS num_of_vle_materials_used FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student GROUP BY studentinfo.gender;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
195,"평가 유형별로 가장 많은 평가를 받은 모듈과 평가유형을 식별하고 평가 유형, 모듈 코드, 평가수를 조회","SELECT a.assessment_type, sr.code_module, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentregistration sr ON sa.id_student = sr.id_student GROUP BY a.assessment_type, sr.code_module ORDER BY assessment_count DESC LIMIT 1;","SELECT a.assessment_type, sr.code_module, COUNT(*) AS num_assessments FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentRegistration sr ON sa.id_student = sr.id_student GROUP BY a.assessment_type, sr.code_module ORDER BY num_assessments DESC;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
196,여학생 중 활동 유형이 glossary인 학생을 찾으시오,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' AND vle.activity_type = 'glossary';,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site WHERE studentvle.id_student IN ( SELECT id_student FROM studentvle WHERE id_site IN ( SELECT id_site FROM vle WHERE activity_type = 'glossary') ) AND studentvle.id_student IN ( SELECT id_student FROM studentvle WHERE id_site IN ( SELECT id_site FROM vle WHERE activity_type = 'glossary') ) AND studentvle.id_student IN ( SELECT id_student FROM studentvle WHERE id_site IN ( SELECT id_site FROM vle WHERE activity_type = 'glossary') ) ;,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
197,"각 모듈 프레젠테이션에 대해 최고 학력이 'A Level or Equivalent'인 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","SELECT code_module, code_presentation, COUNT(id_student) AS a_level_count FROM studentInfo WHERE highest_education = 'A Level or Equivalent' GROUP BY code_module, code_presentation;","SELECT code_module, code_presentation, COUNT(*) AS num_students_with_a_level_or_equivalent FROM studentInfo WHERE highest_education = 'A Level or Equivalent' GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
198,"각 모듈 코드, 각 프레젠테이션 코드, 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 사이의 관계를 분석","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module, sr.code_presentation;","SELECT code_module, code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, courses.module_presentation_length FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY code_module, code_presentation, courses.module_presentation_length;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
199,장애여부가 'N'인 학생들의 최종 결과와 학생 수 조회,"SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'N' GROUP BY final_result;","SELECT disability, final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'N' GROUP BY disability, final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
200,"특정 과정 모듈(BBB)에 등록된 학생들 중 장애를 선언한 학생들의 최종 성적을 확인하고 학생, 성별, 장애여부, 최종 성적을 조회","SELECT si.id_student, si.gender, si.disability, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.disability = 'Y' AND c.code_module = 'BBB';","SELECT s.id_student, s.gender, s.disability, s.final_result FROM studentInfo s JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND s.disability = 'Y';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
201,Withdrawn 등급을 받은 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
202,연령대 별로 어떤 수업을 많이 듣는지 보고싶어,"SELECT age_band, code_module, COUNT(*) AS num_students FROM studentinfo GROUP BY age_band, code_module ORDER BY age_band, num_students DESC;","SELECT s.age_band, c.code_module, COUNT(*) AS num_students FROM studentInfo s JOIN courses c ON s.code_module = c.code_module GROUP BY s.age_band, c.code_module ORDER BY num_students DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
203,모든 학생의 평균 등록 일수를 계산,SELECT AVG(date_registration) AS average_registration_days FROM studentRegistration;,SELECT AVG(date_registration) AS avg_registration_days FROM studentregistration;,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
204,특정 학생(25997)이 수강한 과목 중 재수강한 과목,"SELECT code_module, code_presentation FROM studentInfo WHERE id_student = 25997 AND num_of_prev_attempts > 0;",SELECT DISTINCT code_module FROM studentInfo WHERE id_student = 25997 AND num_of_prev_attempts > 0;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
205,A Level 또는 해당 학위'를 가진 학생이 거주하는 지역명 조회,SELECT DISTINCT region FROM studentInfo WHERE highest_education = 'A Level or Equivalent';,"SELECT DISTINCT region FROM studentInfo WHERE highest_education IN ('A Level', 'Higher Education');","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
206,나이대가 0-35세이고 학점이 120 이상인 학생들의 최종 결과와 학생 수 조회,"SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE age_band = '0-35' AND studied_credits >= 120 GROUP BY final_result;","SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE age_band = '0-35' AND studied_credits >= 120 GROUP BY final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
207,"최고 학력 별 학생 수와 평균 점수, 가장 많이 한 활동 유형","SELECT external_studentinfo.highest_education, COUNT(*) AS num_students, AVG(external_studentassessment.score) AS average_score, vle.activity_type AS most_common_activity FROM studentinfo AS external_studentinfo JOIN studentassessment AS external_studentassessment ON external_studentinfo.id_student = external_studentassessment.id_student JOIN assessments AS external_assessments ON external_studentassessment.id_assessment = external_assessments.id_assessment JOIN studentvle AS external_studentvle ON external_studentinfo.id_student = external_studentvle.id_student JOIN vle ON external_studentvle.id_site = vle.id_site GROUP BY external_studentinfo.highest_education, vle.activity_type HAVING COUNT(*) = (SELECT COUNT(*) AS activity_count FROM studentinfo AS sub_studentinfo JOIN studentassessment AS sub_studentassessment ON sub_studentinfo.id_student = sub_studentassessment.id_student JOIN assessments AS sub_assessments ON sub_studentassessment.id_assessment = sub_assessments.id_assessment JOIN studentvle AS sub_studentvle ON sub_studentinfo.id_student = sub_studentvle.id_student JOIN vle AS sub_vle ON sub_studentvle.id_site = sub_vle.id_site WHERE sub_studentinfo.highest_education = external_studentinfo.highest_education GROUP BY sub_studentinfo.highest_education, sub_vle.activity_type ORDER BY activity_count DESC LIMIT 1);","SELECT highest_education, COUNT(*) AS student_count, AVG(score) AS avg_score, activity_type FROM studentInfo JOIN studentAssessment USING (id_student) JOIN assessments USING (code_module, code_presentation) JOIN studentVle USING (code_module, code_presentation, id_student) JOIN vle USING (code_module, code_presentation) GROUP BY highest_education, activity_type ORDER BY student_count DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
208,성별에 따른 학생들의 평균 VLE 자료 클릭 수를 조회,"SELECT gender, AVG(v.sum_click) AS avg_clicks FROM studentInfo s JOIN studentVle v ON s.id_student = v.id_student GROUP BY gender;","SELECT studentinfo.gender, AVG(studentvle.sum_click) AS avg_clicks FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
209,"각 모듈 프레젠테이션에 등록한 학생 중 모든 평가 유형에 참여한 학생의 수를 분석하고 모듈, 프레젠테이션, 학생수를 조회","SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(DISTINCT studentregistration.id_student) AS num_students_with_all_assessment_types FROM studentregistration INNER JOIN assessments ON studentregistration.code_module = assessments.code_module AND studentregistration.code_presentation = assessments.code_presentation LEFT JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student AND assessments.id_assessment = studentAssessment.id_assessment GROUP BY studentregistration.code_module, studentregistration.code_presentation;","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS students_with_all_assessment_types FROM studentregistration sr JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
210,"등록 취소된 학생 수가 20명을 초과하는 모든 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration WHERE studentregistration.date_unregistration IS NOT NULL GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING COUNT(studentregistration.id_student) > 20;","SELECT sr.code_module, sr.code_presentation, COUNT(sr.id_student) AS num_cancellations FROM studentregistration sr WHERE sr.date_unregistration IS NOT NULL GROUP BY sr.code_module, sr.code_presentation HAVING COUNT(sr.id_student) > 20;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
211,학생 별 수업 평가결과가 50이상인 학생 수,SELECT COUNT(DISTINCT id_student) AS num_students_over_50 FROM studentAssessment WHERE score >= 50;,SELECT COUNT(DISTINCT id_student) AS num_students_with_score_ge_50 FROM studentAssessment WHERE score >= 50;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
212,"특정 학생(26677)이 등록한 모든  모듈코드, 프레젠테이션 코드과 해당 최종 결과","SELECT si.code_module, si.code_presentation, si.final_result FROM studentInfo si WHERE id_student = ""26677"";","SELECT code_module, code_presentation, final_result FROM studentInfo WHERE id_student = 26677;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
213,학생 연령대와 학생 연령대별 평균 클릭 횟수 조회,"SELECT s.age_band, AVG(sv.sum_click) AS avg_clicks FROM studentInfo s JOIN studentVle sv ON s.id_student = sv.id_student GROUP BY s.age_band;","SELECT studentinfo.age_band, AVG(studentvle.sum_click) AS avg_clicks FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
214,장애가 있는 학생 중에서 가장 많은 다른 모듈에 등록된 학생ID와 학생 수 조회,"SELECT si.id_student, COUNT(DISTINCT si.code_module) AS distinct_module_count FROM studentInfo si WHERE si.disability = 'Y' GROUP BY si.id_student ORDER BY distinct_module_count DESC LIMIT 1;","SELECT id_student, COUNT(DISTINCT code_module) AS num_modules FROM studentInfo WHERE disability = 'Y' GROUP BY id_student ORDER BY num_modules DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
215,모듈 별 최종 결과가 fail인 학생의 활동 유형의 횟수를 알고 싶어,"SELECT studentinfo.code_module, vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation WHERE studentinfo.final_result = 'fail' GROUP BY studentinfo.code_module, vle.activity_type;","SELECT code_module, activity_type, COUNT(*) AS activity_count FROM studentInfo JOIN vle ON studentInfo.code_module = vle.code_module AND studentInfo.code_presentation = vle.code_presentation WHERE final_result = 'Fail' GROUP BY code_module, activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
216,각 모듈 프레젠테이션에 대해 각 활동 유형의 VLE 자료와 상호 작용한 고유 학생 수는 몇 명,"SELECT v.code_module, v.code_presentation, v.activity_type, COUNT(DISTINCT sv.id_student) AS num_unique_students FROM vle v INNER JOIN studentvle sv ON v.id_site = sv.id_site GROUP BY v.code_module, v.code_presentation, v.activity_type;","SELECT v.activity_type, COUNT(DISTINCT s.id_student) AS num_students FROM studentvle s JOIN vle v ON s.id_site = v.id_site GROUP BY v.activity_type;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
217,"학생 등록 수가 가장 많은 모듈 프레젠테이션을 식별하고 모듈, 프레젠테이션, 학생수를 조회","SELECT code_module, code_presentation, COUNT(id_student) AS num_registrations FROM studentregistration GROUP BY code_module, code_presentation ORDER BY num_registrations DESC;","SELECT code_module, code_presentation, COUNT(id_student) AS num_students FROM studentRegistration GROUP BY code_module, code_presentation ORDER BY num_students DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
218,"모듈코드, 모듈 별 평균 평가 점수와 평균 학습 점수 조회","SELECT a.code_module, AVG(sa.score) AS avg_assessment_score, AVG(sa_learning.score) AS avg_learning_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment JOIN ( SELECT id_student, AVG(score) AS score FROM studentAssessment GROUP BY id_student ) sa_learning ON sa.id_student = sa_learning.id_student GROUP BY a.code_module;","SELECT code_module, AVG(score) AS avg_assessment_score, AVG(date_submitted) AS avg_student_activity FROM assessments JOIN studentAssessment ON assessments.id_assessment = studentAssessment.id_assessment GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
219,"장애가 있는 학생들의 모듈 프레젠테이션별 평균 점수를 계산하고 모듈, 프레젠테이션 평균 점수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentRegistration sr ON si.id_student = sr.id_student AND a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentRegistration sr ON si.id_student = sr.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
220,등록된 학생의 평균 등록 및 탈퇴 기간을 조회,"SELECT AVG(date_registration) AS avg_registration_duration, AVG(date_unregistration) AS avg_unregistration_duration FROM studentRegistration;",SELECT AVG(date_unregistration - date_registration) AS avg_registration_duration FROM studentRegistration;,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
221,장애를 선언한 학생의 비율이 가장 높은 모듈을 식별하고 모듈과 학생 비율을 식별,"SELECT studentregistration.code_module, COUNT(CASE WHEN studentinfo.disability = 'Y' THEN 1 END) / COUNT(studentinfo.id_student) * 100 AS disability_percentage FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module ORDER BY disability_percentage DESC;","SELECT studentregistration.code_module, COUNT(studentregistration.id_student) / (SELECT COUNT(*) FROM studentregistration WHERE code_module = studentregistration.code_module) AS student_viability_ratio FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.disability = 'Y' GROUP BY studentregistration.code_module ORDER BY student_viability_ratio DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
222,"특정 평가 유형의 평균 점수 및 합격 비율 계산하고 평가 유형, 평균 점수, 40점 이상 학생 수, 총 시도 횟수를 조회 ","SELECT assessments.assessment_type, AVG(studentassessment.score) AS avg_score, COUNT(CASE WHEN studentassessment.score >= 40 THEN 1 ELSE NULL END) AS pass_count, COUNT(*) AS total_attempts FROM studentassessment INNER JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment GROUP BY assessments.assessment_type;","SELECT a.assessment_type, AVG(sa.score) AS avg_score, COUNT(CASE WHEN sa.score >= 40 THEN 1 END) AS pass_count, COUNT(*) AS total_attempts FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY a.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
223,"각 모듈 프레젠테이션에 등록한 학생 중 모듈 프레젠테이션 진행 일수가 가장 긴 모듈의 평균 평가 가중치를 계산하고 모듈 코드, 프레젠테이션 코드, 평가 가중치를 조회","SELECT sr.code_module, sr.code_presentation, AVG(a.weight) AS avg_weight_of_longest_module FROM studentregistration sr INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation WHERE c.module_presentation_length = ( SELECT MAX(module_presentation_length) FROM courses ) GROUP BY sr.code_module, sr.code_presentation;","SELECT cr.code_module, cr.code_presentation, AVG(a.weight) AS avg_weight FROM studentRegistration cr INNER JOIN courses c ON cr.code_module = c.code_module AND cr.code_presentation = c.code_presentation INNER JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation WHERE c.module_presentation_length = (SELECT MAX(module_presentation_length) FROM courses) GROUP BY cr.code_module, cr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)); CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
224,연령대 별 활동 유형을 구해줘,"SELECT studentinfo.age_band, vle.activity_type, COUNT(*) AS num_activities FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.age_band, vle.activity_type;","SELECT studentinfo.age_band, COUNT(DISTINCT studentassessment.id_student) AS num_students FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY studentinfo.age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
225,평가 유형과 평가 유형별 평가 가중치 합 조회,"SELECT assessment_type, SUM(weight) AS total_weight FROM assessments GROUP BY assessment_type;","SELECT assessment_type, SUM(weight) AS total_weight FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
226,전체 학생의 등록된 모듈 수를 조회,SELECT COUNT(DISTINCT code_module) AS total_modules FROM studentRegistration;,SELECT COUNT(DISTINCT code_module) AS total_modules FROM studentregistration;,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
227,CCC 수업을 듣는 학생 중 최종 결과가 pass인 학생의 활동 유형 횟수를 알고 싶어,"SELECT vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation WHERE studentinfo.code_module = 'CCC' AND studentinfo.final_result = 'pass' GROUP BY vle.activity_type;","SELECT vle.activity_type, COUNT(*) AS activity_count FROM studentInfo JOIN vle ON studentInfo.code_module = vle.code_module AND studentInfo.code_presentation = vle.code_presentation WHERE studentInfo.final_result = 'pass' AND studentInfo.code_module = 'CCC' GROUP BY vle.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
228,VLE의 활동 유형별 평균 클릭 수를 조회,"SELECT m.activity_type, AVG(v.sum_click) AS avg_clicks FROM studentVle v JOIN vle m ON v.id_site = m.id_site GROUP BY m.activity_type;","SELECT v.activity_type, AVG(s.sum_click) AS avg_clicks FROM studentvle s JOIN vle v ON s.id_site = v.id_site GROUP BY v.activity_type;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
229,두 번 이상 모듈을 시도한 학생들의 목록,"SELECT id_student, code_module, code_presentation FROM studentInfo WHERE num_of_prev_attempts >= 2;",SELECT DISTINCT studentregistration.id_student FROM studentregistration GROUP BY studentregistration.id_student HAVING COUNT(studentregistration.id_student) >= 2;,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
230,각 지역의 지역명과 학생들의 VLE 자료 클릭 수 평균을 조회,"SELECT region, AVG(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) AS disability_ratio FROM studentInfo GROUP BY region;","SELECT region, AVG(CASE WHEN studentinfo.code_module = 'MATH103' THEN studentinfo.num_of_prev_attempts END) AS avg_attempts FROM studentInfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
231,평가 유형과 평가 유형별 평가 수와 해당 평가 유형의 평균 평가 점수와 최소 평가 가중치 조회,"SELECT a.assessment_type, COUNT(*) AS num_assessments, AVG(sa.score) AS avg_score, MIN(a.weight) AS min_weight FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type;","SELECT a.assessment_type, COUNT(*) AS num_assessments, AVG(sa.score) AS avg_score, MIN(a.weight) AS min_weight FROM assessments a LEFT JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
232,각 모듈 프레젠테이션에 등록된 학생 수,"SELECT c.code_module, c.code_presentation, COUNT(si.id_student) AS student_count FROM courses c INNER JOIN studentInfo si ON c.code_module = si.code_module AND c.code_presentation = si.code_presentation GROUP BY c.code_module, c.code_presentation;","SELECT code_module, code_presentation, COUNT(*) AS num_students FROM studentinfo GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
233,등록 모듈과 프레젠테이션에 대해 VLE 자료의 총 클릭 수를 조회,"SELECT r.code_module, r.code_presentation, SUM(v.sum_click) as total_clicks FROM studentRegistration r JOIN studentVle v ON r.id_student = v.id_student GROUP BY r.code_module, r.code_presentation;","SELECT studentregistration.code_module, studentregistration.code_presentation, SUM(studentvle.sum_click) AS total_clicks FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
234,연령대와 연령대별 평가 가중치의 평균 조회,"SELECT s.age_band, AVG(a.weight) AS avg_weight FROM studentInfo s JOIN assessments a ON s.code_module = a.code_module AND s.code_presentation = a.code_presentation GROUP BY s.age_band;","SELECT a.age_band, AVG(a.weight) AS avg_weight FROM assessments a JOIN studentInfo s ON a.code_module = s.code_module AND a.code_presentation = s.code_presentation GROUP BY a.age_band;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
235,"각 모듈 프레젠테이션에 등록한 학생 중 여학생이 VLE 자료를 이용한 평균 학습 시간을 계산하고 모듈 코드, 프레젠테이션 코드, 평균 학습 시간을 조회","SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sv.date, sr.date_registration)) AS avg_learning_time_female_with_vle_activity FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, AVG(v.date) AS avg_learning_time FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle v ON si.id_student = v.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
236,Distinction 등급을 받은 학생 중 장애 여부와 학생 수 조회,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Distinction' GROUP BY disability;","SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Distinction' GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
237,West Midlands Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'West Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'West Midlands Region' ) );,SELECT si.id_student FROM studentinfo si INNER JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.region = 'West Midlands Region' AND si.gender = 'M' GROUP BY si.id_student HAVING AVG(sa.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'West Midlands Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
238,학생당 VLE 자료와의 평균 상호 작용 횟수가 10회 미만인 모듈 프레젠테이션,"SELECT sv.code_module, sv.code_presentation, AVG(sv.sum_click) AS avg_interactions_per_student FROM studentvle sv GROUP BY sv.code_module, sv.code_presentation HAVING avg_interactions_per_student < 10;","SELECT code_module, code_presentation FROM studentvle GROUP BY code_module, code_presentation HAVING AVG(sum_click) < 10;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
239,특정 과목(AAA)의 모든 평가 유형과 해당 평균 점수,"SELECT a.assessment_type, AVG(sa.score) AS average_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE a.code_module = 'AAA' AND a.code_presentation = '2013J' GROUP BY a.assessment_type;","SELECT a.assessment_type, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
240,최종 결과가 pass인 학생이 가장 많은 지역,SELECT region FROM studentinfo WHERE final_result = 'pass' GROUP BY region ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT region, COUNT(*) AS num_passing_students FROM studentInfo WHERE final_result = 'pass' GROUP BY region ORDER BY num_passing_students DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
241,Pass 등급을 받은 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
242,이전에 모듈을 시도하지 않은 학생의 평균 점수가 가장 높은 평가와 평균 점수 조회,"SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts = 0 GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","SELECT assessments.assessment_type, AVG(studentAssessment.score) AS average_score FROM assessments INNER JOIN studentAssessment ON assessments.id_assessment = studentAssessment.id_assessment INNER JOIN studentInfo ON studentAssessment.id_student = studentInfo.id_student INNER JOIN studentRegistration ON studentInfo.id_student = studentRegistration.id_student WHERE studentRegistration.date_unregistration IS NULL AND studentInfo.num_of_prev_attempts = 0 GROUP BY assessments.assessment_type ORDER BY average_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
243,모든 학생들의 평균 평가 점수를 조회,"SELECT AVG(score) AS avg_score FROM ( SELECT id_student, AVG(score) AS score FROM studentAssessment GROUP BY id_student ) AS student_scores;",SELECT AVG(score) AS avg_score FROM studentAssessment;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
244,모든 모듈에 등록된 학생들의 연령대와 평균 나이를 조회,"SELECT code_module, age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, age_band;","SELECT age_band, AVG(age) AS avg_age FROM studentInfo GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
245,학생의 평균 연령이 가장 높은 프레젠테이션을 검색하고 프레젠테이션과 프레젠테이션 별 평균 연령을 조회,"SELECT code_presentation, AVG(age_band) AS avg_age FROM studentinfo GROUP BY code_presentation ORDER BY avg_age DESC;","SELECT code_presentation, AVG(age_band) AS avg_age FROM studentInfo GROUP BY code_presentation ORDER BY avg_age DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
246,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 상호 작용 횟수가 평균 이상인 학생의 평균 점수를 분석하고 모듈, 프레젠테이션, 평균 점수를 조회","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN ( SELECT id_student, AVG(sum_click) AS avg_interaction_count FROM studentvle GROUP BY id_student HAVING AVG(sum_click) > (SELECT AVG(sum_click) FROM studentvle) ) AS high_interaction ON studentregistration.id_student = high_interaction.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student WHERE sv.sum_click > (SELECT AVG(sum_click) FROM studentvle WHERE code_module = sr.code_module AND code_presentation = sr.code_presentation) GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
247,Fail 등급을 받은 학생들의 성별에 따른 평균 학점,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY gender;","SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
248,각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 최종 결과 간의 관계를 분석하고 모듈 코드와 프레젠테이션 코드도 함께 조회,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;","SELECT si.code_module, si.code_presentation, AVG(sv.sum_click) AS avg_interactions, si.final_result FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle sv ON si.id_student = sv.id_student GROUP BY si.code_module, si.code_presentation, si.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
249,평가유형이 TMA인 학생 중 최종 결과가 Pass인 학생을 찾고 각 학생들의 클릭 수를 구해줘,"SELECT studentassessment.id_student, SUM(studentvle.sum_click) AS total_clicks FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentvle ON studentassessment.id_student = studentvle.id_student AND assessments.code_module = studentvle.code_module AND assessments.code_presentation = studentvle.code_presentation WHERE assessments.assessment_type = 'TMA' AND studentinfo.final_result = 'Pass' GROUP BY studentassessment.id_student;","SELECT studentinfo.id_student, studentvle.sum_click FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE assessments.assessment_type = 'TMA' AND studentinfo.final_result = 'Pass';","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
250,평가 일자가 있는 평가 수 조회,SELECT COUNT(*) AS num_assessments_with_date FROM assessments WHERE date IS NOT NULL;,SELECT COUNT(*) AS assessments_with_dates FROM assessments WHERE date IS NOT NULL;,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
251,연령대별로 가장 많이 사용된 활동 유형과 해당 활동 유형을 사용하는 학생들의 비율을 계산,"SELECT studentinfo.age_band, vle.activity_type, COUNT(*) AS activity_count, ROUND((COUNT(*) / subquery.total_students) * 100, 2) AS activity_percentage FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site JOIN (SELECT studentinfo_inner.age_band, vle_inner.activity_type, COUNT(*) AS activity_count, (SELECT COUNT(DISTINCT studentinfo_inner_inner.id_student) FROM studentinfo studentinfo_inner_inner JOIN studentvle studentvle_inner ON studentinfo_inner_inner.id_student = studentvle_inner.id_student JOIN vle vle_inner_inner ON studentvle_inner.id_site = vle_inner_inner.id_site WHERE studentinfo_inner_inner.age_band = studentinfo_inner.age_band) AS total_students FROM studentinfo studentinfo_inner JOIN studentvle ON studentinfo_inner.id_student = studentvle.id_student JOIN vle vle_inner ON studentvle.id_site = vle_inner.id_site GROUP BY studentinfo_inner.age_band, vle_inner.activity_type HAVING COUNT(*) = ( SELECT COUNT(*) FROM studentinfo studentinfo_inner_inner JOIN studentvle studentvle_inner ON studentinfo_inner_inner.id_student = studentvle_inner.id_student JOIN vle vle_inner_inner ON studentvle_inner.id_site = vle_inner_inner.id_site WHERE studentinfo_inner_inner.age_band = studentinfo_inner.age_band GROUP BY vle_inner_inner.activity_type ORDER BY COUNT(*) DESC LIMIT 1 )) AS subquery ON studentinfo.age_band = subquery.age_band AND vle.activity_type = subquery.activity_type GROUP BY studentinfo.age_band, vle.activity_type;","SELECT studentinfo.age_band, vle.activity_type, COUNT(*) AS activity_count, COUNT(*)*100.0 / (SELECT COUNT(*) FROM studentvle WHERE studentinfo.age_band = studentvle.id_student) AS student_percentage FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.age_band, vle.activity_type ORDER BY activity_count DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
252,특정 모듈(AAA)에서 평균 점수가 40점 미만인 학생의 비율,"SELECT si.code_module, (COUNT(sa.id_student) / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module)) AS fail_rate FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.code_module = 'AAA' AND sa.score < 40 GROUP BY si.code_module;","SELECT COUNT(*) AS num_students, COUNT(CASE WHEN avg_score < 40 THEN 1 END) AS num_low_scores FROM ( SELECT id_student, AVG(score) AS avg_score FROM studentassessment WHERE code_module = 'AAA' GROUP BY id_student ) AS scores;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
253,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생 중 여성 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS female_students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(studentinfo.gender) AS female_count FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student INNER JOIN studentassessment ON studentvle.id_site = studentassessment.id_assessment INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
254,평가 점수가 40점 미만인 학생의 평가 유형과 점수를 조회,"SELECT a.assessment_type, sa.score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40;","SELECT assessments.assessment_type, studentassessment.score FROM studentassessment INNER JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment WHERE studentassessment.score < 40;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
255,수업 모듈 및 프레젠테이션에서 학생 지역별로 등록된 학생 수와 평균 점수를 비교,"SELECT courses.code_module, courses.code_presentation, studentinfo.region, COUNT(studentregistration.id_student) AS num_students_registered, AVG(studentassessment.score) AS average_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentregistration ON studentinfo.code_module = studentregistration.code_module AND studentinfo.code_presentation = studentregistration.code_presentation AND studentinfo.id_student = studentregistration.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY courses.code_module, courses.code_presentation, studentinfo.region ORDER BY courses.code_module, courses.code_presentation, studentinfo.region;","SELECT r.code_module, r.code_presentation, s.region, COUNT(r.id_student) AS num_students, AVG(sa.score) AS avg_score FROM studentregistration r JOIN studentinfo s ON r.id_student = s.id_student JOIN studentassessment sa ON r.id_student = sa.id_student JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY r.code_module, r.code_presentation, s.region;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
256,장애를 가진 학생의 최고 학력 수준과 그에 따른 학생 수,"SELECT highest_education, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY highest_education;","SELECT highest_education, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY highest_education;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
257,"모듈 코드, 각 모듈의 평균 프레젠테이션 길이, VLE 자료 활동 유형별 평균 활동 기간, 학생들의 최대 등록일 조회","SELECT c.code_module, AVG(c.module_presentation_length) AS avg_presentation_length, v.activity_type, AVG(v.week_to - v.week_from) AS avg_activity_duration FROM courses c JOIN vle v ON c.code_module = v.code_module AND c.code_presentation = v.code_presentation JOIN studentRegistration r ON c.code_module = r.code_module AND c.code_presentation = r.code_presentation GROUP BY c.code_module, v.activity_type;","SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length, activity_type, AVG(week_to - week_from) AS avg_activity_duration FROM courses JOIN vle ON courses.code_module = vle.code_module AND courses.code_presentation = vle.code_presentation JOIN ( SELECT code_module, code_presentation, MAX(date_registration) AS max_registration_date FROM studentregistration GROUP BY code_module, code_presentation ) AS student_max_reg ON courses.code_module = student_max_reg.code_module AND courses.code_presentation = student_max_reg.code_presentation GROUP BY code_module, activity_type;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
258,"각 모듈 프레젠테이션에 등록한 학생 중 모든 평가의 가중치 합이 100이 아닌 모듈 프레젠테이션을 식별하고 모듈 코드, 프레젠테이션 코드를 조회","SELECT sr.code_module, sr.code_presentation FROM studentregistration sr INNER JOIN ( SELECT code_module, code_presentation, SUM(weight) AS total_weight FROM assessments GROUP BY code_module, code_presentation HAVING total_weight <> 100 ) AS subquery ON sr.code_module = subquery.code_module AND sr.code_presentation = subquery.code_presentation;","SELECT code_module, code_presentation FROM studentRegistration sr INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY code_module, code_presentation HAVING SUM(a.weight) <> 100;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
259,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 여학생의 비율을 계산하고 모듈 코드, 프레젠테이션 코드, VLE를 이용한 여학생의 비율을 조회","SELECT sr.code_module, sr.code_presentation, SUM(CASE WHEN si.gender = 'F' THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT sv.id_student) AS female_ratio FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student INNER JOIN studentInfo si ON sv.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, (COUNT(DISTINCT sv.id_student) / (COUNT(DISTINCT si.id_student) - COUNT(si.disability))) * 100 AS female_vle_usage_rate FROM studentregistration sr LEFT JOIN studentinfo si ON sr.id_student = si.id_student LEFT JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
260,"모듈을 Pass 등급을 받은 학생 수가 100명을 초과하는 모든 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Pass' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING COUNT(studentinfo.id_student) > 100;","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentInfo ON studentregistration.id_student = studentInfo.id_student WHERE studentInfo.final_result = 'Pass' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING COUNT(studentregistration.id_student) > 100;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
261,"각 모듈 프레젠테이션에 등록한 학생의 평균 학습 시간과 모듈 정보를 결합하여 분석하고 모듈, 프레젠테이션, 평균 학습 시간을 조회","SELECT courses.code_module, courses.code_presentation, AVG(DATEDIFF(studentvle.date, studentregistration.date_registration)) AS avg_learning_time FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY courses.code_module, courses.code_presentation;","SELECT courses.code_module, courses.code_presentation, AVG(studentvle.sum_click) AS avg_learning_time FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student INNER JOIN courses ON studentregistration.code_module = courses.code_module AND studentregistration.code_presentation = courses.code_presentation GROUP BY courses.code_module, courses.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
262,각 지역명과 지역의 학습 기간을 조회,"SELECT s.region, AVG(c.module_presentation_length) AS avg_length FROM courses c JOIN studentInfo s ON c.code_presentation = s.code_presentation GROUP BY s.region;","SELECT r.region, AVG(c.module_presentation_length) AS avg_learning_duration FROM studentInfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation JOIN studentvle si_vle ON si.id_student = si_vle.id_student JOIN vle vle ON si_vle.id_site = vle.id_site JOIN regions r ON si.region = r.code GROUP BY r.region;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
263,모든 모듈과 프레젠테이션에 대해 특정평가유형(TMA)의 평균 점수,"SELECT a.code_module, a.code_presentation, AVG(sa.score) AS average_exam_score FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.assessment_type = 'TMA' GROUP BY a.code_module, a.code_presentation;","SELECT code_module, code_presentation, AVG(score) AS avg_score FROM assessments JOIN studentassessment ON assessments.id_assessment = studentassessment.id_assessment WHERE assessments.assessment_type = 'TMA' GROUP BY code_module, code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
264,Distinction 등급을 받은 연령대와 연령대 별 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
265,장애가 있는 학생의 비율이 10% 미만이고 학생의 평균 이전 시도 횟수가 2회 미만인 모듈과 프레젠테이션을 조회,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (SUM(CASE WHEN studentinfo.disability = 'Y' THEN 1 ELSE 0 END) / COUNT(studentinfo.id_student)) < 0.1 AND AVG(studentinfo.num_of_prev_attempts) < 2;","SELECT sr.code_module, sr.code_presentation FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(si.id_student) / (SELECT COUNT(*) FROM studentInfo WHERE disability = 'Y')) < 0.1 AND AVG(si.num_of_prev_attempts) < 2;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
266,프레젠테이션 코드와 평가 일자가 있는 프레젠테이션의 평가 일자의 평균 조회,"SELECT code_presentation, AVG(date) AS avg_assessment_date FROM assessments WHERE date IS NOT NULL GROUP BY code_presentation;","SELECT code_presentation, AVG(date) AS avg_date FROM assessments GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
267,강좌에 등록하지 않은 학생의 비율이 10%를 초과하는 모듈 프레젠테이션을 나열,"SELECT sr.code_module, sr.code_presentation, (COUNT(sr.date_unregistration) * 100.0 / COUNT(si.id_student)) AS unregistration_percentage FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation HAVING unregistration_percentage > 10;","SELECT sr.code_module, sr.code_presentation, (COUNT(si.id_student) - COUNT(sr.id_student)) / COUNT(si.id_student) AS unregistered_percentage FROM studentregistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(si.id_student) - COUNT(sr.id_student)) / COUNT(si.id_student) > 0.1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
268,학생 등록과 등록 취소 사이의 차이를 통해 평균 등록기간 계산하여 가장 긴 등록기간을 가진 상위 5개 모듈 프레젠테이션 조회,"SELECT sr.code_module, sr.code_presentation, AVG(sr.date_unregistration - sr.date_registration) AS avg_registration_duration FROM studentregistration sr GROUP BY sr.code_module, sr.code_presentation ORDER BY avg_registration_duration DESC LIMIT 5;","SELECT code_module, code_presentation, AVG(date_unregistration - date_registration) AS avg_registration_duration FROM studentregistration GROUP BY code_module, code_presentation ORDER BY avg_registration_duration DESC LIMIT 5;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
269,특정 모듈(AAA)에서 각 평가 유형별 평균 점수,"SELECT a.assessment_type, AVG(sa.score) AS average_score FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;","SELECT a.assessment_type, AVG(sa.score) AS average_score FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
270,각 학생의 학생코드와 평균 VLE 자료 클릭 수 조회,"SELECT id_student, AVG(sum_click) AS avg_clicks FROM studentVle GROUP BY id_student;","SELECT id_student, AVG(sum_click) AS avg_clicks FROM studentvle GROUP BY id_student;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
271,대학 학력을 가진 장애 학생들 중 학점 평균이 90보다 높은 지역명과 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'Y' GROUP BY region HAVING AVG(studied_credits) > 90;","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE qualification' AND disability = 'Y' GROUP BY region HAVING AVG(studied_credits) > 90;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
272,최종 결과 fail인 학생들의 평균 점수,SELECT AVG(score) AS average_score FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE final_result = 'fail' );,SELECT AVG(sa.score) AS average_score FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student WHERE si.final_result = 'fail';,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
273,IMD 밴드별 평균 등록 기간이 양수인 경우 IMD 밴드와 평균 등록 기간을 조회,"SELECT s.imd_band, AVG(r.date_unregistration - r.date_registration) AS avg_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.imd_band HAVING AVG(r.date_unregistration - r.date_registration) > 0;","SELECT studentinfo.imd_band, AVG(studentregistration.date_registration) AS avg_registration_duration FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student GROUP BY studentinfo.imd_band HAVING AVG(studentregistration.date_registration) > 0;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
274,각 모듈 코드와 모듈에 속한 학생 중 특정 지역에 거주하는 학생의 비율이 가장 높은순 대로 정렬,"SELECT code_module, region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module) AS percentage FROM studentInfo si GROUP BY code_module, region ORDER BY percentage DESC;","SELECT code_module, code_presentation, region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = s.code_module AND code_presentation = s.code_presentation) AS student_percentage FROM studentInfo s GROUP BY code_module, code_presentation, region ORDER BY student_percentage DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
275,장애가 없는 학생들 중 Distinction 등급으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Distinction' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Distinction' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
276,"프레젠테이션 코드, 평가 일자가 있는 프레젠테이션의 평가 일자와 해당 프레젠테이션의 평균 평가 점수 조회","SELECT a.code_presentation, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.date IS NOT NULL GROUP BY a.code_presentation;","SELECT a.code_presentation, a.date, AVG(sa.score) AS avg_score FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation, a.date;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
277,모듈을 한 번 이상 시도한 적이 있는 학생들의 평균 점수를 평가 유형별로 계산하고 평균 점수가 가장 낮은 평가 유형과 평균 점수 조회,"SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts > 0 GROUP BY a.assessment_type ORDER BY avg_score ASC LIMIT 1;","SELECT assessments.assessment_type, AVG(studentassessment.score) AS avg_score FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment WHERE studentinfo.num_of_prev_attempts > 0 GROUP BY assessments.assessment_type ORDER BY avg_score ASC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
278,성별에 따른 평균 등록 기간이 양수인 경우 성별과 평균 등록 기간 조회,"SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_registration_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender HAVING AVG(r.date_unregistration - r.date_registration) > 0;","SELECT studentinfo.gender, AVG(studentregistration.date_registration) AS avg_registration_duration FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentinfo.gender HAVING AVG(studentregistration.date_registration) > 0;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
279,모듈 코드와 모듈 별 평가 수와 해당 모듈의 평균 평가 가중치 조회,"SELECT code_module, COUNT(*) AS num_assessments, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","SELECT code_module, COUNT(*) AS num_assessments, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
280,스코틀랜드 지역에서 Withdrawn 등급을 받은 학생들의 연령대별 평균 학점이 50보다 높은 경우 연령대와 해당 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' AND region = 'Scotland' GROUP BY age_band HAVING AVG(studied_credits) > 50;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE region = 'Scotland' AND final_result = 'Withdrawn' GROUP BY age_band HAVING AVG(studied_credits) > 50;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
281,주당 평균 상호 작용 수가 가장 높은 모듈과 평균 상호 작용횟수를 조회,"SELECT studentregistration.code_module, AVG(studentvle.sum_click) AS avg_interactions_per_week FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module ORDER BY avg_interactions_per_week DESC;","SELECT sr.code_module, AVG(sv.sum_click) AS avg_interactions_per_week FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module ORDER BY avg_interactions_per_week DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
282,장애가 있는 학생들의 최종 결과 분포,"SELECT final_result, COUNT(id_student) AS result_count FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;","SELECT final_result, COUNT(*) AS count FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
283,장애를 가진 학생들의 평균 학점을 조회,"SELECT r.code_module, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y'",SELECT AVG(studied_credits) AS average_credits FROM studentInfo WHERE disability = 'Y';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
284,각 과목별로 가장 높은 가중치를 가진 평가,"SELECT code_module, code_presentation, MAX(weight) AS max_weight FROM assessments GROUP BY code_module, code_presentation;","SELECT code_module, code_presentation, id_assessment, assessment_type, weight FROM assessments GROUP BY code_module, code_presentation, id_assessment, assessment_type ORDER BY weight DESC;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
285,등록한 학생들의 연령대별 평균 학점이 60보다 높은 경우 연령대와 해당 평균 학점 조회,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.age_band HAVING AVG(studied_credits) > 60;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo JOIN studentRegistration ON studentInfo.id_student = studentRegistration.id_student GROUP BY age_band HAVING AVG(studied_credits) > 60;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
286,성별에 따른 학생들의 평균 나이와 최대 학력 수준을 조회,"SELECT gender, AVG(age_band) AS avg_age, MAX(highest_education) AS max_education FROM studentInfo GROUP BY gender;","SELECT gender, AVG(age_band) AS avg_age, MAX(highest_education) AS max_education FROM studentInfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
287,프레젠테이션 코드와 프레젠테이션 별 평균 진행기간 조회,"SELECT code_presentation, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_presentation;","SELECT code_presentation, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
288,"모듈 코드, 프레젠테이션 코드와 프레젠테이션 코드별 학생 수 내림차순으로 반환","SELECT code_module, code_presentation, COUNT(*) AS num_students FROM studentRegistration GROUP BY code_module, code_presentation ORDER BY num_students DESC;","SELECT sr.code_module, sr.code_presentation, COUNT(*) AS student_count FROM studentRegistration sr GROUP BY sr.code_module, sr.code_presentation ORDER BY student_count DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
289,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생 중 최근에 등록한 학생의 평균 상호 작용 횟수와 최근 제출일 사이의 상관 관계를 분석하고 모듈, 프레젠테이션, 평균 상호 작용 횟수, 최근 제출일을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, MAX(studentvle.date) AS recent_interaction_date FROM studentregistration JOIN studentvle ON studentregistration.id_student = studentvle.id_student JOIN ( SELECT id_student, MAX(date) AS max_date FROM studentvle GROUP BY id_student ) AS sq ON studentvle.id_student = sq.id_student AND studentvle.date = sq.max_date GROUP BY studentregistration.code_module, studentregistration.code_presentation;","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, MAX(sr.date_unregistration) AS recent_submission_date FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student WHERE sv.id_site IS NOT NULL GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
290,각 학생의 등록된 모든 모듈의 평균 학점 조회,"SELECT id_student, AVG(score) AS avg_score FROM studentAssessment GROUP BY id_student;","SELECT sa.id_student, AVG(sa.score) AS avg_score FROM studentAssessment sa GROUP BY sa.id_student;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
291,"학생당 평균 VLE 상호 작용 수가 가장 낮은 모듈, 프레젠테이션, 평균 VLE 상호 작용 수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sve.sum_click) AS avg_clicks_per_student FROM studentvle sve INNER JOIN studentinfo si ON si.id_student = sve.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation ORDER BY avg_clicks_per_student ASC LIMIT 1;","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation ORDER BY avg_interaction_count ASC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
292,최종 결과 fail인 학생 중 점수가 평균 이상인 학생을 구해줘,"SELECT studentassessment.id_student, studentassessment.score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'fail' AND studentassessment.score > ( SELECT AVG(score) FROM studentassessment WHERE id_student = studentinfo.id_student );","SELECT si.id_student, si.gender, si.region, si.highest_education, si.imd_band, si.age_band, si.num_of_prev_attempts, si.studied_credits, si.disability, si.final_result, AVG(sa.score) AS average_score FROM studentinfo si INNER JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'fail' GROUP BY si.id_student HAVING AVG(sa.score) >= (SELECT AVG(score) FROM studentassessment);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
293,지역명과 지역별 Withdrawn 등급을 받은 학생들의 평균 학점,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY region;","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
294,각 활동 유형과 활동 유형별로 가장 많이 사용된 기간 조회,"SELECT activity_type, MAX(week_to - week_from) AS max_duration FROM vle GROUP BY activity_type;","SELECT activity_type, MAX(week_to - week_from) AS max_week FROM vle GROUP BY activity_type ORDER BY max_week DESC;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
295,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료 이용일과 평가 제출일의 차이를 계산하여 학습 시간을 확인하고 모듈 코드, 프레젠테이션 코드, 학습시간을 조회","SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, AVG(sa.date_submitted - sv.date) AS avg_learning_time FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentassessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
296,모듈 코드와 평균 프레젠테이션 길이가 150보다 큰 경우 평균 길이를 내림차순으로 반환,"SELECT code_module, AVG(module_presentation_length) AS avg_length FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) > 150 ORDER BY avg_length DESC;","SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) > 150 ORDER BY avg_presentation_length DESC;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
297,Distinction 등급을 받은 학생들의 성별에 따른 평균 학점,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY gender;","SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
298,"각 모듈 프레젠테이션에 대해 평균 가중 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 가중 점수를 조회","SELECT code_module, code_presentation, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module, code_presentation;","SELECT code_module, code_presentation, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module, code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
299,모듈 코드와 연령대별로 자료 상호 작용 횟수의 평균을 내림차순으로 반환,"SELECT sr.code_module, si.age_band, AVG(v.sum_click) AS avg_clicks FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle v ON si.id_student = v.id_student GROUP BY sr.code_module, si.age_band ORDER BY avg_clicks DESC;","SELECT studentinfo.code_module, studentinfo.age_band, AVG(studentvle.sum_click) AS avg_clicks FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.code_module, studentinfo.age_band ORDER BY avg_clicks DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
300,"장애를 선언한 모든 학생의 ID,성별,장애여부,총학점,최종성적 리스트와 최종성적 기준으로 정렬","SELECT si.id_student, si.gender, si.disability, SUM(si.studied_credits) AS total_credits, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.disability = 'Y' GROUP BY si.id_student, si.gender, si.disability, si.final_result ORDER BY si.final_result;","SELECT si.id_student, si.gender, si.disability, si.studied_credits, si.final_result FROM studentInfo si INNER JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation ORDER BY si.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
301,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS num_students_with_vle_and_assessment FROM studentRegistration sr INNER JOIN studentVle sv ON sr.id_student = sv.id_student INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
302,학생의 성별 및 장애 여부에 따른 평균 학점을 조회,"SELECT gender, disability, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY gender, disability;","SELECT gender, disability, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY gender, disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
303,남학생의 평균 모듈 프레젠테이션 길이를 구해줘,SELECT AVG(courses.module_presentation_length) AS average_module_presentation_length FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module WHERE studentinfo.gender = 'M';,SELECT AVG(courses.module_presentation_length) AS avg_module_presentation_length FROM studentInfo JOIN courses ON studentInfo.code_module = courses.code_module AND studentInfo.code_presentation = courses.code_presentation WHERE studentInfo.gender = 'M';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
304,"모듈 코드, 각 모듈의 평균 프레젠테이션 길이, 평가 유형별 평균 가중치, 학생들의 평균 나이 조회","SELECT c.code_module, AVG(c.module_presentation_length) AS avg_presentation_length, a.assessment_type, AVG(a.weight) AS avg_weight, AVG(i.age_band) AS avg_age FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation JOIN studentInfo i ON c.code_module = i.code_module AND c.code_presentation = i.code_presentation GROUP BY c.code_module, a.assessment_type;","SELECT courses.code_module, AVG(courses.module_presentation_length) AS avg_presentation_length, assessments.assessment_type, AVG(assessments.weight) AS avg_weight, studentinfo.age_band, AVG(studentinfo.age_band) AS avg_age FROM courses JOIN assessments ON courses.code_module = assessments.code_module JOIN studentinfo ON courses.code_module = studentinfo.code_module GROUP BY courses.code_module, assessments.assessment_type, studentinfo.age_band;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
305,지역별로 가장 많은 학생이 수강하는 모듈과 해당 모듈의 평균 점수,"SELECT si.region, SUBSTRING_INDEX(GROUP_CONCAT(c.code_module ORDER BY num_students_taking DESC), ',', 1) AS most_popular_module, MAX(num_students_taking) AS enrollment_count, AVG(sa.score) AS average_score FROM (SELECT region, code_module, COUNT(*) AS num_students_taking FROM studentinfo GROUP BY region, code_module) AS s JOIN courses c ON s.code_module = c.code_module JOIN studentinfo si ON s.region = si.region JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY si.region;","SELECT code_module, AVG(score) AS avg_score FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment GROUP BY code_module ORDER BY COUNT(*) DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
306,장애가 없는 학생들의 지역명과 지역별 학생수 조회,"SELECT region, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'N' GROUP BY region;","SELECT region, COUNT(*) AS student_count FROM studentInfo WHERE disability = 'N' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
307,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 최종 결과를 식별하고 모듈 코드, 프레젠테이션 코드, 최종 결과를 조회","SELECT sr.code_module, sr.code_presentation, si.final_result FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student INNER JOIN studentInfo si ON sv.id_student = si.id_student;","SELECT studentinfo.code_module, studentinfo.code_presentation, studentinfo.final_result FROM studentinfo INNER JOIN studentregistration ON studentinfo.code_module = studentregistration.code_module AND studentinfo.code_presentation = studentregistration.code_presentation INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentvle.id_site IS NOT NULL;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
308,여학생 중 평균 점수 이상인 학생,"SELECT studentinfo.id_student, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);","SELECT studentinfo.id_student, AVG(studentassessment.score) AS avg_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= ( SELECT AVG(score) FROM studentassessment );","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
309,평균 점수 이상인 학생의 총 클릭 수를 구하시오,SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentassessment.score >= (SELECT AVG(score) FROM studentassessment);,SELECT AVG(sum_click) AS avg_clicks FROM studentvle WHERE id_student IN ( SELECT id_student FROM studentvle GROUP BY id_student HAVING AVG(sum_click) >= ( SELECT AVG(sum_click) FROM studentvle ) );,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
310,"모듈코드, 모듈 별 평균 평가 가중치와 평균 학습 점수 조회","SELECT a.code_module, AVG(a.weight) AS avg_weight, AVG(sa.score) AS avg_learning_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;","SELECT a.code_module, AVG(a.weight) AS avg_weight, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
311,남학생 중 활동 유형이 resource인 학생을 찾으시오,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'resource';,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND studentvle.activity_type ='resource';,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation));"
312,"각 지역의 지역명, 등록 모듈 코드, 모듈 별 학생 수를 조회","SELECT s.region, c.code_module, COUNT(*) AS student_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student JOIN courses c ON r.code_module = c.code_module GROUP BY s.region, c.code_module;","SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(DISTINCT studentinfo.id_student) AS student_count FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student JOIN courses ON studentregistration.code_module = courses.code_module AND studentregistration.code_presentation = courses.code_presentation GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
313,최소 한 번 이상의 과제를 늦게 제출한 학생들의 목록,SELECT DISTINCT id_student FROM studentAssessment WHERE date_submitted > (SELECT date FROM assessments WHERE id_assessment = studentAssessment.id_assessment);,SELECT DISTINCT sa.id_student FROM studentAssessment sa WHERE sa.date_submitted > 0 GROUP BY sa.id_student HAVING COUNT(*) >= 1;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
314,Yorkshire Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Yorkshire Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Yorkshire Region' ) );,"SELECT studentinfo.id_student, studentinfo.gender, studentassessment.score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Yorkshire Region' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student, studentinfo.gender, studentassessment.score HAVING AVG(studentassessment.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Yorkshire Region' ) );","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
315,수강한 모든 모듈 중 평가 유형의 평균 가중치를 조회,SELECT AVG(weight) AS avg_weight FROM assessments;,"SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
316,남학생 중 모듈 코드가 BBB인 학생,SELECT * FROM studentinfo WHERE gender = 'M' AND code_module = 'BBB';,SELECT * FROM studentInfo WHERE gender = 'M' AND code_module = 'BBB';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
317,장애가 있는 학생들 중 Distinction 등급으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Distinction' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Distinction' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
318,성별에 따른 각 과목의 등록 학생 수,"SELECT code_module, code_presentation, gender, COUNT(id_student) AS student_count FROM studentInfo GROUP BY code_module, code_presentation, gender;","SELECT code_module, code_presentation, gender, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, code_presentation, gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
319,평균 모듈 프레젠테이션 길이가 가장 긴 지역을 구해줘,SELECT studentinfo.region FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY studentinfo.region ORDER BY AVG(courses.module_presentation_length) DESC LIMIT 1;,"SELECT region, AVG(module_presentation_length) AS avg_presentation_length FROM studentInfo JOIN courses ON studentInfo.code_module = courses.code_module AND studentInfo.code_presentation = courses.code_presentation GROUP BY region ORDER BY avg_presentation_length DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
320,"""24734""학생의 성별, 연령대, 지역, 그리고 해당 모듈의 평가 유형 및 가중치 조회","SELECT studentinfo.gender, studentinfo.age_band, studentinfo.region, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 24734;","SELECT studentinfo.gender, studentinfo.age_band, studentinfo.region, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 24734;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
321,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생 수를 조회","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(DISTINCT studentassessment.id_student) AS students_with_vle_assessment FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student INNER JOIN studentassessment ON studentregistration.id_student = studentassessment.id_student WHERE studentassessment.score IS NOT NULL GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
322,특정 프레젠테이션의 평균 모듈 프레젠테이션 길이 조회,SELECT AVG(module_presentation_length) AS avg_presentation_length FROM courses WHERE code_presentation = '2014B';,SELECT AVG(module_presentation_length) AS average_presentation_length FROM courses WHERE code_presentation = '2019B';,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
323,Distinction 등급을 받은 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
324,"모듈 코드, 각 모듈의 최대 평가 일자와 해당 모듈의 평균 평가 점수와 최대 평가 가중치 조회","SELECT a.code_module, MAX(a.date) AS max_assessment_date, AVG(sa.score) AS avg_score, MAX(a.weight) AS max_weight FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;","SELECT a.code_module, MAX(a.date) AS max_assessment_date, AVG(sa.score) AS avg_score, MAX(a.weight) AS max_weight FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
325,가장 많은 평가 유형을 가진 모듈과 해당 평가 유형 수 조회,"SELECT code_module, COUNT(DISTINCT assessment_type) AS num_assessment_types FROM assessments GROUP BY code_module ORDER BY num_assessment_types DESC LIMIT 1;","SELECT code_module, COUNT(assessment_type) AS num_assessments FROM assessments GROUP BY code_module ORDER BY num_assessments DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
326,모듈 코드와 모듈 코드별 평가 수 내림차순으로 반환,"SELECT code_module, COUNT(*) AS num_assessments FROM assessments GROUP BY code_module ORDER BY num_assessments DESC;","SELECT code_module, COUNT(*) AS assessment_count FROM assessments GROUP BY code_module ORDER BY assessment_count DESC;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
327,모듈 코드와 각 모듈의 평균 평가 가중치 조회,"SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
328,"지역 별 평균 성적, 총 클릭 수, 가장 많이 듣는 수업","SELECT si.region, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks, MAX(c.code_module) AS most_popular_module FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student LEFT JOIN studentvle sv ON si.id_student = sv.id_student LEFT JOIN courses c ON si.code_module = c.code_module GROUP BY si.region;","SELECT region, AVG(score) AS avg_score, SUM(sum_click) AS total_clicks, code_module FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY region, code_module ORDER BY total_clicks DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
329,"모든 모듈 프레젠테이션에서 각 학생의 최근 평가 점수를 식별하고 학생id, 모듈 코드, 프레젠테이션 코드, 점수를 조회","SELECT si.id_student, sr.code_module, sr.code_presentation, MAX(sa.score) AS recent_score FROM studentInfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student GROUP BY si.id_student, sr.code_module, sr.code_presentation;","SELECT sr.id_student, sr.code_module, sr.code_presentation, MAX(sa.score) AS latest_score FROM studentRegistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.id_student, sr.code_module, sr.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
330,학생의 성별과 나이대 그리고 해당 성별 및 나이대의 학생 수 조회,"SELECT gender, age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY gender, age_band;","SELECT gender, age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY gender, age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
331,등록된 학생의 모듈과 프레젠테이션 코드와 프레젠테이션에 대한 평균 학점을 조회,"SELECT r.code_module, r.code_presentation, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY r.code_module, r.code_presentation;","SELECT r.code_module, r.code_presentation, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY r.code_module, r.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
332,"각 모듈의 프레젠테이션 기간을 모듈, 프레젠테이션, 프레젠테이션 기간 순으로 조회","SELECT code_module, code_presentation, module_presentation_length FROM courses;","SELECT code_module, code_presentation, module_presentation_length FROM courses ORDER BY code_module, code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
333,지역 별로 많이 듣는 수업과 평균 점수를 구해줘,"SELECT s.region, SUBSTRING_INDEX(GROUP_CONCAT(c.code_module ORDER BY num_students_taking DESC), ',', 1) AS most_popular_module, MAX(num_students_taking) AS enrollment_count, AVG(sa.score) AS average_score FROM (SELECT region, code_module, COUNT(*) AS num_students_taking FROM studentinfo GROUP BY region, code_module) AS s JOIN courses c ON s.code_module = c.code_module JOIN studentinfo si ON s.region = si.region JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY s.region;","SELECT courses.code_module, courses.code_presentation, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY courses.code_module, courses.code_presentation ORDER BY average_score DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
334,각 모듈코드와 성별로 등록된 학생의 수를 조회,"SELECT code_module, gender, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, gender;","SELECT code_module, gender, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
335,전체 학생의 장애 여부 분포를 조회,"SELECT disability, COUNT(*) AS count FROM studentInfo GROUP BY disability;","SELECT disability, COUNT(*) AS count FROM studentInfo GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
336,2017년에 시작하는 각 모듈 코드의 수 조회,SELECT COUNT(DISTINCT code_module) AS num_modules FROM courses WHERE code_presentation LIKE '2017%';,"SELECT code_module, COUNT(*) AS num_courses FROM courses WHERE code_presentation LIKE '2017%' GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
337,등록된 학생 수를 연령대별로 반환,"SELECT si.age_band, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student WHERE sr.date_registration IS NOT NULL GROUP BY si.age_band;","SELECT age_band, COUNT(*) AS num_students FROM studentInfo JOIN studentRegistration ON studentInfo.id_student = studentRegistration.id_student GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
338,"특정 과정의 모든 발표(presentation)에서, 각 학생이 시도한 횟수(num_of_prev_attempts)에 따른 학생 수를 계산하고 모듈, 프레젠테이션, 시도 횟수, 학생 수를 조회","SELECT si.code_module, si.code_presentation, si.num_of_prev_attempts, COUNT(*) AS student_count FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation GROUP BY si.code_module, si.code_presentation, si.num_of_prev_attempts;","SELECT courses.code_module, courses.code_presentation, studentinfo.num_of_prev_attempts, COUNT(*) AS num_students FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY courses.code_module, courses.code_presentation, studentinfo.num_of_prev_attempts;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
339,각 모듈별 평균 학점을 계산하고 모듈과 평균 학점 조회,"SELECT si.code_module, AVG(si.studied_credits) AS average_credits FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.code_module;","SELECT r.code_module, AVG(s.studied_credits) AS average_credits FROM studentinfo s JOIN studentregistration r ON s.id_student = r.id_student GROUP BY r.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
340,특정 학생(25629)이 등록한 모든 모듈과 해당 프레젠테이션 코드,"SELECT code_module, code_presentation FROM studentInfo WHERE id_student = 25629;","SELECT DISTINCT code_module, code_presentation FROM studentInfo WHERE id_student = 25629;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
341,성별에 따른 등록 모듈코드와 모듈별 평균 등록 기간을 조회,"SELECT s.gender, r.code_module, AVG(r.date_registration) AS avg_registration FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.gender, r.code_module;","SELECT sr.code_module, si.gender, AVG(sr.date_registration) AS avg_registration_duration FROM studentregistration sr JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, si.gender;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
342,"장애가 있는 학생들이 참여한 과목 모듈과 세션을 기준으로, 해당 과목 모듈과 세션별로 장애가 있는 학생들의 수를 계산하고 모듈, 프레젠테이션, 학생 수를 조회","SELECT si.code_module, si.code_presentation, COUNT(sa.id_student) AS num_students_with_disability FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation;","SELECT code_module, code_presentation, COUNT(DISTINCT id_student) AS num_students_with_disability FROM studentInfo WHERE disability = 'Y' GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
343,여학생 중 평균 점수 이하인 학생,"SELECT studentinfo.id_student, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) <= (SELECT AVG(score) FROM studentassessment);",SELECT studentinfo.id_student FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' AND studentassessment.score < ( SELECT AVG(score) FROM studentassessment WHERE id_student = studentinfo.id_student );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
344,"studentAssessment 테이블에서 가장 늦게 제출된 과제(또는 과제들)에 대해, 점수가 40 미만인 경우 해당 과제의 유형",SELECT a.assessment_type FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.date_submitted = ( SELECT MAX(date_submitted) FROM studentAssessment WHERE score < 40 ) AND sa.score < 40;,SELECT a.assessment_type FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE sa.score < 40 ORDER BY sa.date_submitted DESC LIMIT 1;,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
345,VLE 자료와 상호 작용한 학생들의 연령대별 평균 학점이 80보다 낮은 경우 연령대와 평균 학점 조회,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.age_band HAVING AVG(studied_credits) < 80;","SELECT studentinfo.age_band, AVG(studentinfo.studied_credits) AS average_credits FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentinfo.studied_credits < 80 GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
346,등록하지 않은 학생들 중 평가에 참여하지 않은 학생들의 연령대별 평균 학점이 50보다 높은 경우 연령대와 해당 학점 조회,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_registration IS NULL AND sa.score IS NULL GROUP BY s.age_band HAVING AVG(studied_credits) > 50;","SELECT DISTINCT studentinfo.age_band, AVG(studentinfo.studied_credits) AS avg_credits FROM studentinfo LEFT JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student LEFT JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentregistration.date_unregistration IS NULL AND studentassessment.id_student IS NULL GROUP BY studentinfo.age_band HAVING AVG(studentinfo.studied_credits) > 50;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
347,가장 최근에 등록한 학생,"SELECT id_student, MAX(date_registration) AS max_registration_date FROM studentRegistration GROUP BY id_student;","SELECT sr.id_student, sr.date_registration FROM studentregistration sr ORDER BY sr.date_registration DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
348,남성과 여성 학생들의 성별 최대 및 최소 학점을 조회,"SELECT gender, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY gender;","SELECT gender, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
349,각 성별의 학생들의 최대 및 최소 학점을 조회,"SELECT s.gender, MAX(s.studied_credits) AS max_credits, MIN(s.studied_credits) AS min_credits FROM studentInfo s GROUP BY s.gender;","SELECT gender, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
350,평균 프레젠테이션 길이보다 긴 모듈과 해당 프레젠테이션 코드와 프레젠테이션 길이 조회,"SELECT code_module, code_presentation, module_presentation_length FROM courses WHERE module_presentation_length > ( SELECT AVG(module_presentation_length) FROM courses );","SELECT code_module, code_presentation, module_presentation_length FROM courses WHERE module_presentation_length > (SELECT AVG(module_presentation_length) FROM courses);","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
351,각 모듈의 등록된 학생 수와 평균 나이 조회,"SELECT r.code_module, COUNT(r.id_student) AS num_students, AVG(CAST(i.age_band AS UNSIGNED)) AS avg_age FROM studentRegistration r JOIN studentInfo i ON r.id_student = i.id_student GROUP BY r.code_module;","SELECT sr.code_module, COUNT(*) AS num_students, AVG(si.age_band) AS avg_age FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY sr.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
352,"평가 유형이 CMA 인 학생을 연령 별로 나누어 인원 수, 평균 점수, 연령 별 가장 많은 활동 유형","SELECT si.age_band, COUNT(sa.id_student) AS student_count, AVG(sa.score) AS average_score, (SELECT vle.activity_type FROM studentvle sv JOIN vle ON sv.id_site = vle.id_site JOIN studentinfo sii ON sv.id_student = sii.id_student WHERE sii.age_band = si.age_band GROUP BY vle.activity_type ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_activity FROM studentassessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentinfo si ON sa.id_student = si.id_student WHERE a.assessment_type = 'CMA' GROUP BY si.age_band;","SELECT studentinfo.age_band, COUNT(studentassessment.id_student) AS num_students, AVG(studentassessment.score) AS avg_score, vle.activity_type AS most_common_activity_type FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE assessments.assessment_type = 'CMA' GROUP BY studentinfo.age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;  CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
353,"55세 이상의 학생들의 지역 별 평균 점수와 사이트 id, 활동유형","SELECT studentinfo.region, AVG(studentassessment.score) AS average_score, vle.id_site, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE studentinfo.age_band = '55<=' GROUP BY studentinfo.region, vle.id_site, vle.activity_type;","SELECT studentinfo.region, AVG(studentassessment.score) AS avg_score, vle.activity_type, studentvle.id_site FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE studentinfo.age_band = '55+' GROUP BY studentinfo.region, vle.activity_type, studentvle.id_site;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
354,특정 과정 모듈에 등록된 학생들 중 최종 성적이 'Fail'인 학생들의 수와 모듈을 조회,"SELECT c.code_module, COUNT(si.id_student) AS failed_students FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.final_result = 'Fail' GROUP BY c.code_module;","SELECT code_module, COUNT(*) AS fail_count FROM studentInfo WHERE final_result = 'Fail' GROUP BY code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
355,각 모듈코드와 모듈에 등록된 학생들의 평균 나이 조회,"SELECT sr.code_module, ROUND(AVG(si.age_band)) AS avg_age FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module;","SELECT sr.code_module, AVG(si.age_band) AS avg_age FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
356,평가 점수가 40점 미만인 학생들의 평균 학점을 조회,"SELECT r.code_module, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE sa.score < 40 GROUP BY r.code_module;",SELECT AVG(studied_credits) AS average_credits FROM studentInfo WHERE id_student IN ( SELECT id_student FROM studentAssessment WHERE score < 40 );,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
357,남학생 중 활동 유형이 forumng인 학생을 찾으시오,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'forumng';,SELECT studentvle.id_student FROM studentvle WHERE studentvle.id_student IN (SELECT id_student FROM studentvle WHERE id_site IN (SELECT id_site FROM studentvle WHERE code_module = 'CS102' AND code_presentation = '2015J' AND date >= 0 AND date < 14 GROUP BY id_student HAVING COUNT(*) >= 2)) AND studentvle.id_student IN (SELECT id_student FROM studentvle WHERE code_module = 'CS102' AND code_presentation = '2015J' AND id_site IN (SELECT id_site FROM studentvle WHERE code_module = 'CS102' AND code_presentation = '2015J' GROUP BY id_site HAVING COUNT(*) > 1)) AND studentvle.id_student IN (SELECT id_student FROM studentvle WHERE code_module = 'CS102' AND code_presentation = '2015J' AND id_site IN (SELECT id_site FROM studentvle WHERE code_module = 'CS102' AND code_presentation = '2015J' GROUP BY id_site HAVING COUNT(*) > 1) AND sum_click > 0);,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
358,"특정 기간 동안 VLE 자료 사용량이 가장 높은 학생 10위를 대상으로 학생, 모듈, 프레젠테이션, 상호작용횟수를 조회","WITH student_interactions AS ( SELECT studentvle.id_student, COUNT(*) AS interaction_count FROM studentvle GROUP BY studentvle.id_student ) SELECT studentinfo.id_student, studentinfo.code_module, studentinfo.code_presentation, interaction_count FROM student_interactions INNER JOIN studentinfo ON student_interactions.id_student = studentinfo.id_student WHERE interaction_count >= ( SELECT MIN(interaction_count) FROM student_interactions ORDER BY interaction_count DESC LIMIT 10 ) ORDER BY interaction_count DESC;","SELECT studentvle.id_student, studentinfo.code_module, studentinfo.code_presentation, COUNT(studentvle.id_site) AS interaction_count FROM studentvle INNER JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentvle.date BETWEEN 30 AND 60 GROUP BY studentvle.id_student ORDER BY interaction_count DESC LIMIT 10;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
359,지역명과 지역별 Distinction 등급을 받은 학생들의 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY region;","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
360,학생의 나이대 분포를 조회,"SELECT age_band, COUNT(*) AS count FROM studentInfo GROUP BY age_band;","SELECT age_band, COUNT(*) AS count FROM studentInfo GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
361,등록된 학생의 성별과 평균 학점을 조회,"SELECT s.gender, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;","SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo JOIN studentRegistration ON studentInfo.id_student = studentRegistration.id_student GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
362,성적 최종 결과와 학생의 최종 결과에 따른 학생 수 조회,"SELECT s.final_result, COUNT(*) AS num_students FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.final_result;","SELECT sr.code_module, sr.code_presentation, si.final_result, COUNT(DISTINCT si.id_student) AS student_count FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
363,총 학생 수가 가장 많은 모듈과 해당 학생 수 조회,"SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentInfo GROUP BY code_module ORDER BY num_students DESC LIMIT 1;","SELECT code_module, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module ORDER BY num_students DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
364,"장애를 선언한 학생 수가 100명을 초과하는 모든 모듈, 프레젠테이션을 조회","SELECT code_module, code_presentation FROM studentinfo WHERE disability = 'Y' GROUP BY code_module, code_presentation HAVING COUNT(*) > 100;","SELECT code_module, code_presentation FROM studentInfo WHERE disability = 'Y' GROUP BY code_module, code_presentation HAVING COUNT(*) > 100;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
365,특정 모듈의 총 프레젠테이션 수 조회,SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE code_module = 'AAA';,SELECT COUNT(*) AS total_presentations FROM courses WHERE code_module = '특정 모듈';,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
366,등록 및 평가가 있는 학생 중 지역명과 지역별 등록된 학생 수,"SELECT s.region, COUNT(DISTINCT r.id_student) AS num_students FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student GROUP BY s.region;","SELECT studentregistration.code_module, studentregistration.code_presentation, studentinfo.region, COUNT(studentinfo.id_student) AS num_students FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student INNER JOIN studentassessment ON studentregistration.id_student = studentassessment.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation, studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
367,"각 모듈 프레젠테이션에서 최근에 등록한 학생의 성별을 식별하고 모듈 코드, 프레젠테이션 코드, 성별을 조회","SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(code_presentation) AS latest_presentation FROM studentregistration GROUP BY id_student ) AS latest_registration ON si.id_student = latest_registration.id_student AND si.code_presentation = latest_registration.latest_presentation INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","SELECT r.code_module, r.code_presentation, s.gender FROM studentRegistration r INNER JOIN studentInfo s ON r.id_student = s.id_student WHERE r.date_unregistration IS NULL ORDER BY r.code_module, r.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
368,"모듈 발표에 처음 등록한 학생 중 평균 점수가 가장 높은 평가를 식별하고 평가ID, 평균 점수를 조회","SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts = 0 GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment JOIN studentInfo si ON si.id_student = sa.id_student JOIN studentRegistration sr ON si.id_student = sr.id_student WHERE sr.date_registration = (SELECT MAX(date_registration) FROM studentRegistration WHERE id_student = si.id_student) GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
369,55세 이상인 학생들 중 Withdrawn 등급을 받은 학생들의 지역별 평균 학점이 60보다 높은 경우 지역명과 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE age_band = '55<=' AND final_result = 'Withdrawn' GROUP BY region HAVING AVG(studied_credits) > 60;","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' AND age_band = '55+' GROUP BY region HAVING AVG(studied_credits) > 60;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
370,"""AAA"" 모듈에서 각 평가 유형과 평가 유형별로 상위 10% 최고 학력 수준과 하위 10% 최고 학력 수준 학생들의 평균 이수 학점 및 차이를 조회","WITH education_credits AS (SELECT sa.id_student, a.assessment_type, si.highest_education, si.studied_credits,NTILE(10) OVER (PARTITION BY a.assessment_type, si.highest_education ORDER BY si.studied_credits DESC) AS decile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA') SELECT assessment_type, highest_education, AVG(CASE WHEN decile = 10 THEN studied_credits END) AS top_10_avg_credits, AVG(CASE WHEN decile = 1 THEN studied_credits END) AS bottom_10_avg_credits, AVG(CASE WHEN decile = 10 THEN studied_credits END) - AVG(CASE WHEN decile = 1 THEN studied_credits END) AS credit_diff FROM education_credits GROUP BY assessment_type, highest_education;","SELECT assessments.assessment_type, studentinfo.highest_education, AVG(studentinfo.studied_credits) AS avg_credits, AVG(studentinfo.studied_credits) - AVG(CASE WHEN studentinfo.highest_education IN (SELECT highest_education FROM studentinfo WHERE studentinfo.highest_education IN (SELECT highest_education FROM studentinfo ORDER BY studentinfo.studied_credits DESC LIMIT 10) AND studentinfo.studied_credits <= (SELECT AVG(studied_credits) FROM studentinfo WHERE highest_education IN (SELECT highest_education FROM studentinfo ORDER BY studentinfo.studied_credits DESC LIMIT 10))) THEN studentinfo.studied_credits ELSE 0 END) AS avg_diff_credits FROM assessments INNER JOIN studentassessment ON assessments.id_assessment = studentassessment.id_assessment INNER JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE assessments.code_module = 'AAA' GROUP BY assessments.assessment_type, studentinfo.highest_education;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
371,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 클릭 수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 클릭수를 조회""","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_clicks FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentVle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
372,프레젠테이션 코드와 각 프레젠테이션의 최소 평가 일자와 해당 프레젠테이션의 평균 평가 점수와 최대 평가 일자 조회,"SELECT a.code_presentation, MIN(a.date) AS min_assessment_date, AVG(sa.score) AS avg_score, MAX(a.date) AS max_assessment_date FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation;","SELECT a.code_presentation, MIN(a.date) AS min_assessment_date, AVG(sa.score) AS avg_score, MAX(a.date) AS max_assessment_date FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
373,이수 학점이 100점 이상인 학생 중 성적이 가장 우수한 학생을 찾아줘,SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.studied_credits >= 100 GROUP BY studentinfo.id_student ORDER BY MAX(studentassessment.score) DESC LIMIT 1;,"SELECT studentinfo.id_student, studentinfo.studied_credits, studentassessment.score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.studied_credits >= 100 ORDER BY studentassessment.score DESC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
374,평균 모듈 프레젠테이션 길이가 가장 짧은 지역을 구해줘,SELECT region FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY region ORDER BY AVG(courses.module_presentation_length) ASC LIMIT 1;,"SELECT region FROM ( SELECT region, AVG(module_presentation_length) AS avg_length FROM studentInfo JOIN courses ON studentInfo.code_module = courses.code_module AND studentInfo.code_presentation = courses.code_presentation GROUP BY region ) AS avg_lengths ORDER BY avg_length ASC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
375,모든 모듈에 대한 학생들의 평균 학점을 조회,"SELECT code_module, AVG(studied_credits) as avg_credits FROM studentInfo GROUP BY code_module;","SELECT code_module, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
376,평균 평가 가중치보다 높은 모듈과 해당 평가 유형 조회,"SELECT code_module, assessment_type FROM assessments GROUP BY code_module, assessment_type HAVING AVG(weight) > (SELECT AVG(weight) FROM assessments);","SELECT DISTINCT code_module, assessment_type FROM assessments WHERE weight > ( SELECT AVG(weight) FROM assessments );","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
377,North Western Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Western Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Western Region' ) );,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Western Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Western Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
378,주당 평균 상호 작용 수가 가장 높은 지역을 분석하고 지역명과 평균 상호작용수를 조회. 데이터는 주당 평균 상호 작용 수를 기준으로 순서대로 나열,"SELECT studentinfo.region, AVG(studentvle.sum_click) AS avg_interactions_per_week FROM studentinfo INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.region ORDER BY avg_interactions_per_week DESC;","SELECT s.region, AVG(sv.sum_click) AS avg_interactions_per_week FROM studentvle sv JOIN studentinfo s ON sv.id_student = s.id_student GROUP BY s.region ORDER BY avg_interactions_per_week DESC;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
379,학생의 나이대와 해당 나이대의 학생 수 조회,"SELECT age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY age_band;","SELECT age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
380,"각 지역의 지역명, 학생들의 평균 학점을 조회","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY region;","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
381,"각 학생의 평균 점수와 VLE 자료를 이용한 평균 상호 작용 횟수를 학생 정보와 결합하여 분석하고 학생, 평균 점수, 평균 상호작용 횟수를 조회","SELECT studentInfo.id_student, AVG(studentAssessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_interaction_count FROM studentInfo LEFT JOIN studentAssessment ON studentInfo.id_student = studentAssessment.id_student LEFT JOIN studentvle ON studentInfo.id_student = studentvle.id_student GROUP BY studentInfo.id_student;","SELECT studentinfo.id_student, AVG(studentassessment.score) AS average_score, AVG(studentvle.sum_click) AS average_interaction_count FROM studentinfo LEFT JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student LEFT JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.id_student;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
382,North Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Region' ) );,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Region' ) );,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
383,장애가 있는 학생들 중 중도포기한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Withdrawn' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Withdrawn' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
384,장애가 있는 학생들 중 Pass 성적으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Pass' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Pass' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
385,각 성별로 등록된 모듈 수를 조회,"SELECT studentInfo.gender, COUNT(DISTINCT studentRegistration.code_module) AS module_count FROM studentRegistration JOIN studentInfo ON studentRegistration.id_student = studentInfo.id_student GROUP BY studentInfo.gender;","SELECT studentinfo.gender, COUNT(studentregistration.id_student) AS num_modules FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student GROUP BY studentinfo.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
386,모듈 코드와 모듈 코드별로 프레젠테이션 수를 내림차순으로 조회,"SELECT code_module, COUNT(DISTINCT code_presentation) AS num_presentations FROM courses GROUP BY code_module ORDER BY num_presentations DESC;","SELECT code_module, COUNT(DISTINCT code_presentation) AS num_presentations FROM courses GROUP BY code_module ORDER BY num_presentations DESC;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
387,"각 모듈 코드,  프레젠테이션 코드, 프레젠테이션 별 평가 결과를 조회","SELECT code_module, code_presentation, assessment_type FROM assessments;","SELECT code_module, code_presentation, assessment_type, weight FROM assessments;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
388,특정 모듈에 대해 가중치가 50%를 넘는 모든 평가(유형 포함)와 가중치 조회,"SELECT a.assessment_type, a.weight FROM assessments a INNER JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND a.weight > 50;","SELECT code_module, code_presentation, id_assessment, assessment_type, weight FROM assessments WHERE code_module = 'BSc Computer Science' AND code_presentation = '2017B' AND weight >= 50;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
389,각 모듈의 평균 가중치 중 가장 낮은 유형,"SELECT code_module, MIN(avg_weight) AS min_avg_weight FROM ( SELECT a.code_module, a.assessment_type, AVG(a.weight) AS avg_weight FROM assessments a GROUP BY a.code_module, a.assessment_type ) AS avg_weights GROUP BY code_module ORDER BY min_avg_weight ASC;","SELECT a.assessment_type, AVG(a.weight) AS avg_weight FROM assessments a GROUP BY a.assessment_type ORDER BY avg_weight ASC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
390,"0-35, 35-55, 55<= 의 연령대로 구분하고 각 연령대의 평균 성적을 구해줘","SELECT CASE WHEN studentinfo.age_band <= 35 THEN '0-35' WHEN studentinfo.age_band <= 55 THEN '35-55' ELSE '55+' END AS age_group, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY age_group;","SELECT age_band, AVG(score) AS avg_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
391,남학생 중 모듈 코드가 AAA인 학생,SELECT * FROM studentinfo WHERE gender = 'M' AND code_module = 'AAA';,SELECT id_student FROM studentInfo WHERE gender = 'M' AND code_module = 'AAA';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
392,모든 학생의 VLE 자료 클릭 수 평균을 조회,"SELECT AVG(avg_clicks) as avg_clicks FROM ( SELECT id_student, AVG(sum_click) AS avg_clicks FROM studentVle GROUP BY id_student ) AS student_avg_clicks;",SELECT AVG(sum_click) AS avg_clicks FROM studentvle;,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
393,각 지역의 지역명과 학생들의 평균 나이를 조회,"SELECT region, AVG(CAST(SUBSTRING(age_band, 1, 2) AS UNSIGNED)) AS avg_age FROM studentInfo GROUP BY region;","SELECT region, AVG(age_band) AS avg_age FROM studentInfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
394,평균 클릭 수 보다 높은 클릭 수의 학생들의 평균 성적을 구해줘,SELECT AVG(studentassessment.score) AS average_score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click > ( SELECT AVG(studentvle.sum_click) FROM studentvle );,SELECT AVG(studentassessment.score) AS average_score FROM studentassessment JOIN studentvle ON studentassessment.id_student = studentvle.id_student WHERE studentvle.sum_click > (SELECT AVG(sum_click) FROM studentvle);,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
395,평가 결과가 'Distinction'이고 모든 평가 유형에서 평균 점수가 80보다 높은 모든 학생의 수를 계산,SELECT COUNT(*) AS distinction_count FROM ( SELECT si.id_student FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Distinction' GROUP BY si.id_student HAVING AVG(sa.score) > 80 ) AS high_scores;,SELECT COUNT(DISTINCT studentinfo.id_student) AS num_students FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.final_result = 'Distinction' AND studentassessment.score >= 80;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
396,"각 모듈 프레젠테이션에서 가장 높은 점수를 받은 학생의 최종 결과를 식별하고 모듈 코드, 프레젠테이션 코드, 최종 결과를 조회","SELECT sr.code_module, sr.code_presentation, si.final_result FROM studentInfo si INNER JOIN ( SELECT sa.id_student, sa.score FROM studentAssessment sa INNER JOIN ( SELECT id_assessment, MAX(score) AS max_score FROM studentAssessment GROUP BY id_assessment ) AS max_scores ON sa.id_assessment = max_scores.id_assessment AND sa.score = max_scores.max_score ) AS max_scores ON si.id_student = max_scores.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","SELECT sr.code_module, sr.code_presentation, si.final_result FROM studentinfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student INNER JOIN studentassessment sa ON si.id_student = sa.id_student WHERE sa.score = ( SELECT MAX(score) FROM studentassessment WHERE id_student = si.id_student ) GROUP BY sr.code_module, sr.code_presentation, si.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
397,최종 학력이 Lower Than A Level인 학생을 연령대 별로 평균 점수 확인,"SELECT studentinfo.age_band, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.highest_education = 'Lower Than A Level' GROUP BY studentinfo.age_band;","SELECT studentinfo.age_band, AVG(studentassessment.score) AS avg_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.highest_education = 'Lower Than A Level' GROUP BY studentinfo.age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
