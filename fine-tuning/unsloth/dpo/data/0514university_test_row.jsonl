{"input": "\ub4f1\ub85d \ud574\uc81c\ud55c \ud559\uc0dd \uc218\uac00 10\uba85 \uc774\uc0c1\uc778 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158 \ucc3e\uae30", "accept": "SELECT code_module, code_presentation FROM studentRegistration WHERE date_unregistration IS NOT NULL GROUP BY code_module, code_presentation HAVING COUNT(id_student) >= 10;", "reject": "SELECT m.name_module, p.name_presentation, COUNT(sr.id_student) FROM studentregistration sr INNER JOIN courses c ON sr.code_module = c.code_module INNER JOIN courses c2 ON sr.code_presentation = c2.code_presentation INNER JOIN moduleinfo m ON c.code_module = m.code_module INNER JOIN presentationinfo p ON c2.code_presentation = p.code_presentation GROUP BY m.name_module, p.name_presentation HAVING COUNT(sr.id_student) > 10;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \uc218\uc5c5\uc5d0\uc11c \ud2b9\uc815 \ud65c\ub3d9 \uc720\ud615\uc774 \ud559\uc0dd\uc758 \ud3c9\uade0 \uc131\uc801\uc5d0 \ubbf8\uce58\ub294 \uc601\ud5a5", "accept": "SELECT c.code_module, c.code_presentation, v.activity_type, AVG(sa.score) AS average_score FROM studentvle sv JOIN vle v ON sv.id_site = v.id_site JOIN studentassessment sa ON sv.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation, v.activity_type ORDER BY c.code_module, c.code_presentation, v.activity_type;", "reject": "SELECT vle.activity_type, AVG(studentassessment.score) as avg_score FROM vle INNER JOIN studentvle ON vle.id_site = studentvle.id_site INNER JOIN studentassessment ON studentvle.id_student = studentassessment.id_student GROUP BY vle.activity_type, studentassessment.code_module, studentassessment.code_presentation;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \uc9c0\uc5ed\uc758 \uc9c0\uc5ed\uba85, \ud559\uc0dd\ub4e4\uc758 \ucd5c\ub300 \ubc0f \ucd5c\uc18c \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT region, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY region;", "reject": "SELECT s.region, MAX(s.studied_credits) as max_credits, MIN(s.studied_credits) as min_credits FROM studentinfo s GROUP BY s.region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc5ec\ud559\uc0dd \uc218\uac00 \ub0a8\ud559\uc0dd \uc218\ub97c \ucd08\uacfc\ud558\ub294 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc2dd\ubcc4", "accept": "SELECT code_module, code_presentation FROM studentinfo GROUP BY code_module, code_presentation HAVING SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END);", "reject": "SELECT m.code_module, p.code_presentation, COUNT(CASE WHEN s.gender = 'Female' THEN 1 END) as female_count, COUNT(CASE WHEN s.gender = 'Male' THEN 1 END) as male_count FROM studentinfo s INNER JOIN courses m ON s.code_module = m.code_module INNER JOIN courses p ON s.code_presentation = p.code_presentation GROUP BY m.code_module, p.code_presentation HAVING female_count > male_count;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd \ucf54\ub4dc, \ud559\uc0dd\uc774 \uc218\uac15\ud55c \uac01 \ubaa8\ub4c8\uacfc \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ucd1d \ud3c9\uac00 \uc218 \uc870\ud68c", "accept": "SELECT sr.id_student, sr.code_module, COUNT(sa.id_assessment) AS total_assessments FROM studentRegistration sr LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.id_student, sr.code_module;", "reject": "SELECT s.code_module, s.code_presentation, COUNT(a.id_assessment) as total_assessments FROM studentregistration s INNER JOIN studentassessment a ON s.id_student = a.id_student GROUP BY s.code_module, s.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "East Anglian Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Anglian Region' AND studentinfo.gender = 'M' AND studentassessment.score >= (SELECT AVG(score) FROM studentassessment WHERE id_student IN (SELECT id_student FROM studentinfo WHERE region = 'East Anglian Region' ));", "reject": "SELECT studentinfo.id_student, studentassessment.score FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'Male' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment WHERE id_assessment = studentassessment.id_assessment) AND studentinfo.region = 'East Anglian Region';", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \uc9c0\ub9ac\uc801 \uc9c0\uc5ed(Scotland)\uc5d0\uc11c \uacf5\ubd80\ud558\ub294 \ud559\uc0dd\uc758 \ud3c9\uade0 \ud559\uc810", "accept": "SELECT region, AVG(studied_credits) AS average_credits FROM studentInfo WHERE region = 'Scotland' GROUP BY region;", "reject": "SELECT AVG(studied_credits) FROM studentinfo WHERE region = 'Scotland';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ubaa8\ub4c8\uc5d0 \ub300\ud574 \ucd5c\uc885 \uacb0\uacfc\uac00 'Pass'\ub85c \uae30\ub85d\ub41c \ud559\uc0dd \uc911 \uc2dc\ud5d8 \uc810\uc218\uac00 40\uc810 \ubbf8\ub9cc\uc778 \ud559\uc0dd \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT si.code_module, COUNT(si.id_student) AS pass_fail_count FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Pass' AND sa.score < 40 GROUP BY si.code_module;", "reject": "SELECT s.code_module, COUNT(*) as num_students FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student WHERE s.final_result = 'Pass' AND sa.score < 40 GROUP BY s.code_module;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uc9c4\ud589 \uc77c\uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8\uacfc \ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uc9c4\ud589 \uc77c\uc218 \uc870\ud68c", "accept": "SELECT code_module, AVG(module_presentation_length) AS average_length FROM courses GROUP BY code_module;", "reject": "SELECT m.name AS module_name, AVG(cp.length) AS avg_presentation_length FROM courses c JOIN modules m ON c.code_module = m.code JOIN course_presentations cp ON c.code_presentation = cp.code GROUP BY m.name ;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "35-55\uc758 \uc5f0\ub839\ub300\uc5d0\uc11c \uc810\uc218\uac00 \uac00\uc7a5 \ub192\uc740 \ud559\uc0dd\uc758 \uc815\ubcf4\ub97c \uc54c\uace0 \uc2f6\uc5b4", "accept": "SELECT * FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.age_band = '35-55' ORDER BY studentassessment.score DESC LIMIT 1;", "reject": "SELECT studentinfo.id_student, studentinfo.age_band, studentassessment.score FROM studentassessment INNER JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.age_band = '35-55' ORDER BY studentassessment.score DESC LIMIT 1;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \ud3c9\uade0\uc801\uc73c\ub85c \uac00\uc7a5 \ub192\uc740 \ud3c9\uac00 \uc810\uc218\ub97c \ubc1b\uc740 \ud559\uc0dd\uc758 \uc131\uc801 \ubc34\ub4dc(IMD) \ubd84\ud3ec\ub97c \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \uc131\uc801\ubc34\ub4dc, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation, imd_band, COUNT(studentregistration.id_student) AS num_students FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN studentInfo ON studentregistration.id_student = studentInfo.id_student WHERE studentAssessment.score = ( SELECT MAX(score) FROM studentAssessment WHERE id_student = studentregistration.id_student ) GROUP BY studentregistration.code_module, studentregistration.code_presentation, imd_band;", "reject": "SELECT m.code_module, p.code_presentation, sb.imd_band, COUNT(sr.id_student) as num_students FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student JOIN studentassessment sa ON s.id_student = sa.id_student JOIN courses c ON sr.code_module = c.code_module JOIN courses p ON sr.code_presentation = p.code_presentation JOIN (SELECT code_module, code_presentation, AVG(score) as avg_score FROM studentassessment GROUP BY code_module, code_presentation) a ON c.code_module = a.code_module AND p.code_presentation = a.code_presentation JOIN (SELECT DISTINCT imd_band FROM studentinfo) sb ON 1=1 GROUP BY m.code_module, p.code_presentation, sb.imd_band ORDER BY m.code_module, p.code_presentation, sb.imd_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ubaa8\ub4c8 \ucf54\ub4dc\ubcc4 \ud559\uc0dd \uc218 \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \ubc18\ud658", "accept": "SELECT code_module, COUNT(DISTINCT id_student) AS num_unique_students FROM studentRegistration GROUP BY code_module ORDER BY num_unique_students DESC;", "reject": "SELECT code_module, COUNT(*) as num_students FROM studentregistration GROUP BY code_module ORDER BY num_students DESC;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ubaa8\ub4e0 \ud559\uc0dd \uc911 \uac00\uc7a5 \ub9ce\uc740 \ubaa8\ub4c8\uc744 \uc774\uc218\ud55c \ud559\uc0dd\uc758 \ucd5c\uc885 \uacb0\uacfc\ub97c \uc2dd\ubcc4", "accept": "SELECT si.final_result FROM studentInfo si INNER JOIN ( SELECT id_student, COUNT(DISTINCT code_module) AS module_count FROM studentregistration GROUP BY id_student ORDER BY module_count DESC LIMIT 1 ) AS max_modules ON si.id_student = max_modules.id_student;", "reject": "SELECT studentinfo.code_module, studentinfo.code_presentation, studentinfo.id_student, studentinfo.gender, studentinfo.region, studentinfo.highest_education, studentinfo.imd_band, studentinfo.age_band, studentinfo.num_of_prev_attempts, studentinfo.studied_credits, studentinfo.disability, studentinfo.final_result, studentregistration.date_unregistration FROM studentinfo INNER JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student INNER JOIN (SELECT code_module, code_presentation, MAX(num_of_prev_attempts) as max_attempts FROM studentinfo GROUP BY code_module, code_presentation) as subquery ON studentinfo.code_module = subquery.code_module AND studentinfo.code_presentation = subquery.code_presentation AND studentinfo.num_of_prev_attempts = subquery.max_attempts WHERE studentregistration.date_unregistration IS NULL;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4e0 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud55c \ubaa8\ub4c8\uacfc \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\ub97c \uc870\ud68c", "accept": "SELECT code_module, AVG(module_presentation_length) as avg_length FROM courses GROUP BY code_module;", "reject": "SELECT m.name AS module_name, AVG(cp.length) AS avg_presentation_length FROM courses c JOIN modules m ON c.code_module = m.code_module JOIN course_presentations cp ON c.code_presentation = cp.code_presentation GROUP BY m.name ;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ud559\uc0dd\uc758 \ud3c9\uade0 \uc774\uc218\ud559\uc810\uc774 100\ud559\uc810 \ubbf8\ub9cc\uc778 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentinfo.code_module, studentinfo.code_presentation FROM studentinfo GROUP BY studentinfo.code_module, studentinfo.code_presentation HAVING AVG(studentinfo.studied_credits) < 100;", "reject": "SELECT courses.code_module, courses.code_presentation FROM courses INNER JOIN studentinfo ON courses.code_module = studentinfo.code_module INNER JOIN studentinfo AS studentinfo_2 ON courses.code_presentation = studentinfo_2.code_presentation WHERE studentinfo.studied_credits < 100 GROUP BY courses.code_module, courses.code_presentation HAVING COUNT(DISTINCT studentinfo_2.id_student) > 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uc885 \ud559\ub825\uc774 Post Graduate Qualification\uc778 \ud559\uc0dd\ub4e4\uc744 \uc5f0\ub839\ub300 \ubcc4\ub85c \ud3c9\uade0 \uc810\uc218\ub97c \uc54c\uace0 \uc2f6\uc5b4", "accept": "SELECT studentinfo.age_band, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.highest_education = 'Post Graduate Qualification' GROUP BY studentinfo.age_band;", "reject": "SELECT studentinfo.age_band, AVG(studentassessment.score) as avg_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.highest_education = 'Post Graduate Qualification' GROUP BY studentinfo.age_band;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\"27759\" \ud559\uc0dd\uc758 \uc131\ubcc4, \uc5f0\ub839\ub300, \uc7a5\uc560 \uc5ec\ubd80, \uadf8\ub9ac\uace0 \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ud3c9\uac00 \uc720\ud615, \uac00\uc911\uce58, \uc81c\ucd9c \ub0a0\uc9dc \uc870\ud68c", "accept": "SELECT studentinfo.gender, studentinfo.age_band, studentinfo.disability, assessments.assessment_type, assessments.weight, assessments.date FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 27759;", "reject": "SELECT studentinfo.gender, studentinfo.age_band, studentinfo.disability, assessments.assessment_type, assessments.weight, assessments.date FROM studentinfo INNER JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 27759;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd\uc758 \ucd5c\uace0 \uc810\uc218\uc640 \ubaa8\ub4c8 \uc815\ubcf4\ub97c \uacb0\ud569\ud558\uc5ec \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ucd5c\uace0 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT courses.code_module, courses.code_presentation, MAX(studentAssessment.score) AS max_score FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student GROUP BY courses.code_module, courses.code_presentation;", "reject": "SELECT c.code_module, c.code_presentation, MAX(sa.score) as highest_score FROM courses c JOIN studentregistration sr ON c.code_module = sr.code_module AND c.code_presentation = sr.code_presentation JOIN studentassessment sa ON sr.id_student = sa.id_student GROUP BY c.code_module, c.code_presentation;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \uc9c0\uc5ed\uba85, \uc9c0\uc5ed\ubcc4 \ud559\uc0dd \uc218\uc640 \ud574\ub2f9 \uc9c0\uc5ed\uc5d0 \uac70\uc8fc\ud558\ub294 \ud559\uc0dd\uc758 \ube44\uc728", "accept": "SELECT si.code_module, si.region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module) AS percentage FROM studentInfo si GROUP BY si.code_module, si.region;", "reject": "SELECT s.code_module, r.region, COUNT(s.id_student) as num_students, (COUNT(s.id_student) * 100.0 / (SELECT COUNT(*) FROM studentinfo si WHERE si.code_module = s.code_module) ) as percentage FROM studentinfo s INNER JOIN studentinfo si ON s.code_module = si.code_module INNER JOIN regions r ON s.region = r.region GROUP BY s.code_module, r.region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ud3c9\uade0 \uac00\uc911\uce58\ub97c \uc870\ud68c", "accept": "SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;", "reject": "SELECT code_module, AVG(weight) FROM assessments GROUP BY code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc \uc774\uc6a9\uc77c\uacfc \ud3c9\uac00 \uc81c\ucd9c\uc77c\uc758 \ucc28\uc774\uc758 \ud3c9\uade0\uacfc \ud45c\uc900 \ud3b8\ucc28\ub97c \uacc4\uc0b0\ud558\uc5ec \ud559\uc2b5 \uc2dc\uac04\uc758 \ubcc0\ub3d9\uc131\uc744 \ud655\uc778\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud559\uc2b5\uc2dc\uac04\uc758 \ubcc0\ub3d9\uc131\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time, STDDEV(DATEDIFF(sa.date_submitted, sv.date)) AS std_dev_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT code_module, code_presentation, AVG(date - date_submitted) as avg_days_diff, STDDEV(date - date_submitted) as stddev_days_diff FROM studentregistration sr JOIN studentvle s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation JOIN studentassessment sa ON sr.id_student = sa.id_student GROUP BY code_module, code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ubaa8\ub4c8\ubcc4 \ucd5c\uace0 \ud559\ub825\ubcc4 \uc790\ub8cc \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc758 \ud3c9\uade0\uc774 25\ud68c \ubbf8\ub9cc\uc778 \uacbd\uc6b0 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ucd5c\uace0 \ud559\ub825, \uc790\ub8cc \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc758 \ud3c9\uade0 \uc870\ud68c", "accept": "SELECT sr.code_module, si.highest_education, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.highest_education HAVING AVG(v.sum_click) < 25;", "reject": "SELECT s.highest_education, c.code_module, AVG(sv.sum_click) as avg_interactions FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation GROUP BY s.highest_education, c.code_module HAVING avg_interactions < 25;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc5c6\ub294 \ud559\uc0dd\ub4e4 \uc911 Pass \uc131\uc801\uc73c\ub85c \uc218\ub8cc\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Pass' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) FROM studentinfo WHERE disability = 'No' AND final_result = 'Pass' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uacfc\uc81c \uc81c\ucd9c \ub0a0\uc9dc \uc774\ud6c4 \ubc0f \uc774\uc804\uc5d0 \uac00\uc0c1 \ud559\uc2b5 \ud658\uacbd(VLE) \uc0c1\ud638\uc791\uc6a9\uc744 \ud55c \ud3c9\uade0 \ud69f\uc218\ub97c \uac01 \ubaa8\ub4c8 \ubc0f \uc138\uc158\ubcc4\ub85c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uc0c1\ud638\uc791\uc6a9 \ud3c9\uade0 \ud69f\uc218\ub97c \uc870\ud68c\"", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(CASE WHEN sv.date >= sa.date_submitted THEN sv.sum_click END) AS avg_recent_interaction_submitted, AVG(CASE WHEN sv.date < sa.date_submitted THEN sv.sum_click END) AS avg_recent_interaction_not_submitted FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT c.code_module, p.code_presentation, AVG(sv.date) as avg_date, AVG(sv.sum_click) as avg_interactions FROM studentregistration sr JOIN courses c ON sr.code_module = c.code_module JOIN courses p ON sr.code_presentation = p.code_presentation JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation JOIN studentassessment sa ON sr.id_student = sa.id_student GROUP BY c.code_module, p.code_presentation ORDER BY c.code_module, p.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ub2e4\uc591\ud55c IMB \ubc34\ub4dc \uac04\uc758 \ud3c9\uac00 \uc720\ud615 \ubcc4\ub85c \uc9c4\ud589\ub41c \ud3c9\uac00\uc218 \uc9d1\uacc4(imd_band \ubcc4 \uadf8\ub8f9\ud654 \ubc0f \ud574\ub2f9 \uc9c0\uc218 \ub0b4\uc5d0\uc11c \ud3c9\uac00 \uc218\uac00 \ub9ce\uc740 \uc21c\uc11c\ub85c \uc815\ub82c)", "accept": "SELECT si.imd_band, a.assessment_type, COUNT(*) AS num_assessments FROM studentinfo si INNER JOIN assessments a ON si.code_module = a.code_module AND si.code_presentation = a.code_presentation GROUP BY si.imd_band, a.assessment_type ORDER BY si.imd_band, num_assessments DESC;", "reject": "SELECT a.assessment_type, s.imd_band, COUNT(a.id_assessment) as num_of_assessments, ROW_NUMBER() OVER (PARTITION BY s.imd_band ORDER BY COUNT(a.id_assessment) DESC) as rank FROM assessments a JOIN studentinfo s ON a.code_module = s.code_module JOIN courses c ON a.code_module = c.code_module GROUP BY a.assessment_type, s.imd_band ORDER BY s.imd_band, rank;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uac00\uc7a5 \ub9ce\uc774 \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uade0 \ud3c9\uac00\uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score_of_top_vle_user FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN ( SELECT id_student FROM studentvle GROUP BY id_student ORDER BY SUM(sum_click) DESC LIMIT 1 ) AS top_vle_user ON sr.id_student = top_vle_user.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT c.code_module, c.code_presentation, AVG(a.score) as avg_score FROM studentregistration sr JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation JOIN studentassessment a ON sv.id_student = a.id_student WHERE sv.date = (SELECT MAX(date) FROM studentvle sv2 WHERE sv2.code_module = sv.code_module AND sv2.code_presentation = sv.code_presentation) GROUP BY c.code_module, c.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ud3c9\uac00 \uc810\uc218\uac00 70\uc810 \uc774\uc0c1\uc778 \ud559\uc0dd\ub4e4\uc758 \ucd1d \uc218\uc640 \ube44\uc728\uc744 \uc870\ud68c", "accept": "SELECT COUNT(*) AS passed_count, (COUNT(*) / (SELECT COUNT(*) FROM studentAssessment)) * 100 AS pass_rate FROM studentAssessment WHERE score >= 70;", "reject": "SELECT COUNT(*) as num_students, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentassessment), 2) as percentage FROM studentassessment WHERE score >= 70;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4 \uc911 Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\ubcc4 \ud559\uc0dd \uc218\uac00 10\uba85 \uc774\uc0c1\uc778 \uacbd\uc6b0 \uc5f0\ub839\ub300\uc640 \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT age_band, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Pass' AND disability = 'Y' GROUP BY age_band HAVING COUNT(*) > 10;", "reject": "SELECT age_band, COUNT(*) as student_count FROM studentinfo WHERE disability = 'Yes' AND final_result = 'Pass' GROUP BY age_band HAVING COUNT(*) > 10;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ud559\uc0dd\uc758 \ub4f1\ub85d\ub41c \ubaa8\ub4c8\uacfc \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT r.code_module, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;", "reject": "SELECT s.id_student, s.gender, s.region, s.highest_education, s.imd_band, s.age_band, s.num_of_prev_attempts, s.studied_credits, s.disability, s.final_result, c.code_module, c.name_module, c.description, c.assessment_score, c.code_presentation, c.date_start, c.date_end FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ud3c9\uade0 \ud3c9\uac00 \uac00\uc911\uce58 \uc774\uc0c1\uc758 \ubaa8\ub4c8\uacfc \ud574\ub2f9 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc \uc870\ud68c", "accept": "SELECT code_module, code_presentation FROM assessments GROUP BY code_module, code_presentation HAVING AVG(weight) >= (SELECT AVG(weight) FROM assessments);", "reject": "SELECT c.code_module, c.code_presentation FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation WHERE a.weight > (SELECT AVG(weight) FROM assessments) GROUP BY c.code_module, c.code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uac00 \uc720\ud615\ubcc4\ub85c \uac00\uc7a5 \ub192\uc740 \ud3c9\uac00 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT a.assessment_type, MAX(sa.score) AS max_score FROM assessments a LEFT JOIN studentAssessment sa ON sa.id_assessment = a.id_assessment GROUP BY a.assessment_type;", "reject": "SELECT a.assessment_type, MAX(sa.score) as max_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\ubcc4 \ud504\ub808\uc820\ud14c\uc774\uc158 \uc218 \uc870\ud68c", "accept": "SELECT code_module, COUNT(DISTINCT code_presentation) AS num_presentations FROM courses GROUP BY code_module;", "reject": "SELECT code_module, COUNT(code_presentation) as num_presentation FROM courses GROUP BY code_module;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc640 \ucd5c\uc885 \uacb0\uacfc \uac04\uc758 \uad00\uacc4\ub97c \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\ub3c4 \ud568\uaed8 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;", "reject": "SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) as avg_interactions, s.final_result FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation GROUP BY c.code_module, c.code_presentation, s.final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "35-55\uc138 \uc5f0\ub839\ub300 \ud559\uc0dd\ub4e4\uc758 \uc9c0\uc5ed\uba85\uacfc \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE age_band = '35-55' GROUP BY region;", "reject": "SELECT studentinfo.region, AVG(studentinfo.final_result) as avg_grade FROM studentinfo WHERE studentinfo.age_band = '35-55' GROUP BY studentinfo.region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uade0 \ud3c9\uac00\uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT code_module, code_presentation, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;", "reject": "SELECT c.code_module, p.code_presentation, AVG(a.score) as avg_score FROM studentassessment a JOIN assessments ass ON a.id_assessment = ass.id_assessment JOIN courses c ON ass.code_module = c.code_module JOIN courses p ON ass.code_presentation = p.code_presentation GROUP BY c.code_module, p.code_presentation;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT AVG(avg_credits) as avg_credits FROM ( SELECT id_student, SUM(studied_credits) AS avg_credits FROM studentInfo GROUP BY id_student ) AS student_avg_credits;", "reject": "SELECT AVG(studied_credits) FROM studentinfo;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "DDD \uc218\uc5c5\uc744 \ub4e3\ub294 \ud559\uc0dd\ub4e4\uc758 \ud65c\ub3d9 \uc720\ud615\uc744 \uc54c\ub824\uc918", "accept": "SELECT DISTINCT vle.activity_type FROM vle JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE courses.code_module = 'DDD';", "reject": "SELECT DISTINCT vle.activity_type FROM vle INNER JOIN courses ON vle.code_module = courses.code_module INNER JOIN students ON courses.code_module = students.code_module WHERE courses.code_presentation = '2022B' AND students.activity_type = 'DDD';", "context": "CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 VLE \uc790\ub8cc \ud074\ub9ad \uc218\uc758 \ucd1d \ud569\uc744 \uc870\ud68c", "accept": "SELECT SUM(sum_click) as total_clicks FROM ( SELECT id_student, SUM(sum_click) AS sum_click FROM studentVle GROUP BY id_student ) AS student_clicks;", "reject": "SELECT SUM(sum_click) FROM studentvle;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \ucd5c\uadfc\uc5d0 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \uc131\ubcc4\uc744 \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uc131\ubcc4\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student INNER JOIN studentvle sv ON si.id_student = sv.id_student AND sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE sv.date = ( SELECT MAX(date) FROM studentvle sv2 WHERE sv2.code_module = sv.code_module AND sv2.code_presentation = sv.code_presentation ) GROUP BY sr.code_module, sr.code_presentation, si.gender;", "reject": "SELECT s.code_module, s.code_presentation, s.gender FROM studentinfo s INNER JOIN (SELECT code_module, code_presentation, id_student FROM studentvle WHERE date = (SELECT MAX(date) FROM studentvle)) v ON s.code_module = v.code_module AND s.code_presentation = v.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "Scotland \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'West Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'West Midlands Region' ) );", "reject": "SELECT s.id_student, s.name, a.score FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student WHERE s.gender = 'Male' AND s.region = 'Scotland' AND a.score > (SELECT AVG(a.score) FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student WHERE s.gender = 'Male' AND s.region = 'Scotland');", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "CCC \uc218\uc5c5\uc744 \ub4e3\ub294 \ud559\uc0dd\uc758 \ud3c9\uade0 \uc774\uc218 \ud559\uc810\uc744 \uc54c\uace0 \uc2f6\uc5b4", "accept": "SELECT AVG(studentinfo.studied_credits) AS average_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE courses.code_module = 'CCC';", "reject": "SELECT AVG(studied_credits) FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module WHERE courses.code_presentation = 'CCC';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \ubaa8\ub4c8\uc5d0\uc11c \uc2e4\ud328\ud55c \ud559\uc0dd\uc758 \uc218", "accept": "SELECT code_module, code_presentation, COUNT(id_student) AS failed_students FROM studentInfo WHERE final_result = 'Fail' GROUP BY code_module, code_presentation;", "reject": "SELECT COUNT(*) FROM studentinfo WHERE code_module = 'MATH1001' AND final_result = 'Failed';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub099\uc81c \uc131\uc801\uc744 \ubc1b\uc740 \ud559\uc0dd\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\uc740 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud559\uc0dd\uc758 \ube44\uc728\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, (COUNT(si.final_result) - COUNT(CASE WHEN si.final_result >= 40 THEN si.final_result END)) / COUNT(si.final_result) * 100 AS fail_percentage FROM studentregistration sr INNER JOIN studentinfo si ON si.id_student = sr.id_student WHERE si.final_result IS NOT NULL GROUP BY sr.code_module, sr.code_presentation ORDER BY fail_percentage DESC LIMIT 1;", "reject": "SELECT m.code_module, p.code_presentation, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentregistration sr WHERE sr.code_module = m.code_module AND sr.code_presentation = p.code_presentation), 2) as fail_percentage FROM studentregistration sr INNER JOIN studentinfo s ON sr.id_student = s.id_student INNER JOIN courses c ON sr.code_module = c.code_module INNER JOIN courses p ON sr.code_presentation = p.code_presentation WHERE s.final_result = 'Failed' GROUP BY m.code_module, p.code_presentation ORDER BY fail_percentage DESC LIMIT 1;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub0a8\uc131\uacfc \uc5ec\uc131 \ud559\uc0dd\uc758 \uc218\ub97c \uc870\ud68c", "accept": "SELECT gender, COUNT(*) AS count FROM studentInfo GROUP BY gender;", "reject": "SELECT gender, COUNT(*) FROM studentinfo GROUP BY gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uace0 \ud559\ub825 A Level or Equivalent \uc778 \ud559\uc0dd\uc758 \uc810\uc218\uc640 \uc0ac\uc774\ud2b8 id\ub97c \uc54c\ub824\uc918", "accept": "SELECT studentassessment.score, studentvle.id_site FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentvle ON studentassessment.id_student = studentvle.id_student WHERE studentinfo.highest_education = 'A Level or Equivalent';", "reject": "SELECT s.id_student, s.score, c.site_id FROM studentassessment s INNER JOIN studentinfo si ON s.id_student = si.id_student INNER JOIN courses c ON si.code_module = c.code_module WHERE si.highest_education = 'A Level or Equivalent';", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae30\uac04\uc774 120\uc77c \ubbf8\ub9cc\uc778 \ud504\ub808\uc820\ud14c\uc774\uc158 \uc218", "accept": "SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE module_presentation_length < 120;", "reject": "SELECT COUNT(*) FROM courses WHERE module_presentation_length < 120 ;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \uacfc\uc815\uc5d0 \ub4f1\ub85d\ub41c \ud559\uc0dd\ub4e4 \uc911 \uc7ac\uc2dc\ub3c4 \ud69f\uc218\uac00 6\ud68c \uc774\uc0c1\uc778 \ud559\uc0dd\ub4e4\uc758 \uc815\ubcf4\uc640 \uacfc\uc815 \uc138\ubd80 \uc815\ubcf4\ub97c \ubd84\uc11d\ud558\uace0 \ud559\uc0dd, \uc131\ubcc4, \uc5f0\ub839\ub300,  \uc7ac\uc2dc\ub3c4 \ud69f\uc218, \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT si.id_student, si.gender, si.age_band, si.num_of_prev_attempts, c.code_module, c.code_presentation FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.num_of_prev_attempts >= 6;", "reject": "SELECT studentinfo.id_student, studentinfo.gender, studentinfo.age_band, studentinfo.num_of_prev_attempts, courses.code_module, courses.code_presentation FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE studentinfo.num_of_prev_attempts > 6;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \ucd5c\uadfc\uc5d0 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uacfc \ucd5c\uadfc\uc5d0 \uc81c\ucd9c\ud55c \ud3c9\uac00\ub97c \uc644\ub8cc\ud55c \ud559\uc0dd \uac04\uc758 \ube44\uc728\uc744 \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ube44\uc728\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, (COUNT(DISTINCT CASE WHEN sv.date >= sa.date_submitted THEN sr.id_student END) / COUNT(DISTINCT sr.id_student)) AS recent_interaction_to_submission_ratio FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT c.code_module, c.code_presentation, COUNT(DISTINCT s.id_student) * 100.0 / (SELECT COUNT(DISTINCT s.id_student) FROM studentregistration s JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE c.date_start <= date AND c.date_end >= date) AS percentage FROM studentregistration s JOIN studentvle v ON s.code_module = v.code_module AND s.code_presentation = v.code_presentation JOIN studentassessment a ON s.id_student = a.id_student JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE s.date_registration <= v.date AND s.date_unregistration >= v.date AND s.date_registration <= a.date_submitted AND s.date_unregistration >= a.date_submitted GROUP BY c.code_module, c.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ud3c9\uac00 \uc720\ud615\ubcc4 \ud3c9\uac00 \uc218 \uc870\ud68c", "accept": "SELECT assessment_type, COUNT(*) AS num_assessments FROM assessments GROUP BY assessment_type;", "reject": "SELECT assessment_type, COUNT(*) as assessment_count FROM assessments GROUP BY assessment_type;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub300\ud574 \ucd5c\uc885 \uacb0\uacfc\uac00 'Pass'\uc778 \ud559\uc0dd\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud559\uc0dd \uc218\ub97c \uc870\ud68c", "accept": "SELECT code_module, COUNT(id_student) AS pass_count FROM studentInfo WHERE final_result = 'Pass' GROUP BY code_module;", "reject": "SELECT c.code_module, s.gender, s.region, s.highest_education, s.imd_band, s.age_band, COUNT(*) as num_students FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN studentoutcomes o ON s.id_student = o.id_student WHERE o.final_result = 'Pass' GROUP BY c.code_module, s.gender, s.region, s.highest_education, s.imd_band, s.age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc774\uc804 \uc2dc\ub3c4(\uc804\ud559)\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE num_of_prev_attempts > 0 GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) as avg_credits FROM studentinfo WHERE num_of_prev_attempts > 0 GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uadfc \ud3c9\uac00\ub97c \uc81c\ucd9c\ud55c \ud559\uc0dd\uc758 \ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uac00 \uc77c\uc790\ub97c \uc2dd\ubcc4\ud558\uace0 \ud3c9\uac00 \uc720\ud615, \ud3c9\uac00 \uc77c\uc790\ub97c \uc870\ud68c", "accept": "SELECT a.assessment_type, sa.date_submitted FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment ORDER BY sa.date_submitted DESC LIMIT 1;", "reject": "SELECT a.assessment_type, a.date AS assessment_date FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment WHERE sa.date_submitted = (SELECT MAX(date_submitted) FROM studentassessment) AND sa.is_branked = 0;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "TMA \uacfc\uc815\uc758 \ubaa8\ub4e0 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud574 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc810\uc218 \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud3c9\uade0 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT a.code_module, a.code_presentation, AVG(sa.score) AS avg_score FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment WHERE a.assessment_type = 'TMA' GROUP BY a.code_module, a.code_presentation;", "reject": "SELECT c.code_module, p.code_presentation, AVG(sa.score) as avg_score FROM courses c INNER JOIN assessments a ON c.code_module = a.code_module INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment WHERE a.assessment_type = 'TMA' GROUP BY c.code_module, p.code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "VLE \uc790\ub8cc\uc640 \uc0c1\ud638 \uc791\uc6a9\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 \uc804\uccb4 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810\ubcf4\ub2e4 \ub0ae\uc740 \uacbd\uc6b0 \ud574\ub2f9 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.age_band HAVING AVG(studied_credits) < (SELECT AVG(studied_credits) FROM studentInfo);", "reject": "SELECT studentinfo.age_band, AVG(studentregistration.final_result) AS avg_grade FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.age_band HAVING AVG(studentregistration.final_result) < (SELECT AVG(studentregistration.final_result) FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student) ORDER BY avg_grade DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uac00\uc7a5 \ub9ce\uc774 \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score_of_top_vle_user FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN ( SELECT id_student FROM studentvle GROUP BY id_student ORDER BY SUM(sum_click) DESC LIMIT 1 ) AS top_vle_user ON sr.id_student = top_vle_user.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT c.code_module, p.code_presentation, AVG(a.score) AS avg_score FROM studentregistration sr INNER JOIN studentvle s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation INNER JOIN studentassessment a ON sr.id_student = a.id_student GROUP BY c.code_module, p.code_presentation HAVING MAX(s.date) = (SELECT MAX(date) FROM studentvle GROUP BY code_module, code_presentation);", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ucd1d \ud074\ub9ad \uc218 10 \uc774\uc0c1 \ud559\uc0dd\uc758 \uc131\uc801\uc744 \uad6c\ud574\uc918", "accept": "SELECT studentassessment.score FROM studentassessment JOIN studentvle ON studentassessment.id_student = studentvle.id_student WHERE studentvle.sum_click >= 10;", "reject": "SELECT s.id_student, s.score FROM studentassessment s INNER JOIN (SELECT id_student, COUNT(*) as total_click FROM studentvle GROUP BY id_student HAVING total_click > 10) v ON s.id_student = v.id_student;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "Fail \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd \uc911 \uc7a5\uc560 \uc5ec\ubd80\uc640 \ud559\uc0dd\ub4e4\uc758 \uc218 \uc870\ud68c", "accept": "SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Fail' GROUP BY disability;", "reject": "SELECT COUNT(*) as num_students, disability FROM studentinfo WHERE final_result = 'Fail' GROUP BY disability;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc544\uc9c1 \ub4f1\ub85d \uc911\uc774\uba70 \ud3c9\uac00\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \uc54a\uc740 \ud559\uc0dd\ub4e4\uc758 \uc131\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 60\ubcf4\ub2e4 \ub192\uc740 \uacbd\uc6b0 \uc131\ubcc4\uacfc \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT s.gender, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_unregistration IS NULL AND sa.score IS NULL GROUP BY s.gender HAVING AVG(studied_credits) > 60;", "reject": "SELECT studentinfo.gender, AVG(studentregistration.studied_credits) as avg_credits FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student INNER JOIN courses ON studentregistration.code_module = courses.code_module INNER JOIN studentevaluations ON studentinfo.id_student = studentevaluations.id_student WHERE studentregistration.date_unregistration IS NULL AND studentevaluations.final_result IS NULL GROUP BY studentinfo.gender HAVING AVG(studentregistration.studied_credits) > 60;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub300\ud55c \ucd1d \ud559\uc0dd \ub4f1\ub85d \uc218\uc640 \ud3c9\uade0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae30\uac04 \uc870\ud68c", "accept": "SELECT si.code_module, COUNT(si.id_student) AS registration_count, AVG(c.module_presentation_length) AS average_length FROM studentInfo si INNER JOIN courses c ON si.code_module = c.code_module GROUP BY si.code_module;", "reject": "SELECT c.code_module, c.code_presentation, COUNT(s.id_student) as num_students, AVG(c.module_presentation_length) as avg_length FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed\uba85\uacfc \uc9c0\uc5ed\ubcc4 Fail \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY region;", "reject": "SELECT region, AVG(studied_credits) as avg_credits FROM studentinfo WHERE final_result = 'Fail' GROUP BY region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560 \ud559\uc0dd\uc758 \ube44\uc728\uc774 10% \ubbf8\ub9cc\uc778 \ubaa8\ub4e0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.disability = 'Y' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) / (SELECT COUNT(id_student) FROM studentinfo WHERE code_module = studentregistration.code_module AND code_presentation = studentregistration.code_presentation)) < 0.1;", "reject": "SELECT m.code_module, p.code_presentation FROM studentregistration sr JOIN studentinfo s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module, p.code_presentation HAVING COUNT(s.id_student) * 100.0 / (SELECT COUNT(*) FROM studentregistration sr JOIN studentinfo s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation WHERE s.disability = 'yes') < 10;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub378 \ud504\ub808\uc820\ud14c\uc774\uc158\uacfc \ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\ub97c \uc870\ud68c", "accept": "SELECT code_presentation, AVG(module_presentation_length) AS avg_length FROM courses GROUP BY code_presentation ORDER BY avg_length DESC;", "reject": "SELECT code_module, code_presentation, AVG(module_presentation_length) as avg_length FROM courses GROUP BY code_module, code_presentation ;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uc5ec\ud559\uc0dd\uc758 \ud3c9\uade0 \uc810\uc218\uc640 \uc5ec\ud559\uc0dd\uc774 \ucc38\uc5ec\ud55c VLE \uc790\ub8cc\uc758 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\ub97c \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud3c9\uade0\uc810\uc218, \ud3c9\uade0 \uc0c1\ud638\uc791\uc6a9 \uc218\ub97c \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_interaction_count FROM studentregistration INNER JOIN studentInfo ON studentregistration.id_student = studentInfo.id_student AND studentInfo.gender = 'F' LEFT JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "reject": "SELECT c.code_module, p.code_presentation, AVG(sf.score) as avg_score, AVG(sv.sum_click) as avg_interactions FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student JOIN courses c ON sr.code_module = c.code_module JOIN courses p ON sr.code_presentation = p.code_presentation JOIN studentvle sv ON sr.id_student = sv.id_student JOIN studentfinals sf ON sr.id_student = sf.id_student WHERE s.gender = 'Female' GROUP BY c.code_module, p.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8\ucf54\ub4dc\uc640 \uac01 \ubaa8\ub4c8\ubcc4 \ucd5c\ub300 \ud3c9\uac00 \uac00\uc911\uce58\uc640 \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218 \uc870\ud68c", "accept": "SELECT a.code_module, MAX(a.weight) AS max_weight, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;", "reject": "SELECT courses.code_module, MAX(assessments.weight) as max_weight, AVG(assessments.weight) as avg_weight FROM courses JOIN assessments ON courses.code_module = assessments.code_module GROUP BY courses.code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uc885 \ud3c9\uac00\ub97c Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\uc758 \ud3c9\uade0 \uc774\uc804 \uc2dc\ub3c4 \ud69f\uc218\uac00 1 \ubbf8\ub9cc\uc778 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uc870\ud68c", "accept": "SELECT si.code_module, si.code_presentation FROM studentinfo si WHERE si.final_result = 'Pass' GROUP BY si.code_module, si.code_presentation HAVING AVG(si.num_of_prev_attempts) < 1;", "reject": "SELECT code_module, code_presentation, AVG(num_of_prev_attempts) FROM studentinfo WHERE final_result = 'Pass' AND num_of_prev_attempts < 1 GROUP BY code_module, code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc131\ubcc4\ub85c \uc9c0\uc5ed\uba85, \ud559\uc0dd\ub4e4\uc758 \uc9c0\uc5ed\ubcc4 \ub4f1\ub85d \uc218\ub97c \uc870\ud68c", "accept": "SELECT gender, region, COUNT(*) AS registration_count FROM studentInfo GROUP BY gender, region;", "reject": "SELECT gender, region, COUNT(id_student) as num_students FROM studentinfo GROUP BY gender, region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc8fc\ub2f9 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \uc218\uac00 \uac00\uc7a5 \ub192\uc740 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentvle.code_module, studentvle.code_presentation FROM studentvle GROUP BY studentvle.code_module, studentvle.code_presentation ORDER BY AVG(studentvle.sum_click) DESC LIMIT 1;", "reject": "SELECT m.name_module, p.name_presentation, AVG(sum_click/7) as avg_interactions_per_week FROM studentvle s JOIN module v ON s.code_module = v.code_module JOIN presentation p ON v.code_presentation = p.code_presentation JOIN student st ON s.id_student = st.id_student GROUP BY m.name_module, p.name_presentation ORDER BY avg_interactions_per_week DESC LIMIT 5;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uc5ec\ud559\uc0dd\uc758 \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uacfc \ub0a8\ud559\uc0dd\uc758 \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uc744 \ube44\uad50\ud558\uc5ec \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uc131\ubcc4\uacfc \ud3c9\uade0 \uc790\ub8cc \uc0c1\ud638\uc791\uc6a9\uc2dc\uac04(\ud559\uc2b5\uc2dc\uac04)\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, si.gender, AVG(sv.sum_click) AS avg_learning_time FROM studentregistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentvle sv ON sr.id_student = sv.id_student WHERE si.gender IN ('M', 'F') GROUP BY sr.code_module, sr.code_presentation, si.gender;", "reject": "SELECT c.code_module, c.code_presentation, AVG(CASE WHEN s.gender = 'Female' THEN sv.date ELSE NULL END) as avg_learning_time_female, AVG(CASE WHEN s.gender = 'Male' THEN sv.date ELSE NULL END) as avg_learning_time_male FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation, s.gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "Withdrawn \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud559\uc810 ", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) as avg_credits FROM studentinfo WHERE final_result = 'Withdrawn' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uc5ec\ud559\uc0dd\uc758 \ud3c9\uade0 \uc810\uc218\uc640 \ub0a8\ud559\uc0dd\uc758 \ud3c9\uade0 \uc810\uc218\ub97c \ube44\uad50\ud558\uc5ec \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \uc5ec\ud559\uc0dd\uc758 \ud3c9\uade0\uc810\uc218, \ub0a8\ud559\uc0dd\uc758 \ud3c9\uade0\uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(CASE WHEN si.gender = 'F' THEN sa.score END) AS avg_female_score, AVG(CASE WHEN si.gender = 'M' THEN sa.score END) AS avg_male_score FROM studentregistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT c.code_module, c.code_presentation, AVG(s.score) as avg_female_score, AVG(s.score) as avg_male_score FROM studentassessment s INNER JOIN studentinfo st ON s.id_student = st.id_student INNER JOIN studentregistration r ON st.id_student = r.id_student INNER JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation WHERE st.gender IN ('F', 'M') GROUP BY c.code_module, c.code_presentation HAVING COUNT(DISTINCT st.id_student) > 10;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uc810\uc218\uac00 90 \uc774\uc0c1\uc778 \ud559\uc0dd\uc774 \uba87 \uba85\uc778\uc9c0 \uc5f0\ub839\ub300 \ubcc4\ub85c \ub098\ub220\uc918", "accept": "SELECT studentinfo.age_band, COUNT(*) AS num_students FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentassessment.score >= 90 GROUP BY studentinfo.age_band;", "reject": "SELECT age_band, COUNT(*) as num_students FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student WHERE score >= 90 GROUP BY age_band;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ubaa8\ub4c8\uc5d0 \uc18d\ud55c \ud559\uc0dd \uc911 \uc7a5\uc560\ub97c \uac00\uc9c4 \ud559\uc0dd\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\uc740\uc21c\ub300\ub85c \uc815\ub82c", "accept": "SELECT code_module, AVG(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) AS percentage_with_disability FROM studentInfo GROUP BY code_module ORDER BY percentage_with_disability DESC;", "reject": "SELECT s.code_module, s.code_presentation, COUNT(s.id_student) as total_students, COUNT(CASE WHEN s.disability = 'yes' THEN 1 END) as num_of_disabled_students, ROUND(COUNT(CASE WHEN s.disability = 'yes' THEN 1 END) * 100.0 / COUNT(s.id_student), 2) as percentage_of_disabled_students FROM studentinfo s GROUP BY s.code_module, s.code_presentation ORDER BY percentage_of_disabled_students DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud574 \uac00\uc7a5 \ub9ce\uc740 \ud3c9\uac00\ub97c \ubc1b\uc740 \ud559\uc0dd\uc758 \uc131\ubcc4\uacfc \ud3c9\uac00 \uc720\ud615\uc744 \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uc131\ubcc4, \ud3c9\uac00 \uc720\ud615, \ud3c9\uac00\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, si.gender, a.assessment_type, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentregistration sr ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.gender, a.assessment_type ORDER BY assessment_count DESC LIMIT 1;", "reject": "SELECT c.code_module, c.code_presentation, s.gender, a.assessment_type, SUM(sa.score) as total_score FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student JOIN studentregistration sr ON sa.id_student = sr.id_student JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY c.code_module, c.code_presentation, s.gender, a.assessment_type HAVING SUM(sa.score) = (SELECT MAX(SUM(sa2.score)) FROM studentassessment sa2 JOIN studentinfo s2 ON sa2.id_student = s2.id_student JOIN studentregistration sr2 ON sa2.id_student = sr2.id_student JOIN assessments a2 ON sr2.code_module = a2.code_module AND sr2.code_presentation = a2.code_presentation GROUP BY a2.code_module, a2.code_presentation, s2.gender, a2.assessment_type) LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \uc18d\ud55c \ud559\uc0dd \uc911 \ud2b9\uc815 \uc9c0\uc5ed\uc5d0 \uac70\uc8fc\ud558\ub294 \ud559\uc0dd\uc758 \ube44\uc728", "accept": "SELECT code_module, region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module) AS percentage FROM studentInfo si GROUP BY code_module, region;", "reject": "SELECT s.code_module, s.region, COUNT(s.id_student) * 100.0 / (SELECT COUNT(id_student) FROM studentinfo si WHERE si.code_module = s.code_module) as percentage FROM studentinfo s WHERE s.region = 'North' GROUP BY s.code_module, s.region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac00\uc7a5 \ub9ce\uc740 \ud559\uc0dd\uc774 \ub4f1\ub85d\ud55c \ubaa8\ub4c8\uacfc \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentRegistration GROUP BY code_module ORDER BY num_students DESC LIMIT 1;", "reject": "SELECT code_module, COUNT(*) as student_count FROM studentregistration WHERE date_unregistration IS NULL GROUP BY code_module ORDER BY student_count DESC LIMIT 1;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ud559\uc0dd\uc758 \ud3c9\uac00 \uc810\uc218\uac00 \uac00\uc7a5 \ub192\uc740 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae30\uac04\uc744 \uc870\ud68c", "accept": "SELECT r.code_module, AVG(c.module_presentation_length) AS avg_length FROM studentRegistration r JOIN courses c ON r.code_module = c.code_module GROUP BY r.code_module;", "reject": "SELECT c.code_module, AVG(c.module_presentation_length) as avg_length FROM courses c INNER JOIN studentregistration sr ON c.code_module = sr.code_module INNER JOIN studentinfo s ON sr.id_student = s.id_student WHERE s.score = (SELECT MAX(score) FROM studentinfo) GROUP BY c.code_module;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uc5ec\ud559\uc0dd\uc774 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uc744 \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uade0 \ud559\uc2b5\uc2dc\uac04\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sv.date, sr.date_registration)) AS avg_learning_time_female_with_vle_activity FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT c.code_module, c.code_presentation, AVG(sv.date) as avg_learning_time FROM studentinfo si JOIN studentregistration sr ON si.id_student = sr.id_student JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE si.gender = 'Female' GROUP BY c.code_module, c.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc, \uac01 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uc640 \ud3c9\uac00 \uc720\ud615, \ud3c9\uac00 \uc720\ud615\ubcc4 \ud3c9\uade0 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT c.code_module, a.assessment_type, AVG(c.module_presentation_length) AS avg_presentation_length, AVG(a.weight) AS avg_weight FROM courses c JOIN assessments a ON c.code_module = a.code_module GROUP BY c.code_module, a.assessment_type;", "reject": "SELECT c.code_module, AVG(c.module_presentation_length) as avg_length, a.assessment_type, AVG(a.weight) as avg_weight FROM courses c INNER JOIN assessments a ON c.code_module = a.code_module GROUP BY c.code_module, a.assessment_type;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ucd5c\uc885\uc2dc\ud5d8(Exam)\uc758 \ud3c9\uade0 \uac00\uc911\uce58\ub97c \uacc4\uc0b0 \uacb0\uacfc", "accept": "SELECT AVG(weight) AS average_weight FROM assessments WHERE assessment_type = 'Exam';", "reject": "SELECT AVG(weight) FROM assessments WHERE assessment_type = 'Exam';", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc131\ubcc4\uc5d0 \ub530\ub978 \ud3c9\uade0 \ub4f1\ub85d \uae30\uac04\uc774 \uc591\uc218\uc778 \uacbd\uc6b0 \uc131\ubcc4\uacfc \ud3c9\uade0 \ub4f1\ub85d \uae30\uac04 \uc870\ud68c", "accept": "SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_registration_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.gender HAVING AVG(r.date_unregistration - r.date_registration) > 0;", "reject": "SELECT studentinfo.gender, AVG(studentregistration.date_registration) AS avg_date_registration FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentregistration.date_unregistration > 0 GROUP BY studentinfo.gender HAVING AVG(studentregistration.date_registration) > 0;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ub300\ud559 \ud559\ub825\uc744 \uac00\uc9c4 \uc7a5\uc560 \ud559\uc0dd\ub4e4 \uc911 \ud559\uc810 \ud3c9\uade0\uc774 90\ubcf4\ub2e4 \ub0ae\uc740 \uc9c0\uc5ed\uba85\uacfc \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'Y' GROUP BY region HAVING AVG(studied_credits) < 90;", "reject": "SELECT s.region, AVG(s.studied_credits) as avg_credits FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN studentinfo s2 ON c.code_presentation = s2.code_presentation WHERE s.highest_education = 'University' AND s.disability = 'Yes' AND AVG(s2.studied_credits) < 90 GROUP BY s.region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "VLE \uc790\ub8cc\uc640 \uc0c1\ud638 \uc791\uc6a9\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 \uc804\uccb4 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810\ubcf4\ub2e4 \ub0ae\uc740 \uacbd\uc6b0 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.age_band HAVING AVG(studied_credits) < (SELECT AVG(studied_credits) FROM studentInfo);", "reject": "SELECT s.age_band, AVG(s.final_result) FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE s.age_band IN (SELECT s.age_band FROM studentinfo s WHERE AVG(s.final_result) < (SELECT AVG(s.final_result) FROM studentinfo s)) GROUP BY s.age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud559\uc0dd \ucf54\ub4dc, \ud559\uc0dd\uc758 \ud3c9\uac00 \uc810\uc218\uc640 \ud3c9\uac00 \uc720\ud615\uc744 \uc870\ud68c", "accept": "SELECT s.id_student, a.assessment_type, sa.score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo s ON sa.id_student = s.id_student;", "reject": "SELECT studentinfo.code_module, studentinfo.code_presentation, studentassessment.score, assessments.assessment_type FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student INNER JOIN assessments ON studentassessment.code_module = assessments.code_module AND studentassessment.code_presentation = assessments.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \uc81c\ucd9c\ub41c \uacfc\uc81c\uc810\uc218\uac00 \uc544\uc9c1 \uc785\ub825\ub418\uc9c0 \uc54a\uc740 \ud559\uc0ddID, \ud3c9\uac00ID, \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\ub97c \uc870\ud68c", "accept": "SELECT si.id_student, sa.id_assessment, sr.code_module, sr.code_presentation FROM studentassessment sa INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student WHERE sa.score IS NULL AND sa.date_submitted IS NOT NULL;", "reject": "SELECT s.id_student, a.id_assessment, m.code_module, p.code_presentation FROM studentassessment a LEFT JOIN studentinfo s ON a.id_student = s.id_student LEFT JOIN studentregistration r ON s.id_student = r.id_student LEFT JOIN courses m ON r.code_module = m.code_module LEFT JOIN courses p ON r.code_presentation = p.code_presentation WHERE a.score IS NULL;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc131\ubcc4, \uc9c0\uc5ed, \ucd5c\uace0 \ud559\ub825, \ucd5c\uc885 \uacb0\uacfc \ubc0f \ud65c\ub3d9 \uc720\ud615\uc5d0 \ub530\ub978 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc810\uc218\uc640 \ud65c\ub3d9 \uc218", "accept": "SELECT si.gender, si.region, si.highest_education, si.final_result, AVG(sa.score) AS average_score, v.activity_type, COUNT(*) AS activity_count FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student JOIN studentvle sv ON si.id_student = sv.id_student JOIN vle v ON sv.id_site = v.id_site JOIN studentregistration sr ON si.code_module = sr.code_module AND si.code_presentation = sr.code_presentation JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation AND sa.id_assessment = a.id_assessment GROUP BY si.gender, si.region, si.highest_education, si.final_result, v.activity_type;", "reject": "SELECT studentinfo.gender, studentinfo.region, studentinfo.highest_education, studentassessment.final_result, studentvle.activity_type, AVG(studentassessment.score) as avg_score, COUNT(studentvle.id_site) as num_activities FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentregistration ON studentassessment.id_student = studentregistration.id_student JOIN studentvle ON studentassessment.id_student = studentvle.id_student JOIN vle ON studentvle.code_module = vle.code_module AND studentvle.code_presentation = vle.code_presentation GROUP BY studentinfo.gender, studentinfo.region, studentinfo.highest_education, studentassessment.final_result, studentvle.activity_type;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uac00 \uc720\ud615\ubcc4 \ucd5c\uc18c \ud3c9\uac00 \uc77c\uc790 \uc870\ud68c", "accept": "SELECT assessment_type, MIN(date) AS min_assessment_date FROM assessments GROUP BY assessment_type;", "reject": "SELECT assessment_type, MIN(date) as min_date FROM assessments GROUP BY assessment_type;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 \ud3c9\uade0 \ub098\uc774\ub97c \uc870\ud68c", "accept": "SELECT AVG(age_band) as avg_age FROM studentInfo;", "reject": "SELECT AVG(age_band) FROM studentinfo;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "Yorkshire Region \uc9c0\uc5ed \ud559\uc0dd\ub4e4\uc758 \ub4f1\ub85d \ub0a0\uc9dc\ub97c \uc54c\uace0\uc2f6\uc5b4", "accept": "SELECT studentregistration.date_registration FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.region = 'Yorkshire Region';", "reject": "SELECT studentregistration.date_registration FROM studentregistration INNER JOIN studentinfo ON studentregistration.code_module = studentinfo.code_module AND studentregistration.code_presentation = studentinfo.code_presentation WHERE studentinfo.region = 'Yorkshire';", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uc885 \uc2dc\ud5d8(Final Exam)\uc774 \uc788\ub294 \ubaa8\ub4e0 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158 \uc2dd\ubcc4", "accept": "SELECT code_module, code_presentation FROM assessments WHERE assessment_type = 'Exam';", "reject": "SELECT courses.code_module, presentations.code_presentation FROM courses INNER JOIN assessments ON courses.code_module = assessments.code_module INNER JOIN presentations ON assessments.code_presentation = presentations.code_presentation WHERE assessments.assessment_type = 'Exam';", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub300\ud574 \uac00\uc7a5 \ub9ce\uc740 \uc2dc\ub3c4 \ud69f\uc218\ub97c \uac00\uc9c4 \ud559\uc0dd\uc758 \ucd5c\uc885 \uacb0\uacfc\ub97c \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ucd5c\uc885 \uacb0\uacfc\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, si.final_result FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(num_of_prev_attempts) AS max_attempts FROM studentInfo GROUP BY id_student ) AS max_attempts ON si.id_student = max_attempts.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;", "reject": "SELECT s.code_module, s.final_result FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student WHERE sr.num_of_prev_attempts = (SELECT MAX(num_of_prev_attempts) FROM studentregistration sr2 WHERE sr2.code_module = sr.code_module AND sr2.code_presentation = sr.code_presentation);", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uac00\uc7a5 \ub9ce\uc740 \uc2dc\ub3c4 \ud69f\uc218\ub97c \uac00\uc9c4 \ud559\uc0dd\uc758 \uc5f0\ub839\ub300\ub97c \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uc5f0\ub839\ub300\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, si.age_band FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(num_of_prev_attempts) AS max_attempts FROM studentInfo GROUP BY id_student ) AS max_attempts ON si.id_student = max_attempts.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;", "reject": "SELECT s.code_module, s.code_presentation, st.age_band FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN (SELECT code_module, code_presentation, MAX(num_of_prev_attempts) as max_attempts FROM studentinfo GROUP BY code_module, code_presentation) sub ON s.code_module = sub.code_module AND s.code_presentation = sub.code_presentation INNER JOIN (SELECT DISTINCT region as age_band FROM studentinfo) st ON s.gender = st.age_band WHERE s.num_of_prev_attempts = sub.max_attempts;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc9c0\uc5ed \ubcc4 \ud65c\ub3d9 \uc720\ud615\uc758 \ud69f\uc218", "accept": "SELECT studentinfo.region, vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.region, vle.activity_type;", "reject": "SELECT s.region, v.activity_type, COUNT(*) as frequency FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN vle v ON c.code_module = v.code_module GROUP BY s.region, v.activity_type;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uade0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uc640 \ucd1d \ubaa8\ub4c8 \uc218 \uc870\ud68c", "accept": "SELECT AVG(module_presentation_length) AS avg_presentation_length, COUNT(DISTINCT code_module) AS num_modules FROM courses;", "reject": "SELECT code_presentation, AVG(module_presentation_length) as avg_length, COUNT(code_module) as total_modules FROM courses GROUP BY code_presentation;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ucd5c\uc885 \uc2dc\ud5d8\uc758 \ud3c9\uade0 \uac00\uc911\uce58\ub97c \uacc4\uc0b0 \uacb0\uacfc", "accept": "SELECT AVG(weight) AS average_weight FROM assessments WHERE assessment_type = 'Exam';", "reject": "SELECT AVG(weight) FROM assessments WHERE assessment_type = 'Exam' AND date = (SELECT MAX(date) FROM assessments WHERE assessment_type = 'Exam' AND code_module = assessments.code_module AND code_presentation = assessments.code_presentation);", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "CCC\uc218\uc5c5\uc744 \ub4e3\ub294 \ud559\uc0dd\uc758 \uc131\ubcc4, \ub098\uc774, \uc9c0\uc5ed\uc744 \uc54c\uace0\uc2f6\uc5b4", "accept": "SELECT gender, age_band, region FROM studentinfo WHERE code_module = 'CCC';", "reject": "SELECT s.gender, s.region, s.age_band FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN module_presentation mp ON c.code_presentation = mp.code_presentation WHERE c.code_module = 'CCC';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \uc7a5\uc560 \ud559\uc0dd \ube44\uc728\uc774 \uac00\uc7a5 \ub192\uc740 \uc9c0\uc5ed\uc21c\uc73c\ub85c \uc815\ub82c", "accept": "SELECT si.region, (COUNT(CASE WHEN si.disability = 'Y' THEN 1 END) / COUNT(*)) * 100 AS disability_percentage FROM studentinfo si GROUP BY si.region ORDER BY disability_percentage DESC;", "reject": "SELECT region, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentinfo WHERE disability = 'yes') as percentage FROM studentinfo WHERE disability = 'yes' GROUP BY region ORDER BY percentage DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc131\ubcc4\uc5d0 \ub530\ub978 \ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uac00 \uc720\ud615\ubcc4 \ud3c9\uade0 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT s.gender, a.assessment_type, AVG(sa.score) AS avg_score FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY s.gender, a.assessment_type;", "reject": "SELECT s.gender, a.assessment_type, AVG(a.score) as avg_score FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY s.gender, a.assessment_type;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc \uc774\uc6a9\uc77c\uacfc \ud3c9\uac00 \uc81c\ucd9c\uc77c\uc758 \ucc28\uc774\ub97c \uacc4\uc0b0\ud558\uc5ec \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uc744 \ud655\uc778\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT c.code_module, c.code_presentation, AVG(DATEDIFF(s.date, s.studentvle.date)) as avg_learning_time FROM studentregistration s JOIN studentvle s_vle ON s.code_module = s_vle.code_module AND s.code_presentation = s_vle.code_presentation JOIN studentassessment s_assessment ON s.id_student = s_assessment.id_student GROUP BY c.code_module, c.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud588\uc9c0\ub9cc VLE \uc790\ub8cc\uc640 \uc0c1\ud638 \uc791\uc6a9\ud558\uc9c0 \uc54a\uc740 \ud559\uc0dd\uc740 \uba87 \uba85", "accept": "SELECT sr.code_module, sr.code_presentation, COUNT(sv.id_student) AS num_students FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student AND sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE sv.id_student IS NULL GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT COUNT(*) FROM studentregistration sr WHERE sr.id_student NOT IN (SELECT vle.id_student FROM studentvle vle) ;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uc218\uc5c5 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c\uc758 \uc5f0\ub839\ub300\ubcc4\ub85c \ud65c\ub3d9 \uc720\ud615\uc5d0 \ub530\ub978 \ud3c9\uade0 \uc810\uc218\ub97c \ube44\uad50", "accept": "SELECT c.code_module, c.code_presentation, si.age_band, v.activity_type, AVG(sa.score) AS average_score FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation JOIN studentvle sv ON sa.id_student = sv.id_student JOIN vle v ON sv.id_site = v.id_site GROUP BY c.code_module, c.code_presentation, si.age_band, v.activity_type ORDER BY c.code_module, c.code_presentation, si.age_band, v.activity_type;", "reject": "SELECT c.activity_type, AVG(CASE WHEN s.age_band = '0-18' THEN sa.score ELSE NULL END) as avg_score_0_18, AVG(CASE WHEN s.age_band = '19-25' THEN sa.score ELSE NULL END) as avg_score_19_25, AVG(CASE WHEN s.age_band = '26-35' THEN sa.score ELSE NULL END) as avg_score_26_35, AVG(CASE WHEN s.age_band = '36-50' THEN sa.score ELSE NULL END) as avg_score_36_50, AVG(CASE WHEN s.age_band = '51+' THEN sa.score ELSE NULL END) as avg_score_51_plus FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student JOIN courses c ON sa.code_module = c.code_module AND sa.code_presentation = c.code_presentation GROUP BY c.activity_type;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
