{"input": "\ubaa8\ub4e0 \ubaa8\ub4c8\uc5d0 \ub300\ud574 \uac01 \ud559\uc0dd\uc774 \ub4f1\ub85d\ud55c \ucd1d \ubaa8\ub4c8 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ud559\uc0dd\uacfc \ub4f1\ub85d\ud55c \ucd1d \ubaa8\ub4c8 \uc218 \uc870\ud68c", "accept": "SELECT id_student, COUNT(*) AS total_modules_registered FROM studentRegistration GROUP BY id_student;", "reject": "SELECT sr.id_student, COUNT(sr.code_module) AS num_modules FROM studentRegistration sr GROUP BY sr.id_student;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc9c0\uc5ed\uba85\uacfc \uc9c0\uc5ed\ubcc4 Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY region;", "reject": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac00\uc7a5 \ub9ce\uc740 \ud559\uc810\uc744 \uc774\uc218\ud55c \ubaa8\ub4c8\uc758 \ud559\uc0dd\ubc88\ud638 \ubc0f \ucd5c\uc885 \uc131\uc801\uc744 \uc870\ud68c", "accept": "SELECT sr.id_student, si.final_result FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student JOIN ( SELECT code_module, code_presentation, MAX(studied_credits) AS max_credits FROM studentinfo GROUP BY code_module, code_presentation ) AS max_credits_per_module ON sr.code_module = max_credits_per_module.code_module AND sr.code_presentation = max_credits_per_module.code_presentation WHERE si.studied_credits = max_credits_per_module.max_credits;", "reject": "SELECT sr.id_student, si.final_result FROM studentinfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.studied_credits = ( SELECT MAX(si.studied_credits) FROM studentinfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student );", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ub4f1\ub85d\ud55c \ud559\uc0dd\ub4e4 \uc911 VLE \uc790\ub8cc\uc640 \uc0c1\ud638 \uc791\uc6a9\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 80\ubcf4\ub2e4 \ub0ae\uc740 \uacbd\uc6b0 \uc5f0\ub839\ub300\uc640 \ud574\ub2f9 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON s.id_student = v.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_unregistration IS NULL AND v.id_site IS NOT NULL GROUP BY s.age_band HAVING AVG(studied_credits) < 80;", "reject": "SELECT studentinfo.age_band, AVG(studentinfo.studied_credits) AS avg_credits FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.age_band HAVING AVG(studentinfo.studied_credits) < 80;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc640 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \uae38\uc774 \uc0ac\uc774\uc758 \uad00\uacc4\ub97c \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158, \ud3c9\uade0 \uc0c1\ud638\uc791\uc6a9 \ud69f\uc218, \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, courses.module_presentation_length FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student INNER JOIN courses ON studentregistration.code_module = courses.code_module AND studentregistration.code_presentation = courses.code_presentation GROUP BY studentregistration.code_module, studentregistration.code_presentation, courses.module_presentation_length;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ud559\uc0dd\ub4e4\uc774 \ud604\uc7ac \uacf5\ubd80\ud558\uace0 \uc788\ub294 \ubaa8\ub4e0 \ubaa8\ub4c8\uc758 \ud3c9\uade0\ud559\uc810 \uc218", "accept": "SELECT AVG(studied_credits) AS avg_credits FROM studentInfo;", "reject": "SELECT AVG(studied_credits) AS avg_credits FROM studentInfo;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucf54\ub4dc \ubaa8\ub4c8\uacfc \ubaa8\ub4c8 \ubcc4 \ud3c9\uade0 \ud3c9\uac00 \uac00\uc911\uce58\uc640 \ud3c9\uade0 \ud074\ub9ad \uc218 \uc870\ud68c", "accept": "SELECT a.code_module, AVG(a.weight) AS avg_weight, AVG(sv.sum_click) AS avg_clicks FROM assessments a JOIN studentVle sv ON a.code_module = sv.code_module GROUP BY a.code_module;", "reject": "SELECT code_module, AVG(weight) AS avg_weight, AVG(sum_click) AS avg_clicks FROM assessments JOIN studentvle ON assessments.code_module = studentvle.code_module AND assessments.code_presentation = studentvle.code_presentation GROUP BY code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 \ucd5c\uc885 \uacb0\uacfc\uc640 \ud574\ub2f9 \uacb0\uacfc\ub97c \ub3c4\ucd9c\ud558\ub294 \ubaa8\ub4e0 \ud3c9\uac00 \uc720\ud615\uc744 \uc870\ud68c", "accept": "SELECT si.id_student, si.final_result, GROUP_CONCAT(DISTINCT a.assessment_type) AS assessment_types FROM studentInfo si LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student LEFT JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY si.id_student, si.final_result;", "reject": "SELECT studentinfo.final_result, GROUP_CONCAT(assessments.assessment_type) AS assessment_types FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student INNER JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment GROUP BY studentinfo.final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\"AAA\" \ubaa8\ub4c8\uc5d0\uc11c \uac01 \ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uac00 \uc720\ud615\ubcc4\ub85c \uc0c1\uc704 20%\uc640 \ud558\uc704 20% \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810\uacfc \ub450 \uadf8\ub8f9 \uac04\uc758 \ud3c9\uade0 \ud559\uc810 \ucc28\uc774\ub97c \uc870\ud68c", "accept": "WITH region_credits AS (SELECT sa.id_student, a.assessment_type, si.studied_credits, si.imd_band, NTILE(5) OVER (PARTITION BY a.assessment_type, si.imd_band ORDER BY si.studied_credits DESC) AS quintile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA') SELECT assessment_type, AVG(CASE WHEN quintile = 5 THEN studied_credits END) AS top_20_avg_credits, AVG(CASE WHEN quintile = 1 THEN studied_credits END) AS bottom_20_avg_credits, AVG(CASE WHEN quintile = 5 THEN studied_credits END) - AVG(CASE WHEN quintile = 1 THEN studied_credits END) AS credit_diff FROM region_credits GROUP BY assessment_type;", "reject": "SELECT a.assessment_type, AVG(sa.score) AS avg_score, AVG(si.studied_credits) AS avg_credits FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4\uc758 \ucd5c\uace0 \ud559\ub825 \uc870\ud68c", "accept": "SELECT DISTINCT highest_education FROM studentInfo WHERE disability = 'Y';", "reject": "SELECT DISTINCT highest_education FROM studentInfo WHERE disability = 'Y';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc131\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 \uc804\uccb4 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810\ubcf4\ub2e4 \ub192\uc740 \uacbd\uc6b0 \uc131\ubcc4\uacfc \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT s.gender, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender HAVING AVG(studied_credits) > (SELECT AVG(studied_credits) FROM studentInfo);", "reject": "SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE gender IS NOT NULL GROUP BY gender HAVING AVG(studied_credits) > ( SELECT AVG(studied_credits) FROM studentInfo );", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4e0 \uacfc\ubaa9\uc758 \ud3c9\uade0 \ucd5c\uc885 \uc810\uc218\ub97c \uacc4\uc0b0", "accept": "SELECT code_module, code_presentation, AVG(score) AS average_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;", "reject": "SELECT AVG(sa.score) AS avg_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\uacfc \uc5c6\ub294 \ud559\uc0dd\uc73c\ub85c \ub098\ub204\uc5b4 \uac00\uc7a5 \ub9ce\uc774 \ub4e3\ub294 \uc218\uc5c5, \ud3c9\uade0 \uc810\uc218\uc640 \ud3c9\uade0 \uc774\uc218 \ud559\uc810", "accept": "SELECT si.disability, courses.code_module, COUNT(*) AS course_count, AVG(sa.score) AS average_score, AVG(si.studied_credits) AS average_credits FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentvle sv ON si.id_student = sv.id_student JOIN vle ON sv.id_site = vle.id_site JOIN courses ON si.code_module = courses.code_module GROUP BY si.disability, courses.code_module ORDER BY course_count DESC;", "reject": "SELECT vle.code_module, vle.code_presentation, COUNT(*) AS student_count, AVG(sa.score) AS average_score, AVG(studied_credits) AS average_credits FROM studentinfo si INNER JOIN studentassessment sa ON si.id_student = sa.id_student INNER JOIN studentvle sv ON si.id_student = sv.id_student INNER JOIN vle ON sv.id_site = vle.id_site INNER JOIN courses ON si.code_module = courses.code_module AND si.code_presentation = courses.code_presentation INNER JOIN assessments ON courses.code_module = assessments.code_module AND courses.code_presentation = assessments.code_presentation WHERE si.disability = 'Y' GROUP BY vle.code_module, vle.code_presentation;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd\uc758 \uc131\ubcc4\uacfc \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT s.gender, AVG(sa.score) AS avg_score FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student GROUP BY s.gender;", "reject": "SELECT studentinfo.gender, AVG(studentassessment.score) AS avg_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student GROUP BY studentinfo.gender;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud3c9\uac00 \uc720\ud615\uc5d0\uc11c \uac00\uc7a5 \ub192\uc740 \ud3c9\uade0 \uc810\uc218\ub97c \uac00\uc9c4 \ubaa8\ub4c8\uc744 \uc2dd\ubcc4", "accept": "SELECT code_module FROM ( SELECT code_module, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, a.assessment_type ) AS avg_scores GROUP BY code_module ORDER BY MAX(avg_score) DESC LIMIT 1;", "reject": "SELECT code_module FROM assessments GROUP BY code_module ORDER BY AVG(weight) DESC LIMIT 1;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \ucd5c\uace0 \ud559\ub825\uc774 'Lower Than A Level'\uc774\uace0 \ubaa8\ub4e0 \ud3c9\uac00 \uacb0\uacfc\uac00 'Pass'\uc778 \ud559\uc0dd\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS lower_than_a_level_pass_count FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.highest_education = 'Lower Than A Level' AND sa.score >= 40 GROUP BY sr.code_module;", "reject": "SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS num_students FROM studentinfo si JOIN studentregistration sr ON si.id_student = sr.id_student JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.highest_education = 'Lower Than A Level' AND sa.score >= 40 GROUP BY sr.code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "Wales \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Wales' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Wales' ) );", "reject": "SELECT studentinfo.id_student, studentinfo.gender, AVG(studentassessment.score) AS avg_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Wales' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student, studentinfo.gender HAVING AVG(studentassessment.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Wales' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd\uc758 VLE \uc790\ub8cc \ud074\ub9ad \uc218\uc640 \ud65c\ub3d9 \uc720\ud615\uc744 \uc870\ud68c", "accept": "SELECT v.id_student, m.activity_type, v.sum_click FROM vle m JOIN studentvle v ON v.id_site = m.id_site WHERE v.code_module = m.code_module AND v.code_presentation = m.code_presentation;", "reject": "SELECT s.id_student, v.activity_type, SUM(s.sum_click) AS total_clicks FROM studentvle s JOIN vle v ON s.id_site = v.id_site GROUP BY s.id_student, v.activity_type;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc758 \ucd5c\uc2e0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uc870\ud68c", "accept": "SELECT code_module, code_presentation FROM courses WHERE (code_module, code_presentation) IN ( SELECT code_module, MAX(code_presentation) AS latest_presentation FROM courses GROUP BY code_module );", "reject": "SELECT code_module, code_presentation FROM courses ORDER BY code_module, code_presentation DESC LIMIT 1;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \uc9c0\uc5ed\uc758 \uc9c0\uc5ed\uba85, \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ub098\uc774\uc640 \ucd5c\ub300 \ud559\ub825 \uc218\uc900\uc744 \uc870\ud68c", "accept": "SELECT s.region, AVG(s.age_band) AS avg_age, MAX(s.highest_education) AS max_education FROM studentInfo s GROUP BY s.region;", "reject": "SELECT region, AVG(age_band) AS avg_age, MAX(highest_education) AS highest_education FROM studentInfo GROUP BY region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc \ubcc4 \uc7a5\uc560\ub97c \uac00\uc9c4 \ud559\uc0dd\uc758 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ud3c9\uade0 \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT r.code_module, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;", "reject": "SELECT code_module, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' GROUP BY code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4c8 \uc815\ubcf4, \ud3c9\uac00 \uc815\ubcf4, \uadf8\ub9ac\uace0 \ud559\uc0dd \uc815\ubcf4\ub97c \uacb0\ud569\ud558\uc5ec \ud559\uc0dd\ubcc4 \ud3c9\uac00 \uc810\uc218 \uc870\ud68c", "accept": "SELECT studentinfo.id_student, studentinfo.gender, studentinfo.age_band, courses.code_module, courses.code_presentation, courses.module_presentation_length, assessments.assessment_type, assessments.weight, assessments.date, assessments.id_assessment FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation JOIN courses ON assessments.code_module = courses.code_module AND assessments.code_presentation = courses.code_presentation ORDER BY studentinfo.id_student, assessments.date;", "reject": "SELECT s.code_module, a.code_presentation, a.id_assessment, a.assessment_type, si.id_student, si.studied_credits, a.weight, a.date, si.num_of_prev_attempts FROM studentInfo si JOIN assessments a ON si.code_module = a.code_module AND si.code_presentation = a.code_presentation JOIN courses s ON si.code_module = s.code_module AND si.code_presentation = s.code_presentation ORDER BY s.code_module, a.code_presentation, a.id_assessment;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \uc7a5\uc560\ub97c \uc2e0\uace0\ud55c \uc5ec\ud559\uc0dd\uc758 \ube44\uc728\uc744 \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ube44\uc728 \uacc4\uc0b0\uac12\uc744 \uc870\ud68c", "accept": "SELECT si.code_module, si.code_presentation, SUM(CASE WHEN si.gender = 'F' AND si.disability = 'Yes' THEN 1 ELSE 0 END) / COUNT(*) AS female_disabled_ratio FROM studentInfo si GROUP BY si.code_module, si.code_presentation;", "reject": "SELECT code_module, code_presentation, COUNT(DISTINCT id_student) AS num_disabled_female_students, COUNT(DISTINCT id_student) / (SELECT COUNT(*) FROM studentInfo WHERE code_module = code_module AND code_presentation = code_presentation AND gender = 'F') AS disabled_female_student_percentage FROM studentInfo WHERE disability = 'Y' AND gender = 'F' GROUP BY code_module, code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc740 \uc2dc\ub3c4 \ud69f\uc218\ub97c \uac00\uc9c4 \ud559\uc0dd\uc758 \uc131\ubcc4\uc744 \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uc131\ubcc4\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(num_of_prev_attempts) AS max_attempts FROM studentInfo GROUP BY id_student ) AS max_attempts ON si.id_student = max_attempts.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;", "reject": "SELECT sr.code_module, sr.code_presentation, si.gender FROM studentinfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts = ( SELECT MAX(num_of_prev_attempts) FROM studentinfo WHERE code_module = sr.code_module AND code_presentation = sr.code_presentation );", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \ud3c9\uac00 \uc720\ud615\ubcc4\ub85c \ud3c9\uade0 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type;", "reject": "SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\uc640 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\ubcc4 \uac00\uc7a5 \ucd5c\uadfc \ub4f1\ub85d\ub41c \ub0a0\uc9dc\ub97c \ubc18\ud658\ud558\uc5ec \ucd5c\uadfc \ub4f1\ub85d\ub41c \ub0a0\uc9dc\ub97c \uae30\uc900\uc73c\ub85c \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c", "accept": "SELECT sr.code_module, sr.code_presentation, sr.date_registration AS last_registration FROM studentRegistration sr JOIN ( SELECT code_module, code_presentation, MAX(date_registration) AS max_date FROM studentRegistration GROUP BY code_module, code_presentation ) AS max_dates ON sr.code_module = max_dates.code_module AND sr.code_presentation = max_dates.code_presentation AND sr.date_registration = max_dates.max_date ORDER BY last_registration DESC;", "reject": "SELECT code_module, code_presentation, MAX(date_registration) AS max_date FROM studentRegistration GROUP BY code_module, code_presentation ORDER BY max_date DESC;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ucd1d \ud074\ub9ad \uc218\uac00 \uac00\uc7a5 \ub9ce\uc740 \ud559\uc0dd\uc758 \uc131\uc801\uacfc \ud559\uc0dd id\ub97c \uc54c\uace0\uc2f6\uc5b4", "accept": "SELECT studentvle.id_student, studentassessment.score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click = (SELECT MAX(sum_click) FROM studentvle);", "reject": "SELECT sa.score, sa.id_student FROM studentAssessment sa JOIN studentvle sv ON sa.id_student = sv.id_student GROUP BY sa.id_student ORDER BY COUNT(sv.id_site) DESC LIMIT 1;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc, \uac01 \ubaa8\ub4c8\ubcc4 \ucd5c\uadfc \ud504\ub808\uc820\ud14c\uc774\uc158\uacfc \ud574\ub2f9 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uade0 \ud3c9\uac00 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT c.code_module, c.code_presentation, AVG(a.weight) AS avg_weight FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation JOIN (SELECT code_module, MAX(code_presentation) AS max_code_presentation FROM courses GROUP BY code_module) AS latest ON c.code_module = latest.code_module AND c.code_presentation = latest.max_code_presentation GROUP BY c.code_module, c.code_presentation;", "reject": "SELECT c.code_module, c.code_presentation, AVG(a.weight) AS avg_weight FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation GROUP BY c.code_module, c.code_presentation ORDER BY c.code_module, c.code_presentation DESC;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\uc640 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ucd1d \ud074\ub9ad \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ud559\uc0ddid, \ubaa8\ub4c8 \ucf54\ub4dc, \ud3c9\uade0 \ud3c9\uac00\uc810\uc218,\ucd1d \ud074\ub9ad\uc218\ub97c \uc870\ud68c\"", "accept": "SELECT si.id_student, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks FROM studentInfo si LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student LEFT JOIN studentvle sv ON si.id_student = sv.id_student GROUP BY si.id_student;", "reject": "SELECT s.id_student, s.code_module, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student JOIN studentvle sv ON s.id_student = sv.id_student GROUP BY s.id_student, s.code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub300\ud574 \ub4f1\ub85d\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \ud559\uc810 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8\uacfc \ud3c9\uade0 \ud559\uc810 \uc218 \uc870\ud68c", "accept": "SELECT si.code_module, AVG(si.studied_credits) AS average_credits FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student AND si.code_module = sr.code_module GROUP BY si.code_module;", "reject": "SELECT sr.code_module, AVG(si.studied_credits) AS avg_credits FROM studentinfo si JOIN studentregistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc5ec\ud559\uc0dd\uc758 \ud3c9\uade0 \uc774\uc218\ud559\uc810\uc774 200\ud559\uc810 \ubbf8\ub9cc\uc778 \ubaa8\ub4c8\ubc1c\ud45c\ub97c \uac80\uc0c9", "accept": "SELECT code_module, code_presentation, AVG(studied_credits) AS avg_studied_credits FROM studentinfo WHERE gender = 'F' GROUP BY code_module, code_presentation HAVING AVG(studied_credits) < 200;", "reject": "SELECT code_module, code_presentation FROM studentInfo WHERE gender = 'F' AND studied_credits < 200;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\ub97c \uac00\uc9c4 \ud559\uc0dd\ub4e4\uc758 VLE \uc790\ub8cc \ud074\ub9ad \uc218\uc758 \ud3c9\uade0\uacfc \ub4f1\ub85d \ubaa8\ub4c8\uc744 \uc870\ud68c", "accept": "SELECT r.code_module, AVG(v.sum_click) as avg_clicks FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON r.id_student = v.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;", "reject": "SELECT sr.code_module, AVG(sv.sum_click) AS avg_clicks FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student INNER JOIN studentvle sv ON si.id_student = sv.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ub300\ud559 \ud559\ub825\uc744 \uac00\uc9c4 \ube44\uc7a5\uc560 \ud559\uc0dd\ub4e4 \uc911 \ud559\uc810 \ud3c9\uade0\uc774 90\ubcf4\ub2e4 \ub0ae\uc740 \uc9c0\uc5ed\uba85\uacfc \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) < 90;", "reject": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) < 90;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\ubcc4\ub85c \ud3c9\uade0 \ucd5c\uc885 \uc810\uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud3c9\uade0 \ucd5c\uc885 \uc810\uc218\ub97c \uc870\ud68c( \uc138 \uac1c\uc758 \ud14c\uc774\ube14(studentAssessment, assessments, studentRegistration)\uc744 \uacb0\ud569)", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentRegistration sr ON sa.id_student = sr.id_student AND a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentRegistration sr ON sa.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd \uc5f0\ub839\ub300\uc640 \ud559\uc0dd \uc5f0\ub839\ub300\ubcc4 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uade0 \uae38\uc774", "accept": "SELECT s.age_band, AVG(c.module_presentation_length) AS avg_length FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY s.age_band;", "reject": "SELECT s.age_band, AVG(c.module_presentation_length) AS avg_presentation_length FROM studentinfo s JOIN studentregistration r ON s.id_student = r.id_student JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY s.age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ubaa8\ub4c8 \ubcc4 \ud3c9\uac00 \uc720\ud615\uacfc \ud574\ub2f9 \uc720\ud615\uc758 \ud3c9\uac00 \uc218 \uc870\ud68c", "accept": "SELECT a.code_module, a.assessment_type, COUNT(*) AS num_assessments FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY a.code_module, a.assessment_type;", "reject": "SELECT c.code_module, a.assessment_type, COUNT(*) AS num_assessments FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY c.code_module, a.assessment_type;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "BBB\uc218\uc5c5\uc744 \ub4e3\ub294 \ud559\uc0dd \uc911 \uc131\uc801\uc774 \uac00\uc7a5 \uc548\uc88b\uc740 \ud559\uc0dd\uc744 \ucc3e\uc544\uc918", "accept": "SELECT id_student, MIN(score) AS min_score FROM studentassessment WHERE id_assessment IN ( SELECT id_assessment FROM assessments WHERE code_module = 'BBB' ) GROUP BY id_student ORDER BY min_score LIMIT 1;", "reject": "SELECT sa.id_student, sa.score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE a.code_module = 'BBB' ORDER BY sa.score ASC LIMIT 1;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\ub300 \ubc0f \ucd5c\uc18c \ud3c9\uac00 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT MAX(CAST(weight AS DECIMAL(10,2))) AS max_weight, MIN(CAST(weight AS DECIMAL(10,2))) AS min_weight FROM assessments;", "reject": "SELECT MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM assessments;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc, \uac01 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \uac00\uc911\uce58\uc640 \ucd5c\uc18c \ud3c9\uac00 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT a.code_module, AVG(a.weight) AS avg_weight, MIN(a.weight) AS min_weight FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY a.code_module;", "reject": "SELECT code_module, AVG(weight) AS avg_weight, MIN(weight) AS min_weight FROM assessments GROUP BY code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \ud074\ub9ad \uc218 \ubcf4\ub2e4 \ub0ae\uc740 \ud074\ub9ad \uc218\uc758 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc131\uc801\uc744 \uad6c\ud574\uc918", "accept": "SELECT AVG(studentassessment.score) AS average_score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click < ( SELECT AVG(studentvle.sum_click) FROM studentvle );", "reject": "SELECT AVG(sa.score) AS avg_score FROM studentAssessment sa JOIN studentvle sv ON sa.id_student = sv.id_student WHERE sv.sum_click < (SELECT AVG(sum_click) FROM studentvle);", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uc5ec\ubd80\uac00 'Y'\uc778 \ud559\uc0dd\ub4e4\uc758 \ucd5c\uc885 \uacb0\uacfc\uc640 \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;", "reject": "SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc \uc774\uc6a9\uacfc \uad00\ub828\ub41c \ud3c9\uac00 \uc810\uc218\ub97c \ubc1b\uc740 \ud559\uc0dd \uc911 \uc5ec\uc131 \ud559\uc0dd\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS female_students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS female_students_count FROM studentRegistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentVle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \ucd5c\uadfc VLE \uc790\ub8cc \uc774\uc6a9\uc77c\uacfc \ucd5c\uadfc \uc81c\ucd9c\uc77c\uc744 \ube44\uad50\ud558\uc5ec \ucd5c\uc2e0 \ud65c\ub3d9\uc744 \uc2dd\ubcc4", "accept": "SELECT sr.code_module, sr.code_presentation, CASE WHEN MAX(sv.date) > MAX(sa.date_submitted) THEN 'VLE \uc790\ub8cc \uc774\uc6a9' WHEN MAX(sv.date) < MAX(sa.date_submitted) THEN '\ud3c9\uac00 \uc81c\ucd9c' ELSE '\ub3d9\uc2dc\uc5d0 VLE \uc790\ub8cc \uc774\uc6a9 \ubc0f \ud3c9\uac00 \uc81c\ucd9c' END AS recent_activity FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT r.code_module, r.code_presentation, MAX(v.date) AS max_vle_date, MAX(a.date_submitted) AS max_submission_date FROM studentregistration r INNER JOIN studentvle v ON r.id_student = v.id_student INNER JOIN studentAssessment a ON r.id_student = a.id_student GROUP BY r.code_module, r.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ud559\uc0dd\uc758 \ub4f1\ub85d \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud55c \ud3c9\uade0 \ud559\uc810\uacfc \uc7a5\uc560 \uc5ec\ubd80\ub97c \uc870\ud68c", "accept": "SELECT r.code_module, r.code_presentation, s.disability, AVG(s.studied_credits) AS avg_credits FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY r.code_module, r.code_presentation, s.disability;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(si.studied_credits) AS avg_credits, si.disability FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.disability;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub0a8\ud559\uc0dd\uc758 \ube44\uc728\uc774 40%\ub97c \ub118\ub294 \ubaa8\ub4e0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) * 1.0 / (SELECT COUNT(*) FROM studentregistration sr2 WHERE sr2.code_module = studentregistration.code_module AND sr2.code_presentation = studentregistration.code_presentation)) > 0.4;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentregistration.id_student) * 1.0 / COUNT(studentinfo.id_student)) > 0.4;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd \uc131\ubcc4\uacfc \uc131\ubcc4\uc5d0 \ub530\ub978 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc218\uac15 \uae30\uac04 \uc870\ud68c", "accept": "SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_course_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;", "reject": "SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_duration FROM studentInfo s INNER JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4 \uc911 Fail \uc131\uc801\uc73c\ub85c \uc218\ub8cc\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Fail' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Fail' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub4f1\ub85d\ub41c \ud559\uc0dd\uc758 \ucd1d \uc218\ub97c \uc870\ud68c", "accept": "SELECT COUNT(id_student) as total_students FROM studentInfo;", "reject": "SELECT COUNT(*) AS total_students FROM studentInfo;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc5c6\ub294 \ud559\uc0dd\ub4e4 \uc911 Fail \uc131\uc801\uc73c\ub85c \uc218\ub8cc\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Fail' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Fail' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc790\ud1f4\ud55c(\ud0c8\ud1f4\ube44\uc728) \ud559\uc0dd \uc218\uac00 \uc804\uccb4 \ub4f1\ub85d \ud559\uc0dd \uc218\uc758 20%\ub97c \ub118\ub294 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud0c8\ud1f4 \ube44\uc728 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, (COUNT(sr.date_unregistration) / CAST(COUNT(*) AS FLOAT)) * 100 AS withdrawal_percentage FROM studentregistration sr GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(sr.date_unregistration) / CAST(COUNT(*) AS FLOAT)) * 100 > 20;", "reject": "SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sr.id_student) / (SELECT COUNT(*) FROM studentregistration sr2 WHERE sr.code_module = sr2.code_module AND sr.code_presentation = sr2.code_presentation) * 100 AS withdrawal_rate FROM studentregistration sr GROUP BY sr.code_module, sr.code_presentation HAVING COUNT(DISTINCT sr.id_student) / (SELECT COUNT(*) FROM studentregistration sr2 WHERE sr.code_module = sr2.code_module AND sr.code_presentation = sr2.code_presentation) * 100 > 20;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ub300\ud559 \ud559\ub825\uc744 \uac00\uc9c4 \ube44\uc7a5\uc560 \ud559\uc0dd\ub4e4 \uc911 \ud559\uc810 \ud3c9\uade0\uc774 90\ubcf4\ub2e4 \ub192\uc740 \uc9c0\uc5ed\uba85\uacfc \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) > 90;", "reject": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) > 90;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd('Y'\ub85c \ud45c\uc2dc\ub41c \uacbd\uc6b0) \uc911\uc5d0\uc11c 'studentvle' \ud14c\uc774\ube14\uc5d0 \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \ud559\uc0dd\uc758 ID\ub97c \uac80\uc0c9", "accept": "SELECT si.id_student FROM studentinfo si WHERE si.disability = 'Y' AND si.id_student NOT IN (SELECT id_student FROM studentvle);", "reject": "SELECT id_student FROM studentInfo WHERE disability = 'Y' AND id_student NOT IN ( SELECT DISTINCT id_student FROM studentvle );", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\ub97c \uac00\uc9c4 \ud559\uc0dd\ub4e4\uc758 \uacfc\ubaa9\ubcc4 'Pass' \ube44\uc728\uc744 \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ube44\uc728\uc744 \uc870\ud68c", "accept": "SELECT si.code_module, si.code_presentation, COUNT(CASE WHEN si.final_result = 'Pass' THEN 1 END) / COUNT(*) AS pass_rate FROM studentinfo si WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation;", "reject": "SELECT code_module, code_presentation, COUNT(CASE WHEN final_result = 'Pass' THEN 1 END) / COUNT(*) AS pass_rate FROM studentInfo WHERE disability = 'Y' GROUP BY code_module, code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \uc774\uc0c1\uc73c\ub85c \ud3c9\uac00\uac00 \ub9ce\uc774 \uc774\ub8e8\uc5b4\uc9c4 \ubaa8\ub4c8", "accept": "SELECT code_module FROM assessments GROUP BY code_module HAVING COUNT(*) > ( SELECT AVG(module_count) FROM ( SELECT COUNT(*) AS module_count FROM assessments GROUP BY code_module ) AS module_counts );", "reject": "SELECT a.code_module, COUNT(*) AS num_assessments FROM assessments a JOIN ( SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module HAVING AVG(weight) > 50 ) b ON a.code_module = b.code_module GROUP BY a.code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uac00 150\ubcf4\ub2e4 \uc791\uc740 \uac01 \ubaa8\ub4c8 \ucf54\ub4dc\uc758 \uc218 \uc870\ud68c", "accept": "SELECT COUNT(DISTINCT code_module) AS num_modules FROM courses WHERE module_presentation_length < 150;", "reject": "SELECT code_module, COUNT(*) AS num_modules FROM courses GROUP BY code_module HAVING COUNT(*) < 150;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8\ubcc4 \uc9c0\uc5ed\ubcc4 \uc790\ub8cc \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc758 \ud3c9\uade0\uc774 20\ud68c \ubbf8\ub9cc\uc778 \uacbd\uc6b0 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \uc9c0\uc5ed\uba85, \uc790\ub8cc \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc758 \ud3c9\uade0 \uc870\ud68c", "accept": "SELECT sr.code_module, si.region, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.region HAVING AVG(v.sum_click) < 20;", "reject": "SELECT s.code_module, s.region, AVG(v.sum_click) AS avg_clicks FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.code_module, s.region HAVING AVG(v.sum_click) < 20;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "BBB \uc218\uc5c5\uc744 \ub4e3\ub294 \ud559\uc0dd\ub4e4 \uc911 \uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4\uacfc \ud574\ub2f9 \ud559\uc0dd\ub4e4\uc774 \uacfc\uc81c\ub97c \uc5b8\uc81c \uc81c\ucd9c\ud588\ub294\uc9c0\ub97c \ud30c\uc545", "accept": "SELECT si.disability, sa.date_submitted, c.code_module FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student LEFT JOIN assessments a ON sa.id_assessment = a.id_assessment LEFT JOIN courses c ON si.code_module = c.code_module WHERE si.code_module = 'BBB';", "reject": "SELECT s.disability, a.date_submitted FROM studentInfo s JOIN studentAssessment a ON s.id_student = a.id_student JOIN assessments a ON a.id_student = a.id_assessment JOIN courses c ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation WHERE c.code_module = 'BBB' AND s.disability = 'Y';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd \uc911 \ucd5c\uadfc\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc810\uc218\uc640 \ucd5c\uadfc \uc81c\ucd9c\uc77c \uc0ac\uc774\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud3c9\uade0 \uc810\uc218, \ucd5c\uadfc \uc81c\ucd9c\uc77c\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score, MAX(studentAssessment.date_submitted) AS recent_submission_date FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN ( SELECT id_student, MAX(date) AS max_date FROM studentvle GROUP BY id_student ) top_students ON studentregistration.id_student = top_students.id_student INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student AND studentvle.date = top_students.max_date GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score, MAX(sa.date_submitted) AS latest_submission FROM studentAssessment sa INNER JOIN studentRegistration sr ON sa.id_student = sr.id_student INNER JOIN studentvle sv ON sa.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed\uba85\uacfc \uc9c0\uc5ed\ubcc4\ub85c \uac00\uc7a5 \ub9ce\uc774 \ub4f1\ub85d\ub41c \ubaa8\ub4c8 \ucf54\ub4dc, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT si.region, sr.code_module, COUNT(*) AS registration_count FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY si.region, sr.code_module ORDER BY registration_count DESC LIMIT 1;", "reject": "SELECT studentregistration.code_module, COUNT(studentregistration.id_student) AS num_students FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentinfo.region ORDER BY num_students DESC;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd \ud3c9\uac00 \ub370\uc774\ud130\uc640 \ud3c9\uac00 \ub370\uc774\ud130\ub97c \uacb0\ud569\ud558\uc5ec \ubaa8\ub4e0 \uacfc\ubaa9 \ubaa8\ub4c8 \ubc0f \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud55c \ud3c9\uade0 \uc810\uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uade0 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT code_module, code_presentation, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;", "reject": "SELECT a.code_module, a.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY a.code_module, a.code_presentation;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \ubc29\ubc95\uc774 TMA\uc778 \ud559\uc0dd\ub4e4\uc758 \uc815\ubcf4", "accept": "SELECT studentAssessment.*, studentInfo.gender, studentInfo.region, studentInfo.highest_education, studentInfo.imd_band, studentInfo.age_band, studentInfo.num_of_prev_attempts, studentInfo.studied_credits, studentInfo.disability, studentInfo.final_result FROM studentAssessment JOIN assessments ON studentAssessment.id_assessment = assessments.id_assessment JOIN studentInfo ON studentAssessment.id_student = studentInfo.id_student WHERE assessments.assessment_type = 'TMA';", "reject": "SELECT DISTINCT studentinfo.* FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE assessments.assessment_type = 'TMA';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd \uc131\ubcc4\uacfc \uc131\ubcc4\uc5d0 \ub530\ub978 \ud559\uc0dd\uc758 \ud3c9\uade0 \ub4f1\ub85d\uc77c", "accept": "SELECT s.gender, AVG(r.date_registration) AS avg_reg_date FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;", "reject": "SELECT studentinfo.gender, AVG(studentregistration.date_registration) AS avg_registration_date FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student GROUP BY studentinfo.gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ub0a8\uc131\uacfc \uc5ec\uc131 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ub098\uc774\ub97c \uc870\ud68c", "accept": "SELECT s.gender, AVG(s.age_band) AS avg_age FROM studentInfo s GROUP BY s.gender;", "reject": "SELECT AVG(age_band) AS avg_age FROM studentInfo WHERE gender = 'M' OR gender = 'F';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub2e4\uc591\ud55c \uc5f0\ub839\ub300\uc5d0 \ub530\ub978 \ucd5c\uc885 \uacb0\uacfc\uc758 \ubd84\ud3ec\ub97c \uacc4\uc0b0\ud558\uace0 \uc5f0\ub839\ub300, \ucd5c\uc885 \uacb0\uacfc, \ud559\uc0dd \uc218\ub97c \uc870\ud68c", "accept": "SELECT si.age_band, si.final_result, COUNT(*) AS num_students FROM studentinfo si GROUP BY si.age_band, si.final_result ORDER BY si.age_band, num_students DESC;", "reject": "SELECT age_band, final_result, COUNT(*) AS student_count FROM studentInfo GROUP BY age_band, final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "South Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South Region' ) );", "reject": "SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South Region' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) > (SELECT AVG(score) FROM studentassessment WHERE id_student IN (SELECT id_student FROM studentinfo WHERE region = 'South Region'));", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc AAA\uc758 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0\uc744 \uad6c\ud574\uc918", "accept": "SELECT AVG(studentinfo.studied_credits) AS average_studied_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE courses.code_module = 'AAA';", "reject": "SELECT AVG(studied_credits) AS avg_credits FROM studentInfo WHERE code_module = 'AAA';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "VLE \ud65c\ub3d9 \uc720\ud615\ubcc4\ub85c \ud3c9\uade0 \ud65c\ub3d9 \uae30\uac04 \uc870\ud68c", "accept": "SELECT activity_type, AVG(week_to - week_from) AS avg_activity_duration FROM vle GROUP BY activity_type;", "reject": "SELECT activity_type, AVG(week_to - week_from) AS avg_duration FROM vle GROUP BY activity_type;", "context": "CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ubaa8\ub4e0 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ub41c \ud559\uc0dd\ub4e4 \uc911 \uc7a5\uc560\ub97c \uac00\uc9c4 \ud559\uc0dd\uc758 \ube44\uc728\uc744 \uc870\ud68c", "accept": "SELECT code_module, SUM(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) / COUNT(*) AS disability_ratio FROM studentInfo GROUP BY code_module;", "reject": "SELECT code_module, COUNT(*) AS num_disabled_students, COUNT(*)*1.0/ (SELECT COUNT(*) FROM studentInfo WHERE code_module = code_module AND disability = 'Y') AS disabled_student_ratio FROM studentInfo GROUP BY code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubc1c\ud45c \uc2dc\uc791 \uc804 20\uc77c \uc774\uc0c1 \ub4f1\ub85d\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc218\uac15 \ud559\uc810\uc774 150\ud559\uc810 \ubbf8\ub9cc\uc778 \ubaa8\ub4c8 \ubc1c\ud45c\ub97c \ub098\uc5f4", "accept": "SELECT si.code_module, si.code_presentation FROM studentinfo si INNER JOIN studentregistration sr ON si.code_module = sr.code_module AND si.code_presentation = sr.code_presentation AND si.id_student = sr.id_student WHERE sr.date_registration > -20 GROUP BY si.code_module, si.code_presentation HAVING AVG(si.studied_credits) < 150;", "reject": "SELECT sr.code_module, sr.code_presentation FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.studied_credits < 150 AND sr.date_registration > -20 GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "South West Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South West Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South West Region' ) );", "reject": "SELECT si.id_student FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.region = 'South West Region' AND si.gender = 'M' GROUP BY si.id_student HAVING AVG(sa.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South West Region' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uc18c 2\ubc88 \uc774\uc0c1 \uac19\uc740 \ubaa8\ub4c8\uc744 \uc2dc\ub3c4\ud55c \ud559\uc0dd \ucc3e\uace0 \ud559\uc0dd\uacfc \ubaa8\ub4c8 \uc870\ud68c", "accept": "SELECT id_student, code_module FROM studentInfo WHERE num_of_prev_attempts >= 2 GROUP BY id_student, code_module;", "reject": "SELECT DISTINCT studentinfo.id_student, studentinfo.code_module FROM studentinfo GROUP BY studentinfo.id_student, studentinfo.code_module HAVING COUNT(studentinfo.code_module) >= 2;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\ub97c \uc120\uc5b8\ud55c \ud559\uc0dd\uc774 \uacf5\ubd80\ud55c \ud3c9\uade0 \ud559\uc810\uc774 180\ud559\uc810 \ubbf8\ub9cc\uc778 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uac80\uc0c9", "accept": "SELECT si.code_module, si.code_presentation FROM studentinfo si WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation HAVING AVG(si.studied_credits) < 180;", "reject": "SELECT code_module, code_presentation FROM studentInfo WHERE disability = 'Y' GROUP BY code_module, code_presentation HAVING AVG(studied_credits) < 180;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \uc810\uc218 \uc774\ud558\uc778 \ud559\uc0dd\uc758 \ucd1d \ud074\ub9ad \uc218\ub97c \uad6c\ud558\uc2dc\uc624", "accept": "SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentassessment.score < (SELECT AVG(score) FROM studentassessment);", "reject": "SELECT AVG(sum_click) AS avg_clicks FROM studentVle WHERE id_student IN ( SELECT id_student FROM studentvle GROUP BY id_student HAVING AVG(sum_click) < ( SELECT AVG(sum_click) FROM studentvle ) );", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc640 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \uae38\uc774 \ubc0f \ud3c9\uac00 \uc720\ud615 \uac04\uc758 \uad00\uacc4\ub97c \ubd84\uc11d", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length, a.assessment_type FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY sr.code_module, sr.code_presentation, a.assessment_type;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interactions, c.module_presentation_length, a.assessment_type FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY sr.code_module, sr.code_presentation, c.module_presentation_length, a.assessment_type;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "East Midlands Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'East Midlands Region' ));", "reject": "SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Midlands Region' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'East Midlands Region' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\uc640 \uac01 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\ubcc4 \ud559\uc0dd \ud3c9\uade0 \uc218\uac15 \ud559\uc810 \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \ubc18\ud658", "accept": "SELECT code_presentation, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY code_presentation ORDER BY avg_credits DESC;", "reject": "SELECT code_presentation, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY code_presentation ORDER BY avg_credits DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 \ud559\uc0dd \ucf54\ub4dc\uc640 VLE \uc790\ub8cc \ud074\ub9ad \uc218\uc758 \ucd1d \ud569 \uc870\ud68c", "accept": "SELECT id_student, SUM(sum_click) AS total_clicks FROM studentVle GROUP BY id_student;", "reject": "SELECT id_student, SUM(sum_click) AS total_clicks FROM studentvle GROUP BY id_student;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc810\uc218\uac00 60\uc810 \uc774\uc0c1\uc744 \ubc1b\uc740 \ud559\uc0dd \uc218\uc640 \ud569\uaca9\uc728 \uc870\ud68c", "accept": "SELECT COUNT(*) AS passed_count, (COUNT(*) / (SELECT COUNT(*) FROM studentAssessment)) * 100 AS pass_rate FROM studentAssessment WHERE score >= 60;", "reject": "SELECT COUNT(*) AS pass_count, COUNT(CASE WHEN score >= 60 THEN 1 END) / COUNT(*) AS pass_rate FROM studentAssessment;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ud504\ub808\uc820\ud14c\uc774\uc158\uacfc \ud3c9\uac00 \uc77c\uc790\uac00 \uc788\ub294 \uac01 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ucd5c\uc18c \ud3c9\uac00 \uc77c\uc790 \uc870\ud68c", "accept": "SELECT code_presentation, MIN(date) AS min_assessment_date FROM assessments WHERE date IS NOT NULL GROUP BY code_presentation;", "reject": "SELECT code_presentation, MIN(date) AS min_assessment_date FROM assessments GROUP BY code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "Ireland \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Ireland' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Ireland' ) );", "reject": "SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Ireland' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) > ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Ireland' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": " BBB \uc218\uc5c5\uc744 \ub4e3\ub294 \ud559\uc0dd \uc911 35-55 \uc5f0\ub839\ub300\uc774\uba74\uc11c \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc778 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc810\uc218", "accept": "SELECT AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.age_band = '35-55' AND studentinfo.code_module = 'BBB';", "reject": "SELECT AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.code_module = 'BBB' AND studentinfo.age_band = '35-55';", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\"BBB\" \ubaa8\ub4c8\uc5d0\uc11c \uac01 \ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uac00 \uc720\ud615\ubcc4\ub85c \uc0c1\uc704 40% \uc5f0\ub839\ub300\uc640 \ud558\uc704 40% \uc5f0\ub839\ub300 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc774\uc804 \uc2dc\ub3c4 \ud69f\uc218 \ubc0f \ucc28\uc774\ub97c \uc870\ud68c", "accept": "WITH age_attempts AS ( SELECT sa.id_student, a.assessment_type, si.num_of_prev_attempts, si.age_band, CASE WHEN si.age_band LIKE '0-35' THEN 1 WHEN si.age_band LIKE '35-55' THEN 2 WHEN si.age_band LIKE '55<=' THEN 3 END AS age_band_num, NTILE(5) OVER (PARTITION BY a.assessment_type ORDER BY si.age_band) AS quintile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'BBB') SELECT assessment_type, AVG(CASE WHEN quintile >= 3 THEN num_of_prev_attempts END) AS top_40_avg_attempts, AVG(CASE WHEN quintile <= 2 THEN num_of_prev_attempts END) AS bottom_40_avg_attempts, AVG(CASE WHEN quintile >= 3 THEN num_of_prev_attempts END) - AVG(CASE WHEN quintile <= 2 THEN num_of_prev_attempts END) AS attempt_diff FROM age_attempts GROUP BY assessment_type;", "reject": "SELECT assessments.assessment_type, AVG(CASE WHEN studentinfo.age_band = '25-34' THEN studentinfo.num_of_prev_attempts END) AS avg_attempts_upper_band, AVG(CASE WHEN studentinfo.age_band = '55+' THEN studentinfo.num_of_prev_attempts END) AS avg_attempts_lower_band, AVG(CASE WHEN studentinfo.age_band = '25-34' THEN studentinfo.num_of_prev_attempts END) - AVG(CASE WHEN studentinfo.age_band = '55+' THEN studentinfo.num_of_prev_attempts END) AS age_band_diff FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.code_module = 'BBB' GROUP BY assessments.assessment_type;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \uc9c0\uc5ed\uba85, \ub4f1\ub85d \ubaa8\ub4c8\ucf54\ub4dc, \ubaa8\ub4c8 \ubcc4 \ud3c9\uade0 \ub4f1\ub85d \uae30\uac04\uc744 \uc870\ud68c", "accept": "SELECT s.region, r.code_module, AVG(r.date_registration) AS avg_registration FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.region, r.code_module;", "reject": "SELECT studentregistration.code_module, AVG(studentregistration.date_registration) AS avg_registration_duration FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ud65c\ub3d9 \uc720\ud615\uacfc \ud65c\ub3d9 \uc720\ud615 \ubcc4\ub85c \uac00\uc7a5 \uc9e7\uc740 \uae30\uac04\uc744 \uac00\uc9c4 \ud65c\ub3d9 \uc870\ud68c", "accept": "SELECT activity_type, MIN(week_to - week_from) AS min_duration FROM vle GROUP BY activity_type;", "reject": "SELECT activity_type, MIN(week_to - week_from) AS min_duration FROM vle GROUP BY activity_type;", "context": "CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ucd5c\ub300 \ud3c9\uac00 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT code_presentation, MAX(weight) AS max_weight FROM assessments GROUP BY code_presentation;", "reject": "SELECT code_presentation, MAX(weight) AS max_weight FROM assessments GROUP BY code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \uac01 \ubaa8\ub4c8\uc758 \ucd5c\uc18c \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774 \uc870\ud68c", "accept": "SELECT code_module, MIN(module_presentation_length) AS min_presentation_length FROM courses GROUP BY code_module;", "reject": "SELECT code_module, MIN(module_presentation_length) AS min_presentation_length FROM courses GROUP BY code_module;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uc7a5\uc560 \ud559\uc0dd\uc758 \ube44\uc728\uc774 20%\ub97c \ucd08\uacfc\ud558\ub294 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uacb0\uc815", "accept": "SELECT sr.code_module, sr.code_presentation, (COUNT(si.id_student) * 100.0 / (SELECT COUNT(*) FROM studentinfo WHERE disability = 'Y')) AS disability_percentage FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING disability_percentage > 20;", "reject": "SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT si.id_student) / (SELECT COUNT(*) FROM studentinfo WHERE disability = 'Y') AS disability_ratio FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING disability_ratio > 0.2;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ud559\uc0dd\uc758 \ub4f1\ub85d \ubaa8\ub4c8\uacfc \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\ub97c \uc870\ud68c", "accept": "SELECT r.code_module, AVG(c.module_presentation_length) as avg_length FROM studentRegistration r JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY r.code_module;", "reject": "SELECT sr.code_module, AVG(c.module_presentation_length) AS avg_presentation_length FROM studentregistration sr INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ub0a8\ud559\uc0dd \uc911 \ud3c9\uade0 \uc810\uc218 \uc774\ud558\uc778 \ud559\uc0dd", "accept": "SELECT studentassessment.id_student, AVG(studentassessment.score) AS average_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' GROUP BY studentassessment.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);", "reject": "SELECT studentinfo.id_student, AVG(studentassessment.score) AS avg_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'M' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) < ( SELECT AVG(score) FROM studentassessment );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \uc9c0\uc5ed\uc758 \uc9c0\uc5ed\uba85\uacfc \ub4f1\ub85d\ub41c \ubaa8\ub4c8 \uc218\ub97c \uc870\ud68c", "accept": "SELECT s.region, COUNT(DISTINCT r.code_module) AS module_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.region;", "reject": "SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS num_registrations FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc790\ub8cc \uc0c1\ud638 \uc791\uc5c5 \ud69f\uc218\uc758 \ud3c9\uade0\uc774 15\ud68c \ubbf8\ub9cc\uc778 \ubaa8\ub4c8\uacfc \uc131\ubcc4, \ud3c9\uade0 \uc790\ub8cc \uc0c1\ud638\uc791\uc5c5 \ud69f\uc218", "accept": "SELECT sr.code_module, si.gender, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.gender HAVING AVG(v.sum_click) < 15;", "reject": "SELECT studentinfo.code_module, studentinfo.gender, AVG(studentvle.sum_click) AS average_clicks FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.code_module, studentinfo.gender HAVING AVG(studentvle.sum_click) < 15;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uac00 \ud3c9\uade0 \uc774\uc0c1\uc778 \ubaa8\ub4c8 \uc870\ud68c", "accept": "SELECT code_module FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) > (SELECT AVG(module_presentation_length) FROM courses);", "reject": "SELECT code_module, code_presentation FROM courses WHERE module_presentation_length >= ( SELECT AVG(module_presentation_length) FROM courses );", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \ub4f1\ub85d\uc77c\ubcf4\ub2e4 \ub354 \ub2a6\uac8c \ub4f1\ub85d\ud55c \ud559\uc0dd\ub4e4\uc758 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc \uc870\ud68c", "accept": "SELECT code_module, code_presentation FROM studentRegistration GROUP BY code_module, code_presentation HAVING AVG(date_registration) > (SELECT AVG(date_registration) FROM studentRegistration);", "reject": "SELECT code_module, code_presentation FROM studentRegistration WHERE date_registration > ( SELECT AVG(date_registration) FROM studentRegistration );", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "London Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'London Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'London Region' ) );", "reject": "SELECT studentinfo.id_student, studentinfo.gender, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'London Region' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student, studentinfo.gender HAVING AVG(studentassessment.score) > ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'London Region' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00\ub97c \uc81c\ucd9c\ud558\uc9c0 \uc54a\uc740 \ud559\uc0dd\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\uc740 \ud3c9\uac00 \uc720\ud615\uacfc \ud559\uc0dd \ube44\uc728 \uc870\ud68c", "accept": "SELECT a.assessment_type, (COUNT(sa.id_student) - COUNT(sa.date_submitted)) / COUNT(sa.id_student) * 100 AS non_submission_percentage FROM assessments a LEFT JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type ORDER BY non_submission_percentage DESC LIMIT 1;", "reject": "SELECT a.assessment_type, COUNT(sa.id_student) / (SELECT COUNT(*) FROM assessments) AS student_ratio FROM assessments a LEFT JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE sa.id_student IS NULL GROUP BY a.assessment_type ORDER BY student_ratio DESC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ud2b9\uc815 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\uc758 \ube44\uc728\uc744 \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\uc758 \ube44\uc728 \uc21c\uc73c\ub85c \uc870\ud68c", "accept": "SELECT code_module, code_presentation, (COUNT(id_student) / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module AND code_presentation = si.code_presentation)) * 100 AS disability_percentage FROM studentInfo si WHERE disability = 'Y' GROUP BY code_module, code_presentation;", "reject": "SELECT code_module, code_presentation, COUNT(disability) / COUNT(*) AS disability_ratio FROM studentInfo GROUP BY code_module, code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \ud3c9\uade0 \uc810\uc218\uac00 \uac00\uc7a5 \ub192\uc740 \ud3c9\uac00 \uc2dc\ud5d8\uc720\ud615\uc740 \ubb34\uc5c7", "accept": "SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type ORDER BY avg_score DESC LIMIT 1;", "reject": "SELECT assessment_type, AVG(score) AS avg_score FROM studentAssessment JOIN assessments ON studentAssessment.id_assessment = assessments.id_assessment GROUP BY assessment_type ORDER BY avg_score DESC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ud3c9\uade0 \ud074\ub9ad \uc218 \ubcf4\ub2e4 \ub9ce\uc740 \ud559\uc0dd\uacfc \uc801\uc740 \ud559\uc0dd\uc73c\ub85c \uad6c\ubd84\ud558\uace0 \ub9ce\uc774 \ub4e3\ub294 \uc218\uc5c5, \ud3c9\uade0 \uc810\uc218\ub97c \uac01\uac01 \uad6c\ud574\uc918", "accept": "WITH AverageClicks AS ( SELECT AVG(sum_click) AS avg_clicks FROM studentvle ), StudentScores AS ( SELECT studentvle.id_student, studentinfo.code_module, AVG(studentassessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student JOIN studentinfo ON studentvle.id_student = studentinfo.id_student GROUP BY studentvle.id_student, studentinfo.code_module ), CourseClickCounts AS ( SELECT code_module, CASE WHEN avg_clicks > (SELECT avg_clicks FROM AverageClicks) THEN 'Above Average Clicks' ELSE 'Below Average Clicks' END AS click_category, COUNT(*) AS student_count FROM StudentScores GROUP BY code_module, click_category ) SELECT CourseClickCounts.code_module, CourseClickCounts.click_category, CourseClickCounts.student_count FROM CourseClickCounts ORDER BY CourseClickCounts.student_count DESC;", "reject": "SELECT vle.code_module, vle.code_presentation, COUNT(DISTINCT vle.id_student) AS num_students, AVG(sa.score) AS avg_score FROM studentvle vle INNER JOIN studentAssessment sa ON vle.id_student = sa.id_student GROUP BY vle.code_module, vle.code_presentation HAVING COUNT(DISTINCT vle.id_student) > (SELECT AVG(num_students) FROM ( SELECT COUNT(DISTINCT vle.id_student) AS num_students FROM studentvle vle INNER JOIN studentAssessment sa ON vle.id_student = sa.id_student GROUP BY vle.code_module, vle.code_presentation ) AS num_students_avg );", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uc640 \ucd5c\uc18c \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774 \uc870\ud68c", "accept": "SELECT AVG(module_presentation_length) AS avg_presentation_length, MIN(module_presentation_length) AS min_presentation_length FROM courses WHERE code_module = 'CCC';", "reject": "SELECT AVG(module_presentation_length) AS avg_length, MIN(module_presentation_length) AS min_length FROM courses WHERE code_module = 'MATHS';", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uc7a5\uc560 \ud559\uc0dd\uc758 \ube44\uc728\uc774 5%\ub97c \ucd08\uacfc\ud558\ub294 \ubaa8\ub4e0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(si.id_student) * 1.0 / (SELECT COUNT(*) FROM studentregistration WHERE code_module = sr.code_module AND code_presentation = sr.code_presentation)) > 0.05;", "reject": "SELECT code_module, code_presentation FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY code_module, code_presentation HAVING COUNT(*) * 1.0 / (SELECT COUNT(*) FROM studentregistration WHERE code_module = sr.code_module AND code_presentation = sr.code_presentation) > 0.05;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \uac00\uc911\uce58 \uc911 \uac00\uc7a5 \ub0ae\uc740 \uc720\ud615\uc744 \uc870\ud68c", "accept": "SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type ORDER BY avg_weight ASC LIMIT 1;", "reject": "SELECT assessment_type, AVG(weight) AS average_weight FROM assessments GROUP BY assessment_type ORDER BY average_weight ASC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "Ireland \uc9c0\uc5ed\uc758 \uc131\ubcc4\uacfc \ud65c\ub3d9 \uc720\ud615, \ubaa8\ub4c8 \ubcc4 \ud3c9\uade0 \uc810\uc218", "accept": "SELECT studentinfo.gender, vle.activity_type, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE studentinfo.region = 'Ireland' GROUP BY studentinfo.gender, vle.activity_type;", "reject": "SELECT courses.code_module, studentinfo.gender, studentinfo.activity_type, AVG(studentassessment.score) AS avg_score FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Ireland' GROUP BY courses.code_module, studentinfo.gender, studentinfo.activity_type;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc5c6\ub294 \ud559\uc0dd\ub4e4 \uc911 \uc911\ub3c4\ud3ec\uae30\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Withdrawn' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Withdrawn' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8\uc744 Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\uc758 \ube44\uc728\uc774 40% \ubbf8\ub9cc\uc778 \uc9c0\uc5ed\uba85\uacfc \ube44\uc728\uc744 \uc870\ud68c", "accept": "SELECT studentinfo.region, COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student) AS pass_percentage FROM studentinfo GROUP BY studentinfo.region HAVING pass_percentage < 0.4;", "reject": "SELECT region, (COUNT(CASE WHEN final_result = 'Pass' THEN 1 END) * 100.0 / COUNT(*)) AS pass_percentage FROM studentInfo WHERE final_result = 'Pass' GROUP BY region HAVING pass_percentage < 40;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae30\uac04\uc774 150\uc77c\uc744 \ucd08\uacfc\ud558\ub294 \ubaa8\ub4e0 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158", "accept": "SELECT DISTINCT code_module, code_presentation FROM courses WHERE module_presentation_length > 150;", "reject": "SELECT code_module, code_presentation FROM courses WHERE module_presentation_length > 150;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uac01 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ucd5c\uc18c \ud3c9\uac00 \uc77c\uc790\uc640 \ud574\ub2f9 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218 \uc870\ud68c", "accept": "SELECT a.code_presentation, MIN(a.date) AS min_assessment_date, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation;", "reject": "SELECT code_presentation, MIN(date) AS min_assessment_date, AVG(score) AS avg_score FROM assessments LEFT JOIN studentAssessment ON assessments.id_assessment = studentAssessment.id_assessment GROUP BY code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ubaa8\ub4e0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud574 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\uac00 \uac00\uc7a5 \ub192\uc740 \ubaa8\ub4c8\uc744 \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud3c9\uade0 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, AVG(sa.score) AS avg_score FROM studentAssessment sa INNER JOIN studentregistration sr ON sa.id_student = sr.id_student GROUP BY sr.code_module ORDER BY avg_score DESC LIMIT 1;", "reject": "SELECT sr.code_module, AVG(sa.score) AS avg_score FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module ORDER BY avg_score DESC LIMIT 1;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uad50\uc721 \uc218\uc900\uc774 \uac00\uc7a5 \ub192\uc740 \ud559\uc0dd \uc911\uc5d0\uc11c \ud3c9\uade0 \uc810\uc218\uac00 \uac00\uc7a5 \ub192\uc740 \ud3c9\uac00\ub97c \uc2dd\ubcc4\ud558\uace0 \ud3c9\uac00ID, \ud3c9\uade0 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.highest_education = (SELECT MAX(highest_education) FROM studentinfo) GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;", "reject": "SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student JOIN studentRegistration sr ON si.id_student = sr.id_student WHERE si.highest_education = ( SELECT MAX(highest_education) FROM studentInfo ) GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc5ec\ub7ec \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uac00\uc7a5 \ub9ce\uc740 \ud559\uc0dd\uc774 \ub4f1\ub85d\ud55c \ubaa8\ub4c8 \ucf54\ub4dc\ub97c \uc2dd\ubcc4", "accept": "SELECT code_module FROM ( SELECT code_module, COUNT(DISTINCT id_student) AS student_count FROM studentInfo GROUP BY code_module ) AS module_counts ORDER BY student_count DESC LIMIT 1;", "reject": "SELECT code_module FROM studentInfo GROUP BY code_module ORDER BY COUNT(*) DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \ucd5c\uace0 \ud559\ub825\uc774 'No Formal quals'\uc774\uace0 \ucd5c\uadfc \ud3c9\uac00\ub97c \uc81c\ucd9c\ud55c \uc5ec\ud559\uc0dd\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS recent_female_count FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(date_submitted) AS latest_submission FROM studentAssessment GROUP BY id_student ) AS latest_submissions ON si.id_student = latest_submissions.id_student INNER JOIN studentRegistration sr ON sr.id_student = si.id_student WHERE si.gender = 'F' AND si.highest_education = 'No Formal quals' GROUP BY sr.code_module;", "reject": "SELECT r.code_module, COUNT(DISTINCT s.id_student) AS num_women_with_no_formal_quals_and_recent_assessment FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentAssessment a ON s.id_student = a.id_student WHERE s.highest_education = 'No Formal quals' AND a.date_submitted <= (SELECT MAX(date_submitted) FROM studentAssessment WHERE id_student = s.id_student) GROUP BY r.code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "35-55\uc138 \ud559\uc0dd\ub4e4\uc758 \uac00\uc7a5 \ub9ce\uc774 \ub4e3\ub294 \uc218\uc5c5, \uadf8 \uc218\uc5c5\uc758 \uc810\uc218, \uc9c0\uc5ed, \uc0ac\uc774\ud2b8id", "accept": "SELECT studentinfo.code_module, AVG(studentassessment.score) AS average_score, studentinfo.region, studentvle.id_site FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentinfo.age_band = '35-55' GROUP BY studentinfo.code_module, studentinfo.region, studentvle.id_site ORDER BY COUNT(*) DESC LIMIT 1;", "reject": "SELECT s.code_module, s.code_presentation, AVG(sa.score) AS average_score, s.region, v.id_site FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student JOIN studentVle v ON s.id_student = v.id_student WHERE s.age_band = '35-55' GROUP BY s.code_module, s.code_presentation, s.region, v.id_site ORDER BY COUNT(*) DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8\ubcc4\ub85c \uac00\uc7a5 \ub9ce\uc740 \ud559\uc0dd \uc218\ub97c \uac00\uc9c4 \uc0c1\uc704 5\uac1c \ubaa8\ub4c8\uba85\uacfc \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module ORDER BY num_students DESC LIMIT 5;", "reject": "SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student GROUP BY code_module ORDER BY num_students DESC LIMIT 5;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "0-35\uc138\uc758 \ud559\uc0dd\ub4e4\uc758 \ubaa8\ub4c8\uacfc \ud3c9\uade0 \uc810\uc218, \uc0ac\uc774\ud2b8 id, \ud65c\ub3d9 \uc720\ud615", "accept": "SELECT vle.code_module, AVG(studentassessment.score) AS average_score, vle.id_site, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE studentinfo.age_band = '0-35' GROUP BY vle.code_module, vle.id_site, vle.activity_type;", "reject": "SELECT studentinfo.code_module, AVG(studentassessment.score) AS avg_score, studentvle.id_site, studentvle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentinfo.age_band = '0-35' GROUP BY studentinfo.code_module, studentvle.id_site, studentvle.activity_type;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uacb0\uacfc\uac00 'Distinction'\uc774\uace0 \uac00\uc7a5 \ub9ce\uc740 \ud3c9\uac00\ub97c \ubc1b\uc740 \ubaa8\ub4c8\uc744 \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud3c9\uac00\uc758 \uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student WHERE si.final_result = 'Distinction' GROUP BY sr.code_module ORDER BY assessment_count DESC LIMIT 1;", "reject": "SELECT sr.code_module, COUNT(sa.id_assessment) AS num_assessments FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.highest_education = 'Distinction' GROUP BY sr.code_module ORDER BY num_assessments DESC LIMIT 1;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4e0 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud55c \ucd5c\ub300 \ubc0f \ucd5c\uc18c \ud3c9\uac00 \uac00\uc911\uce58\ub97c \uc870\ud68c", "accept": "SELECT code_presentation, (SELECT MAX(weight) FROM assessments AS a2 WHERE a1.code_presentation = a2.code_presentation) AS max_weight, (SELECT MIN(weight) FROM assessments AS a3 WHERE a1.code_presentation = a3.code_presentation) AS min_weight FROM assessments AS a1 GROUP BY code_presentation;", "reject": "SELECT code_presentation, MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM assessments GROUP BY code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud55c \ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uac00 \uc720\ud615\ubcc4 \ud3c9\uade0 \uac00\uc911\uce58\ub97c \uc870\ud68c", "accept": "SELECT assessment_type, AVG(weight) as avg_weight FROM assessments GROUP BY assessment_type;", "reject": "SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc810\uc218\uac00 40\uc810 \ubbf8\ub9cc\uc778 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\uc640 \ud3c9\uac00 \uc720\ud615\uc744 \uc870\ud68c", "accept": "SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40 GROUP BY a.assessment_type;", "reject": "SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40 GROUP BY a.assessment_type;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc758 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uac00 \ud3c9\uade0 \uc774\uc0c1\uc778 \ubaa8\ub4c8", "accept": "SELECT code_module FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) >= (SELECT AVG(module_presentation_length) FROM courses);", "reject": "SELECT code_module, code_presentation FROM courses WHERE module_presentation_length >= ( SELECT AVG(module_presentation_length) FROM courses );", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac00\uc7a5 \ub9ce\uc740 \ud074\ub9ad\uc744 \ud55c \ubaa8\ub4c8\uacfc \uadf8 \ud559\uc0dd\uc758 \ud074\ub9ad \uc218 \uc870\ud68c", "accept": "SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentInfo GROUP BY code_module ORDER BY num_students DESC LIMIT 1;", "reject": "SELECT code_module, COUNT(*) AS num_clicks FROM studentInfo GROUP BY code_module ORDER BY num_clicks DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\ubcc4 \uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\uc758 \ud3c9\uade0 \uc810\uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uade0 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentRegistration sr ON a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student INNER JOIN studentassessment sa ON sr.id_student = sa.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ub2e4\uc591\ud55c \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \ud559\uc0dd\ub2f9 \uacf5\ubd80\ud55c \ud3c9\uade0 \ud559\uc810\uc774 \uac00\uc7a5 \ub192\uc740 \uc9c0\uc5ed \uc21c\uc73c\ub85c \uc815\ub82c", "accept": "SELECT si.region, AVG(si.studied_credits) AS avg_credits FROM studentinfo si GROUP BY si.region ORDER BY avg_credits DESC;", "reject": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY region ORDER BY avg_credits DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "Withdrawn \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc131\ubcc4\uc5d0 \ub530\ub978 \ud3c9\uade0 \ud559\uc810", "accept": "SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY gender;", "reject": "SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub0a8\ud559\uc0dd \uc911 \ud65c\ub3d9 \uc720\ud615\uc774 homepage\uc778 \ud559\uc0dd\uc744 \ucc3e\uc73c\uc2dc\uc624", "accept": "SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'homepage';", "reject": "SELECT DISTINCT vle.id_student FROM studentvle vle JOIN studentinfo si ON vle.id_student = si.id_student JOIN courses c ON si.course_id = c.code_module AND si.course_id = c.code_presentation WHERE c.activity_type = 'homepage' AND si.gender = 'M';", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 \ub4f1\ub85d \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158\ubcc4 \ud3c9\uade0 VLE \uc790\ub8cc \ud074\ub9ad \uc218\ub97c \uc870\ud68c", "accept": "SELECT r.code_module, r.code_presentation, AVG(v.sum_click) AS avg_clicks FROM studentRegistration r JOIN studentVle v ON r.id_student = v.id_student GROUP BY r.code_module, r.code_presentation;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentvle.sum_click) AS avg_clicks FROM studentregistration JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \ubaa8\ub4c8(AAA)\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158(2013J)\uc5d0\uc11c \ud3c9\uade0 \uc810\uc218\uac00 50\uc810 \uc774\uc0c1\uc778 \ud559\uc0dd\uc758 \ubaa9\ub85d", "accept": "SELECT si.id_student, si.code_module, si.code_presentation, AVG(sa.score) AS average_score FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.code_module = 'AAA' AND si.code_presentation = '2013J' GROUP BY si.id_student HAVING AVG(sa.score) >= 50;", "reject": "SELECT DISTINCT studentinfo.id_student FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.code_module = 'AAA' AND studentinfo.code_presentation = '2013J' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= 50;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc774\uc804 \uc2dc\ub3c4(\uc804\ud559)\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4 \uc911 \uc7a5\uc560 \uc5ec\ubd80\uc640 \ud559\uc0dd\ub4e4\uc758 \uc218 \uc870\ud68c", "accept": "SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE num_of_prev_attempts > 1 GROUP BY disability;", "reject": "SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE num_of_prev_attempts > 0 GROUP BY disability;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4\uc758 \uac70\uc8fc \uc9c0\uc5ed\uba85 \uc870\ud68c", "accept": "SELECT DISTINCT region FROM studentInfo WHERE disability = 'Y';", "reject": "SELECT DISTINCT region FROM studentInfo WHERE disability = 'Y';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc5ec\ud559\uc0dd \uc911 \ud65c\ub3d9 \uc720\ud615\uc774 resource\uc778 \ud559\uc0dd\uc744 \ucc3e\uc73c\uc2dc\uc624", "accept": "SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' AND vle.activity_type = 'resource';", "reject": "SELECT DISTINCT studentvle.id_student FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' AND studentvle.id_site IN (SELECT id_site FROM studentvle GROUP BY id_site HAVING COUNT(*) = 1);", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \uc131\ubcc4\uc758 \ud559\uc0dd\ub4e4\uc758 \ub4f1\ub85d \ubaa8\ub4c8 \uc218\ub97c \uc870\ud68c", "accept": "SELECT s.gender, COUNT(DISTINCT r.code_module) AS module_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.gender;", "reject": "SELECT studentregistration.code_module, studentinfo.gender, COUNT(studentregistration.code_module) AS registration_count FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentinfo.gender;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 \ud3c9\uade0 \ub098\uc774\uc640 \uc131\ubcc4\uc744 \uc870\ud68c", "accept": "SELECT s.gender, AVG(s.age_band) AS avg_age FROM studentInfo s GROUP BY s.gender;", "reject": "SELECT AVG(age_band) AS avg_age, gender FROM studentInfo GROUP BY gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "VLE\uc5d0\uc11c \ud559\uc0dd\ub2f9 \ud3c9\uade0 \ud074\ub9ad \uc218\uac00 5 \ubbf8\ub9cc\uc778 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentinfo.code_module, studentinfo.code_presentation FROM studentinfo INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.code_module, studentinfo.code_presentation HAVING AVG(studentvle.sum_click) < 5;", "reject": "SELECT studentinfo.code_module, studentinfo.code_presentation FROM studentvle INNER JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentvle.sum_click < (SELECT AVG(sum_click) FROM studentvle WHERE id_student = studentinfo.id_student) GROUP BY studentinfo.code_module, studentinfo.code_presentation;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0ddid\uc640 \ud559\uc0dd\uc758 \ucd1d \uc218\uac15 \ubaa8\ub4c8 \uc218\uc640 \ud3c9\uade0 \ud559\uc2b5 \uc810\uc218 \uc870\ud68c", "accept": "SELECT id_student, COUNT(*) AS num_modules_enrolled, AVG(score) AS avg_learning_score FROM studentAssessment GROUP BY id_student;", "reject": "SELECT id_student, COUNT(*) AS total_modules, AVG(score) AS average_score FROM studentAssessment GROUP BY id_student;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uc5ec\ud559\uc0dd\uc758 \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uacfc \ub0a8\ud559\uc0dd\uc758 \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uc744 \ube44\uad50\ud558\uc5ec \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uac01 \uc131\ubcc4\uc758 \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(CASE WHEN si.gender = 'F' THEN DATEDIFF(sv.date, sr.date_registration) END) AS avg_female_learning_time, AVG(CASE WHEN si.gender = 'M' THEN DATEDIFF(sv.date, sr.date_registration) END) AS avg_male_learning_time FROM studentregistration sr LEFT JOIN studentInfo si ON sr.id_student = si.id_student LEFT JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT r.code_module, r.code_presentation, AVG(CASE WHEN s.gender = 'F' THEN v.sum_click END) AS female_avg_learning_time, AVG(CASE WHEN s.gender = 'M' THEN v.sum_click END) AS male_avg_learning_time FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student JOIN studentvle v ON r.id_student = v.id_student GROUP BY r.code_module, r.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud559\uc810", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd \uc911 \uc7a5\uc560\uc5ec\ubd80\uc640 \ud559\uc0dd\ub4e4\uc758 \uc218 \uc870\ud68c", "accept": "SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Pass' GROUP BY disability;", "reject": "SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Pass' GROUP BY disability;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc810\uc218\uc640 VLE \uc790\ub8cc \uc774\uc6a9\ub7c9 \uc0ac\uc774\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud559\uc0dd\uc758 \ud3c9\uade0\uc810\uc218, VLE \uc790\ub8cc \uc774\uc6a9\ub7c9\ub3c4 \ud568\uaed8 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentassessment.score) AS avg_score, studentvle.sum_click AS vle_activity FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student INNER JOIN studentassessment ON studentregistration.id_student = studentassessment.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "AAA\uc218\uc5c5\uc744 \ub4e3\ub294 \ud559\uc0dd \uc911 0-35\uc138 \uc774\uba74\uc11c \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc778 \ud559\uc0dd\uc744 \ucc3e\uc544\uc918", "accept": "SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.code_module = 'AAA' AND studentinfo.age_band = '0-35' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);", "reject": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.age_band = '0-35' AND studentinfo.code_module = 'AAA' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE code_module = 'AAA' );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc640 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \uae38\uc774 \ubc0f \ucd5c\uc885 \uacb0\uacfc \uac04\uc758 \uad00\uacc4\ub97c \ubd84\uc11d", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_clicks_per_student, c.module_presentation_length, sr.date_unregistration FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation LEFT JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation WHERE a.id_assessment IS NULL GROUP BY sr.code_module, sr.code_presentation, sr.date_unregistration;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc131\ubcc4\uacfc \ubaa8\ub4c8\ubcc4 \ud559\uc0dd \uc218\uac00 10\uba85\uc744 \ucd08\uacfc\ud558\ub294 \uacbd\uc6b0 \uc131\ubcc4, \ubaa8\ub4c8 \ucf54\ub4dc, \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT si.gender, sr.code_module, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.gender, sr.code_module HAVING COUNT(DISTINCT si.id_student) > 10;", "reject": "SELECT studentinfo.gender, studentregistration.code_module, COUNT(studentinfo.id_student) AS student_count FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student GROUP BY studentinfo.gender, studentregistration.code_module HAVING COUNT(studentinfo.id_student) > 10;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc9c0\uc5ed\uba85, \uac01 \uc9c0\uc5ed\ubcc4\ub85c \ub4f1\ub85d\ub41c \ud559\uc0dd \uc218\uc640 VLE \uc790\ub8cc \ud074\ub9ad \uc218\uc758 \ucd1d \ud569 \uc870\ud68c", "accept": "SELECT i.region, COUNT(r.id_student) AS num_students, SUM(v.sum_click) AS total_clicks FROM studentInfo i JOIN studentRegistration r ON i.id_student = r.id_student JOIN studentVle v ON r.id_student = v.id_student GROUP BY i.region;", "reject": "SELECT studentinfo.region, COUNT(studentregistration.id_student) AS registered_students, SUM(studentvle.sum_click) AS total_clicks FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ucd5c\uc885 \uacb0\uacfc pass\uc778 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc810\uc218", "accept": "SELECT AVG(score) AS average_score FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE final_result = 'pass' );", "reject": "SELECT AVG(studentassessment.score) AS avg_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'pass';", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed\ubcc4 \ud559\uc0dd \uc218\uac00 50\uba85\uc744 \ucd08\uacfc\ud558\ub294 \uacbd\uc6b0 \uc9c0\uc5ed\uba85\uacfc \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT si.region, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.region HAVING COUNT(DISTINCT si.id_student) > 50;", "reject": "SELECT s.region, COUNT(*) AS num_students FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.region HAVING COUNT(*) > 50;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uc885 \uacb0\uacfc\uac00 'Fail'\uc774\uace0 \ud3c9\uac00 \uc810\uc218\uac00 40\ubcf4\ub2e4 \ub0ae\uc740 \ubaa8\ub4e0 \ud559\uc0dd \uc911 \uac00\uc7a5 \ub9ce\uc740 \ud559\uc810\uc744 \ucde8\ub4dd\ud55c \ud559\uc0dd\uc758 \ud559\uc810 \uc218\ub97c \uc2dd\ubcc4", "accept": "SELECT MAX(si.studied_credits) AS max_credits FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Fail' AND sa.score < 40;", "reject": "SELECT studentinfo.studied_credits FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.final_result = 'Fail' AND studentassessment.score < 40 ORDER BY studentinfo.studied_credits DESC LIMIT 1;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uade0 \uae38\uc774", "accept": "SELECT AVG(module_presentation_length) AS avg_length FROM courses;", "reject": "SELECT AVG(module_presentation_length) AS avg_presentation_length FROM courses;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \uc0ac\uc6a9\ub41c \ubaa8\ub4e0 VLE \uc790\ub8cc(\ud65c\ub3d9 \uc720\ud615)\ub97c \ub098\uc5f4", "accept": "SELECT v.activity_type FROM vle v INNER JOIN courses c ON v.code_module = c.code_module AND v.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND c.code_presentation = '2013B';", "reject": "SELECT DISTINCT activity_type FROM vle WHERE code_module = 'BBS' AND code_presentation = '2017B';", "context": "CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed\uba85\uacfc \uac01 \uc9c0\uc5ed\ubcc4\ub85c \uc0ac\uc6a9\ub41c VLE \uc790\ub8cc\uc758 \uc218 \uc870\ud68c", "accept": "SELECT s.region, COUNT(DISTINCT v.id_site) AS num_materials FROM studentInfo s JOIN vle v ON s.code_module = v.code_module AND s.code_presentation = v.code_presentation GROUP BY s.region;", "reject": "SELECT studentinfo.region, COUNT(DISTINCT vle.id_site) AS num_of_vle_materials FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation GROUP BY studentinfo.region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "Fail \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 \ucd5c\ub300 \ubc0f \ucd5c\uc18c \ub098\uc774\ub300\ub97c \uc870\ud68c", "accept": "SELECT MAX(age_band) AS max_age, MIN(age_band) AS min_age FROM studentInfo;", "reject": "SELECT MIN(age_band) AS min_age_band, MAX(age_band) AS max_age_band FROM studentinfo;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uc885 \uacb0\uacfc\uac00 pass\uc778 \ud559\uc0dd\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\uc740 \uc9c0\uc5ed", "accept": "SELECT region FROM studentinfo GROUP BY region ORDER BY SUM(CASE WHEN final_result = 'pass' THEN 1 ELSE 0 END) / COUNT(*) DESC LIMIT 1;", "reject": "SELECT region, COUNT(*) AS pass_count FROM studentInfo WHERE final_result = 'pass' GROUP BY region ORDER BY pass_count DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "East Anglian Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218\ub97c \uad6c\ud558\uc2dc\uc624", "accept": "SELECT AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Anglian Region';", "reject": "SELECT AVG(studentAssessment.score) AS average_score FROM studentAssessment JOIN studentInfo ON studentAssessment.id_student = studentInfo.id_student WHERE studentInfo.region = 'East Anglian Region';", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc5ec\ud559\uc0dd\uc758 \ube44\uc728\uc774 60% \uc774\uc0c1\uc778 \ubaa8\ub4e0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) * 1.0 / (SELECT COUNT(DISTINCT studentregistration2.id_student) FROM studentregistration studentregistration2 WHERE studentregistration2.code_module = studentregistration.code_module AND studentregistration2.code_presentation = studentregistration.code_presentation)) > 0.6;", "reject": "SELECT code_module, code_presentation FROM studentregistration r JOIN studentinfo s ON r.id_student = s.id_student WHERE s.gender = 'F' GROUP BY code_module, code_presentation HAVING COUNT(*) / (SELECT COUNT(*) FROM studentregistration r JOIN studentinfo s ON r.id_student = s.id_student WHERE s.gender = 'F') >= 0.6;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub4f1\ub85d \ucde8\uc18c\ud55c \ud559\uc0dd\uc774 10\uba85 \uc774\uc0c1\uc778 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158 \uc870\ud68c", "accept": "SELECT code_module, code_presentation FROM studentRegistration WHERE date_unregistration IS NOT NULL GROUP BY code_module, code_presentation HAVING COUNT(*) >= 10;", "reject": "SELECT code_module, code_presentation FROM studentregistration WHERE date_unregistration IS NOT NULL GROUP BY code_module, code_presentation HAVING COUNT(*) >= 10;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "10\uc6d4 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \uc81c\uacf5\ub418\ub294 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\ub97c \uc870\ud68c", "accept": "SELECT courses.code_module, courses.module_presentation_length FROM courses WHERE courses.code_presentation LIKE '%B' OR courses.code_presentation LIKE '%J';", "reject": "SELECT code_module, module_presentation_length FROM courses WHERE code_presentation LIKE '%10%';", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "VLE\uc758 \ubaa8\ub4e0 \ud65c\ub3d9 \uc720\ud615\uacfc \ud65c\ub3d9 \uc720\ud615\ubcc4 \ud3c9\uade0 \ud65c\ub3d9 \uae30\uac04\uc744 \uc870\ud68c", "accept": "SELECT activity_type, AVG(week_to - week_from) as avg_activity_duration FROM vle GROUP BY activity_type;", "reject": "SELECT activity_type, AVG(week_to - week_from) AS avg_duration FROM vle GROUP BY activity_type;", "context": "CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc131\ubcc4\uacfc \ubaa8\ub4c8\ubcc4\ub85c \uc790\ub8cc \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc758 \ud3c9\uade0 \uc870\ud68c", "accept": "SELECT si.gender, sr.code_module, AVG(v.sum_click) AS avg_clicks FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle v ON si.id_student = v.id_student GROUP BY si.gender, sr.code_module ORDER BY avg_clicks DESC;", "reject": "SELECT studentinfo.gender, studentregistration.code_module, AVG(studentvle.sum_click) AS average_interactions FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.gender, studentregistration.code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc740 \ubaa8\ub4c8\uc744 \uc774\uc218\ud55c \ud559\uc0dd\uc758 \ucd5c\uc885 \uacb0\uacfc\ub97c \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ucd5c\uc885 \uacb0\uacfc\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, si.final_result FROM studentInfo si INNER JOIN ( SELECT id_student, COUNT(DISTINCT code_module) AS module_count FROM studentInfo GROUP BY id_student ORDER BY module_count DESC LIMIT 1 ) AS max_modules ON si.id_student = max_modules.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;", "reject": "SELECT r.code_module, si.final_result FROM studentInfo si JOIN studentRegistration r ON si.id_student = r.id_student GROUP BY r.code_module, si.final_result ORDER BY COUNT(*) DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4c8\uc744 Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\uc758 \ube44\uc728\uc774 \ud3c9\uade0 \ud569\uaca9\ub960\ubcf4\ub2e4 \ub0ae\uc740 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student)) < (SELECT AVG(passing_rate) FROM (SELECT COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student) AS passing_rate FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation) AS avg_passing_rates);", "reject": "SELECT sr.code_module, sr.code_presentation FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student INNER JOIN ( SELECT code_module, code_presentation, AVG(CASE WHEN final_result = 'Pass' THEN 1 ELSE 0 END) / COUNT(*) AS pass_rate FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY code_module, code_presentation ) AS avg_pass_rate ON sr.code_module = avg_pass_rate.code_module AND sr.code_presentation = avg_pass_rate.code_presentation WHERE si.final_result = 'Pass' AND si.final_result = 'Pass' AND avg_pass_rate.pass_rate < ( SELECT AVG(pass_rate) FROM ( SELECT code_module, code_presentation, AVG(CASE WHEN final_result = 'Pass' THEN 1 ELSE 0 END) / COUNT(*) AS pass_rate FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY code_module, code_presentation ) AS avg_pass_rate );", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub7f0\ub358 \uc9c0\uc5ed\uc758 \ud559\uc0dd\ub4e4\uc758 \uc131\ubcc4, \uc5f0\ub839\ub300, \uc7a5\uc560 \uc5ec\ubd80, \uadf8\ub9ac\uace0 \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ud3c9\uac00 \uc720\ud615 \ubc0f \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT studentinfo.gender, studentinfo.age_band, studentinfo.disability, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.region = 'London Region';", "reject": "SELECT s.gender, s.age_band, s.disability, a.assessment_type, a.weight FROM studentInfo s JOIN assessments a ON s.code_module = a.code_module AND s.code_presentation = a.code_presentation WHERE s.region = 'London';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub0a8\ud559\uc0dd \uc911 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc778 \ud559\uc0dd", "accept": "SELECT sa.id_student, AVG(sa.score) AS average_score FROM studentassessment AS sa JOIN studentinfo AS si ON sa.id_student = si.id_student WHERE si.gender = 'M' GROUP BY sa.id_student HAVING AVG(sa.score) >= ( SELECT AVG(score) FROM studentassessment );", "reject": "SELECT si.id_student FROM studentInfo si JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.gender = 'M' AND sa.score >= ( SELECT AVG(score) FROM studentAssessment WHERE id_student IN ( SELECT id_student FROM studentInfo WHERE gender = 'M' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\"23632\" \ud559\uc0dd\uc758 \uc131\ubcc4, \ucd5c\uc885 \uacb0\uacfc, \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ud3c9\uac00 \uc720\ud615 \ubc0f \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT studentinfo.gender, studentinfo.final_result, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 23632;", "reject": "SELECT studentinfo.gender, studentinfo.final_result, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 23632;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "Fail \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud559\uc810 ", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ud65c\ub3d9 \uc720\ud615\uacfc \ud65c\ub3d9 \uc720\ud615\ubcc4 \ud3c9\uade0 \ud65c\ub3d9 \uae30\uac04 \uc870\ud68c", "accept": "SELECT activity_type, AVG(week_to - week_from) AS avg_duration FROM vle GROUP BY activity_type ORDER BY avg_duration DESC;", "reject": "SELECT activity_type, AVG(week_to - week_from) AS avg_activity_duration FROM vle GROUP BY activity_type;", "context": "CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8\uacfc \uac01 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uc640 \ucd5c\ub300 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774 \uc870\ud68c", "accept": "SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length, MAX(module_presentation_length) AS max_presentation_length FROM courses GROUP BY code_module;", "reject": "SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length, MAX(module_presentation_length) AS max_presentation_length FROM courses GROUP BY code_module;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uc131\ubcc4\uc5d0 \ub530\ub978 \ud559\uc0dd\ub4e4\uc758 \ucd5c\uace0 \ud559\ub825 \uc218\uc900 \ubd84\ud3ec\ub97c \uc870\ud68c", "accept": "SELECT gender, highest_education, COUNT(*) AS count FROM studentInfo GROUP BY gender, highest_education;", "reject": "SELECT gender, highest_education, COUNT(*) AS count FROM studentInfo GROUP BY gender, highest_education ORDER BY gender, count DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 'BBB' \ubaa8\ub4c8\uc5d0\uc11c VLE \uc790\ub8cc\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ud65c\ub3d9 \uc720\ud615\uacfc \ud574\ub2f9 \ud65c\ub3d9 \uc720\ud615\uc758 \uc790\ub8cc\uac1c\uc218", "accept": "SELECT activity_type, COUNT(*) AS num_materials FROM vle INNER JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE courses.code_module = 'BBB' GROUP BY activity_type ORDER BY num_materials DESC LIMIT 1;", "reject": "SELECT activity_type, COUNT(*) AS num_activities FROM vle JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE courses.code_module = 'BBB' GROUP BY activity_type ORDER BY num_activities DESC LIMIT 1;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "AAA'\ubaa8\ub4c8\uc758 \ubaa8\ub4e0 \ud3c9\uac00\uc5d0\uc11c \uac00\uc7a5 \ub192\uc740 \ud3c9\uade0 \uac00\uc911\uce58\ub97c \uac16\ub294 \ud3c9\uac00 \uc720\ud615\uacfc \ud574\ub2f9 \uac00\uc911\uce58\ub97c \uc870\ud68c", "accept": "SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments WHERE code_module = 'AAA' GROUP BY assessment_type ORDER BY avg_weight DESC LIMIT 1;", "reject": "SELECT a.assessment_type, AVG(a.weight) AS avg_weight FROM assessments a WHERE a.code_module = 'AAA' GROUP BY a.assessment_type ORDER BY avg_weight DESC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac00\uc7a5 \ub9ce\uc740 \ubaa8\ub4c8\uc744 \ud559\uc2b5\ud55c \ud559\uc0dd id\uc640 \ubaa8\ub4c8\uc758 \uc218\ub97c \uc870\ud68c", "accept": "SELECT id_student, COUNT(DISTINCT code_module) AS num_modules FROM studentRegistration GROUP BY id_student ORDER BY num_modules DESC LIMIT 1;", "reject": "SELECT id_student, COUNT(DISTINCT code_module) AS num_modules FROM studentregistration GROUP BY id_student ORDER BY num_modules DESC LIMIT 1;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "date\uac00 100 \uc774\uc0c1\uc778 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc131\uc801, \ud65c\ub3d9 \uc720\ud615 \ubc0f \uc774\uc218 \ud559\uc810", "accept": "SELECT si.id_student, AVG(sa.score) AS average_score, v.activity_type, si.studied_credits FROM studentassessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentvle sv ON sa.id_student = sv.id_student JOIN vle v ON sv.id_site = v.id_site JOIN studentinfo si ON sa.id_student = si.id_student WHERE a.date >= 100 GROUP BY si.id_student, v.activity_type, si.studied_credits;", "reject": "SELECT AVG(sa.score) AS avg_score, a.assessment_type, si.studied_credits FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentVle sv ON sa.id_student = sv.id_student INNER JOIN vle v ON sv.id_site = v.id_site WHERE a.date >= 100 GROUP BY a.assessment_type, si.studied_credits;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd\uc758 \ucd5c\ub300 \ubc0f \ucd5c\uc18c \uc774\uc804 \uc2dc\ub3c4 \ud69f\uc218\ub97c \uc870\ud68c", "accept": "SELECT MAX(num_of_prev_attempts) AS max_attempts, MIN(num_of_prev_attempts) AS min_attempts FROM studentInfo;", "reject": "SELECT MAX(num_of_prev_attempts) AS max_attempts, MIN(num_of_prev_attempts) AS min_attempts FROM studentInfo;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8\uc744 Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ub0a8\ud559\uc0dd\uc758 \ube44\uc728\ubcf4\ub2e4 \uc5ec\ud559\uc0dd\uc758 \ube44\uc728\uc774 \ub0ae\uc740 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Pass' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(CASE WHEN studentinfo.gender = 'F' THEN 1 END) / COUNT(studentinfo.id_student)) < (COUNT(CASE WHEN studentinfo.gender = 'M' THEN 1 END) / COUNT(studentinfo.id_student));", "reject": "SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT si.id_student) AS num_passing_students FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student INNER JOIN ( SELECT code_module, code_presentation, COUNT(*) AS num_passing_students FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.gender = 'M' AND si.final_result = 'Pass' GROUP BY code_module, code_presentation HAVING COUNT(*) > ( SELECT COUNT(*) FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' AND si.final_result = 'Pass' ) ) AS passing_students ON sr.code_module = passing_students.code_module AND sr.code_presentation = passing_students.code_presentation WHERE si.gender = 'F' AND si.final_result = 'Pass' GROUP BY sr.code_module, sr.code_presentation HAVING COUNT(DISTINCT si.id_student) < passing_students.num_passing_students;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uc5ec\ud559\uc0dd\uc774 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc640 \ucd5c\uc885 \uacb0\uacfc \uac04\uc758 \uad00\uacc4\ub97c \ubd84\uc11d\ud558\uace0 \uc131\ubcc4, \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\ub3c4 \ud568\uaed8 \uc870\ud68c", "accept": "SELECT si.gender, sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY si.gender, sr.code_module, sr.code_presentation, si.final_result;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.gender, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation, si.gender, si.final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc131\ubcc4\uc5d0 \ub530\ub978 \ud3c9\uade0 \ud559\uc810", "accept": "SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY gender;", "reject": "SELECT gender, AVG(studied_credits) AS average_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 \ucd5c\uace0 \ud559\ub825 \uc218\uc900 \ubd84\ud3ec\ub97c \uc870\ud68c", "accept": "SELECT highest_education, COUNT(*) AS count FROM studentInfo GROUP BY highest_education;", "reject": "SELECT highest_education, COUNT(*) AS count FROM studentInfo GROUP BY highest_education;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc640 \uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \uae38\uc774\ub97c \ubaa8\ub4c8 \uc815\ubcf4\uc640 \uacb0\ud569\ud558\uc5ec \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218, \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\ub97c \uc870\ud68c", "accept": "SELECT courses.code_module, courses.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, courses.module_presentation_length FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY courses.code_module, courses.code_presentation;", "reject": "SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) AS avg_interactions, c.module_presentation_length FROM courses c LEFT JOIN studentregistration sr ON c.code_module = sr.code_module AND c.code_presentation = sr.code_presentation LEFT JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY c.code_module, c.code_presentation;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\uc774 \ucd5c\uc18c \ud55c\ubc88 \uc774\uc0c1 \uc2dc\ub3c4\ud55c \uacfc\ubaa9 \ubaa8\ub4c8\ubcc4\ub85c, \ud559\uc0dd\uc218\ub97c \uc138\uace0 \uadf8 \uc22b\uc790\uac00 \uac00\uc7a5 \ub9ce\uc740 \uc0c1\uc704 3\uac1c \uacfc\ubaa9\ubaa8\ub4c8\uacfc \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT courses.code_module, COUNT(DISTINCT studentinfo.id_student) AS num_attempts FROM studentinfo INNER JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation INNER JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE studentinfo.disability = 'Y' GROUP BY courses.code_module ORDER BY num_attempts DESC LIMIT 3;", "reject": "SELECT courses.code_module, COUNT(studentinfo.id_student) AS num_attempts FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE studentinfo.disability = 'Y' GROUP BY courses.code_module ORDER BY num_attempts DESC LIMIT 3;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \ubaa8\ub4c8\uc758 \ucd5c\ub300 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774 \uc870\ud68c", "accept": "SELECT MAX(module_presentation_length) AS max_presentation_length FROM courses WHERE code_module = 'BBB';", "reject": "SELECT MAX(module_presentation_length) AS max_presentation_length FROM courses WHERE code_module = 'ABC';", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "Withdrawn \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd \uc911 \uc7a5\uc560\uc5ec\ubd80\uc640 \ud559\uc0dd\ub4e4\uc758 \uc218 \uc870\ud68c", "accept": "SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY disability;", "reject": "SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY disability;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8\uc774 'BBB'\uc774\uace0 \ud504\ub808\uc820\ud14c\uc774\uc158\uc774 '2014J'\uc5d0 \ub4f1\ub85d\ub41c \ubaa8\ub4e0 \ud559\uc0dd\ub4e4\uacfc \uadf8\ub4e4\uc758 \ucd5c\uc885 \uc131\uc801\uc744 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud559\uc0dd, \ucd5c\uc885 \uc131\uc801\uc744 \uc870\ud68c", "accept": "SELECT si.code_module, si.code_presentation, si.id_student, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.code_module = 'BBB' AND si.code_presentation = '2014J';", "reject": "SELECT s.code_module, s.code_presentation, s.id_student, s.final_result FROM studentInfo s JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE s.code_module = 'BBB' AND s.code_presentation = '2014J';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \uac01 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774 \uc870\ud68c", "accept": "SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_module;", "reject": "SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_module;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ubaa8\ub4c8 \uc7ac\uc2dc\ub3c4 \ud69f\uc218", "accept": "SELECT AVG(num_of_prev_attempts) AS avg_attempts FROM studentInfo;", "reject": "SELECT AVG(num_of_prev_attempts) AS avg_attempts FROM studentInfo;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "imd_band \ubcc4\ub85c \ud559\uc0dd \uc218\uc640 \ube44\uc728, \ud3c9\uade0 \uc810\uc218\uc640 \ud65c\ub3d9 \uc720\ud615\uc744 \uc54c\uace0 \uc2f6\uc5b4", "accept": "SELECT studentinfo.imd_band, COUNT(studentinfo.id_student) AS student_count, COUNT(studentinfo.id_student) / (SELECT COUNT(*) FROM studentinfo) * 100 AS student_ratio, AVG(studentassessment.score) AS average_score, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.imd_band, vle.activity_type;", "reject": "SELECT imd_band, COUNT(*) AS num_students, (COUNT(*) / (SELECT COUNT(*) FROM studentinfo)) * 100 AS percent_of_students, AVG(score) AS avg_score, activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY imd_band, activity_type;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc \uc774\uc6a9\uc77c\uacfc \ud3c9\uac00 \uc81c\ucd9c\uc77c\uc758 \ucc28\uc774\ub97c \uacc4\uc0b0\ud558\uc5ec \ud559\uc2b5 \uc2dc\uac04\uc744 \ud655\uc778\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud559\uc2b5\uc2dc\uac04\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentRegistration sr INNER JOIN studentVle sv ON sr.id_student = sv.id_student INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uc774\uc218 \ud559\uc810\uc774 100 \uc774\uc0c1\uc778 \ud559\uc0dd\uacfc 100 \uc774\ud558\uc778 \ud559\uc0dd\uc744 \uad6c\ubd84\ud558\uace0 \uac01\uac01\uc758 \ud3c9\uade0 \uc810\uc218\uc640 \ud65c\ub3d9 \uc720\ud615\uc744 \uad6c\ud574\uc918", "accept": "SELECT CASE WHEN external_studentinfo.studied_credits >= 100 THEN '100 \uc774\uc0c1' ELSE '100 \ubbf8\ub9cc' END AS credit_group, AVG(external_studentassessment.score) AS average_score, SUBSTRING_INDEX(GROUP_CONCAT(sub_v.activity_type ORDER BY activity_count DESC), ',', 1) AS most_common_activity FROM studentinfo AS external_studentinfo JOIN studentassessment AS external_studentassessment ON external_studentinfo.id_student = external_studentassessment.id_student JOIN assessments AS external_assessments ON external_studentassessment.id_assessment = external_assessments.id_assessment JOIN (SELECT code_module, code_presentation, activity_type, COUNT(*) AS activity_count FROM vle WHERE activity_type IS NOT NULL GROUP BY code_module, code_presentation, activity_type) AS sub_v ON external_assessments.code_module = sub_v.code_module AND external_assessments.code_presentation = sub_v.code_presentation GROUP BY CASE WHEN external_studentinfo.studied_credits >= 100 THEN '100 \uc774\uc0c1' ELSE '100 \ubbf8\ub9cc' END;", "reject": "SELECT si.studied_credits, AVG(sa.score) AS average_score, a.activity_type FROM studentInfo si LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student LEFT JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE si.studied_credits >= 100 GROUP BY si.studied_credits, a.activity_type;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed\uba85\uacfc \ub4f1\ub85d\ub41c \ud559\uc0dd\uc758 \uc9c0\uc5ed\ubcc4 \ub4f1\ub85d \uc218\ub97c \uc870\ud68c", "accept": "SELECT region, COUNT(*) AS registration_count FROM studentInfo GROUP BY region;", "reject": "SELECT region, COUNT(*) AS num_students FROM studentInfo GROUP BY region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 \uc804\uccb4 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810\ubcf4\ub2e4 \ub192\uc740 \uacbd\uc6b0 \ud574\ub2f9 \uc9c0\uc5ed\uba85\uacfc \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT s.region, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.region HAVING AVG(studied_credits) > (SELECT AVG(studied_credits) FROM studentInfo);", "reject": "SELECT r.region, AVG(s.studied_credits) AS avg_credits FROM studentinfo s JOIN studentregistration r ON s.id_student = r.id_student GROUP BY r.region HAVING AVG(s.studied_credits) > (SELECT AVG(studied_credits) FROM studentinfo);", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \uc9c0\uc5ed\uc758 \uc9c0\uc5ed\uba85, \ud559\uc0dd\ub4e4\uc758 \ucd5c\uace0 \ud559\ub825 \uc218\uc900\uacfc \ucd5c\uace0 \ud559\ub825 \uc218\uc900 \ubcc4 \ubd84\ud3ec\ub97c \uc870\ud68c", "accept": "SELECT region, highest_education, COUNT(*) AS count FROM studentInfo GROUP BY region, highest_education;", "reject": "SELECT region, highest_education, COUNT(*) AS num_students FROM studentInfo GROUP BY region, highest_education;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "South East Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South East Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South East Region' ) );", "reject": "SELECT studentinfo.id_student, studentinfo.gender, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South East Region' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student, studentinfo.gender HAVING AVG(studentassessment.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South East Region' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd\uc758 \ub4f1\ub85d \ubaa8\ub4c8\ubcc4 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ud3c9\uade0 \ub4f1\ub85d \uae30\uac04\uc744 \uc870\ud68c", "accept": "SELECT code_module, AVG(date_registration) AS avg_registration FROM studentRegistration GROUP BY code_module;", "reject": "SELECT code_module, AVG(date_registration) AS avg_registration_duration FROM studentRegistration GROUP BY code_module;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uac00\uc7a5 \ub9ce\uc774 \uc774\uc6a9\ud55c \ud559\uc0dd\uc744 \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud559\uc0ddID, \ucd1d \ud074\ub9ad\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, sv.id_student, SUM(sv.sum_click) AS total_clicks FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation, sv.id_student ORDER BY total_clicks DESC LIMIT 1;", "reject": "SELECT sr.code_module, sr.code_presentation, sv.id_student, SUM(sv.sum_click) AS total_clicks FROM studentRegistration sr JOIN studentVle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation, sv.id_student ORDER BY total_clicks DESC LIMIT 1;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "35-55 \uc5f0\ub839\ub300\uc758 \ucd1d \ud074\ub9ad \uc218", "accept": "SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.age_band = '35-55';", "reject": "SELECT studentinfo.age_band, SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.age_band BETWEEN '35-55' GROUP BY studentinfo.age_band;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uac00\uc7a5 \ub9ce\uc740 \ubaa8\ub4c8\uc744 \uc774\uc218\ud55c \ud559\uc0dd\uc758 \ub098\uc774\ub97c \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uc5f0\ub839\ub300\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, MAX(si.age_band) AS max_age_band FROM studentInfo si INNER JOIN studentregistration sr ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, si.age_band FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN ( SELECT code_module, code_presentation, id_student, COUNT(*) AS num_modules FROM studentRegistration GROUP BY code_module, code_presentation, id_student ORDER BY num_modules DESC LIMIT 1 ) AS max_modules ON sr.id_student = max_modules.id_student GROUP BY sr.code_module, sr.code_presentation, si.age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc5f0\ub839\ub300 \ubcc4\ub85c \uc5b4\ub5a4 \uc218\uc5c5\uc744 \ub9ce\uc774 \ub4e3\ub294\uc9c0 \uc5f0\ub839\ub300, \uc218\uc5c5\ucf54\ub4dc, \ud559\uc0dd \uc218\ub85c \uc54c\uace0\uc2f6\uc5b4", "accept": "SELECT age_band, code_module, COUNT(id_student) AS student_count FROM studentinfo GROUP BY age_band, code_module ORDER BY age_band, student_count DESC;", "reject": "SELECT age_band, code_module, COUNT(*) AS num_students FROM studentInfo GROUP BY age_band, code_module ORDER BY num_students DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd\uc758 \ud3c9\uade0 \uc5f0\ub839\uc774 \uc804\uccb4 \ud3c9\uade0 \uc5f0\ub839\ubcf4\ub2e4 \ub192\uc740 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING AVG(studentinfo.age_band) > (SELECT AVG(age_band) FROM studentinfo);", "reject": "SELECT sr.code_module, sr.code_presentation FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation HAVING AVG(si.age_band) > (SELECT AVG(age_band) FROM studentInfo);", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uac00 200\ubcf4\ub2e4 \ud070 \uac01 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \uc218 \uc870\ud68c", "accept": "SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE module_presentation_length > 200;", "reject": "SELECT COUNT(*) AS num_presentations FROM courses WHERE module_presentation_length > 200;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uc131\ubcc4 VLE \uc790\ub8cc \uc0ac\uc6a9 \ubd84\uc11d\ud558\uace0 \uc131\ubcc4, VLE \uc790\ub8cc \uc0ac\uc6a9\ud69f\uc218\ub97c \uc870\ud68c", "accept": "SELECT studentinfo.gender, COUNT(studentvle.id_site) AS total_interactions FROM studentvle INNER JOIN studentinfo ON studentvle.id_student = studentinfo.id_student GROUP BY studentinfo.gender ORDER BY total_interactions DESC;", "reject": "SELECT studentinfo.gender, COUNT(studentvle.id_site) AS num_of_vle_materials_used FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student GROUP BY studentinfo.gender;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc720\ud615\ubcc4\ub85c \uac00\uc7a5 \ub9ce\uc740 \ud3c9\uac00\ub97c \ubc1b\uc740 \ubaa8\ub4c8\uacfc \ud3c9\uac00\uc720\ud615\uc744 \uc2dd\ubcc4\ud558\uace0 \ud3c9\uac00 \uc720\ud615, \ubaa8\ub4c8 \ucf54\ub4dc, \ud3c9\uac00\uc218\ub97c \uc870\ud68c", "accept": "SELECT a.assessment_type, sr.code_module, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentregistration sr ON sa.id_student = sr.id_student GROUP BY a.assessment_type, sr.code_module ORDER BY assessment_count DESC LIMIT 1;", "reject": "SELECT a.assessment_type, sr.code_module, COUNT(*) AS num_assessments FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentRegistration sr ON sa.id_student = sr.id_student GROUP BY a.assessment_type, sr.code_module ORDER BY num_assessments DESC;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uc5ec\ud559\uc0dd \uc911 \ud65c\ub3d9 \uc720\ud615\uc774 glossary\uc778 \ud559\uc0dd\uc744 \ucc3e\uc73c\uc2dc\uc624", "accept": "SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' AND vle.activity_type = 'glossary';", "reject": "SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site WHERE studentvle.id_student IN ( SELECT id_student FROM studentvle WHERE id_site IN ( SELECT id_site FROM vle WHERE activity_type = 'glossary') ) AND studentvle.id_student IN ( SELECT id_student FROM studentvle WHERE id_site IN ( SELECT id_site FROM vle WHERE activity_type = 'glossary') ) AND studentvle.id_student IN ( SELECT id_student FROM studentvle WHERE id_site IN ( SELECT id_site FROM vle WHERE activity_type = 'glossary') ) ;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud574 \ucd5c\uace0 \ud559\ub825\uc774 'A Level or Equivalent'\uc778 \ud559\uc0dd\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT code_module, code_presentation, COUNT(id_student) AS a_level_count FROM studentInfo WHERE highest_education = 'A Level or Equivalent' GROUP BY code_module, code_presentation;", "reject": "SELECT code_module, code_presentation, COUNT(*) AS num_students_with_a_level_or_equivalent FROM studentInfo WHERE highest_education = 'A Level or Equivalent' GROUP BY code_module, code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ucf54\ub4dc, \uac01 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc640 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \uae38\uc774 \uc0ac\uc774\uc758 \uad00\uacc4\ub97c \ubd84\uc11d", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT code_module, code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, courses.module_presentation_length FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY code_module, code_presentation, courses.module_presentation_length;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uc5ec\ubd80\uac00 'N'\uc778 \ud559\uc0dd\ub4e4\uc758 \ucd5c\uc885 \uacb0\uacfc\uc640 \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'N' GROUP BY final_result;", "reject": "SELECT disability, final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'N' GROUP BY disability, final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \uacfc\uc815 \ubaa8\ub4c8(BBB)\uc5d0 \ub4f1\ub85d\ub41c \ud559\uc0dd\ub4e4 \uc911 \uc7a5\uc560\ub97c \uc120\uc5b8\ud55c \ud559\uc0dd\ub4e4\uc758 \ucd5c\uc885 \uc131\uc801\uc744 \ud655\uc778\ud558\uace0 \ud559\uc0dd, \uc131\ubcc4, \uc7a5\uc560\uc5ec\ubd80, \ucd5c\uc885 \uc131\uc801\uc744 \uc870\ud68c", "accept": "SELECT si.id_student, si.gender, si.disability, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.disability = 'Y' AND c.code_module = 'BBB';", "reject": "SELECT s.id_student, s.gender, s.disability, s.final_result FROM studentInfo s JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND s.disability = 'Y';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "Withdrawn \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc5f0\ub839\ub300 \ubcc4\ub85c \uc5b4\ub5a4 \uc218\uc5c5\uc744 \ub9ce\uc774 \ub4e3\ub294\uc9c0 \ubcf4\uace0\uc2f6\uc5b4", "accept": "SELECT age_band, code_module, COUNT(*) AS num_students FROM studentinfo GROUP BY age_band, code_module ORDER BY age_band, num_students DESC;", "reject": "SELECT s.age_band, c.code_module, COUNT(*) AS num_students FROM studentInfo s JOIN courses c ON s.code_module = c.code_module GROUP BY s.age_band, c.code_module ORDER BY num_students DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 \ud3c9\uade0 \ub4f1\ub85d \uc77c\uc218\ub97c \uacc4\uc0b0", "accept": "SELECT AVG(date_registration) AS average_registration_days FROM studentRegistration;", "reject": "SELECT AVG(date_registration) AS avg_registration_days FROM studentregistration;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ud2b9\uc815 \ud559\uc0dd(25997)\uc774 \uc218\uac15\ud55c \uacfc\ubaa9 \uc911 \uc7ac\uc218\uac15\ud55c \uacfc\ubaa9", "accept": "SELECT code_module, code_presentation FROM studentInfo WHERE id_student = 25997 AND num_of_prev_attempts > 0;", "reject": "SELECT DISTINCT code_module FROM studentInfo WHERE id_student = 25997 AND num_of_prev_attempts > 0;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "A Level \ub610\ub294 \ud574\ub2f9 \ud559\uc704'\ub97c \uac00\uc9c4 \ud559\uc0dd\uc774 \uac70\uc8fc\ud558\ub294 \uc9c0\uc5ed\uba85 \uc870\ud68c", "accept": "SELECT DISTINCT region FROM studentInfo WHERE highest_education = 'A Level or Equivalent';", "reject": "SELECT DISTINCT region FROM studentInfo WHERE highest_education IN ('A Level', 'Higher Education');", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub098\uc774\ub300\uac00 0-35\uc138\uc774\uace0 \ud559\uc810\uc774 120 \uc774\uc0c1\uc778 \ud559\uc0dd\ub4e4\uc758 \ucd5c\uc885 \uacb0\uacfc\uc640 \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE age_band = '0-35' AND studied_credits >= 120 GROUP BY final_result;", "reject": "SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE age_band = '0-35' AND studied_credits >= 120 GROUP BY final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uace0 \ud559\ub825 \ubcc4 \ud559\uc0dd \uc218\uc640 \ud3c9\uade0 \uc810\uc218, \uac00\uc7a5 \ub9ce\uc774 \ud55c \ud65c\ub3d9 \uc720\ud615", "accept": "SELECT external_studentinfo.highest_education, COUNT(*) AS num_students, AVG(external_studentassessment.score) AS average_score, vle.activity_type AS most_common_activity FROM studentinfo AS external_studentinfo JOIN studentassessment AS external_studentassessment ON external_studentinfo.id_student = external_studentassessment.id_student JOIN assessments AS external_assessments ON external_studentassessment.id_assessment = external_assessments.id_assessment JOIN studentvle AS external_studentvle ON external_studentinfo.id_student = external_studentvle.id_student JOIN vle ON external_studentvle.id_site = vle.id_site GROUP BY external_studentinfo.highest_education, vle.activity_type HAVING COUNT(*) = (SELECT COUNT(*) AS activity_count FROM studentinfo AS sub_studentinfo JOIN studentassessment AS sub_studentassessment ON sub_studentinfo.id_student = sub_studentassessment.id_student JOIN assessments AS sub_assessments ON sub_studentassessment.id_assessment = sub_assessments.id_assessment JOIN studentvle AS sub_studentvle ON sub_studentinfo.id_student = sub_studentvle.id_student JOIN vle AS sub_vle ON sub_studentvle.id_site = sub_vle.id_site WHERE sub_studentinfo.highest_education = external_studentinfo.highest_education GROUP BY sub_studentinfo.highest_education, sub_vle.activity_type ORDER BY activity_count DESC LIMIT 1);", "reject": "SELECT highest_education, COUNT(*) AS student_count, AVG(score) AS avg_score, activity_type FROM studentInfo JOIN studentAssessment USING (id_student) JOIN assessments USING (code_module, code_presentation) JOIN studentVle USING (code_module, code_presentation, id_student) JOIN vle USING (code_module, code_presentation) GROUP BY highest_education, activity_type ORDER BY student_count DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc131\ubcc4\uc5d0 \ub530\ub978 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 VLE \uc790\ub8cc \ud074\ub9ad \uc218\ub97c \uc870\ud68c", "accept": "SELECT gender, AVG(v.sum_click) AS avg_clicks FROM studentInfo s JOIN studentVle v ON s.id_student = v.id_student GROUP BY gender;", "reject": "SELECT studentinfo.gender, AVG(studentvle.sum_click) AS avg_clicks FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \ubaa8\ub4e0 \ud3c9\uac00 \uc720\ud615\uc5d0 \ucc38\uc5ec\ud55c \ud559\uc0dd\uc758 \uc218\ub97c \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(DISTINCT studentregistration.id_student) AS num_students_with_all_assessment_types FROM studentregistration INNER JOIN assessments ON studentregistration.code_module = assessments.code_module AND studentregistration.code_presentation = assessments.code_presentation LEFT JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student AND assessments.id_assessment = studentAssessment.id_assessment GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS students_with_all_assessment_types FROM studentregistration sr JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ub4f1\ub85d \ucde8\uc18c\ub41c \ud559\uc0dd \uc218\uac00 20\uba85\uc744 \ucd08\uacfc\ud558\ub294 \ubaa8\ub4e0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration WHERE studentregistration.date_unregistration IS NOT NULL GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING COUNT(studentregistration.id_student) > 20;", "reject": "SELECT sr.code_module, sr.code_presentation, COUNT(sr.id_student) AS num_cancellations FROM studentregistration sr WHERE sr.date_unregistration IS NOT NULL GROUP BY sr.code_module, sr.code_presentation HAVING COUNT(sr.id_student) > 20;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ud559\uc0dd \ubcc4 \uc218\uc5c5 \ud3c9\uac00\uacb0\uacfc\uac00 50\uc774\uc0c1\uc778 \ud559\uc0dd \uc218", "accept": "SELECT COUNT(DISTINCT id_student) AS num_students_over_50 FROM studentAssessment WHERE score >= 50;", "reject": "SELECT COUNT(DISTINCT id_student) AS num_students_with_score_ge_50 FROM studentAssessment WHERE score >= 50;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ud2b9\uc815 \ud559\uc0dd(26677)\uc774 \ub4f1\ub85d\ud55c \ubaa8\ub4e0  \ubaa8\ub4c8\ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\uacfc \ud574\ub2f9 \ucd5c\uc885 \uacb0\uacfc", "accept": "SELECT si.code_module, si.code_presentation, si.final_result FROM studentInfo si WHERE id_student = \"26677\";", "reject": "SELECT code_module, code_presentation, final_result FROM studentInfo WHERE id_student = 26677;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd \uc5f0\ub839\ub300\uc640 \ud559\uc0dd \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud074\ub9ad \ud69f\uc218 \uc870\ud68c", "accept": "SELECT s.age_band, AVG(sv.sum_click) AS avg_clicks FROM studentInfo s JOIN studentVle sv ON s.id_student = sv.id_student GROUP BY s.age_band;", "reject": "SELECT studentinfo.age_band, AVG(studentvle.sum_click) AS avg_clicks FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd \uc911\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc740 \ub2e4\ub978 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ub41c \ud559\uc0ddID\uc640 \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT si.id_student, COUNT(DISTINCT si.code_module) AS distinct_module_count FROM studentInfo si WHERE si.disability = 'Y' GROUP BY si.id_student ORDER BY distinct_module_count DESC LIMIT 1;", "reject": "SELECT id_student, COUNT(DISTINCT code_module) AS num_modules FROM studentInfo WHERE disability = 'Y' GROUP BY id_student ORDER BY num_modules DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ubcc4 \ucd5c\uc885 \uacb0\uacfc\uac00 fail\uc778 \ud559\uc0dd\uc758 \ud65c\ub3d9 \uc720\ud615\uc758 \ud69f\uc218\ub97c \uc54c\uace0 \uc2f6\uc5b4", "accept": "SELECT studentinfo.code_module, vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation WHERE studentinfo.final_result = 'fail' GROUP BY studentinfo.code_module, vle.activity_type;", "reject": "SELECT code_module, activity_type, COUNT(*) AS activity_count FROM studentInfo JOIN vle ON studentInfo.code_module = vle.code_module AND studentInfo.code_presentation = vle.code_presentation WHERE final_result = 'Fail' GROUP BY code_module, activity_type;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud574 \uac01 \ud65c\ub3d9 \uc720\ud615\uc758 VLE \uc790\ub8cc\uc640 \uc0c1\ud638 \uc791\uc6a9\ud55c \uace0\uc720 \ud559\uc0dd \uc218\ub294 \uba87 \uba85", "accept": "SELECT v.code_module, v.code_presentation, v.activity_type, COUNT(DISTINCT sv.id_student) AS num_unique_students FROM vle v INNER JOIN studentvle sv ON v.id_site = sv.id_site GROUP BY v.code_module, v.code_presentation, v.activity_type;", "reject": "SELECT v.activity_type, COUNT(DISTINCT s.id_student) AS num_students FROM studentvle s JOIN vle v ON s.id_site = v.id_site GROUP BY v.activity_type;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd \ub4f1\ub85d \uc218\uac00 \uac00\uc7a5 \ub9ce\uc740 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT code_module, code_presentation, COUNT(id_student) AS num_registrations FROM studentregistration GROUP BY code_module, code_presentation ORDER BY num_registrations DESC;", "reject": "SELECT code_module, code_presentation, COUNT(id_student) AS num_students FROM studentRegistration GROUP BY code_module, code_presentation ORDER BY num_students DESC LIMIT 1;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4c8\ucf54\ub4dc, \ubaa8\ub4c8 \ubcc4 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\uc640 \ud3c9\uade0 \ud559\uc2b5 \uc810\uc218 \uc870\ud68c", "accept": "SELECT a.code_module, AVG(sa.score) AS avg_assessment_score, AVG(sa_learning.score) AS avg_learning_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment JOIN ( SELECT id_student, AVG(score) AS score FROM studentAssessment GROUP BY id_student ) sa_learning ON sa.id_student = sa_learning.id_student GROUP BY a.code_module;", "reject": "SELECT code_module, AVG(score) AS avg_assessment_score, AVG(date_submitted) AS avg_student_activity FROM assessments JOIN studentAssessment ON assessments.id_assessment = studentAssessment.id_assessment GROUP BY code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4\uc758 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\ubcc4 \ud3c9\uade0 \uc810\uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158 \ud3c9\uade0 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentRegistration sr ON si.id_student = sr.id_student AND a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentRegistration sr ON si.id_student = sr.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ub4f1\ub85d\ub41c \ud559\uc0dd\uc758 \ud3c9\uade0 \ub4f1\ub85d \ubc0f \ud0c8\ud1f4 \uae30\uac04\uc744 \uc870\ud68c", "accept": "SELECT AVG(date_registration) AS avg_registration_duration, AVG(date_unregistration) AS avg_unregistration_duration FROM studentRegistration;", "reject": "SELECT AVG(date_unregistration - date_registration) AS avg_registration_duration FROM studentRegistration;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc7a5\uc560\ub97c \uc120\uc5b8\ud55c \ud559\uc0dd\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\uc740 \ubaa8\ub4c8\uc744 \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8\uacfc \ud559\uc0dd \ube44\uc728\uc744 \uc2dd\ubcc4", "accept": "SELECT studentregistration.code_module, COUNT(CASE WHEN studentinfo.disability = 'Y' THEN 1 END) / COUNT(studentinfo.id_student) * 100 AS disability_percentage FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module ORDER BY disability_percentage DESC;", "reject": "SELECT studentregistration.code_module, COUNT(studentregistration.id_student) / (SELECT COUNT(*) FROM studentregistration WHERE code_module = studentregistration.code_module) AS student_viability_ratio FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.disability = 'Y' GROUP BY studentregistration.code_module ORDER BY student_viability_ratio DESC LIMIT 1;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \ud3c9\uac00 \uc720\ud615\uc758 \ud3c9\uade0 \uc810\uc218 \ubc0f \ud569\uaca9 \ube44\uc728 \uacc4\uc0b0\ud558\uace0 \ud3c9\uac00 \uc720\ud615, \ud3c9\uade0 \uc810\uc218, 40\uc810 \uc774\uc0c1 \ud559\uc0dd \uc218, \ucd1d \uc2dc\ub3c4 \ud69f\uc218\ub97c \uc870\ud68c ", "accept": "SELECT assessments.assessment_type, AVG(studentassessment.score) AS avg_score, COUNT(CASE WHEN studentassessment.score >= 40 THEN 1 ELSE NULL END) AS pass_count, COUNT(*) AS total_attempts FROM studentassessment INNER JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment GROUP BY assessments.assessment_type;", "reject": "SELECT a.assessment_type, AVG(sa.score) AS avg_score, COUNT(CASE WHEN sa.score >= 40 THEN 1 END) AS pass_count, COUNT(*) AS total_attempts FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY a.assessment_type;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uc9c4\ud589 \uc77c\uc218\uac00 \uac00\uc7a5 \uae34 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud3c9\uac00 \uac00\uc911\uce58\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uac00 \uac00\uc911\uce58\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(a.weight) AS avg_weight_of_longest_module FROM studentregistration sr INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation WHERE c.module_presentation_length = ( SELECT MAX(module_presentation_length) FROM courses ) GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT cr.code_module, cr.code_presentation, AVG(a.weight) AS avg_weight FROM studentRegistration cr INNER JOIN courses c ON cr.code_module = c.code_module AND cr.code_presentation = c.code_presentation INNER JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation WHERE c.module_presentation_length = (SELECT MAX(module_presentation_length) FROM courses) GROUP BY cr.code_module, cr.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)); CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc5f0\ub839\ub300 \ubcc4 \ud65c\ub3d9 \uc720\ud615\uc744 \uad6c\ud574\uc918", "accept": "SELECT studentinfo.age_band, vle.activity_type, COUNT(*) AS num_activities FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.age_band, vle.activity_type;", "reject": "SELECT studentinfo.age_band, COUNT(DISTINCT studentassessment.id_student) AS num_students FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY studentinfo.age_band;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uac00 \uc720\ud615\ubcc4 \ud3c9\uac00 \uac00\uc911\uce58 \ud569 \uc870\ud68c", "accept": "SELECT assessment_type, SUM(weight) AS total_weight FROM assessments GROUP BY assessment_type;", "reject": "SELECT assessment_type, SUM(weight) AS total_weight FROM assessments GROUP BY assessment_type;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc804\uccb4 \ud559\uc0dd\uc758 \ub4f1\ub85d\ub41c \ubaa8\ub4c8 \uc218\ub97c \uc870\ud68c", "accept": "SELECT COUNT(DISTINCT code_module) AS total_modules FROM studentRegistration;", "reject": "SELECT COUNT(DISTINCT code_module) AS total_modules FROM studentregistration;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "CCC \uc218\uc5c5\uc744 \ub4e3\ub294 \ud559\uc0dd \uc911 \ucd5c\uc885 \uacb0\uacfc\uac00 pass\uc778 \ud559\uc0dd\uc758 \ud65c\ub3d9 \uc720\ud615 \ud69f\uc218\ub97c \uc54c\uace0 \uc2f6\uc5b4", "accept": "SELECT vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation WHERE studentinfo.code_module = 'CCC' AND studentinfo.final_result = 'pass' GROUP BY vle.activity_type;", "reject": "SELECT vle.activity_type, COUNT(*) AS activity_count FROM studentInfo JOIN vle ON studentInfo.code_module = vle.code_module AND studentInfo.code_presentation = vle.code_presentation WHERE studentInfo.final_result = 'pass' AND studentInfo.code_module = 'CCC' GROUP BY vle.activity_type;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "VLE\uc758 \ud65c\ub3d9 \uc720\ud615\ubcc4 \ud3c9\uade0 \ud074\ub9ad \uc218\ub97c \uc870\ud68c", "accept": "SELECT m.activity_type, AVG(v.sum_click) AS avg_clicks FROM studentVle v JOIN vle m ON v.id_site = m.id_site GROUP BY m.activity_type;", "reject": "SELECT v.activity_type, AVG(s.sum_click) AS avg_clicks FROM studentvle s JOIN vle v ON s.id_site = v.id_site GROUP BY v.activity_type;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub450 \ubc88 \uc774\uc0c1 \ubaa8\ub4c8\uc744 \uc2dc\ub3c4\ud55c \ud559\uc0dd\ub4e4\uc758 \ubaa9\ub85d", "accept": "SELECT id_student, code_module, code_presentation FROM studentInfo WHERE num_of_prev_attempts >= 2;", "reject": "SELECT DISTINCT studentregistration.id_student FROM studentregistration GROUP BY studentregistration.id_student HAVING COUNT(studentregistration.id_student) >= 2;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \uc9c0\uc5ed\uc758 \uc9c0\uc5ed\uba85\uacfc \ud559\uc0dd\ub4e4\uc758 VLE \uc790\ub8cc \ud074\ub9ad \uc218 \ud3c9\uade0\uc744 \uc870\ud68c", "accept": "SELECT region, AVG(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) AS disability_ratio FROM studentInfo GROUP BY region;", "reject": "SELECT region, AVG(CASE WHEN studentinfo.code_module = 'MATH103' THEN studentinfo.num_of_prev_attempts END) AS avg_attempts FROM studentInfo GROUP BY region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uac00 \uc720\ud615\ubcc4 \ud3c9\uac00 \uc218\uc640 \ud574\ub2f9 \ud3c9\uac00 \uc720\ud615\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\uc640 \ucd5c\uc18c \ud3c9\uac00 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT a.assessment_type, COUNT(*) AS num_assessments, AVG(sa.score) AS avg_score, MIN(a.weight) AS min_weight FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type;", "reject": "SELECT a.assessment_type, COUNT(*) AS num_assessments, AVG(sa.score) AS avg_score, MIN(a.weight) AS min_weight FROM assessments a LEFT JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ub41c \ud559\uc0dd \uc218", "accept": "SELECT c.code_module, c.code_presentation, COUNT(si.id_student) AS student_count FROM courses c INNER JOIN studentInfo si ON c.code_module = si.code_module AND c.code_presentation = si.code_presentation GROUP BY c.code_module, c.code_presentation;", "reject": "SELECT code_module, code_presentation, COUNT(*) AS num_students FROM studentinfo GROUP BY code_module, code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ub4f1\ub85d \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud574 VLE \uc790\ub8cc\uc758 \ucd1d \ud074\ub9ad \uc218\ub97c \uc870\ud68c", "accept": "SELECT r.code_module, r.code_presentation, SUM(v.sum_click) as total_clicks FROM studentRegistration r JOIN studentVle v ON r.id_student = v.id_student GROUP BY r.code_module, r.code_presentation;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation, SUM(studentvle.sum_click) AS total_clicks FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uc5f0\ub839\ub300\uc640 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uac00 \uac00\uc911\uce58\uc758 \ud3c9\uade0 \uc870\ud68c", "accept": "SELECT s.age_band, AVG(a.weight) AS avg_weight FROM studentInfo s JOIN assessments a ON s.code_module = a.code_module AND s.code_presentation = a.code_presentation GROUP BY s.age_band;", "reject": "SELECT a.age_band, AVG(a.weight) AS avg_weight FROM assessments a JOIN studentInfo s ON a.code_module = s.code_module AND a.code_presentation = s.code_presentation GROUP BY a.age_band;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \uc5ec\ud559\uc0dd\uc774 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uc744 \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sv.date, sr.date_registration)) AS avg_learning_time_female_with_vle_activity FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(v.date) AS avg_learning_time FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle v ON si.id_student = v.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "Distinction \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd \uc911 \uc7a5\uc560 \uc5ec\ubd80\uc640 \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Distinction' GROUP BY disability;", "reject": "SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Distinction' GROUP BY disability;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "West Midlands Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'West Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'West Midlands Region' ) );", "reject": "SELECT si.id_student FROM studentinfo si INNER JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.region = 'West Midlands Region' AND si.gender = 'M' GROUP BY si.id_student HAVING AVG(sa.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'West Midlands Region' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd\ub2f9 VLE \uc790\ub8cc\uc640\uc758 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uac00 10\ud68c \ubbf8\ub9cc\uc778 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158", "accept": "SELECT sv.code_module, sv.code_presentation, AVG(sv.sum_click) AS avg_interactions_per_student FROM studentvle sv GROUP BY sv.code_module, sv.code_presentation HAVING avg_interactions_per_student < 10;", "reject": "SELECT code_module, code_presentation FROM studentvle GROUP BY code_module, code_presentation HAVING AVG(sum_click) < 10;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \uacfc\ubaa9(AAA)\uc758 \ubaa8\ub4e0 \ud3c9\uac00 \uc720\ud615\uacfc \ud574\ub2f9 \ud3c9\uade0 \uc810\uc218", "accept": "SELECT a.assessment_type, AVG(sa.score) AS average_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE a.code_module = 'AAA' AND a.code_presentation = '2013J' GROUP BY a.assessment_type;", "reject": "SELECT a.assessment_type, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uc885 \uacb0\uacfc\uac00 pass\uc778 \ud559\uc0dd\uc774 \uac00\uc7a5 \ub9ce\uc740 \uc9c0\uc5ed", "accept": "SELECT region FROM studentinfo WHERE final_result = 'pass' GROUP BY region ORDER BY COUNT(*) DESC LIMIT 1;", "reject": "SELECT region, COUNT(*) AS num_passing_students FROM studentInfo WHERE final_result = 'pass' GROUP BY region ORDER BY num_passing_students DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc774\uc804\uc5d0 \ubaa8\ub4c8\uc744 \uc2dc\ub3c4\ud558\uc9c0 \uc54a\uc740 \ud559\uc0dd\uc758 \ud3c9\uade0 \uc810\uc218\uac00 \uac00\uc7a5 \ub192\uc740 \ud3c9\uac00\uc640 \ud3c9\uade0 \uc810\uc218 \uc870\ud68c", "accept": "SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts = 0 GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;", "reject": "SELECT assessments.assessment_type, AVG(studentAssessment.score) AS average_score FROM assessments INNER JOIN studentAssessment ON assessments.id_assessment = studentAssessment.id_assessment INNER JOIN studentInfo ON studentAssessment.id_student = studentInfo.id_student INNER JOIN studentRegistration ON studentInfo.id_student = studentRegistration.id_student WHERE studentRegistration.date_unregistration IS NULL AND studentInfo.num_of_prev_attempts = 0 GROUP BY assessments.assessment_type ORDER BY average_score DESC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT AVG(score) AS avg_score FROM ( SELECT id_student, AVG(score) AS score FROM studentAssessment GROUP BY id_student ) AS student_scores;", "reject": "SELECT AVG(score) AS avg_score FROM studentAssessment;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ubaa8\ub4e0 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ub41c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ub098\uc774\ub97c \uc870\ud68c", "accept": "SELECT code_module, age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, age_band;", "reject": "SELECT age_band, AVG(age) AS avg_age FROM studentInfo GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd\uc758 \ud3c9\uade0 \uc5f0\ub839\uc774 \uac00\uc7a5 \ub192\uc740 \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uac80\uc0c9\ud558\uace0 \ud504\ub808\uc820\ud14c\uc774\uc158\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158 \ubcc4 \ud3c9\uade0 \uc5f0\ub839\uc744 \uc870\ud68c", "accept": "SELECT code_presentation, AVG(age_band) AS avg_age FROM studentinfo GROUP BY code_presentation ORDER BY avg_age DESC;", "reject": "SELECT code_presentation, AVG(age_band) AS avg_age FROM studentInfo GROUP BY code_presentation ORDER BY avg_age DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uac00 \ud3c9\uade0 \uc774\uc0c1\uc778 \ud559\uc0dd\uc758 \ud3c9\uade0 \uc810\uc218\ub97c \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud3c9\uade0 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN ( SELECT id_student, AVG(sum_click) AS avg_interaction_count FROM studentvle GROUP BY id_student HAVING AVG(sum_click) > (SELECT AVG(sum_click) FROM studentvle) ) AS high_interaction ON studentregistration.id_student = high_interaction.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student WHERE sv.sum_click > (SELECT AVG(sum_click) FROM studentvle WHERE code_module = sr.code_module AND code_presentation = sr.code_presentation) GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "Fail \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc131\ubcc4\uc5d0 \ub530\ub978 \ud3c9\uade0 \ud559\uc810", "accept": "SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY gender;", "reject": "SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc640 \ucd5c\uc885 \uacb0\uacfc \uac04\uc758 \uad00\uacc4\ub97c \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\ub3c4 \ud568\uaed8 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;", "reject": "SELECT si.code_module, si.code_presentation, AVG(sv.sum_click) AS avg_interactions, si.final_result FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle sv ON si.id_student = sv.id_student GROUP BY si.code_module, si.code_presentation, si.final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud3c9\uac00\uc720\ud615\uc774 TMA\uc778 \ud559\uc0dd \uc911 \ucd5c\uc885 \uacb0\uacfc\uac00 Pass\uc778 \ud559\uc0dd\uc744 \ucc3e\uace0 \uac01 \ud559\uc0dd\ub4e4\uc758 \ud074\ub9ad \uc218\ub97c \uad6c\ud574\uc918", "accept": "SELECT studentassessment.id_student, SUM(studentvle.sum_click) AS total_clicks FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentvle ON studentassessment.id_student = studentvle.id_student AND assessments.code_module = studentvle.code_module AND assessments.code_presentation = studentvle.code_presentation WHERE assessments.assessment_type = 'TMA' AND studentinfo.final_result = 'Pass' GROUP BY studentassessment.id_student;", "reject": "SELECT studentinfo.id_student, studentvle.sum_click FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE assessments.assessment_type = 'TMA' AND studentinfo.final_result = 'Pass';", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc77c\uc790\uac00 \uc788\ub294 \ud3c9\uac00 \uc218 \uc870\ud68c", "accept": "SELECT COUNT(*) AS num_assessments_with_date FROM assessments WHERE date IS NOT NULL;", "reject": "SELECT COUNT(*) AS assessments_with_dates FROM assessments WHERE date IS NOT NULL;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc5f0\ub839\ub300\ubcc4\ub85c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub41c \ud65c\ub3d9 \uc720\ud615\uacfc \ud574\ub2f9 \ud65c\ub3d9 \uc720\ud615\uc744 \uc0ac\uc6a9\ud558\ub294 \ud559\uc0dd\ub4e4\uc758 \ube44\uc728\uc744 \uacc4\uc0b0", "accept": "SELECT studentinfo.age_band, vle.activity_type, COUNT(*) AS activity_count, ROUND((COUNT(*) / subquery.total_students) * 100, 2) AS activity_percentage FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site JOIN (SELECT studentinfo_inner.age_band, vle_inner.activity_type, COUNT(*) AS activity_count, (SELECT COUNT(DISTINCT studentinfo_inner_inner.id_student) FROM studentinfo studentinfo_inner_inner JOIN studentvle studentvle_inner ON studentinfo_inner_inner.id_student = studentvle_inner.id_student JOIN vle vle_inner_inner ON studentvle_inner.id_site = vle_inner_inner.id_site WHERE studentinfo_inner_inner.age_band = studentinfo_inner.age_band) AS total_students FROM studentinfo studentinfo_inner JOIN studentvle ON studentinfo_inner.id_student = studentvle.id_student JOIN vle vle_inner ON studentvle.id_site = vle_inner.id_site GROUP BY studentinfo_inner.age_band, vle_inner.activity_type HAVING COUNT(*) = ( SELECT COUNT(*) FROM studentinfo studentinfo_inner_inner JOIN studentvle studentvle_inner ON studentinfo_inner_inner.id_student = studentvle_inner.id_student JOIN vle vle_inner_inner ON studentvle_inner.id_site = vle_inner_inner.id_site WHERE studentinfo_inner_inner.age_band = studentinfo_inner.age_band GROUP BY vle_inner_inner.activity_type ORDER BY COUNT(*) DESC LIMIT 1 )) AS subquery ON studentinfo.age_band = subquery.age_band AND vle.activity_type = subquery.activity_type GROUP BY studentinfo.age_band, vle.activity_type;", "reject": "SELECT studentinfo.age_band, vle.activity_type, COUNT(*) AS activity_count, COUNT(*)*100.0 / (SELECT COUNT(*) FROM studentvle WHERE studentinfo.age_band = studentvle.id_student) AS student_percentage FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.age_band, vle.activity_type ORDER BY activity_count DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \ubaa8\ub4c8(AAA)\uc5d0\uc11c \ud3c9\uade0 \uc810\uc218\uac00 40\uc810 \ubbf8\ub9cc\uc778 \ud559\uc0dd\uc758 \ube44\uc728", "accept": "SELECT si.code_module, (COUNT(sa.id_student) / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module)) AS fail_rate FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.code_module = 'AAA' AND sa.score < 40 GROUP BY si.code_module;", "reject": "SELECT COUNT(*) AS num_students, COUNT(CASE WHEN avg_score < 40 THEN 1 END) AS num_low_scores FROM ( SELECT id_student, AVG(score) AS avg_score FROM studentassessment WHERE code_module = 'AAA' GROUP BY id_student ) AS scores;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc \uc774\uc6a9\uacfc \uad00\ub828\ub41c \ud3c9\uac00 \uc810\uc218\ub97c \ubc1b\uc740 \ud559\uc0dd \uc911 \uc5ec\uc131 \ud559\uc0dd\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS female_students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(studentinfo.gender) AS female_count FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student INNER JOIN studentassessment ON studentvle.id_site = studentassessment.id_assessment INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc810\uc218\uac00 40\uc810 \ubbf8\ub9cc\uc778 \ud559\uc0dd\uc758 \ud3c9\uac00 \uc720\ud615\uacfc \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT a.assessment_type, sa.score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40;", "reject": "SELECT assessments.assessment_type, studentassessment.score FROM studentassessment INNER JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment WHERE studentassessment.score < 40;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc218\uc5c5 \ubaa8\ub4c8 \ubc0f \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \ud559\uc0dd \uc9c0\uc5ed\ubcc4\ub85c \ub4f1\ub85d\ub41c \ud559\uc0dd \uc218\uc640 \ud3c9\uade0 \uc810\uc218\ub97c \ube44\uad50", "accept": "SELECT courses.code_module, courses.code_presentation, studentinfo.region, COUNT(studentregistration.id_student) AS num_students_registered, AVG(studentassessment.score) AS average_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentregistration ON studentinfo.code_module = studentregistration.code_module AND studentinfo.code_presentation = studentregistration.code_presentation AND studentinfo.id_student = studentregistration.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY courses.code_module, courses.code_presentation, studentinfo.region ORDER BY courses.code_module, courses.code_presentation, studentinfo.region;", "reject": "SELECT r.code_module, r.code_presentation, s.region, COUNT(r.id_student) AS num_students, AVG(sa.score) AS avg_score FROM studentregistration r JOIN studentinfo s ON r.id_student = s.id_student JOIN studentassessment sa ON r.id_student = sa.id_student JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY r.code_module, r.code_presentation, s.region;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uc7a5\uc560\ub97c \uac00\uc9c4 \ud559\uc0dd\uc758 \ucd5c\uace0 \ud559\ub825 \uc218\uc900\uacfc \uadf8\uc5d0 \ub530\ub978 \ud559\uc0dd \uc218", "accept": "SELECT highest_education, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY highest_education;", "reject": "SELECT highest_education, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY highest_education;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc, \uac01 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774, VLE \uc790\ub8cc \ud65c\ub3d9 \uc720\ud615\ubcc4 \ud3c9\uade0 \ud65c\ub3d9 \uae30\uac04, \ud559\uc0dd\ub4e4\uc758 \ucd5c\ub300 \ub4f1\ub85d\uc77c \uc870\ud68c", "accept": "SELECT c.code_module, AVG(c.module_presentation_length) AS avg_presentation_length, v.activity_type, AVG(v.week_to - v.week_from) AS avg_activity_duration FROM courses c JOIN vle v ON c.code_module = v.code_module AND c.code_presentation = v.code_presentation JOIN studentRegistration r ON c.code_module = r.code_module AND c.code_presentation = r.code_presentation GROUP BY c.code_module, v.activity_type;", "reject": "SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length, activity_type, AVG(week_to - week_from) AS avg_activity_duration FROM courses JOIN vle ON courses.code_module = vle.code_module AND courses.code_presentation = vle.code_presentation JOIN ( SELECT code_module, code_presentation, MAX(date_registration) AS max_registration_date FROM studentregistration GROUP BY code_module, code_presentation ) AS student_max_reg ON courses.code_module = student_max_reg.code_module AND courses.code_presentation = student_max_reg.code_presentation GROUP BY code_module, activity_type;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \ubaa8\ub4e0 \ud3c9\uac00\uc758 \uac00\uc911\uce58 \ud569\uc774 100\uc774 \uc544\ub2cc \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation FROM studentregistration sr INNER JOIN ( SELECT code_module, code_presentation, SUM(weight) AS total_weight FROM assessments GROUP BY code_module, code_presentation HAVING total_weight <> 100 ) AS subquery ON sr.code_module = subquery.code_module AND sr.code_presentation = subquery.code_presentation;", "reject": "SELECT code_module, code_presentation FROM studentRegistration sr INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY code_module, code_presentation HAVING SUM(a.weight) <> 100;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \uc5ec\ud559\uc0dd\uc758 \ube44\uc728\uc744 \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, VLE\ub97c \uc774\uc6a9\ud55c \uc5ec\ud559\uc0dd\uc758 \ube44\uc728\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, SUM(CASE WHEN si.gender = 'F' THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT sv.id_student) AS female_ratio FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student INNER JOIN studentInfo si ON sv.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, (COUNT(DISTINCT sv.id_student) / (COUNT(DISTINCT si.id_student) - COUNT(si.disability))) * 100 AS female_vle_usage_rate FROM studentregistration sr LEFT JOIN studentinfo si ON sr.id_student = si.id_student LEFT JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4c8\uc744 Pass \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd \uc218\uac00 100\uba85\uc744 \ucd08\uacfc\ud558\ub294 \ubaa8\ub4e0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Pass' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING COUNT(studentinfo.id_student) > 100;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentInfo ON studentregistration.id_student = studentInfo.id_student WHERE studentInfo.final_result = 'Pass' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING COUNT(studentregistration.id_student) > 100;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uacfc \ubaa8\ub4c8 \uc815\ubcf4\ub97c \uacb0\ud569\ud558\uc5ec \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud3c9\uade0 \ud559\uc2b5 \uc2dc\uac04\uc744 \uc870\ud68c", "accept": "SELECT courses.code_module, courses.code_presentation, AVG(DATEDIFF(studentvle.date, studentregistration.date_registration)) AS avg_learning_time FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY courses.code_module, courses.code_presentation;", "reject": "SELECT courses.code_module, courses.code_presentation, AVG(studentvle.sum_click) AS avg_learning_time FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student INNER JOIN courses ON studentregistration.code_module = courses.code_module AND studentregistration.code_presentation = courses.code_presentation GROUP BY courses.code_module, courses.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \uc9c0\uc5ed\uba85\uacfc \uc9c0\uc5ed\uc758 \ud559\uc2b5 \uae30\uac04\uc744 \uc870\ud68c", "accept": "SELECT s.region, AVG(c.module_presentation_length) AS avg_length FROM courses c JOIN studentInfo s ON c.code_presentation = s.code_presentation GROUP BY s.region;", "reject": "SELECT r.region, AVG(c.module_presentation_length) AS avg_learning_duration FROM studentInfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation JOIN studentvle si_vle ON si.id_student = si_vle.id_student JOIN vle vle ON si_vle.id_site = vle.id_site JOIN regions r ON si.region = r.code GROUP BY r.region;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud574 \ud2b9\uc815\ud3c9\uac00\uc720\ud615(TMA)\uc758 \ud3c9\uade0 \uc810\uc218", "accept": "SELECT a.code_module, a.code_presentation, AVG(sa.score) AS average_exam_score FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.assessment_type = 'TMA' GROUP BY a.code_module, a.code_presentation;", "reject": "SELECT code_module, code_presentation, AVG(score) AS avg_score FROM assessments JOIN studentassessment ON assessments.id_assessment = studentassessment.id_assessment WHERE assessments.assessment_type = 'TMA' GROUP BY code_module, code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "Distinction \ub4f1\uae09\uc744 \ubc1b\uc740 \uc5f0\ub839\ub300\uc640 \uc5f0\ub839\ub300 \ubcc4 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\uc758 \ube44\uc728\uc774 10% \ubbf8\ub9cc\uc774\uace0 \ud559\uc0dd\uc758 \ud3c9\uade0 \uc774\uc804 \uc2dc\ub3c4 \ud69f\uc218\uac00 2\ud68c \ubbf8\ub9cc\uc778 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (SUM(CASE WHEN studentinfo.disability = 'Y' THEN 1 ELSE 0 END) / COUNT(studentinfo.id_student)) < 0.1 AND AVG(studentinfo.num_of_prev_attempts) < 2;", "reject": "SELECT sr.code_module, sr.code_presentation FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(si.id_student) / (SELECT COUNT(*) FROM studentInfo WHERE disability = 'Y')) < 0.1 AND AVG(si.num_of_prev_attempts) < 2;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\uc640 \ud3c9\uac00 \uc77c\uc790\uac00 \uc788\ub294 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uac00 \uc77c\uc790\uc758 \ud3c9\uade0 \uc870\ud68c", "accept": "SELECT code_presentation, AVG(date) AS avg_assessment_date FROM assessments WHERE date IS NOT NULL GROUP BY code_presentation;", "reject": "SELECT code_presentation, AVG(date) AS avg_date FROM assessments GROUP BY code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac15\uc88c\uc5d0 \ub4f1\ub85d\ud558\uc9c0 \uc54a\uc740 \ud559\uc0dd\uc758 \ube44\uc728\uc774 10%\ub97c \ucd08\uacfc\ud558\ub294 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \ub098\uc5f4", "accept": "SELECT sr.code_module, sr.code_presentation, (COUNT(sr.date_unregistration) * 100.0 / COUNT(si.id_student)) AS unregistration_percentage FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation HAVING unregistration_percentage > 10;", "reject": "SELECT sr.code_module, sr.code_presentation, (COUNT(si.id_student) - COUNT(sr.id_student)) / COUNT(si.id_student) AS unregistered_percentage FROM studentregistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(si.id_student) - COUNT(sr.id_student)) / COUNT(si.id_student) > 0.1;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd \ub4f1\ub85d\uacfc \ub4f1\ub85d \ucde8\uc18c \uc0ac\uc774\uc758 \ucc28\uc774\ub97c \ud1b5\ud574 \ud3c9\uade0 \ub4f1\ub85d\uae30\uac04 \uacc4\uc0b0\ud558\uc5ec \uac00\uc7a5 \uae34 \ub4f1\ub85d\uae30\uac04\uc744 \uac00\uc9c4 \uc0c1\uc704 5\uac1c \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sr.date_unregistration - sr.date_registration) AS avg_registration_duration FROM studentregistration sr GROUP BY sr.code_module, sr.code_presentation ORDER BY avg_registration_duration DESC LIMIT 5;", "reject": "SELECT code_module, code_presentation, AVG(date_unregistration - date_registration) AS avg_registration_duration FROM studentregistration GROUP BY code_module, code_presentation ORDER BY avg_registration_duration DESC LIMIT 5;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ud2b9\uc815 \ubaa8\ub4c8(AAA)\uc5d0\uc11c \uac01 \ud3c9\uac00 \uc720\ud615\ubcc4 \ud3c9\uade0 \uc810\uc218", "accept": "SELECT a.assessment_type, AVG(sa.score) AS average_score FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;", "reject": "SELECT a.assessment_type, AVG(sa.score) AS average_score FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uac01 \ud559\uc0dd\uc758 \ud559\uc0dd\ucf54\ub4dc\uc640 \ud3c9\uade0 VLE \uc790\ub8cc \ud074\ub9ad \uc218 \uc870\ud68c", "accept": "SELECT id_student, AVG(sum_click) AS avg_clicks FROM studentVle GROUP BY id_student;", "reject": "SELECT id_student, AVG(sum_click) AS avg_clicks FROM studentvle GROUP BY id_student;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ub300\ud559 \ud559\ub825\uc744 \uac00\uc9c4 \uc7a5\uc560 \ud559\uc0dd\ub4e4 \uc911 \ud559\uc810 \ud3c9\uade0\uc774 90\ubcf4\ub2e4 \ub192\uc740 \uc9c0\uc5ed\uba85\uacfc \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'Y' GROUP BY region HAVING AVG(studied_credits) > 90;", "reject": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE qualification' AND disability = 'Y' GROUP BY region HAVING AVG(studied_credits) > 90;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ucd5c\uc885 \uacb0\uacfc fail\uc778 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc810\uc218", "accept": "SELECT AVG(score) AS average_score FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE final_result = 'fail' );", "reject": "SELECT AVG(sa.score) AS average_score FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student WHERE si.final_result = 'fail';", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "IMD \ubc34\ub4dc\ubcc4 \ud3c9\uade0 \ub4f1\ub85d \uae30\uac04\uc774 \uc591\uc218\uc778 \uacbd\uc6b0 IMD \ubc34\ub4dc\uc640 \ud3c9\uade0 \ub4f1\ub85d \uae30\uac04\uc744 \uc870\ud68c", "accept": "SELECT s.imd_band, AVG(r.date_unregistration - r.date_registration) AS avg_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.imd_band HAVING AVG(r.date_unregistration - r.date_registration) > 0;", "reject": "SELECT studentinfo.imd_band, AVG(studentregistration.date_registration) AS avg_registration_duration FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student GROUP BY studentinfo.imd_band HAVING AVG(studentregistration.date_registration) > 0;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ubaa8\ub4c8\uc5d0 \uc18d\ud55c \ud559\uc0dd \uc911 \ud2b9\uc815 \uc9c0\uc5ed\uc5d0 \uac70\uc8fc\ud558\ub294 \ud559\uc0dd\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\uc740\uc21c \ub300\ub85c \uc815\ub82c", "accept": "SELECT code_module, region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module) AS percentage FROM studentInfo si GROUP BY code_module, region ORDER BY percentage DESC;", "reject": "SELECT code_module, code_presentation, region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = s.code_module AND code_presentation = s.code_presentation) AS student_percentage FROM studentInfo s GROUP BY code_module, code_presentation, region ORDER BY student_percentage DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc5c6\ub294 \ud559\uc0dd\ub4e4 \uc911 Distinction \ub4f1\uae09\uc73c\ub85c \uc218\ub8cc\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Distinction' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Distinction' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uac00 \uc77c\uc790\uac00 \uc788\ub294 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uac00 \uc77c\uc790\uc640 \ud574\ub2f9 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218 \uc870\ud68c", "accept": "SELECT a.code_presentation, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.date IS NOT NULL GROUP BY a.code_presentation;", "reject": "SELECT a.code_presentation, a.date, AVG(sa.score) AS avg_score FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation, a.date;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ubaa8\ub4c8\uc744 \ud55c \ubc88 \uc774\uc0c1 \uc2dc\ub3c4\ud55c \uc801\uc774 \uc788\ub294 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc810\uc218\ub97c \ud3c9\uac00 \uc720\ud615\ubcc4\ub85c \uacc4\uc0b0\ud558\uace0 \ud3c9\uade0 \uc810\uc218\uac00 \uac00\uc7a5 \ub0ae\uc740 \ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uade0 \uc810\uc218 \uc870\ud68c", "accept": "SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts > 0 GROUP BY a.assessment_type ORDER BY avg_score ASC LIMIT 1;", "reject": "SELECT assessments.assessment_type, AVG(studentassessment.score) AS avg_score FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment WHERE studentinfo.num_of_prev_attempts > 0 GROUP BY assessments.assessment_type ORDER BY avg_score ASC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc131\ubcc4\uc5d0 \ub530\ub978 \ud3c9\uade0 \ub4f1\ub85d \uae30\uac04\uc774 \uc591\uc218\uc778 \uacbd\uc6b0 \uc131\ubcc4\uacfc \ud3c9\uade0 \ub4f1\ub85d \uae30\uac04 \uc870\ud68c", "accept": "SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_registration_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender HAVING AVG(r.date_unregistration - r.date_registration) > 0;", "reject": "SELECT studentinfo.gender, AVG(studentregistration.date_registration) AS avg_registration_duration FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentinfo.gender HAVING AVG(studentregistration.date_registration) > 0;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ubaa8\ub4c8 \ubcc4 \ud3c9\uac00 \uc218\uc640 \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud3c9\uac00 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT code_module, COUNT(*) AS num_assessments, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;", "reject": "SELECT code_module, COUNT(*) AS num_assessments, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc2a4\ucf54\ud2c0\ub79c\ub4dc \uc9c0\uc5ed\uc5d0\uc11c Withdrawn \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 50\ubcf4\ub2e4 \ub192\uc740 \uacbd\uc6b0 \uc5f0\ub839\ub300\uc640 \ud574\ub2f9 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' AND region = 'Scotland' GROUP BY age_band HAVING AVG(studied_credits) > 50;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE region = 'Scotland' AND final_result = 'Withdrawn' GROUP BY age_band HAVING AVG(studied_credits) > 50;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc8fc\ub2f9 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \uc218\uac00 \uac00\uc7a5 \ub192\uc740 \ubaa8\ub4c8\uacfc \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9\ud69f\uc218\ub97c \uc870\ud68c", "accept": "SELECT studentregistration.code_module, AVG(studentvle.sum_click) AS avg_interactions_per_week FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module ORDER BY avg_interactions_per_week DESC;", "reject": "SELECT sr.code_module, AVG(sv.sum_click) AS avg_interactions_per_week FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module ORDER BY avg_interactions_per_week DESC LIMIT 1;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4\uc758 \ucd5c\uc885 \uacb0\uacfc \ubd84\ud3ec", "accept": "SELECT final_result, COUNT(id_student) AS result_count FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;", "reject": "SELECT final_result, COUNT(*) AS count FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\ub97c \uac00\uc9c4 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT r.code_module, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y'", "reject": "SELECT AVG(studied_credits) AS average_credits FROM studentInfo WHERE disability = 'Y';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \uacfc\ubaa9\ubcc4\ub85c \uac00\uc7a5 \ub192\uc740 \uac00\uc911\uce58\ub97c \uac00\uc9c4 \ud3c9\uac00", "accept": "SELECT code_module, code_presentation, MAX(weight) AS max_weight FROM assessments GROUP BY code_module, code_presentation;", "reject": "SELECT code_module, code_presentation, id_assessment, assessment_type, weight FROM assessments GROUP BY code_module, code_presentation, id_assessment, assessment_type ORDER BY weight DESC;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub4f1\ub85d\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 60\ubcf4\ub2e4 \ub192\uc740 \uacbd\uc6b0 \uc5f0\ub839\ub300\uc640 \ud574\ub2f9 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.age_band HAVING AVG(studied_credits) > 60;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo JOIN studentRegistration ON studentInfo.id_student = studentRegistration.id_student GROUP BY age_band HAVING AVG(studied_credits) > 60;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc131\ubcc4\uc5d0 \ub530\ub978 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ub098\uc774\uc640 \ucd5c\ub300 \ud559\ub825 \uc218\uc900\uc744 \uc870\ud68c", "accept": "SELECT gender, AVG(age_band) AS avg_age, MAX(highest_education) AS max_education FROM studentInfo GROUP BY gender;", "reject": "SELECT gender, AVG(age_band) AS avg_age, MAX(highest_education) AS max_education FROM studentInfo GROUP BY gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\uc640 \ud504\ub808\uc820\ud14c\uc774\uc158 \ubcc4 \ud3c9\uade0 \uc9c4\ud589\uae30\uac04 \uc870\ud68c", "accept": "SELECT code_presentation, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_presentation;", "reject": "SELECT code_presentation, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_presentation;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\uc640 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\ubcc4 \ud559\uc0dd \uc218 \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \ubc18\ud658", "accept": "SELECT code_module, code_presentation, COUNT(*) AS num_students FROM studentRegistration GROUP BY code_module, code_presentation ORDER BY num_students DESC;", "reject": "SELECT sr.code_module, sr.code_presentation, COUNT(*) AS student_count FROM studentRegistration sr GROUP BY sr.code_module, sr.code_presentation ORDER BY student_count DESC;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd \uc911 \ucd5c\uadfc\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc640 \ucd5c\uadfc \uc81c\ucd9c\uc77c \uc0ac\uc774\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubd84\uc11d\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218, \ucd5c\uadfc \uc81c\ucd9c\uc77c\uc744 \uc870\ud68c", "accept": "SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, MAX(studentvle.date) AS recent_interaction_date FROM studentregistration JOIN studentvle ON studentregistration.id_student = studentvle.id_student JOIN ( SELECT id_student, MAX(date) AS max_date FROM studentvle GROUP BY id_student ) AS sq ON studentvle.id_student = sq.id_student AND studentvle.date = sq.max_date GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, MAX(sr.date_unregistration) AS recent_submission_date FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student WHERE sv.id_site IS NOT NULL GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \ud559\uc0dd\uc758 \ub4f1\ub85d\ub41c \ubaa8\ub4e0 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT id_student, AVG(score) AS avg_score FROM studentAssessment GROUP BY id_student;", "reject": "SELECT sa.id_student, AVG(sa.score) AS avg_score FROM studentAssessment sa GROUP BY sa.id_student;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ud559\uc0dd\ub2f9 \ud3c9\uade0 VLE \uc0c1\ud638 \uc791\uc6a9 \uc218\uac00 \uac00\uc7a5 \ub0ae\uc740 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud3c9\uade0 VLE \uc0c1\ud638 \uc791\uc6a9 \uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sve.sum_click) AS avg_clicks_per_student FROM studentvle sve INNER JOIN studentinfo si ON si.id_student = sve.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation ORDER BY avg_clicks_per_student ASC LIMIT 1;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation ORDER BY avg_interaction_count ASC LIMIT 1;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ucd5c\uc885 \uacb0\uacfc fail\uc778 \ud559\uc0dd \uc911 \uc810\uc218\uac00 \ud3c9\uade0 \uc774\uc0c1\uc778 \ud559\uc0dd\uc744 \uad6c\ud574\uc918", "accept": "SELECT studentassessment.id_student, studentassessment.score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'fail' AND studentassessment.score > ( SELECT AVG(score) FROM studentassessment WHERE id_student = studentinfo.id_student );", "reject": "SELECT si.id_student, si.gender, si.region, si.highest_education, si.imd_band, si.age_band, si.num_of_prev_attempts, si.studied_credits, si.disability, si.final_result, AVG(sa.score) AS average_score FROM studentinfo si INNER JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'fail' GROUP BY si.id_student HAVING AVG(sa.score) >= (SELECT AVG(score) FROM studentassessment);", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed\uba85\uacfc \uc9c0\uc5ed\ubcc4 Withdrawn \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY region;", "reject": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ud65c\ub3d9 \uc720\ud615\uacfc \ud65c\ub3d9 \uc720\ud615\ubcc4\ub85c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub41c \uae30\uac04 \uc870\ud68c", "accept": "SELECT activity_type, MAX(week_to - week_from) AS max_duration FROM vle GROUP BY activity_type;", "reject": "SELECT activity_type, MAX(week_to - week_from) AS max_week FROM vle GROUP BY activity_type ORDER BY max_week DESC;", "context": "CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc \uc774\uc6a9\uc77c\uacfc \ud3c9\uac00 \uc81c\ucd9c\uc77c\uc758 \ucc28\uc774\ub97c \uacc4\uc0b0\ud558\uc5ec \ud559\uc2b5 \uc2dc\uac04\uc744 \ud655\uc778\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud559\uc2b5\uc2dc\uac04\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sa.date_submitted - sv.date) AS avg_learning_time FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentassessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uac00 150\ubcf4\ub2e4 \ud070 \uacbd\uc6b0 \ud3c9\uade0 \uae38\uc774\ub97c \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \ubc18\ud658", "accept": "SELECT code_module, AVG(module_presentation_length) AS avg_length FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) > 150 ORDER BY avg_length DESC;", "reject": "SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) > 150 ORDER BY avg_presentation_length DESC;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "Distinction \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc131\ubcc4\uc5d0 \ub530\ub978 \ud3c9\uade0 \ud559\uc810", "accept": "SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY gender;", "reject": "SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud574 \ud3c9\uade0 \uac00\uc911 \uc810\uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uade0 \uac00\uc911 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT code_module, code_presentation, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module, code_presentation;", "reject": "SELECT code_module, code_presentation, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module, code_presentation;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \uc5f0\ub839\ub300\ubcc4\ub85c \uc790\ub8cc \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\uc758 \ud3c9\uade0\uc744 \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \ubc18\ud658", "accept": "SELECT sr.code_module, si.age_band, AVG(v.sum_click) AS avg_clicks FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle v ON si.id_student = v.id_student GROUP BY sr.code_module, si.age_band ORDER BY avg_clicks DESC;", "reject": "SELECT studentinfo.code_module, studentinfo.age_band, AVG(studentvle.sum_click) AS avg_clicks FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.code_module, studentinfo.age_band ORDER BY avg_clicks DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uc7a5\uc560\ub97c \uc120\uc5b8\ud55c \ubaa8\ub4e0 \ud559\uc0dd\uc758 ID,\uc131\ubcc4,\uc7a5\uc560\uc5ec\ubd80,\ucd1d\ud559\uc810,\ucd5c\uc885\uc131\uc801 \ub9ac\uc2a4\ud2b8\uc640 \ucd5c\uc885\uc131\uc801 \uae30\uc900\uc73c\ub85c \uc815\ub82c", "accept": "SELECT si.id_student, si.gender, si.disability, SUM(si.studied_credits) AS total_credits, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.disability = 'Y' GROUP BY si.id_student, si.gender, si.disability, si.final_result ORDER BY si.final_result;", "reject": "SELECT si.id_student, si.gender, si.disability, si.studied_credits, si.final_result FROM studentInfo si INNER JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation ORDER BY si.final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc \uc774\uc6a9\uacfc \uad00\ub828\ub41c \ud3c9\uac00 \uc810\uc218\ub97c \ubc1b\uc740 \ud559\uc0dd\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud559\uc0dd\uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS num_students_with_vle_and_assessment FROM studentRegistration sr INNER JOIN studentVle sv ON sr.id_student = sv.id_student INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ud559\uc0dd\uc758 \uc131\ubcc4 \ubc0f \uc7a5\uc560 \uc5ec\ubd80\uc5d0 \ub530\ub978 \ud3c9\uade0 \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT gender, disability, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY gender, disability;", "reject": "SELECT gender, disability, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY gender, disability;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub0a8\ud559\uc0dd\uc758 \ud3c9\uade0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\ub97c \uad6c\ud574\uc918", "accept": "SELECT AVG(courses.module_presentation_length) AS average_module_presentation_length FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module WHERE studentinfo.gender = 'M';", "reject": "SELECT AVG(courses.module_presentation_length) AS avg_module_presentation_length FROM studentInfo JOIN courses ON studentInfo.code_module = courses.code_module AND studentInfo.code_presentation = courses.code_presentation WHERE studentInfo.gender = 'M';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc, \uac01 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774, \ud3c9\uac00 \uc720\ud615\ubcc4 \ud3c9\uade0 \uac00\uc911\uce58, \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ub098\uc774 \uc870\ud68c", "accept": "SELECT c.code_module, AVG(c.module_presentation_length) AS avg_presentation_length, a.assessment_type, AVG(a.weight) AS avg_weight, AVG(i.age_band) AS avg_age FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation JOIN studentInfo i ON c.code_module = i.code_module AND c.code_presentation = i.code_presentation GROUP BY c.code_module, a.assessment_type;", "reject": "SELECT courses.code_module, AVG(courses.module_presentation_length) AS avg_presentation_length, assessments.assessment_type, AVG(assessments.weight) AS avg_weight, studentinfo.age_band, AVG(studentinfo.age_band) AS avg_age FROM courses JOIN assessments ON courses.code_module = assessments.code_module JOIN studentinfo ON courses.code_module = studentinfo.code_module GROUP BY courses.code_module, assessments.assessment_type, studentinfo.age_band;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed\ubcc4\ub85c \uac00\uc7a5 \ub9ce\uc740 \ud559\uc0dd\uc774 \uc218\uac15\ud558\ub294 \ubaa8\ub4c8\uacfc \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \uc810\uc218", "accept": "SELECT si.region, SUBSTRING_INDEX(GROUP_CONCAT(c.code_module ORDER BY num_students_taking DESC), ',', 1) AS most_popular_module, MAX(num_students_taking) AS enrollment_count, AVG(sa.score) AS average_score FROM (SELECT region, code_module, COUNT(*) AS num_students_taking FROM studentinfo GROUP BY region, code_module) AS s JOIN courses c ON s.code_module = c.code_module JOIN studentinfo si ON s.region = si.region JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY si.region;", "reject": "SELECT code_module, AVG(score) AS avg_score FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment GROUP BY code_module ORDER BY COUNT(*) DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc5c6\ub294 \ud559\uc0dd\ub4e4\uc758 \uc9c0\uc5ed\uba85\uacfc \uc9c0\uc5ed\ubcc4 \ud559\uc0dd\uc218 \uc870\ud68c", "accept": "SELECT region, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'N' GROUP BY region;", "reject": "SELECT region, COUNT(*) AS student_count FROM studentInfo WHERE disability = 'N' GROUP BY region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ucd5c\uc885 \uacb0\uacfc\ub97c \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ucd5c\uc885 \uacb0\uacfc\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, si.final_result FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student INNER JOIN studentInfo si ON sv.id_student = si.id_student;", "reject": "SELECT studentinfo.code_module, studentinfo.code_presentation, studentinfo.final_result FROM studentinfo INNER JOIN studentregistration ON studentinfo.code_module = studentregistration.code_module AND studentinfo.code_presentation = studentregistration.code_presentation INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentvle.id_site IS NOT NULL;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc5ec\ud559\uc0dd \uc911 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc778 \ud559\uc0dd", "accept": "SELECT studentinfo.id_student, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);", "reject": "SELECT studentinfo.id_student, AVG(studentassessment.score) AS avg_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= ( SELECT AVG(score) FROM studentassessment );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc778 \ud559\uc0dd\uc758 \ucd1d \ud074\ub9ad \uc218\ub97c \uad6c\ud558\uc2dc\uc624", "accept": "SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentassessment.score >= (SELECT AVG(score) FROM studentassessment);", "reject": "SELECT AVG(sum_click) AS avg_clicks FROM studentvle WHERE id_student IN ( SELECT id_student FROM studentvle GROUP BY id_student HAVING AVG(sum_click) >= ( SELECT AVG(sum_click) FROM studentvle ) );", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8\ucf54\ub4dc, \ubaa8\ub4c8 \ubcc4 \ud3c9\uade0 \ud3c9\uac00 \uac00\uc911\uce58\uc640 \ud3c9\uade0 \ud559\uc2b5 \uc810\uc218 \uc870\ud68c", "accept": "SELECT a.code_module, AVG(a.weight) AS avg_weight, AVG(sa.score) AS avg_learning_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;", "reject": "SELECT a.code_module, AVG(a.weight) AS avg_weight, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\ub0a8\ud559\uc0dd \uc911 \ud65c\ub3d9 \uc720\ud615\uc774 resource\uc778 \ud559\uc0dd\uc744 \ucc3e\uc73c\uc2dc\uc624", "accept": "SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'resource';", "reject": "SELECT DISTINCT studentvle.id_student FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND studentvle.activity_type ='resource';", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation));"}
{"input": "\uac01 \uc9c0\uc5ed\uc758 \uc9c0\uc5ed\uba85, \ub4f1\ub85d \ubaa8\ub4c8 \ucf54\ub4dc, \ubaa8\ub4c8 \ubcc4 \ud559\uc0dd \uc218\ub97c \uc870\ud68c", "accept": "SELECT s.region, c.code_module, COUNT(*) AS student_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student JOIN courses c ON r.code_module = c.code_module GROUP BY s.region, c.code_module;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(DISTINCT studentinfo.id_student) AS student_count FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student JOIN courses ON studentregistration.code_module = courses.code_module AND studentregistration.code_presentation = courses.code_presentation GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ucd5c\uc18c \ud55c \ubc88 \uc774\uc0c1\uc758 \uacfc\uc81c\ub97c \ub2a6\uac8c \uc81c\ucd9c\ud55c \ud559\uc0dd\ub4e4\uc758 \ubaa9\ub85d", "accept": "SELECT DISTINCT id_student FROM studentAssessment WHERE date_submitted > (SELECT date FROM assessments WHERE id_assessment = studentAssessment.id_assessment);", "reject": "SELECT DISTINCT sa.id_student FROM studentAssessment sa WHERE sa.date_submitted > 0 GROUP BY sa.id_student HAVING COUNT(*) >= 1;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "Yorkshire Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Yorkshire Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Yorkshire Region' ) );", "reject": "SELECT studentinfo.id_student, studentinfo.gender, studentassessment.score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Yorkshire Region' AND studentinfo.gender = 'M' GROUP BY studentinfo.id_student, studentinfo.gender, studentassessment.score HAVING AVG(studentassessment.score) >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Yorkshire Region' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc218\uac15\ud55c \ubaa8\ub4e0 \ubaa8\ub4c8 \uc911 \ud3c9\uac00 \uc720\ud615\uc758 \ud3c9\uade0 \uac00\uc911\uce58\ub97c \uc870\ud68c", "accept": "SELECT AVG(weight) AS avg_weight FROM assessments;", "reject": "SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub0a8\ud559\uc0dd \uc911 \ubaa8\ub4c8 \ucf54\ub4dc\uac00 BBB\uc778 \ud559\uc0dd", "accept": "SELECT * FROM studentinfo WHERE gender = 'M' AND code_module = 'BBB';", "reject": "SELECT * FROM studentInfo WHERE gender = 'M' AND code_module = 'BBB';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4 \uc911 Distinction \ub4f1\uae09\uc73c\ub85c \uc218\ub8cc\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Distinction' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Distinction' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc131\ubcc4\uc5d0 \ub530\ub978 \uac01 \uacfc\ubaa9\uc758 \ub4f1\ub85d \ud559\uc0dd \uc218", "accept": "SELECT code_module, code_presentation, gender, COUNT(id_student) AS student_count FROM studentInfo GROUP BY code_module, code_presentation, gender;", "reject": "SELECT code_module, code_presentation, gender, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, code_presentation, gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uac00 \uac00\uc7a5 \uae34 \uc9c0\uc5ed\uc744 \uad6c\ud574\uc918", "accept": "SELECT studentinfo.region FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY studentinfo.region ORDER BY AVG(courses.module_presentation_length) DESC LIMIT 1;", "reject": "SELECT region, AVG(module_presentation_length) AS avg_presentation_length FROM studentInfo JOIN courses ON studentInfo.code_module = courses.code_module AND studentInfo.code_presentation = courses.code_presentation GROUP BY region ORDER BY avg_presentation_length DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\"24734\"\ud559\uc0dd\uc758 \uc131\ubcc4, \uc5f0\ub839\ub300, \uc9c0\uc5ed, \uadf8\ub9ac\uace0 \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ud3c9\uac00 \uc720\ud615 \ubc0f \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT studentinfo.gender, studentinfo.age_band, studentinfo.region, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 24734;", "reject": "SELECT studentinfo.gender, studentinfo.age_band, studentinfo.region, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 24734;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc \uc774\uc6a9\uacfc \uad00\ub828\ub41c \ud3c9\uac00 \uc810\uc218\ub97c \ubc1b\uc740 \ud559\uc0dd\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud559\uc0dd \uc218\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(DISTINCT studentassessment.id_student) AS students_with_vle_assessment FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student INNER JOIN studentassessment ON studentregistration.id_student = studentassessment.id_student WHERE studentassessment.score IS NOT NULL GROUP BY studentregistration.code_module, studentregistration.code_presentation;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uade0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774 \uc870\ud68c", "accept": "SELECT AVG(module_presentation_length) AS avg_presentation_length FROM courses WHERE code_presentation = '2014B';", "reject": "SELECT AVG(module_presentation_length) AS average_presentation_length FROM courses WHERE code_presentation = '2019B';", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "Distinction \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc, \uac01 \ubaa8\ub4c8\uc758 \ucd5c\ub300 \ud3c9\uac00 \uc77c\uc790\uc640 \ud574\ub2f9 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\uc640 \ucd5c\ub300 \ud3c9\uac00 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT a.code_module, MAX(a.date) AS max_assessment_date, AVG(sa.score) AS avg_score, MAX(a.weight) AS max_weight FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;", "reject": "SELECT a.code_module, MAX(a.date) AS max_assessment_date, AVG(sa.score) AS avg_score, MAX(a.weight) AS max_weight FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uac00\uc7a5 \ub9ce\uc740 \ud3c9\uac00 \uc720\ud615\uc744 \uac00\uc9c4 \ubaa8\ub4c8\uacfc \ud574\ub2f9 \ud3c9\uac00 \uc720\ud615 \uc218 \uc870\ud68c", "accept": "SELECT code_module, COUNT(DISTINCT assessment_type) AS num_assessment_types FROM assessments GROUP BY code_module ORDER BY num_assessment_types DESC LIMIT 1;", "reject": "SELECT code_module, COUNT(assessment_type) AS num_assessments FROM assessments GROUP BY code_module ORDER BY num_assessments DESC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ubaa8\ub4c8 \ucf54\ub4dc\ubcc4 \ud3c9\uac00 \uc218 \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \ubc18\ud658", "accept": "SELECT code_module, COUNT(*) AS num_assessments FROM assessments GROUP BY code_module ORDER BY num_assessments DESC;", "reject": "SELECT code_module, COUNT(*) AS assessment_count FROM assessments GROUP BY code_module ORDER BY assessment_count DESC;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \uac01 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \ud3c9\uac00 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;", "reject": "SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed \ubcc4 \ud3c9\uade0 \uc131\uc801, \ucd1d \ud074\ub9ad \uc218, \uac00\uc7a5 \ub9ce\uc774 \ub4e3\ub294 \uc218\uc5c5", "accept": "SELECT si.region, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks, MAX(c.code_module) AS most_popular_module FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student LEFT JOIN studentvle sv ON si.id_student = sv.id_student LEFT JOIN courses c ON si.code_module = c.code_module GROUP BY si.region;", "reject": "SELECT region, AVG(score) AS avg_score, SUM(sum_click) AS total_clicks, code_module FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY region, code_module ORDER BY total_clicks DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \uac01 \ud559\uc0dd\uc758 \ucd5c\uadfc \ud3c9\uac00 \uc810\uc218\ub97c \uc2dd\ubcc4\ud558\uace0 \ud559\uc0ddid, \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT si.id_student, sr.code_module, sr.code_presentation, MAX(sa.score) AS recent_score FROM studentInfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student GROUP BY si.id_student, sr.code_module, sr.code_presentation;", "reject": "SELECT sr.id_student, sr.code_module, sr.code_presentation, MAX(sa.score) AS latest_score FROM studentRegistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.id_student, sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ud559\uc0dd\uc758 \uc131\ubcc4\uacfc \ub098\uc774\ub300 \uadf8\ub9ac\uace0 \ud574\ub2f9 \uc131\ubcc4 \ubc0f \ub098\uc774\ub300\uc758 \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT gender, age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY gender, age_band;", "reject": "SELECT gender, age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY gender, age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub4f1\ub85d\ub41c \ud559\uc0dd\uc758 \ubaa8\ub4c8\uacfc \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\uc640 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub300\ud55c \ud3c9\uade0 \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT r.code_module, r.code_presentation, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY r.code_module, r.code_presentation;", "reject": "SELECT r.code_module, r.code_presentation, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY r.code_module, r.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc758 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae30\uac04\uc744 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud504\ub808\uc820\ud14c\uc774\uc158 \uae30\uac04 \uc21c\uc73c\ub85c \uc870\ud68c", "accept": "SELECT code_module, code_presentation, module_presentation_length FROM courses;", "reject": "SELECT code_module, code_presentation, module_presentation_length FROM courses ORDER BY code_module, code_presentation;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed \ubcc4\ub85c \ub9ce\uc774 \ub4e3\ub294 \uc218\uc5c5\uacfc \ud3c9\uade0 \uc810\uc218\ub97c \uad6c\ud574\uc918", "accept": "SELECT s.region, SUBSTRING_INDEX(GROUP_CONCAT(c.code_module ORDER BY num_students_taking DESC), ',', 1) AS most_popular_module, MAX(num_students_taking) AS enrollment_count, AVG(sa.score) AS average_score FROM (SELECT region, code_module, COUNT(*) AS num_students_taking FROM studentinfo GROUP BY region, code_module) AS s JOIN courses c ON s.code_module = c.code_module JOIN studentinfo si ON s.region = si.region JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY s.region;", "reject": "SELECT courses.code_module, courses.code_presentation, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY courses.code_module, courses.code_presentation ORDER BY average_score DESC;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\ucf54\ub4dc\uc640 \uc131\ubcc4\ub85c \ub4f1\ub85d\ub41c \ud559\uc0dd\uc758 \uc218\ub97c \uc870\ud68c", "accept": "SELECT code_module, gender, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, gender;", "reject": "SELECT code_module, gender, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc804\uccb4 \ud559\uc0dd\uc758 \uc7a5\uc560 \uc5ec\ubd80 \ubd84\ud3ec\ub97c \uc870\ud68c", "accept": "SELECT disability, COUNT(*) AS count FROM studentInfo GROUP BY disability;", "reject": "SELECT disability, COUNT(*) AS count FROM studentInfo GROUP BY disability;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "2017\ub144\uc5d0 \uc2dc\uc791\ud558\ub294 \uac01 \ubaa8\ub4c8 \ucf54\ub4dc\uc758 \uc218 \uc870\ud68c", "accept": "SELECT COUNT(DISTINCT code_module) AS num_modules FROM courses WHERE code_presentation LIKE '2017%';", "reject": "SELECT code_module, COUNT(*) AS num_courses FROM courses WHERE code_presentation LIKE '2017%' GROUP BY code_module;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ub4f1\ub85d\ub41c \ud559\uc0dd \uc218\ub97c \uc5f0\ub839\ub300\ubcc4\ub85c \ubc18\ud658", "accept": "SELECT si.age_band, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student WHERE sr.date_registration IS NOT NULL GROUP BY si.age_band;", "reject": "SELECT age_band, COUNT(*) AS num_students FROM studentInfo JOIN studentRegistration ON studentInfo.id_student = studentRegistration.id_student GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ud2b9\uc815 \uacfc\uc815\uc758 \ubaa8\ub4e0 \ubc1c\ud45c(presentation)\uc5d0\uc11c, \uac01 \ud559\uc0dd\uc774 \uc2dc\ub3c4\ud55c \ud69f\uc218(num_of_prev_attempts)\uc5d0 \ub530\ub978 \ud559\uc0dd \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \uc2dc\ub3c4 \ud69f\uc218, \ud559\uc0dd \uc218\ub97c \uc870\ud68c", "accept": "SELECT si.code_module, si.code_presentation, si.num_of_prev_attempts, COUNT(*) AS student_count FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation GROUP BY si.code_module, si.code_presentation, si.num_of_prev_attempts;", "reject": "SELECT courses.code_module, courses.code_presentation, studentinfo.num_of_prev_attempts, COUNT(*) AS num_students FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY courses.code_module, courses.code_presentation, studentinfo.num_of_prev_attempts;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\ubcc4 \ud3c9\uade0 \ud559\uc810\uc744 \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8\uacfc \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT si.code_module, AVG(si.studied_credits) AS average_credits FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.code_module;", "reject": "SELECT r.code_module, AVG(s.studied_credits) AS average_credits FROM studentinfo s JOIN studentregistration r ON s.id_student = r.id_student GROUP BY r.code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ud2b9\uc815 \ud559\uc0dd(25629)\uc774 \ub4f1\ub85d\ud55c \ubaa8\ub4e0 \ubaa8\ub4c8\uacfc \ud574\ub2f9 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc", "accept": "SELECT code_module, code_presentation FROM studentInfo WHERE id_student = 25629;", "reject": "SELECT DISTINCT code_module, code_presentation FROM studentInfo WHERE id_student = 25629;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc131\ubcc4\uc5d0 \ub530\ub978 \ub4f1\ub85d \ubaa8\ub4c8\ucf54\ub4dc\uc640 \ubaa8\ub4c8\ubcc4 \ud3c9\uade0 \ub4f1\ub85d \uae30\uac04\uc744 \uc870\ud68c", "accept": "SELECT s.gender, r.code_module, AVG(r.date_registration) AS avg_registration FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.gender, r.code_module;", "reject": "SELECT sr.code_module, si.gender, AVG(sr.date_registration) AS avg_registration_duration FROM studentregistration sr JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, si.gender;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4\uc774 \ucc38\uc5ec\ud55c \uacfc\ubaa9 \ubaa8\ub4c8\uacfc \uc138\uc158\uc744 \uae30\uc900\uc73c\ub85c, \ud574\ub2f9 \uacfc\ubaa9 \ubaa8\ub4c8\uacfc \uc138\uc158\ubcc4\ub85c \uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \ud559\uc0dd \uc218\ub97c \uc870\ud68c", "accept": "SELECT si.code_module, si.code_presentation, COUNT(sa.id_student) AS num_students_with_disability FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation;", "reject": "SELECT code_module, code_presentation, COUNT(DISTINCT id_student) AS num_students_with_disability FROM studentInfo WHERE disability = 'Y' GROUP BY code_module, code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uc5ec\ud559\uc0dd \uc911 \ud3c9\uade0 \uc810\uc218 \uc774\ud558\uc778 \ud559\uc0dd", "accept": "SELECT studentinfo.id_student, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) <= (SELECT AVG(score) FROM studentassessment);", "reject": "SELECT studentinfo.id_student FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' AND studentassessment.score < ( SELECT AVG(score) FROM studentassessment WHERE id_student = studentinfo.id_student );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "studentAssessment \ud14c\uc774\ube14\uc5d0\uc11c \uac00\uc7a5 \ub2a6\uac8c \uc81c\ucd9c\ub41c \uacfc\uc81c(\ub610\ub294 \uacfc\uc81c\ub4e4)\uc5d0 \ub300\ud574, \uc810\uc218\uac00 40 \ubbf8\ub9cc\uc778 \uacbd\uc6b0 \ud574\ub2f9 \uacfc\uc81c\uc758 \uc720\ud615", "accept": "SELECT a.assessment_type FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.date_submitted = ( SELECT MAX(date_submitted) FROM studentAssessment WHERE score < 40 ) AND sa.score < 40;", "reject": "SELECT a.assessment_type FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE sa.score < 40 ORDER BY sa.date_submitted DESC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "VLE \uc790\ub8cc\uc640 \uc0c1\ud638 \uc791\uc6a9\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 80\ubcf4\ub2e4 \ub0ae\uc740 \uacbd\uc6b0 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.age_band HAVING AVG(studied_credits) < 80;", "reject": "SELECT studentinfo.age_band, AVG(studentinfo.studied_credits) AS average_credits FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentinfo.studied_credits < 80 GROUP BY studentinfo.age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ub4f1\ub85d\ud558\uc9c0 \uc54a\uc740 \ud559\uc0dd\ub4e4 \uc911 \ud3c9\uac00\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \uc54a\uc740 \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 50\ubcf4\ub2e4 \ub192\uc740 \uacbd\uc6b0 \uc5f0\ub839\ub300\uc640 \ud574\ub2f9 \ud559\uc810 \uc870\ud68c", "accept": "SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_registration IS NULL AND sa.score IS NULL GROUP BY s.age_band HAVING AVG(studied_credits) > 50;", "reject": "SELECT DISTINCT studentinfo.age_band, AVG(studentinfo.studied_credits) AS avg_credits FROM studentinfo LEFT JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student LEFT JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentregistration.date_unregistration IS NULL AND studentassessment.id_student IS NULL GROUP BY studentinfo.age_band HAVING AVG(studentinfo.studied_credits) > 50;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"}
{"input": "\uac00\uc7a5 \ucd5c\uadfc\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd", "accept": "SELECT id_student, MAX(date_registration) AS max_registration_date FROM studentRegistration GROUP BY id_student;", "reject": "SELECT sr.id_student, sr.date_registration FROM studentregistration sr ORDER BY sr.date_registration DESC LIMIT 1;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ub0a8\uc131\uacfc \uc5ec\uc131 \ud559\uc0dd\ub4e4\uc758 \uc131\ubcc4 \ucd5c\ub300 \ubc0f \ucd5c\uc18c \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT gender, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY gender;", "reject": "SELECT gender, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \uc131\ubcc4\uc758 \ud559\uc0dd\ub4e4\uc758 \ucd5c\ub300 \ubc0f \ucd5c\uc18c \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT s.gender, MAX(s.studied_credits) AS max_credits, MIN(s.studied_credits) AS min_credits FROM studentInfo s GROUP BY s.gender;", "reject": "SELECT gender, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\ubcf4\ub2e4 \uae34 \ubaa8\ub4c8\uacfc \ud574\ub2f9 \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\uc640 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774 \uc870\ud68c", "accept": "SELECT code_module, code_presentation, module_presentation_length FROM courses WHERE module_presentation_length > ( SELECT AVG(module_presentation_length) FROM courses );", "reject": "SELECT code_module, code_presentation, module_presentation_length FROM courses WHERE module_presentation_length > (SELECT AVG(module_presentation_length) FROM courses);", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc758 \ub4f1\ub85d\ub41c \ud559\uc0dd \uc218\uc640 \ud3c9\uade0 \ub098\uc774 \uc870\ud68c", "accept": "SELECT r.code_module, COUNT(r.id_student) AS num_students, AVG(CAST(i.age_band AS UNSIGNED)) AS avg_age FROM studentRegistration r JOIN studentInfo i ON r.id_student = i.id_student GROUP BY r.code_module;", "reject": "SELECT sr.code_module, COUNT(*) AS num_students, AVG(si.age_band) AS avg_age FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY sr.code_module;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc720\ud615\uc774 CMA \uc778 \ud559\uc0dd\uc744 \uc5f0\ub839 \ubcc4\ub85c \ub098\ub204\uc5b4 \uc778\uc6d0 \uc218, \ud3c9\uade0 \uc810\uc218, \uc5f0\ub839 \ubcc4 \uac00\uc7a5 \ub9ce\uc740 \ud65c\ub3d9 \uc720\ud615", "accept": "SELECT si.age_band, COUNT(sa.id_student) AS student_count, AVG(sa.score) AS average_score, (SELECT vle.activity_type FROM studentvle sv JOIN vle ON sv.id_site = vle.id_site JOIN studentinfo sii ON sv.id_student = sii.id_student WHERE sii.age_band = si.age_band GROUP BY vle.activity_type ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_activity FROM studentassessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentinfo si ON sa.id_student = si.id_student WHERE a.assessment_type = 'CMA' GROUP BY si.age_band;", "reject": "SELECT studentinfo.age_band, COUNT(studentassessment.id_student) AS num_students, AVG(studentassessment.score) AS avg_score, vle.activity_type AS most_common_activity_type FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE assessments.assessment_type = 'CMA' GROUP BY studentinfo.age_band;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;  CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "55\uc138 \uc774\uc0c1\uc758 \ud559\uc0dd\ub4e4\uc758 \uc9c0\uc5ed \ubcc4 \ud3c9\uade0 \uc810\uc218\uc640 \uc0ac\uc774\ud2b8 id, \ud65c\ub3d9\uc720\ud615", "accept": "SELECT studentinfo.region, AVG(studentassessment.score) AS average_score, vle.id_site, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE studentinfo.age_band = '55<=' GROUP BY studentinfo.region, vle.id_site, vle.activity_type;", "reject": "SELECT studentinfo.region, AVG(studentassessment.score) AS avg_score, vle.activity_type, studentvle.id_site FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE studentinfo.age_band = '55+' GROUP BY studentinfo.region, vle.activity_type, studentvle.id_site;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \uacfc\uc815 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ub41c \ud559\uc0dd\ub4e4 \uc911 \ucd5c\uc885 \uc131\uc801\uc774 'Fail'\uc778 \ud559\uc0dd\ub4e4\uc758 \uc218\uc640 \ubaa8\ub4c8\uc744 \uc870\ud68c", "accept": "SELECT c.code_module, COUNT(si.id_student) AS failed_students FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.final_result = 'Fail' GROUP BY c.code_module;", "reject": "SELECT code_module, COUNT(*) AS fail_count FROM studentInfo WHERE final_result = 'Fail' GROUP BY code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\ucf54\ub4dc\uc640 \ubaa8\ub4c8\uc5d0 \ub4f1\ub85d\ub41c \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ub098\uc774 \uc870\ud68c", "accept": "SELECT sr.code_module, ROUND(AVG(si.age_band)) AS avg_age FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module;", "reject": "SELECT sr.code_module, AVG(si.age_band) AS avg_age FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uc810\uc218\uac00 40\uc810 \ubbf8\ub9cc\uc778 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT r.code_module, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE sa.score < 40 GROUP BY r.code_module;", "reject": "SELECT AVG(studied_credits) AS average_credits FROM studentInfo WHERE id_student IN ( SELECT id_student FROM studentAssessment WHERE score < 40 );", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ub0a8\ud559\uc0dd \uc911 \ud65c\ub3d9 \uc720\ud615\uc774 forumng\uc778 \ud559\uc0dd\uc744 \ucc3e\uc73c\uc2dc\uc624", "accept": "SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'forumng';", "reject": "SELECT studentvle.id_student FROM studentvle WHERE studentvle.id_student IN (SELECT id_student FROM studentvle WHERE id_site IN (SELECT id_site FROM studentvle WHERE code_module = 'CS102' AND code_presentation = '2015J' AND date >= 0 AND date < 14 GROUP BY id_student HAVING COUNT(*) >= 2)) AND studentvle.id_student IN (SELECT id_student FROM studentvle WHERE code_module = 'CS102' AND code_presentation = '2015J' AND id_site IN (SELECT id_site FROM studentvle WHERE code_module = 'CS102' AND code_presentation = '2015J' GROUP BY id_site HAVING COUNT(*) > 1)) AND studentvle.id_student IN (SELECT id_student FROM studentvle WHERE code_module = 'CS102' AND code_presentation = '2015J' AND id_site IN (SELECT id_site FROM studentvle WHERE code_module = 'CS102' AND code_presentation = '2015J' GROUP BY id_site HAVING COUNT(*) > 1) AND sum_click > 0);", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \uae30\uac04 \ub3d9\uc548 VLE \uc790\ub8cc \uc0ac\uc6a9\ub7c9\uc774 \uac00\uc7a5 \ub192\uc740 \ud559\uc0dd 10\uc704\ub97c \ub300\uc0c1\uc73c\ub85c \ud559\uc0dd, \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158, \uc0c1\ud638\uc791\uc6a9\ud69f\uc218\ub97c \uc870\ud68c", "accept": "WITH student_interactions AS ( SELECT studentvle.id_student, COUNT(*) AS interaction_count FROM studentvle GROUP BY studentvle.id_student ) SELECT studentinfo.id_student, studentinfo.code_module, studentinfo.code_presentation, interaction_count FROM student_interactions INNER JOIN studentinfo ON student_interactions.id_student = studentinfo.id_student WHERE interaction_count >= ( SELECT MIN(interaction_count) FROM student_interactions ORDER BY interaction_count DESC LIMIT 10 ) ORDER BY interaction_count DESC;", "reject": "SELECT studentvle.id_student, studentinfo.code_module, studentinfo.code_presentation, COUNT(studentvle.id_site) AS interaction_count FROM studentvle INNER JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentvle.date BETWEEN 30 AND 60 GROUP BY studentvle.id_student ORDER BY interaction_count DESC LIMIT 10;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc9c0\uc5ed\uba85\uacfc \uc9c0\uc5ed\ubcc4 Distinction \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY region;", "reject": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd\uc758 \ub098\uc774\ub300 \ubd84\ud3ec\ub97c \uc870\ud68c", "accept": "SELECT age_band, COUNT(*) AS count FROM studentInfo GROUP BY age_band;", "reject": "SELECT age_band, COUNT(*) AS count FROM studentInfo GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub4f1\ub85d\ub41c \ud559\uc0dd\uc758 \uc131\ubcc4\uacfc \ud3c9\uade0 \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT s.gender, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;", "reject": "SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo JOIN studentRegistration ON studentInfo.id_student = studentRegistration.id_student GROUP BY gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uc131\uc801 \ucd5c\uc885 \uacb0\uacfc\uc640 \ud559\uc0dd\uc758 \ucd5c\uc885 \uacb0\uacfc\uc5d0 \ub530\ub978 \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT s.final_result, COUNT(*) AS num_students FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.final_result;", "reject": "SELECT sr.code_module, sr.code_presentation, si.final_result, COUNT(DISTINCT si.id_student) AS student_count FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ucd1d \ud559\uc0dd \uc218\uac00 \uac00\uc7a5 \ub9ce\uc740 \ubaa8\ub4c8\uacfc \ud574\ub2f9 \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentInfo GROUP BY code_module ORDER BY num_students DESC LIMIT 1;", "reject": "SELECT code_module, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module ORDER BY num_students DESC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\ub97c \uc120\uc5b8\ud55c \ud559\uc0dd \uc218\uac00 100\uba85\uc744 \ucd08\uacfc\ud558\ub294 \ubaa8\ub4e0 \ubaa8\ub4c8, \ud504\ub808\uc820\ud14c\uc774\uc158\uc744 \uc870\ud68c", "accept": "SELECT code_module, code_presentation FROM studentinfo WHERE disability = 'Y' GROUP BY code_module, code_presentation HAVING COUNT(*) > 100;", "reject": "SELECT code_module, code_presentation FROM studentInfo WHERE disability = 'Y' GROUP BY code_module, code_presentation HAVING COUNT(*) > 100;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \ubaa8\ub4c8\uc758 \ucd1d \ud504\ub808\uc820\ud14c\uc774\uc158 \uc218 \uc870\ud68c", "accept": "SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE code_module = 'AAA';", "reject": "SELECT COUNT(*) AS total_presentations FROM courses WHERE code_module = '\ud2b9\uc815 \ubaa8\ub4c8';", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ub4f1\ub85d \ubc0f \ud3c9\uac00\uac00 \uc788\ub294 \ud559\uc0dd \uc911 \uc9c0\uc5ed\uba85\uacfc \uc9c0\uc5ed\ubcc4 \ub4f1\ub85d\ub41c \ud559\uc0dd \uc218", "accept": "SELECT s.region, COUNT(DISTINCT r.id_student) AS num_students FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student GROUP BY s.region;", "reject": "SELECT studentregistration.code_module, studentregistration.code_presentation, studentinfo.region, COUNT(studentinfo.id_student) AS num_students FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student INNER JOIN studentassessment ON studentregistration.id_student = studentassessment.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation, studentinfo.region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \ucd5c\uadfc\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd\uc758 \uc131\ubcc4\uc744 \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \uc131\ubcc4\uc744 \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(code_presentation) AS latest_presentation FROM studentregistration GROUP BY id_student ) AS latest_registration ON si.id_student = latest_registration.id_student AND si.code_presentation = latest_registration.latest_presentation INNER JOIN studentregistration sr ON sr.id_student = si.id_student;", "reject": "SELECT r.code_module, r.code_presentation, s.gender FROM studentRegistration r INNER JOIN studentInfo s ON r.id_student = s.id_student WHERE r.date_unregistration IS NULL ORDER BY r.code_module, r.code_presentation;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4c8 \ubc1c\ud45c\uc5d0 \ucc98\uc74c \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 \ud3c9\uade0 \uc810\uc218\uac00 \uac00\uc7a5 \ub192\uc740 \ud3c9\uac00\ub97c \uc2dd\ubcc4\ud558\uace0 \ud3c9\uac00ID, \ud3c9\uade0 \uc810\uc218\ub97c \uc870\ud68c", "accept": "SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts = 0 GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;", "reject": "SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment JOIN studentInfo si ON si.id_student = sa.id_student JOIN studentRegistration sr ON si.id_student = sr.id_student WHERE sr.date_registration = (SELECT MAX(date_registration) FROM studentRegistration WHERE id_student = si.id_student) GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "55\uc138 \uc774\uc0c1\uc778 \ud559\uc0dd\ub4e4 \uc911 Withdrawn \ub4f1\uae09\uc744 \ubc1b\uc740 \ud559\uc0dd\ub4e4\uc758 \uc9c0\uc5ed\ubcc4 \ud3c9\uade0 \ud559\uc810\uc774 60\ubcf4\ub2e4 \ub192\uc740 \uacbd\uc6b0 \uc9c0\uc5ed\uba85\uacfc \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE age_band = '55<=' AND final_result = 'Withdrawn' GROUP BY region HAVING AVG(studied_credits) > 60;", "reject": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' AND age_band = '55+' GROUP BY region HAVING AVG(studied_credits) > 60;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\"AAA\" \ubaa8\ub4c8\uc5d0\uc11c \uac01 \ud3c9\uac00 \uc720\ud615\uacfc \ud3c9\uac00 \uc720\ud615\ubcc4\ub85c \uc0c1\uc704 10% \ucd5c\uace0 \ud559\ub825 \uc218\uc900\uacfc \ud558\uc704 10% \ucd5c\uace0 \ud559\ub825 \uc218\uc900 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc774\uc218 \ud559\uc810 \ubc0f \ucc28\uc774\ub97c \uc870\ud68c", "accept": "WITH education_credits AS (SELECT sa.id_student, a.assessment_type, si.highest_education, si.studied_credits,NTILE(10) OVER (PARTITION BY a.assessment_type, si.highest_education ORDER BY si.studied_credits DESC) AS decile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA') SELECT assessment_type, highest_education, AVG(CASE WHEN decile = 10 THEN studied_credits END) AS top_10_avg_credits, AVG(CASE WHEN decile = 1 THEN studied_credits END) AS bottom_10_avg_credits, AVG(CASE WHEN decile = 10 THEN studied_credits END) - AVG(CASE WHEN decile = 1 THEN studied_credits END) AS credit_diff FROM education_credits GROUP BY assessment_type, highest_education;", "reject": "SELECT assessments.assessment_type, studentinfo.highest_education, AVG(studentinfo.studied_credits) AS avg_credits, AVG(studentinfo.studied_credits) - AVG(CASE WHEN studentinfo.highest_education IN (SELECT highest_education FROM studentinfo WHERE studentinfo.highest_education IN (SELECT highest_education FROM studentinfo ORDER BY studentinfo.studied_credits DESC LIMIT 10) AND studentinfo.studied_credits <= (SELECT AVG(studied_credits) FROM studentinfo WHERE highest_education IN (SELECT highest_education FROM studentinfo ORDER BY studentinfo.studied_credits DESC LIMIT 10))) THEN studentinfo.studied_credits ELSE 0 END) AS avg_diff_credits FROM assessments INNER JOIN studentassessment ON assessments.id_assessment = studentassessment.id_assessment INNER JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE assessments.code_module = 'AAA' GROUP BY assessments.assessment_type, studentinfo.highest_education;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0 \ub4f1\ub85d\ud55c \ud559\uc0dd \uc911 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud559\uc0dd\uc758 \ud3c9\uade0 \ud074\ub9ad \uc218\ub97c \uacc4\uc0b0\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud3c9\uade0 \ud074\ub9ad\uc218\ub97c \uc870\ud68c\"", "accept": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_clicks FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation;", "reject": "SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentVle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;", "context": "CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc\uc640 \uac01 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ucd5c\uc18c \ud3c9\uac00 \uc77c\uc790\uc640 \ud574\ub2f9 \ud504\ub808\uc820\ud14c\uc774\uc158\uc758 \ud3c9\uade0 \ud3c9\uac00 \uc810\uc218\uc640 \ucd5c\ub300 \ud3c9\uac00 \uc77c\uc790 \uc870\ud68c", "accept": "SELECT a.code_presentation, MIN(a.date) AS min_assessment_date, AVG(sa.score) AS avg_score, MAX(a.date) AS max_assessment_date FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation;", "reject": "SELECT a.code_presentation, MIN(a.date) AS min_assessment_date, AVG(sa.score) AS avg_score, MAX(a.date) AS max_assessment_date FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc774\uc218 \ud559\uc810\uc774 100\uc810 \uc774\uc0c1\uc778 \ud559\uc0dd \uc911 \uc131\uc801\uc774 \uac00\uc7a5 \uc6b0\uc218\ud55c \ud559\uc0dd\uc744 \ucc3e\uc544\uc918", "accept": "SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.studied_credits >= 100 GROUP BY studentinfo.id_student ORDER BY MAX(studentassessment.score) DESC LIMIT 1;", "reject": "SELECT studentinfo.id_student, studentinfo.studied_credits, studentassessment.score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.studied_credits >= 100 ORDER BY studentassessment.score DESC LIMIT 1;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158 \uae38\uc774\uac00 \uac00\uc7a5 \uc9e7\uc740 \uc9c0\uc5ed\uc744 \uad6c\ud574\uc918", "accept": "SELECT region FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY region ORDER BY AVG(courses.module_presentation_length) ASC LIMIT 1;", "reject": "SELECT region FROM ( SELECT region, AVG(module_presentation_length) AS avg_length FROM studentInfo JOIN courses ON studentInfo.code_module = courses.code_module AND studentInfo.code_presentation = courses.code_presentation GROUP BY region ) AS avg_lengths ORDER BY avg_length ASC LIMIT 1;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ubaa8\ub4c8\uc5d0 \ub300\ud55c \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT code_module, AVG(studied_credits) as avg_credits FROM studentInfo GROUP BY code_module;", "reject": "SELECT code_module, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY code_module;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \ud3c9\uac00 \uac00\uc911\uce58\ubcf4\ub2e4 \ub192\uc740 \ubaa8\ub4c8\uacfc \ud574\ub2f9 \ud3c9\uac00 \uc720\ud615 \uc870\ud68c", "accept": "SELECT code_module, assessment_type FROM assessments GROUP BY code_module, assessment_type HAVING AVG(weight) > (SELECT AVG(weight) FROM assessments);", "reject": "SELECT DISTINCT code_module, assessment_type FROM assessments WHERE weight > ( SELECT AVG(weight) FROM assessments );", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "North Western Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Western Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Western Region' ) );", "reject": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Western Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Western Region' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc8fc\ub2f9 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \uc218\uac00 \uac00\uc7a5 \ub192\uc740 \uc9c0\uc5ed\uc744 \ubd84\uc11d\ud558\uace0 \uc9c0\uc5ed\uba85\uacfc \ud3c9\uade0 \uc0c1\ud638\uc791\uc6a9\uc218\ub97c \uc870\ud68c. \ub370\uc774\ud130\ub294 \uc8fc\ub2f9 \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc21c\uc11c\ub300\ub85c \ub098\uc5f4", "accept": "SELECT studentinfo.region, AVG(studentvle.sum_click) AS avg_interactions_per_week FROM studentinfo INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.region ORDER BY avg_interactions_per_week DESC;", "reject": "SELECT s.region, AVG(sv.sum_click) AS avg_interactions_per_week FROM studentvle sv JOIN studentinfo s ON sv.id_student = s.id_student GROUP BY s.region ORDER BY avg_interactions_per_week DESC;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud559\uc0dd\uc758 \ub098\uc774\ub300\uc640 \ud574\ub2f9 \ub098\uc774\ub300\uc758 \ud559\uc0dd \uc218 \uc870\ud68c", "accept": "SELECT age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY age_band;", "reject": "SELECT age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \uc9c0\uc5ed\uc758 \uc9c0\uc5ed\uba85, \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ud559\uc810\uc744 \uc870\ud68c", "accept": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY region;", "reject": "SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ud559\uc0dd\uc758 \ud3c9\uade0 \uc810\uc218\uc640 VLE \uc790\ub8cc\ub97c \uc774\uc6a9\ud55c \ud3c9\uade0 \uc0c1\ud638 \uc791\uc6a9 \ud69f\uc218\ub97c \ud559\uc0dd \uc815\ubcf4\uc640 \uacb0\ud569\ud558\uc5ec \ubd84\uc11d\ud558\uace0 \ud559\uc0dd, \ud3c9\uade0 \uc810\uc218, \ud3c9\uade0 \uc0c1\ud638\uc791\uc6a9 \ud69f\uc218\ub97c \uc870\ud68c", "accept": "SELECT studentInfo.id_student, AVG(studentAssessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_interaction_count FROM studentInfo LEFT JOIN studentAssessment ON studentInfo.id_student = studentAssessment.id_student LEFT JOIN studentvle ON studentInfo.id_student = studentvle.id_student GROUP BY studentInfo.id_student;", "reject": "SELECT studentinfo.id_student, AVG(studentassessment.score) AS average_score, AVG(studentvle.sum_click) AS average_interaction_count FROM studentinfo LEFT JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student LEFT JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.id_student;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "North Region \uc9c0\uc5ed\uc758 \ud3c9\uade0 \uc810\uc218 \uc774\uc0c1\uc758 \ub0a8\ud559\uc0dd\uc744 \uc870\ud68c\ud558\uc2dc\uc624", "accept": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Region' ) );", "reject": "SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Region' ) );", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4 \uc911 \uc911\ub3c4\ud3ec\uae30\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Withdrawn' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Withdrawn' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uc7a5\uc560\uac00 \uc788\ub294 \ud559\uc0dd\ub4e4 \uc911 Pass \uc131\uc801\uc73c\ub85c \uc218\ub8cc\ud55c \ud559\uc0dd\ub4e4\uc758 \uc5f0\ub839\ub300\uc640 \ud3c9\uade0 \ud559\uc810 \uc870\ud68c", "accept": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Pass' GROUP BY age_band;", "reject": "SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Pass' GROUP BY age_band;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \uc131\ubcc4\ub85c \ub4f1\ub85d\ub41c \ubaa8\ub4c8 \uc218\ub97c \uc870\ud68c", "accept": "SELECT studentInfo.gender, COUNT(DISTINCT studentRegistration.code_module) AS module_count FROM studentRegistration JOIN studentInfo ON studentRegistration.id_student = studentInfo.id_student GROUP BY studentInfo.gender;", "reject": "SELECT studentinfo.gender, COUNT(studentregistration.id_student) AS num_modules FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student GROUP BY studentinfo.gender;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ubaa8\ub4c8 \ucf54\ub4dc\uc640 \ubaa8\ub4c8 \ucf54\ub4dc\ubcc4\ub85c \ud504\ub808\uc820\ud14c\uc774\uc158 \uc218\ub97c \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \uc870\ud68c", "accept": "SELECT code_module, COUNT(DISTINCT code_presentation) AS num_presentations FROM courses GROUP BY code_module ORDER BY num_presentations DESC;", "reject": "SELECT code_module, COUNT(DISTINCT code_presentation) AS num_presentations FROM courses GROUP BY code_module ORDER BY num_presentations DESC;", "context": "CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ucf54\ub4dc,  \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ubcc4 \ud3c9\uac00 \uacb0\uacfc\ub97c \uc870\ud68c", "accept": "SELECT code_module, code_presentation, assessment_type FROM assessments;", "reject": "SELECT code_module, code_presentation, assessment_type, weight FROM assessments;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud2b9\uc815 \ubaa8\ub4c8\uc5d0 \ub300\ud574 \uac00\uc911\uce58\uac00 50%\ub97c \ub118\ub294 \ubaa8\ub4e0 \ud3c9\uac00(\uc720\ud615 \ud3ec\ud568)\uc640 \uac00\uc911\uce58 \uc870\ud68c", "accept": "SELECT a.assessment_type, a.weight FROM assessments a INNER JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND a.weight > 50;", "reject": "SELECT code_module, code_presentation, id_assessment, assessment_type, weight FROM assessments WHERE code_module = 'BSc Computer Science' AND code_presentation = '2017B' AND weight >= 50;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and \u201cB\u201d for the presentation starting in February and \u201cJ\u201d for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8\uc758 \ud3c9\uade0 \uac00\uc911\uce58 \uc911 \uac00\uc7a5 \ub0ae\uc740 \uc720\ud615", "accept": "SELECT code_module, MIN(avg_weight) AS min_avg_weight FROM ( SELECT a.code_module, a.assessment_type, AVG(a.weight) AS avg_weight FROM assessments a GROUP BY a.code_module, a.assessment_type ) AS avg_weights GROUP BY code_module ORDER BY min_avg_weight ASC;", "reject": "SELECT a.assessment_type, AVG(a.weight) AS avg_weight FROM assessments a GROUP BY a.assessment_type ORDER BY avg_weight ASC LIMIT 1;", "context": "CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "0-35, 35-55, 55<= \uc758 \uc5f0\ub839\ub300\ub85c \uad6c\ubd84\ud558\uace0 \uac01 \uc5f0\ub839\ub300\uc758 \ud3c9\uade0 \uc131\uc801\uc744 \uad6c\ud574\uc918", "accept": "SELECT CASE WHEN studentinfo.age_band <= 35 THEN '0-35' WHEN studentinfo.age_band <= 55 THEN '35-55' ELSE '55+' END AS age_group, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY age_group;", "reject": "SELECT age_band, AVG(score) AS avg_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY age_band;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ub0a8\ud559\uc0dd \uc911 \ubaa8\ub4c8 \ucf54\ub4dc\uac00 AAA\uc778 \ud559\uc0dd", "accept": "SELECT * FROM studentinfo WHERE gender = 'M' AND code_module = 'AAA';", "reject": "SELECT id_student FROM studentInfo WHERE gender = 'M' AND code_module = 'AAA';", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ubaa8\ub4e0 \ud559\uc0dd\uc758 VLE \uc790\ub8cc \ud074\ub9ad \uc218 \ud3c9\uade0\uc744 \uc870\ud68c", "accept": "SELECT AVG(avg_clicks) as avg_clicks FROM ( SELECT id_student, AVG(sum_click) AS avg_clicks FROM studentVle GROUP BY id_student ) AS student_avg_clicks;", "reject": "SELECT AVG(sum_click) AS avg_clicks FROM studentvle;", "context": "CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\uac01 \uc9c0\uc5ed\uc758 \uc9c0\uc5ed\uba85\uacfc \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \ub098\uc774\ub97c \uc870\ud68c", "accept": "SELECT region, AVG(CAST(SUBSTRING(age_band, 1, 2) AS UNSIGNED)) AS avg_age FROM studentInfo GROUP BY region;", "reject": "SELECT region, AVG(age_band) AS avg_age FROM studentInfo GROUP BY region;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\ud3c9\uade0 \ud074\ub9ad \uc218 \ubcf4\ub2e4 \ub192\uc740 \ud074\ub9ad \uc218\uc758 \ud559\uc0dd\ub4e4\uc758 \ud3c9\uade0 \uc131\uc801\uc744 \uad6c\ud574\uc918", "accept": "SELECT AVG(studentassessment.score) AS average_score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click > ( SELECT AVG(studentvle.sum_click) FROM studentvle );", "reject": "SELECT AVG(studentassessment.score) AS average_score FROM studentassessment JOIN studentvle ON studentassessment.id_student = studentvle.id_student WHERE studentvle.sum_click > (SELECT AVG(sum_click) FROM studentvle);", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student\u2019s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"}
{"input": "\ud3c9\uac00 \uacb0\uacfc\uac00 'Distinction'\uc774\uace0 \ubaa8\ub4e0 \ud3c9\uac00 \uc720\ud615\uc5d0\uc11c \ud3c9\uade0 \uc810\uc218\uac00 80\ubcf4\ub2e4 \ub192\uc740 \ubaa8\ub4e0 \ud559\uc0dd\uc758 \uc218\ub97c \uacc4\uc0b0", "accept": "SELECT COUNT(*) AS distinction_count FROM ( SELECT si.id_student FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Distinction' GROUP BY si.id_student HAVING AVG(sa.score) > 80 ) AS high_scores;", "reject": "SELECT COUNT(DISTINCT studentinfo.id_student) AS num_students FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.final_result = 'Distinction' AND studentassessment.score >= 80;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
{"input": "\uac01 \ubaa8\ub4c8 \ud504\ub808\uc820\ud14c\uc774\uc158\uc5d0\uc11c \uac00\uc7a5 \ub192\uc740 \uc810\uc218\ub97c \ubc1b\uc740 \ud559\uc0dd\uc758 \ucd5c\uc885 \uacb0\uacfc\ub97c \uc2dd\ubcc4\ud558\uace0 \ubaa8\ub4c8 \ucf54\ub4dc, \ud504\ub808\uc820\ud14c\uc774\uc158 \ucf54\ub4dc, \ucd5c\uc885 \uacb0\uacfc\ub97c \uc870\ud68c", "accept": "SELECT sr.code_module, sr.code_presentation, si.final_result FROM studentInfo si INNER JOIN ( SELECT sa.id_student, sa.score FROM studentAssessment sa INNER JOIN ( SELECT id_assessment, MAX(score) AS max_score FROM studentAssessment GROUP BY id_assessment ) AS max_scores ON sa.id_assessment = max_scores.id_assessment AND sa.score = max_scores.max_score ) AS max_scores ON si.id_student = max_scores.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;", "reject": "SELECT sr.code_module, sr.code_presentation, si.final_result FROM studentinfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student INNER JOIN studentassessment sa ON si.id_student = sa.id_student WHERE sa.score = ( SELECT MAX(score) FROM studentassessment WHERE id_student = si.id_student ) GROUP BY sr.code_module, sr.code_presentation, si.final_result;", "context": "CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student\u2019s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"}
{"input": "\ucd5c\uc885 \ud559\ub825\uc774 Lower Than A Level\uc778 \ud559\uc0dd\uc744 \uc5f0\ub839\ub300 \ubcc4\ub85c \ud3c9\uade0 \uc810\uc218 \ud655\uc778", "accept": "SELECT studentinfo.age_band, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.highest_education = 'Lower Than A Level' GROUP BY studentinfo.age_band;", "reject": "SELECT studentinfo.age_band, AVG(studentassessment.score) AS avg_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.highest_education = 'Lower Than A Level' GROUP BY studentinfo.age_band;", "context": "CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student\u2019s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student\u2019s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student\u2019s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student\u2019s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"}
