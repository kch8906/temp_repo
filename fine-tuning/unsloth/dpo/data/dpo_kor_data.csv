,input,accept,reject,context
0,"CCC수업을 듣는 학생의 성별, 나이, 지역을 알고싶어","SELECT gender, age_band, region FROM studentinfo WHERE code_module = 'CCC';","SELECT s.gender, s.region, s.age_band FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN module_presentation mp ON c.code_presentation = mp.code_presentation WHERE c.code_module = 'CCC';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
1,최종 결과가 pass인 학생이 가장 많은 지역,SELECT region FROM studentinfo WHERE final_result = 'pass' GROUP BY region ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT region, COUNT(*) as num_of_students FROM studentinfo WHERE final_result = 'pass' GROUP BY region ORDER BY num_of_students DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
2,최종 결과가 pass인 학생의 비율이 가장 높은 지역,SELECT region FROM studentinfo GROUP BY region ORDER BY SUM(CASE WHEN final_result = 'pass' THEN 1 ELSE 0 END) / COUNT(*) DESC LIMIT 1;,"SELECT region, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentinfo WHERE final_result = 'pass') as pass_percentage FROM studentinfo WHERE final_result = 'pass' GROUP BY region ORDER BY pass_percentage DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
3,"연령대 별로 어떤 수업을 많이 듣는지 연령대, 수업코드, 학생 수로 알고싶어","SELECT age_band, code_module, COUNT(id_student) AS student_count FROM studentinfo GROUP BY age_band, code_module ORDER BY age_band, student_count DESC;","SELECT age_band, code_module, COUNT(DISTINCT id_student) as num_students FROM studentinfo GROUP BY age_band, code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
4,학생 별 수업 평가결과가 50이상인 학생 수,SELECT COUNT(DISTINCT id_student) AS num_students_over_50 FROM studentAssessment WHERE score >= 50;,"SELECT id_student, COUNT(*) as num_assessments FROM studentassessment WHERE is_branked = 1 AND score >= 50 GROUP BY id_student ;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
5,연령대 별로 어떤 수업을 많이 듣는지 보고싶어,"SELECT age_band, code_module, COUNT(*) AS num_students FROM studentinfo GROUP BY age_band, code_module ORDER BY age_band, num_students DESC;","SELECT studentinfo.age_band, COUNT(DISTINCT studentinfo.code_module) as num_modules FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN studentinfo AS studentinfo2 ON courses.code_presentation = studentinfo2.code_presentation GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
6,남학생 중 모듈 코드가 AAA인 학생,SELECT * FROM studentinfo WHERE gender = 'M' AND code_module = 'AAA';,"SELECT studentinfo.id_student, studentinfo.code_module, studentinfo.code_presentation, studentinfo.gender, studentinfo.region, studentinfo.highest_education, studentinfo.imd_band, studentinfo.age_band, studentinfo.num_of_prev_attempts, studentinfo.studied_credits, studentinfo.disability, studentinfo.final_result FROM studentinfo WHERE studentinfo.code_module = 'AAA' AND studentinfo.gender = 'M';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
7,남학생 중 모듈 코드가 BBB인 학생,SELECT * FROM studentinfo WHERE gender = 'M' AND code_module = 'BBB';,SELECT * FROM studentinfo WHERE code_module = 'BBB' AND gender = 'Male';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
8,남학생 중 평균 점수 이상인 학생,"SELECT sa.id_student, AVG(sa.score) AS average_score FROM studentassessment AS sa JOIN studentinfo AS si ON sa.id_student = si.id_student WHERE si.gender = 'M' GROUP BY sa.id_student HAVING AVG(sa.score) >= ( SELECT AVG(score) FROM studentassessment );","SELECT studentinfo.id_student, studentinfo.gender, studentassessment.score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.gender ='male' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment WHERE id_student = studentassessment.id_student);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
9,남학생 중 평균 점수 이하인 학생,"SELECT studentassessment.id_student, AVG(studentassessment.score) AS average_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' GROUP BY studentassessment.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);","SELECT studentinfo.id_student, studentassessment.score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'Male' AND studentassessment.score < (SELECT AVG(score) FROM studentassessment WHERE id_student = studentassessment.id_student);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
10,여학생 중 평균 점수 이상인 학생,"SELECT studentinfo.id_student, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);","SELECT studentinfo.id_student, studentinfo.gender, studentassessment.score FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'female' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment WHERE studentassessment.id_student = studentinfo.id_student);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
11,여학생 중 평균 점수 이하인 학생,"SELECT studentinfo.id_student, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'F' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) <= (SELECT AVG(score) FROM studentassessment);","SELECT s.id_student, s.gender, sa.score FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student WHERE sa.score < (SELECT AVG(sa2.score) FROM studentassessment sa2 JOIN studentinfo s2 ON sa2.id_student = s2.id_student WHERE s2.gender = 'Female') AND s.gender = 'Female';","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
12,남학생 중 활동 유형이 homepage인 학생을 찾으시오,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'homepage';,"SELECT s.name, h.type FROM studentvle s JOIN vlematerial h ON s.id_site = h.id_site JOIN student st ON s.id_student = st.id_student WHERE st.gender ='male' AND h.activity = 'homepage';","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
13,남학생 중 활동 유형이 resource인 학생을 찾으시오,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'resource';,SELECT * FROM studentvle WHERE id_student IN (SELECT id_student FROM student WHERE gender ='male') AND activity_type ='resource';,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation));"
14,남학생 중 활동 유형이 forumng인 학생을 찾으시오,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' AND vle.activity_type = 'forumng';,"SELECT s.name, c.activity_type FROM studentvle s JOIN course c ON s.code_module = c.code_module JOIN (SELECT code_module, activity_type FROM studentvle WHERE activity_type = 'forum') f ON s.code_module = f.code_module WHERE s.id_student IN (SELECT id_student FROM studentvle WHERE gender ='male');","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
15,"여학생 중 활동 유형이 resource인 학생을 찾으시오",SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' AND vle.activity_type = 'resource';,SELECT * FROM studentvle WHERE code_module ='resource' AND id_student IN (SELECT id_student FROM student WHERE gender = 'Female');,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
16,여학생 중 활동 유형이 glossary인 학생을 찾으시오,SELECT DISTINCT studentvle.id_student FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' AND vle.activity_type = 'glossary';,SELECT * FROM studentvle WHERE code_module = 'glossary' AND id_student IN (SELECT id_student FROM student WHERE gender = 'female');,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
17,평균 점수 이상인 학생의 총 클릭 수를 구하시오,SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentassessment.score >= (SELECT AVG(score) FROM studentassessment);,SELECT SUM(sum_click) FROM studentvle WHERE id_student IN (SELECT id_student FROM studentvle GROUP BY id_student HAVING AVG(sum_click) < (SELECT AVG(sum_click) FROM studentvle));,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
18,평균 점수 이하인 학생의 총 클릭 수를 구하시오,SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentassessment.score < (SELECT AVG(score) FROM studentassessment);,SELECT SUM(sum_click) FROM studentvle WHERE id_student IN (SELECT id_student FROM studentvle GROUP BY id_student HAVING AVG(sum_click) > (SELECT AVG(sum_click) FROM studentvle GROUP BY id_site)) ;,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
19,East Anglian Region 지역의 평균 점수를 구하시오,SELECT AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Anglian Region';,SELECT AVG(score) FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student WHERE si.region = 'East Anglian Region';,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
20,East Anglian Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Anglian Region' AND studentinfo.gender = 'M' AND studentassessment.score >= (SELECT AVG(score) FROM studentassessment WHERE id_student IN (SELECT id_student FROM studentinfo WHERE region = 'East Anglian Region' ));,"SELECT studentinfo.id_student, studentassessment.score FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.gender = 'Male' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment WHERE id_assessment = studentassessment.id_assessment) AND studentinfo.region = 'East Anglian Region';","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
21,East Midlands Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'East Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'East Midlands Region' ));,"SELECT s.id_student, s.gender, a.score FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student WHERE s.gender = 'Male' AND s.region = 'East Midlands' AND a.score > (SELECT AVG(a.score) FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student WHERE s.gender = 'Male' AND s.region = 'East Midlands');","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
22,Ireland 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Ireland' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Ireland' ) );,"SELECT s.id_student, s.gender, sa.score FROM studentinfo s INNER JOIN studentassessment sa ON s.id_student = sa.id_student WHERE s.gender = 'Male' AND s.region = 'Ireland' AND sa.score > (SELECT AVG(score) FROM studentassessment WHERE id_student = sa.id_student);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
23,London Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'London Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'London Region' ) );,"SELECT s.id_student, s.gender, a.score FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student WHERE s.gender ='male' AND s.region = 'London' AND a.score > (SELECT AVG(a.score) FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student WHERE s.gender ='male' AND s.region = 'London');","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
24,North Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Region' ) );,"SELECT studentinfo.id_student, studentassessment.score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.gender = 'Male' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.region = 'North') GROUP BY studentassessment.id_student, studentassessment.score;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
25,North Western Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'North Western Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'North Western Region' ) );,"SELECT studentinfo.id_student, studentinfo.gender, studentassessment.score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.gender = 'Male' AND studentinfo.region = 'North Western' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment WHERE id_student = studentassessment.id_student);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
26,Scotland 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'West Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'West Midlands Region' ) );,"SELECT s.id_student, s.name, a.score FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student WHERE s.gender = 'Male' AND s.region = 'Scotland' AND a.score > (SELECT AVG(a.score) FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student WHERE s.gender = 'Male' AND s.region = 'Scotland');","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
27,South East Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South East Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South East Region' ) );,"SELECT studentinfo.id_student, studentinfo.gender, studentassessment.score FROM studentassessment INNER JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.gender = 'Male' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment WHERE studentassessment.id_student = studentinfo.id_student) AND studentinfo.region = 'South East';","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
28,South Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South Region' ) );,"SELECT studentinfo.id_student, studentassessment.score FROM studentassessment INNER JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.gender = 'Male' AND studentinfo.region = 'South' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment WHERE id_student = studentassessment.id_student);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
29,South West Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'South West Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'South West Region' ) );,"SELECT s.id_student, s.gender, sa.score FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student WHERE s.gender = 'Male' AND s.region = 'South West' AND sa.score > (SELECT AVG(sa.score) FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student WHERE s.gender = 'Male' AND s.region = 'South West');","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
30,Wales 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Wales' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Wales' ) );,"SELECT studentinfo.id_student, studentinfo.gender, studentassessment.score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Wales' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment WHERE id_student = studentassessment.id_student);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
31,West Midlands Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'West Midlands Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'West Midlands Region' ) );,"SELECT studentinfo.id_student, studentassessment.score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.gender = 'Male' AND studentinfo.region = 'West Midlands' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment WHERE id_student = studentassessment.id_student);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
32,Yorkshire Region 지역의 평균 점수 이상의 남학생을 조회하시오,SELECT DISTINCT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.region = 'Yorkshire Region' AND studentinfo.gender = 'M' AND studentassessment.score >= ( SELECT AVG(score) FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE region = 'Yorkshire Region' ) );,"SELECT s.id_student, s.gender, sa.score FROM studentassessment sa INNER JOIN studentinfo s ON sa.id_student = s.id_student WHERE s.gender = 'Male' AND s.region = 'Yorkshire Region' AND sa.score > (SELECT AVG(score) FROM studentassessment WHERE id_student = s.id_student);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
33,총 클릭 수 10 이상 학생의 성적을 구해줘,SELECT studentassessment.score FROM studentassessment JOIN studentvle ON studentassessment.id_student = studentvle.id_student WHERE studentvle.sum_click >= 10;,"SELECT s.id_student, s.score FROM studentassessment s INNER JOIN (SELECT id_student, COUNT(*) as total_click FROM studentvle GROUP BY id_student HAVING total_click > 10) v ON s.id_student = v.id_student;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
34,총 클릭 수가 가장 많은 학생의 성적과 학생 id를 알고싶어,"SELECT studentvle.id_student, studentassessment.score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click = (SELECT MAX(sum_click) FROM studentvle);","SELECT s.score, s.id_student FROM studentassessment s JOIN (SELECT id_student, MAX(sum_click) AS max_click FROM studentvle GROUP BY id_student) v ON s.id_student = v.id_student WHERE v.max_click = (SELECT MAX(sum_click) FROM studentvle) ;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
35,남학생의 평균 모듈 프레젠테이션 길이를 구해줘,SELECT AVG(courses.module_presentation_length) AS average_module_presentation_length FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module WHERE studentinfo.gender = 'M';,SELECT AVG(module_presentation_length) FROM courses c JOIN studentinfo s ON c.code_module = s.code_module JOIN studentinfo s2 ON c.code_presentation = s2.code_presentation WHERE s.gender ='male';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
36,평균 모듈 프레젠테이션 길이가 가장 긴 지역을 구해줘,SELECT studentinfo.region FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY studentinfo.region ORDER BY AVG(courses.module_presentation_length) DESC LIMIT 1;,"SELECT region, AVG(module_presentation_length) as avg_length FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY region ORDER BY avg_length DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
37,평균 모듈 프레젠테이션 길이가 가장 짧은 지역을 구해줘,SELECT region FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY region ORDER BY AVG(courses.module_presentation_length) ASC LIMIT 1;,"SELECT region, AVG(module_presentation_length) FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN courses AS courses2 ON studentinfo.code_presentation = courses2.code_presentation GROUP BY region ORDER BY AVG(module_presentation_length) LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
38,모듈 코드 AAA의 학생들의 평균을 구해줘,SELECT AVG(studentinfo.studied_credits) AS average_studied_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE courses.code_module = 'AAA';,SELECT AVG(final_result) FROM studentinfo WHERE code_module = 'AAA' AND final_result IS NOT NULL;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
39,BBB수업을 듣는 학생 중 성적이 가장 안좋은 학생을 찾아줘,"SELECT id_student, MIN(score) AS min_score FROM studentassessment WHERE id_assessment IN ( SELECT id_assessment FROM assessments WHERE code_module = 'BBB' ) GROUP BY id_student ORDER BY min_score LIMIT 1;","SELECT s.id_student, s.name, a.score FROM studentassessment s JOIN assessments a ON s.id_assessment = a.id_assessment JOIN courses c ON a.code_module = c.code_module WHERE c.code_module = 'BBB' AND s.is_branked = 0 ORDER BY s.id_student, a.score ASC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
40,CCC 수업을 듣는 학생의 평균 이수 학점을 알고 싶어,SELECT AVG(studentinfo.studied_credits) AS average_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE courses.code_module = 'CCC';,SELECT AVG(studied_credits) FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module WHERE courses.code_presentation = 'CCC';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
41,이수 학점이 100점 이상인 학생 중 성적이 가장 우수한 학생을 찾아줘,SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.studied_credits >= 100 GROUP BY studentinfo.id_student ORDER BY MAX(studentassessment.score) DESC LIMIT 1;,"SELECT s.id_student, s.score FROM studentassessment s JOIN studentinfo st ON s.id_student = st.id_student WHERE st.highest_education = 'Higher than high school' AND s.score = (SELECT MAX(score) FROM studentassessment WHERE id_student = s.id_student);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
42,최종 결과 pass인 학생들의 평균 점수,SELECT AVG(score) AS average_score FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE final_result = 'pass' );,SELECT AVG(score) as avg_score FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student WHERE si.final_result = 'pass';,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
43,최종 결과 fail인 학생들의 평균 점수,SELECT AVG(score) AS average_score FROM studentassessment WHERE id_student IN ( SELECT id_student FROM studentinfo WHERE final_result = 'fail' );,SELECT AVG(score) FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student WHERE is_branked = 1 AND s.final_result = 'fail';,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
44,DDD 수업을 듣는 학생들의 활동 유형을 알려줘,SELECT DISTINCT vle.activity_type FROM vle JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE courses.code_module = 'DDD';,SELECT DISTINCT vle.activity_type FROM vle INNER JOIN courses ON vle.code_module = courses.code_module INNER JOIN students ON courses.code_module = students.code_module WHERE courses.code_presentation = '2022B' AND students.activity_type = 'DDD';,"CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
45,Yorkshire Region 지역 학생들의 등록 날짜를 알고싶어,SELECT studentregistration.date_registration FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.region = 'Yorkshire Region';,SELECT studentregistration.date_registration FROM studentregistration INNER JOIN studentinfo ON studentregistration.code_module = studentinfo.code_module AND studentregistration.code_presentation = studentinfo.code_presentation WHERE studentinfo.region = 'Yorkshire';,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
46,최고 학력 A Level or Equivalent 인 학생의 점수와 사이트 id를 알려줘,"SELECT studentassessment.score, studentvle.id_site FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentvle ON studentassessment.id_student = studentvle.id_student WHERE studentinfo.highest_education = 'A Level or Equivalent';","SELECT s.id_student, s.score, c.site_id FROM studentassessment s INNER JOIN studentinfo si ON s.id_student = si.id_student INNER JOIN courses c ON si.code_module = c.code_module WHERE si.highest_education = 'A Level or Equivalent';","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
47,최종 결과 fail인 학생 중 점수가 평균 이상인 학생을 구해줘,"SELECT studentassessment.id_student, studentassessment.score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'fail' AND studentassessment.score > ( SELECT AVG(score) FROM studentassessment WHERE id_student = studentinfo.id_student );","SELECT s.id_student, s.code_module, s.code_presentation, s.gender, s.region, s.highest_education, s.imd_band, s.age_band, s.num_of_prev_attempts, s.studied_credits, s.disability, s.final_result, sa.score FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student WHERE s.final_result = 'Fail' AND sa.score > (SELECT AVG(sa.score) FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student WHERE s.final_result = 'Fail');","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
48,평균 클릭 수 보다 높은 클릭 수의 학생들의 평균 성적을 구해줘,SELECT AVG(studentassessment.score) AS average_score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click > ( SELECT AVG(studentvle.sum_click) FROM studentvle );,SELECT AVG(score) as avg_score FROM studentassessment JOIN studentvle ON studentassessment.id_student = studentvle.id_student WHERE sum_click > (SELECT AVG(sum_click) FROM studentvle) GROUP BY id_assessment;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
49,평균 클릭 수 보다 낮은 클릭 수의 학생들의 평균 성적을 구해줘,SELECT AVG(studentassessment.score) AS average_score FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student WHERE studentvle.sum_click < ( SELECT AVG(studentvle.sum_click) FROM studentvle );,SELECT AVG(score) FROM studentassessment sa JOIN (SELECT id_student FROM studentvle GROUP BY id_student HAVING SUM(sum_click) < (SELECT AVG(sum_click) FROM studentvle)) s ON sa.id_student = s.id_student;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
50,"0-35, 35-55, 55<= 의 연령대로 구분하고 각 연령대의 평균 성적을 구해줘","SELECT CASE WHEN studentinfo.age_band <= 35 THEN '0-35' WHEN studentinfo.age_band <= 55 THEN '35-55' ELSE '55+' END AS age_group, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY age_group;","SELECT age_band, AVG(score) FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student GROUP BY age_band HAVING age_band IN ('0-35', '35-55', '55+');","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
51,점수가 90 이상인 학생이 몇 명인지 연령대 별로 나눠줘,"SELECT studentinfo.age_band, COUNT(*) AS num_students FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentassessment.score >= 90 GROUP BY studentinfo.age_band;","SELECT age_band, COUNT(*) as num_students FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student WHERE score >= 90 GROUP BY age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
52,연령대 별 활동 유형을 구해줘,"SELECT studentinfo.age_band, vle.activity_type, COUNT(*) AS num_activities FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.age_band, vle.activity_type;","SELECT age_band, COUNT(*) as total, SUM(CASE WHEN final_result = 'Pass' THEN 1 ELSE 0 END) as passed, SUM(CASE WHEN final_result = 'Fail' THEN 1 ELSE 0 END) as failed FROM studentinfo WHERE is_branked = 1 GROUP BY age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
53,35-55의 연령대에서 점수가 가장 높은 학생의 정보를 알고 싶어,SELECT * FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.age_band = '35-55' ORDER BY studentassessment.score DESC LIMIT 1;,"SELECT studentinfo.id_student, studentinfo.age_band, studentassessment.score FROM studentassessment INNER JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.age_band = '35-55' ORDER BY studentassessment.score DESC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
54,35-55 연령대의 총 클릭 수,SELECT SUM(studentvle.sum_click) AS total_clicks FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.age_band = '35-55';,SELECT SUM(sum_click) FROM studentvle JOIN studentinfo ON studentvle.code_module = studentinfo.code_module AND studentvle.code_presentation = studentinfo.code_presentation WHERE studentinfo.age_band = '35-55' ;,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
55,최종 학력이 Post Graduate Qualification인 학생들을 연령대 별로 평균 점수를 알고 싶어,"SELECT studentinfo.age_band, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.highest_education = 'Post Graduate Qualification' GROUP BY studentinfo.age_band;","SELECT studentinfo.age_band, AVG(studentassessment.score) as avg_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentinfo.highest_education = 'Post Graduate Qualification' GROUP BY studentinfo.age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
56,최종 학력이 Lower Than A Level인 학생을 연령대 별로 평균 점수 확인,"SELECT studentinfo.age_band, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.highest_education = 'Lower Than A Level' GROUP BY studentinfo.age_band;","SELECT s.age_band, AVG(a.score) as avg_score FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student WHERE s.highest_education = 'Lower Than A Level' GROUP BY s.age_band;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
57,"AAA수업을 듣는 학생 중 0-35세 이면서 평균 점수 이상인 학생을 찾아줘",SELECT studentinfo.id_student FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.code_module = 'AAA' AND studentinfo.age_band = '0-35' GROUP BY studentinfo.id_student HAVING AVG(studentassessment.score) >= (SELECT AVG(score) FROM studentassessment);,"SELECT studentinfo.id_student, studentassessment.score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN courses ON studentinfo.code_module = courses.code_module WHERE courses.code_module = 'AAA' AND studentassessment.score > (SELECT AVG(score) FROM studentassessment WHERE id_assessment = studentassessment.id_assessment) AND studentinfo.age_band = '0-35';","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
58, BBB 수업을 듣는 학생 중 35-55 연령대이면서 평균 점수 이상인 학생들의 평균 점수,SELECT AVG(studentassessment.score) AS average_score FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.age_band = '35-55' AND studentinfo.code_module = 'BBB';,SELECT AVG(score) FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student JOIN courses c ON s.code_module = c.code_module WHERE c.difficulty = 'BBB' AND s.age_band = '35-55' AND sa.score > (SELECT AVG(score) FROM studentassessment WHERE id_student = sa.id_student);,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
59,CCC 수업을 듣는 학생 중 최종 결과가 pass인 학생의 활동 유형 횟수를 알고 싶어,"SELECT vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation WHERE studentinfo.code_module = 'CCC' AND studentinfo.final_result = 'pass' GROUP BY vle.activity_type;",SELECT COUNT(DISTINCT v.activity_type) FROM vle v JOIN courses c ON v.code_module = c.code_module JOIN studentinfo s ON c.code_presentation = s.code_presentation WHERE s.final_result = 'pass' AND c.code_presentation LIKE 'CCC%';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
60,모듈 별 최종 결과가 fail인 학생의 활동 유형의 횟수를 알고 싶어,"SELECT studentinfo.code_module, vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation WHERE studentinfo.final_result = 'fail' GROUP BY studentinfo.code_module, vle.activity_type;","SELECT c.code_module, c.code_presentation, v.activity_type, COUNT(*) as fail_count FROM studentinfo s JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation JOIN vle v ON c.code_module = v.code_module AND c.code_presentation = v.code_presentation WHERE s.final_result = 'fail' GROUP BY c.code_module, c.code_presentation, v.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
61,지역 별 활동 유형의 횟수,"SELECT studentinfo.region, vle.activity_type, COUNT(*) AS activity_count FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.region, vle.activity_type;","SELECT s.region, v.activity_type, COUNT(*) as frequency FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN vle v ON c.code_module = v.code_module GROUP BY s.region, v.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
62,"Ireland 지역의 성별과 활동 유형, 모듈 별 평균 점수","SELECT studentinfo.gender, vle.activity_type, AVG(studentassessment.score) AS average_score FROM studentinfo JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE studentinfo.region = 'Ireland' GROUP BY studentinfo.gender, vle.activity_type;","SELECT studentinfo.gender, studentassessment.activity_type, AVG(studentassessment.score) as avg_score FROM studentassessment INNER JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student INNER JOIN courses ON studentassessment.code_module = courses.code_module INNER JOIN regions ON studentinfo.region = regions.code_region WHERE regions.code_region = 'Ireland' GROUP BY studentinfo.gender, studentassessment.activity_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
63,연령대별로 가장 많이 사용된 활동 유형과 해당 활동 유형을 사용하는 학생들의 비율을 계산,"SELECT studentinfo.age_band, vle.activity_type, COUNT(*) AS activity_count, ROUND((COUNT(*) / subquery.total_students) * 100, 2) AS activity_percentage FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site JOIN (SELECT studentinfo_inner.age_band, vle_inner.activity_type, COUNT(*) AS activity_count, (SELECT COUNT(DISTINCT studentinfo_inner_inner.id_student) FROM studentinfo studentinfo_inner_inner JOIN studentvle studentvle_inner ON studentinfo_inner_inner.id_student = studentvle_inner.id_student JOIN vle vle_inner_inner ON studentvle_inner.id_site = vle_inner_inner.id_site WHERE studentinfo_inner_inner.age_band = studentinfo_inner.age_band) AS total_students FROM studentinfo studentinfo_inner JOIN studentvle ON studentinfo_inner.id_student = studentvle.id_student JOIN vle vle_inner ON studentvle.id_site = vle_inner.id_site GROUP BY studentinfo_inner.age_band, vle_inner.activity_type HAVING COUNT(*) = ( SELECT COUNT(*) FROM studentinfo studentinfo_inner_inner JOIN studentvle studentvle_inner ON studentinfo_inner_inner.id_student = studentvle_inner.id_student JOIN vle vle_inner_inner ON studentvle_inner.id_site = vle_inner_inner.id_site WHERE studentinfo_inner_inner.age_band = studentinfo_inner.age_band GROUP BY vle_inner_inner.activity_type ORDER BY COUNT(*) DESC LIMIT 1 )) AS subquery ON studentinfo.age_band = subquery.age_band AND vle.activity_type = subquery.activity_type GROUP BY studentinfo.age_band, vle.activity_type;","SELECT studentinfo.age_band, vle.activity_type, COUNT(DISTINCT studentvle.id_student) as num_students, ROUND(COUNT(DISTINCT studentvle.id_student) * 100.0 / (SELECT COUNT(DISTINCT studentvle.id_student) FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student WHERE studentinfo.age_band = studentinfo.age_band), 2) as percentage FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student JOIN vle ON studentvle.code_module = vle.code_module AND studentvle.code_presentation = vle.code_presentation GROUP BY studentinfo.age_band, vle.activity_type ORDER BY num_students DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
64,"평균 클릭 수 보다 많은 학생과 적은 학생으로 구분하고 많이 듣는 수업, 평균 점수를 각각 구해줘","WITH AverageClicks AS ( SELECT AVG(sum_click) AS avg_clicks FROM studentvle ), StudentScores AS ( SELECT studentvle.id_student, studentinfo.code_module, AVG(studentassessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_clicks FROM studentvle JOIN studentassessment ON studentvle.id_student = studentassessment.id_student JOIN studentinfo ON studentvle.id_student = studentinfo.id_student GROUP BY studentvle.id_student, studentinfo.code_module ), CourseClickCounts AS ( SELECT code_module, CASE WHEN avg_clicks > (SELECT avg_clicks FROM AverageClicks) THEN 'Above Average Clicks' ELSE 'Below Average Clicks' END AS click_category, COUNT(*) AS student_count FROM StudentScores GROUP BY code_module, click_category ) SELECT CourseClickCounts.code_module, CourseClickCounts.click_category, CourseClickCounts.student_count FROM CourseClickCounts ORDER BY CourseClickCounts.student_count DESC;","SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) AS avg_clicks, AVG(a.score) AS avg_score FROM studentvle sv JOIN studentinfo si ON sv.id_student = si.id_student JOIN studentassessment a ON si.id_student = a.id_student JOIN courses c ON sv.code_module = c.code_module GROUP BY c.code_module, c.code_presentation HAVING AVG(sv.sum_click) > AVG(sv.sum_click) OVER (PARTITION BY c.code_module) OR AVG(a.score) > AVG(a.score) OVER (PARTITION BY c.code_module) ORDER BY c.code_module, c.code_presentation, avg_clicks DESC, avg_score DESC;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
65,평가 방법이 TMA인 학생들의 정보,"SELECT studentAssessment.*, studentInfo.gender, studentInfo.region, studentInfo.highest_education, studentInfo.imd_band, studentInfo.age_band, studentInfo.num_of_prev_attempts, studentInfo.studied_credits, studentInfo.disability, studentInfo.final_result FROM studentAssessment JOIN assessments ON studentAssessment.id_assessment = assessments.id_assessment JOIN studentInfo ON studentAssessment.id_student = studentInfo.id_student WHERE assessments.assessment_type = 'TMA';","SELECT studentinfo.code_module, studentinfo.code_presentation, studentassessment.is_branked, studentassessment.score FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student INNER JOIN assessments ON studentassessment.code_module = assessments.code_module AND studentassessment.code_presentation = assessments.code_presentation WHERE assessments.assessment_type = 'TMA';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
66,"35-55세 학생들의 가장 많이 듣는 수업, 그 수업의 점수, 지역, 사이트id","SELECT studentinfo.code_module, AVG(studentassessment.score) AS average_score, studentinfo.region, studentvle.id_site FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentinfo.age_band = '35-55' GROUP BY studentinfo.code_module, studentinfo.region, studentvle.id_site ORDER BY COUNT(*) DESC LIMIT 1;","SELECT studentinfo.region, courses.code_module, studentassessment.score, studentvle.id_site FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN courses ON studentinfo.code_module = courses.code_module WHERE studentinfo.age_band BETWEEN '35-44' AND '55-64' GROUP BY studentinfo.region, courses.code_module, studentassessment.score, studentvle.id_site ORDER BY COUNT(studentvle.id_site) DESC LIMIT 10;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
67,"55세 이상의 학생들의 지역 별 평균 점수와 사이트 id, 활동유형","SELECT studentinfo.region, AVG(studentassessment.score) AS average_score, vle.id_site, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE studentinfo.age_band = '55<=' GROUP BY studentinfo.region, vle.id_site, vle.activity_type;","SELECT AVG(s.score) as avg_score, s.region, v.activity_type, v.id_site FROM studentassessment s JOIN studentvle sv ON s.id_student = sv.id_student JOIN vle v ON sv.code_module = v.code_module AND sv.code_presentation = v.code_presentation WHERE sv.age_band = '55+' GROUP BY s.region, v.activity_type, v.id_site;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
68,"평가 유형이 CMA 인 학생을 연령 별로 나누어 인원 수, 평균 점수, 연령 별 가장 많은 활동 유형","SELECT si.age_band, COUNT(sa.id_student) AS student_count, AVG(sa.score) AS average_score, (SELECT vle.activity_type FROM studentvle sv JOIN vle ON sv.id_site = vle.id_site JOIN studentinfo sii ON sv.id_student = sii.id_student WHERE sii.age_band = si.age_band GROUP BY vle.activity_type ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_activity FROM studentassessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentinfo si ON sa.id_student = si.id_student WHERE a.assessment_type = 'CMA' GROUP BY si.age_band;","SELECT studentinfo.age_band, COUNT(DISTINCT studentinfo.id_student) as num_students, AVG(assessments.score) as avg_score, vle.activity_type as most_active_activity FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment JOIN studentinfo ON assessments.code_module = studentinfo.code_module JOIN studentvle ON assessments.code_module = studentvle.code_module JOIN vle ON assessments.code_module = vle.code_module WHERE assessments.assessment_type = 'CMA' GROUP BY studentinfo.age_band, vle.activity_type ORDER BY studentinfo.age_band, vle.activity_type DESC;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;  CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
69,"장애가 있는 학생과 없는 학생으로 나누어 가장 많이 듣는 수업, 평균 점수와 평균 이수 학점","SELECT si.disability, courses.code_module, COUNT(*) AS course_count, AVG(sa.score) AS average_score, AVG(si.studied_credits) AS average_credits FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentvle sv ON si.id_student = sv.id_student JOIN vle ON sv.id_site = vle.id_site JOIN courses ON si.code_module = courses.code_module GROUP BY si.disability, courses.code_module ORDER BY course_count DESC;","SELECT c.code_module, c.code_presentation, AVG(s.score) as avg_score, AVG(s.studied_credits) as avg_credits FROM studentassessment s INNER JOIN studentinfo si ON s.id_student = si.id_student INNER JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation, si.disability;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
70,수업 모듈 및 프레젠테이션에서 학생 지역별로 등록된 학생 수와 평균 점수를 비교,"SELECT courses.code_module, courses.code_presentation, studentinfo.region, COUNT(studentregistration.id_student) AS num_students_registered, AVG(studentassessment.score) AS average_score FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentregistration ON studentinfo.code_module = studentregistration.code_module AND studentinfo.code_presentation = studentregistration.code_presentation AND studentinfo.id_student = studentregistration.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY courses.code_module, courses.code_presentation, studentinfo.region ORDER BY courses.code_module, courses.code_presentation, studentinfo.region;","SELECT studentinfo.region, COUNT(DISTINCT studentregistration.id_student) as num_students, AVG(studentassessment.score) as avg_score FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY studentinfo.region;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
71,"imd_band 별로 학생 수와 비율, 평균 점수와 활동 유형을 알고 싶어","SELECT studentinfo.imd_band, COUNT(studentinfo.id_student) AS student_count, COUNT(studentinfo.id_student) / (SELECT COUNT(*) FROM studentinfo) * 100 AS student_ratio, AVG(studentassessment.score) AS average_score, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site GROUP BY studentinfo.imd_band, vle.activity_type;","SELECT imd_band, AVG(score) as avg_score, activity_type, COUNT(DISTINCT id_student) as num_students, ROUND(COUNT(DISTINCT id_student) * 100.0 / (SELECT COUNT(DISTINCT id_student) FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.imd_band = h.imd_band), 2) as pct_students FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student JOIN studentvle sv ON si.id_student = sv.id_student JOIN vle v ON sv.code_module = v.code_module AND sv.code_presentation = v.code_presentation GROUP BY imd_band, activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
72,"최고 학력 별 학생 수와 평균 점수, 가장 많이 한 활동 유형","SELECT external_studentinfo.highest_education, COUNT(*) AS num_students, AVG(external_studentassessment.score) AS average_score, vle.activity_type AS most_common_activity FROM studentinfo AS external_studentinfo JOIN studentassessment AS external_studentassessment ON external_studentinfo.id_student = external_studentassessment.id_student JOIN assessments AS external_assessments ON external_studentassessment.id_assessment = external_assessments.id_assessment JOIN studentvle AS external_studentvle ON external_studentinfo.id_student = external_studentvle.id_student JOIN vle ON external_studentvle.id_site = vle.id_site GROUP BY external_studentinfo.highest_education, vle.activity_type HAVING COUNT(*) = (SELECT COUNT(*) AS activity_count FROM studentinfo AS sub_studentinfo JOIN studentassessment AS sub_studentassessment ON sub_studentinfo.id_student = sub_studentassessment.id_student JOIN assessments AS sub_assessments ON sub_studentassessment.id_assessment = sub_assessments.id_assessment JOIN studentvle AS sub_studentvle ON sub_studentinfo.id_student = sub_studentvle.id_student JOIN vle AS sub_vle ON sub_studentvle.id_site = sub_vle.id_site WHERE sub_studentinfo.highest_education = external_studentinfo.highest_education GROUP BY sub_studentinfo.highest_education, sub_vle.activity_type ORDER BY activity_count DESC LIMIT 1);","SELECT s.highest_education, COUNT(s.id_student) as num_students, AVG(a.score) as avg_score, v.activity_type as most_common_activity FROM studentinfo s JOIN studentassessment a ON s.id_student = a.id_student JOIN studentvle sv ON s.id_student = sv.id_student JOIN vle v ON sv.code_module = v.code_module AND sv.code_presentation = v.code_presentation GROUP BY s.highest_education, v.activity_type ORDER BY num_students DESC, avg_score DESC, most_common_activity DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
73,이수 학점이 100 이상인 학생과 100 이하인 학생을 구분하고 각각의 평균 점수와 활동 유형을 구해줘,"SELECT CASE WHEN external_studentinfo.studied_credits >= 100 THEN '100 이상' ELSE '100 미만' END AS credit_group, AVG(external_studentassessment.score) AS average_score, SUBSTRING_INDEX(GROUP_CONCAT(sub_v.activity_type ORDER BY activity_count DESC), ',', 1) AS most_common_activity FROM studentinfo AS external_studentinfo JOIN studentassessment AS external_studentassessment ON external_studentinfo.id_student = external_studentassessment.id_student JOIN assessments AS external_assessments ON external_studentassessment.id_assessment = external_assessments.id_assessment JOIN (SELECT code_module, code_presentation, activity_type, COUNT(*) AS activity_count FROM vle WHERE activity_type IS NOT NULL GROUP BY code_module, code_presentation, activity_type) AS sub_v ON external_assessments.code_module = sub_v.code_module AND external_assessments.code_presentation = sub_v.code_presentation GROUP BY CASE WHEN external_studentinfo.studied_credits >= 100 THEN '100 이상' ELSE '100 미만' END;","SELECT s.gender, s.region, s.highest_education, s.imd_band, s.age_band, AVG(a.score) as avg_score, v.activity_type, CASE WHEN SUM(s.studied_credits) > 100 THEN '100+ credits' ELSE 'Less than 100 credits' END as studied_credits FROM studentinfo s INNER JOIN studentassessment a ON s.id_student = a.id_student INNER JOIN assessments c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation INNER JOIN vle v ON c.code_module = v.code_module AND c.code_presentation = v.code_presentation GROUP BY s.gender, s.region, s.highest_education, s.imd_band, s.age_band, v.activity_type, CASE WHEN SUM(s.studied_credits) > 100 THEN '100+ credits' ELSE 'Less than 100 credits' END ;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
74,평가유형이 TMA인 학생 중 최종 결과가 Pass인 학생을 찾고 각 학생들의 클릭 수를 구해줘,"SELECT studentassessment.id_student, SUM(studentvle.sum_click) AS total_clicks FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentvle ON studentassessment.id_student = studentvle.id_student AND assessments.code_module = studentvle.code_module AND assessments.code_presentation = studentvle.code_presentation WHERE assessments.assessment_type = 'TMA' AND studentinfo.final_result = 'Pass' GROUP BY studentassessment.id_student;","SELECT s.code_module, s.code_presentation, s.id_student, SUM(sv.sum_click) as total_clicks FROM studentinfo s INNER JOIN studentassessment sa ON s.id_student = sa.id_student INNER JOIN studentvle sv ON s.code_module = sv.code_module AND s.code_presentation = sv.code_presentation WHERE sa.assessment_type = 'TMA' AND sa.final_result = 'Pass' GROUP BY s.code_module, s.code_presentation, s.id_student;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
75,"각 모듈 프레젠테이션에 등록한 학생의 평균 학습 시간과 모듈 정보를 결합하여 분석하고 모듈, 프레젠테이션, 평균 학습 시간을 조회","SELECT courses.code_module, courses.code_presentation, AVG(DATEDIFF(studentvle.date, studentregistration.date_registration)) AS avg_learning_time FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY courses.code_module, courses.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) as avg_learning_hours FROM courses c INNER JOIN studentregistration sr ON c.code_module = sr.code_module AND c.code_presentation = sr.code_presentation INNER JOIN studentvle sv ON c.code_module = sv.code_module AND c.code_presentation = sv.code_presentation GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
76,"각 모듈 프레젠테이션에 등록한 학생의 평균 상호 작용 횟수와 각 모듈 프레젠테이션의 길이를 모듈 정보와 결합하여 분석하고 모듈, 프레젠테이션, 평균 상호 작용 횟수, 프레젠테이션 길이를 조회","SELECT courses.code_module, courses.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, courses.module_presentation_length FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY courses.code_module, courses.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(s.sum_click) as avg_interactions, c.module_presentation_length FROM courses c JOIN studentregistration sr ON c.code_module = sr.code_module AND c.code_presentation = sr.code_presentation JOIN studentvle s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation GROUP BY c.code_module, c.code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
77,"각 모듈 프레젠테이션에 등록한 학생의 최고 점수와 모듈 정보를 결합하여 분석하고 모듈, 프레젠테이션, 최고 점수를 조회","SELECT courses.code_module, courses.code_presentation, MAX(studentAssessment.score) AS max_score FROM courses LEFT JOIN studentregistration ON courses.code_module = studentregistration.code_module AND courses.code_presentation = studentregistration.code_presentation LEFT JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student GROUP BY courses.code_module, courses.code_presentation;","SELECT c.code_module, c.code_presentation, MAX(sa.score) as highest_score FROM courses c JOIN studentregistration sr ON c.code_module = sr.code_module AND c.code_presentation = sr.code_presentation JOIN studentassessment sa ON sr.id_student = sa.id_student GROUP BY c.code_module, c.code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
78,"각 학생의 평균 점수와 VLE 자료를 이용한 평균 상호 작용 횟수를 학생 정보와 결합하여 분석하고 학생, 평균 점수, 평균 상호작용 횟수를 조회","SELECT studentInfo.id_student, AVG(studentAssessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_interaction_count FROM studentInfo LEFT JOIN studentAssessment ON studentInfo.id_student = studentAssessment.id_student LEFT JOIN studentvle ON studentInfo.id_student = studentvle.id_student GROUP BY studentInfo.id_student;","SELECT s.code_module, s.code_presentation, s.gender, s.region, s.highest_education, s.imd_band, s.age_band, s.num_of_prev_attempts, s.studied_credits, s.disability, s.final_result, AVG(sa.score) as avg_score, AVG(sv.sum_click) as avg_interactions FROM studentinfo s INNER JOIN studentassessment sa ON s.id_student = sa.id_student INNER JOIN studentvle sv ON s.id_student = sv.id_student GROUP BY s.code_module, s.code_presentation, s.gender, s.region, s.highest_education, s.imd_band, s.age_band, s.num_of_prev_attempts, s.studied_credits, s.disability, s.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
79,"각 모듈 프레젠테이션에 등록한 학생 중 여학생의 평균 점수와 여학생이 참여한 VLE 자료의 평균 상호 작용 횟수를 분석하고 모듈, 프레젠테이션, 평균점수, 평균 상호작용 수를 조회","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score, AVG(studentvle.sum_click) AS avg_interaction_count FROM studentregistration INNER JOIN studentInfo ON studentregistration.id_student = studentInfo.id_student AND studentInfo.gender = 'F' LEFT JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student LEFT JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;","SELECT c.code_module, p.code_presentation, AVG(sf.score) as avg_score, AVG(sv.sum_click) as avg_interactions FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student JOIN courses c ON sr.code_module = c.code_module JOIN courses p ON sr.code_presentation = p.code_presentation JOIN studentvle sv ON sr.id_student = sv.id_student JOIN studentfinals sf ON sr.id_student = sf.id_student WHERE s.gender = 'Female' GROUP BY c.code_module, p.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
80,"각 모듈 프레젠테이션에 등록한 학생 중 여학생의 평균 점수와 남학생의 평균 점수를 비교하여 분석하고 모듈, 프레젠테이션, 여학생의 평균점수, 남학생의 평균점수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(CASE WHEN si.gender = 'F' THEN sa.score END) AS avg_female_score, AVG(CASE WHEN si.gender = 'M' THEN sa.score END) AS avg_male_score FROM studentregistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(s.score) as avg_female_score, AVG(s.score) as avg_male_score FROM studentassessment s INNER JOIN studentinfo st ON s.id_student = st.id_student INNER JOIN studentregistration r ON st.id_student = r.id_student INNER JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation WHERE st.gender IN ('F', 'M') GROUP BY c.code_module, c.code_presentation HAVING COUNT(DISTINCT st.id_student) > 10;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
81,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 상호 작용 횟수가 평균 이상인 학생의 평균 점수를 분석하고 모듈, 프레젠테이션, 평균 점수를 조회","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN ( SELECT id_student, AVG(sum_click) AS avg_interaction_count FROM studentvle GROUP BY id_student HAVING AVG(sum_click) > (SELECT AVG(sum_click) FROM studentvle) ) AS high_interaction ON studentregistration.id_student = high_interaction.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(a.score) as avg_score FROM studentassessment a JOIN studentregistration r ON a.id_student = r.id_student JOIN studentvle v ON r.code_module = v.code_module AND r.code_presentation = v.code_presentation GROUP BY c.code_module, c.code_presentation HAVING AVG(v.sum_click) > (SELECT AVG(sum_click) FROM studentvle GROUP BY code_module, code_presentation);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
82,"각 모듈 프레젠테이션에 등록한 학생 중 모든 평가 유형에 참여한 학생의 수를 분석하고 모듈, 프레젠테이션, 학생수를 조회","SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(DISTINCT studentregistration.id_student) AS num_students_with_all_assessment_types FROM studentregistration INNER JOIN assessments ON studentregistration.code_module = assessments.code_module AND studentregistration.code_presentation = assessments.code_presentation LEFT JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student AND assessments.id_assessment = studentAssessment.id_assessment GROUP BY studentregistration.code_module, studentregistration.code_presentation;","SELECT courses.code_module, courses.code_presentation, COUNT(DISTINCT studentassessment.id_student) as student_count FROM studentassessment JOIN studentregistration ON studentassessment.id_student = studentregistration.id_student JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment JOIN courses ON assessments.code_module = courses.code_module AND assessments.code_presentation = courses.code_presentation GROUP BY courses.code_module, courses.code_presentation HAVING COUNT(DISTINCT assessments.assessment_type) = (SELECT COUNT(DISTINCT assessment_type) FROM assessments WHERE code_module = courses.code_module AND code_presentation = courses.code_presentation) ;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
83,"각 모듈 프레젠테이션에 등록한 학생 중 평균적으로 가장 높은 평가 점수를 받은 학생의 성적 밴드(IMD) 분포를 분석하고 모듈, 프레젠테이션, 성적밴드, 학생수를 조회","SELECT studentregistration.code_module, studentregistration.code_presentation, imd_band, COUNT(studentregistration.id_student) AS num_students FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN studentInfo ON studentregistration.id_student = studentInfo.id_student WHERE studentAssessment.score = ( SELECT MAX(score) FROM studentAssessment WHERE id_student = studentregistration.id_student ) GROUP BY studentregistration.code_module, studentregistration.code_presentation, imd_band;","SELECT m.code_module, p.code_presentation, sb.imd_band, COUNT(sr.id_student) as num_students FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student JOIN studentassessment sa ON s.id_student = sa.id_student JOIN courses c ON sr.code_module = c.code_module JOIN courses p ON sr.code_presentation = p.code_presentation JOIN (SELECT code_module, code_presentation, AVG(score) as avg_score FROM studentassessment GROUP BY code_module, code_presentation) a ON c.code_module = a.code_module AND p.code_presentation = a.code_presentation JOIN (SELECT DISTINCT imd_band FROM studentinfo) sb ON 1=1 GROUP BY m.code_module, p.code_presentation, sb.imd_band ORDER BY m.code_module, p.code_presentation, sb.imd_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
84,10월 프레젠테이션에 제공되는 모듈과 프레젠테이션 길이를 조회,"SELECT courses.code_module, courses.module_presentation_length FROM courses WHERE courses.code_presentation LIKE '%B' OR courses.code_presentation LIKE '%J';","SELECT m.name as module_name, c.code_presentation as presentation_code, c.module_presentation_length as presentation_length FROM courses c JOIN modules m ON c.code_module = m.code_module WHERE c.code_presentation LIKE '%J%' AND m.start_date >= '2022-10-01' AND m.start_date < '2023-01-01';","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
85,"성별 VLE 자료 사용 분석하고 성별, VLE 자료 사용횟수를 조회","SELECT studentinfo.gender, COUNT(studentvle.id_site) AS total_interactions FROM studentvle INNER JOIN studentinfo ON studentvle.id_student = studentinfo.id_student GROUP BY studentinfo.gender ORDER BY total_interactions DESC;","SELECT gender, COUNT(DISTINCT id_site) as num_sites FROM studentvle JOIN studentinfo ON studentvle.code_module = studentinfo.code_module AND studentvle.code_presentation = studentinfo.code_presentation GROUP BY gender;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
86,"특정 평가 유형의 평균 점수 및 합격 비율 계산하고 평가 유형, 평균 점수, 40점 이상 학생 수, 총 시도 횟수를 조회 ","SELECT assessments.assessment_type, AVG(studentassessment.score) AS avg_score, COUNT(CASE WHEN studentassessment.score >= 40 THEN 1 ELSE NULL END) AS pass_count, COUNT(*) AS total_attempts FROM studentassessment INNER JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment GROUP BY assessments.assessment_type;","SELECT assessment_type, AVG(score) AS avg_score, COUNT(CASE WHEN score >= 40 THEN 1 END) * 100.0 / COUNT(*) AS pass_percentage, COUNT(*) AS total_attempts FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment WHERE assessments.assessment_type = 'TMA' GROUP BY assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
87,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생 중 최근에 등록한 학생의 평균 상호 작용 횟수와 최근 제출일 사이의 상관 관계를 분석하고 모듈, 프레젠테이션, 평균 상호 작용 횟수, 최근 제출일을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentvle.sum_click) AS avg_interaction_count, MAX(studentvle.date) AS recent_interaction_date FROM studentregistration JOIN studentvle ON studentregistration.id_student = studentvle.id_student JOIN ( SELECT id_student, MAX(date) AS max_date FROM studentvle GROUP BY id_student ) AS sq ON studentvle.id_student = sq.id_student AND studentvle.date = sq.max_date GROUP BY studentregistration.code_module, studentregistration.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) as avg_interactions, MAX(sr.date_registration) as latest_registration_date FROM studentregistration sr INNER JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation HAVING MAX(sr.date_registration) = (SELECT MAX(date_registration) FROM studentregistration WHERE code_module = c.code_module AND code_presentation = c.code_presentation);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
88,"특정 기간 동안 VLE 자료 사용량이 가장 높은 학생 10위를 대상으로 학생, 모듈, 프레젠테이션, 상호작용횟수를 조회","WITH student_interactions AS ( SELECT studentvle.id_student, COUNT(*) AS interaction_count FROM studentvle GROUP BY studentvle.id_student ) SELECT studentinfo.id_student, studentinfo.code_module, studentinfo.code_presentation, interaction_count FROM student_interactions INNER JOIN studentinfo ON student_interactions.id_student = studentinfo.id_student WHERE interaction_count >= ( SELECT MIN(interaction_count) FROM student_interactions ORDER BY interaction_count DESC LIMIT 10 ) ORDER BY interaction_count DESC;","SELECT s.code_module, s.code_presentation, s.id_student, s.id_site, s.date, s.sum_click, si.gender, si.region, si.highest_education, si.imd_band, si.age_band, si.num_of_prev_attempts, si.studied_credits, si.disability, si.final_result FROM studentvle s INNER JOIN studentinfo si ON s.id_student = si.id_student WHERE s.date BETWEEN 10 AND 20 GROUP BY s.code_module, s.code_presentation, s.id_student, s.id_site, s.date, s.sum_click, si.gender, si.region, si.highest_education, si.imd_band, si.age_band, si.num_of_prev_attempts, si.studied_credits, si.disability, si.final_result ORDER BY s.sum_click DESC LIMIT 10;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
89,"장애를 선언한 학생 수가 100명을 초과하는 모든 모듈, 프레젠테이션을 조회","SELECT code_module, code_presentation FROM studentinfo WHERE disability = 'Y' GROUP BY code_module, code_presentation HAVING COUNT(*) > 100;","SELECT DISTINCT code_module, code_presentation FROM studentinfo WHERE disability = 'yes' GROUP BY code_module, code_presentation HAVING COUNT(*) > 100;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
90,"여학생의 비율이 60% 이상인 모든 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'F' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) * 1.0 / (SELECT COUNT(DISTINCT studentregistration2.id_student) FROM studentregistration studentregistration2 WHERE studentregistration2.code_module = studentregistration.code_module AND studentregistration2.code_presentation = studentregistration.code_presentation)) > 0.6;","SELECT courses.code_module, courses.code_presentation FROM courses INNER JOIN studentregistration ON courses.code_module = studentregistration.code_module INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'female' GROUP BY courses.code_module, courses.code_presentation HAVING COUNT(studentregistration.id_student) * 100.0 / (SELECT COUNT(*) FROM studentregistration WHERE studentregistration.code_module = courses.code_module) > 60;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
91,"장애 학생의 비율이 10% 미만인 모든 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.disability = 'Y' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) / (SELECT COUNT(id_student) FROM studentinfo WHERE code_module = studentregistration.code_module AND code_presentation = studentregistration.code_presentation)) < 0.1;","SELECT m.code_module, p.code_presentation FROM studentregistration sr JOIN studentinfo s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module, p.code_presentation HAVING COUNT(s.id_student) * 100.0 / (SELECT COUNT(*) FROM studentregistration sr JOIN studentinfo s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation WHERE s.disability = 'yes') < 10;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
92,"모듈을 Pass 등급을 받은 학생 수가 100명을 초과하는 모든 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Pass' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING COUNT(studentinfo.id_student) > 100;","SELECT courses.code_module, courses.code_presentation FROM courses INNER JOIN studentregistration ON courses.code_module = studentregistration.code_module INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Pass' GROUP BY courses.code_module, courses.code_presentation HAVING COUNT(studentinfo.id_student) > 100;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
93,"VLE에서 학생당 평균 클릭 수가 5 미만인 모듈, 프레젠테이션을 조회","SELECT studentinfo.code_module, studentinfo.code_presentation FROM studentinfo INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.code_module, studentinfo.code_presentation HAVING AVG(studentvle.sum_click) < 5;","SELECT m.name as module_name, p.name as presentation_name, AVG(s.sum_click) as avg_clicks_per_student FROM studentvle s JOIN courses m ON s.code_module = m.code_module JOIN courses p ON s.code_presentation = p.code_presentation GROUP BY m.code_module, p.code_presentation HAVING AVG(s.sum_click) < 5;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
94,"남학생의 비율이 40%를 넘는 모든 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.gender = 'M' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(studentinfo.id_student) * 1.0 / (SELECT COUNT(*) FROM studentregistration sr2 WHERE sr2.code_module = studentregistration.code_module AND sr2.code_presentation = studentregistration.code_presentation)) > 0.4;","SELECT c.code_module, c.code_presentation FROM studentregistration sr INNER JOIN studentinfo s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation WHERE s.gender ='male' GROUP BY c.code_module, c.code_presentation HAVING COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentregistration sr INNER JOIN studentinfo s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation WHERE s.code_module = sr.code_module AND s.code_presentation = sr.code_presentation) > 40;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
95,"등록 취소된 학생 수가 20명을 초과하는 모든 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration WHERE studentregistration.date_unregistration IS NOT NULL GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING COUNT(studentregistration.id_student) > 20;","SELECT DISTINCT c.code_module, c.code_presentation FROM courses c INNER JOIN studentregistration sr ON c.code_module = sr.code_module AND c.code_presentation = sr.code_presentation WHERE sr.date_unregistration IS NOT NULL GROUP BY c.code_module, c.code_presentation HAVING COUNT(*) > 20;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
96,"학생의 평균 이수학점이 100학점 미만인 모듈, 프레젠테이션을 조회","SELECT studentinfo.code_module, studentinfo.code_presentation FROM studentinfo GROUP BY studentinfo.code_module, studentinfo.code_presentation HAVING AVG(studentinfo.studied_credits) < 100;","SELECT courses.code_module, courses.code_presentation FROM courses INNER JOIN studentinfo ON courses.code_module = studentinfo.code_module INNER JOIN studentinfo AS studentinfo_2 ON courses.code_presentation = studentinfo_2.code_presentation WHERE studentinfo.studied_credits < 100 GROUP BY courses.code_module, courses.code_presentation HAVING COUNT(DISTINCT studentinfo_2.id_student) > 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
97,"장애 학생의 비율이 5%를 초과하는 모든 모듈, 프레젠테이션을 조회","SELECT sr.code_module, sr.code_presentation FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(si.id_student) * 1.0 / (SELECT COUNT(*) FROM studentregistration WHERE code_module = sr.code_module AND code_presentation = sr.code_presentation)) > 0.05;","SELECT courses.code_module, courses.code_presentation FROM courses INNER JOIN studentregistration ON courses.code_module = studentregistration.code_module INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.disability = 'yes' GROUP BY courses.code_module, courses.code_presentation HAVING COUNT(DISTINCT studentinfo.id_student) / (SELECT COUNT(DISTINCT studentregistration.id_student) FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentregistration.code_module = courses.code_module) > 0.05;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
98,장애가 있는 학생의 비율이 10% 미만이고 학생의 평균 이전 시도 횟수가 2회 미만인 모듈과 프레젠테이션을 조회,"SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (SUM(CASE WHEN studentinfo.disability = 'Y' THEN 1 ELSE 0 END) / COUNT(studentinfo.id_student)) < 0.1 AND AVG(studentinfo.num_of_prev_attempts) < 2;","SELECT m.code_module, p.code_presentation FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student JOIN courses c ON sr.code_module = c.code_module JOIN courses p ON sr.code_presentation = p.code_presentation WHERE s.disability = 'yes' AND s.num_of_prev_attempts < 2 GROUP BY m.code_module, p.code_presentation HAVING COUNT(sr.id_student) < (SELECT COUNT(*) * 0.1 FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student WHERE s.code_module = m.code_module AND s.code_presentation = p.code_presentation);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
99,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생 중 최근에 등록한 학생의 평균 점수와 최근 제출일 사이의 상관 관계를 분석하고 모듈, 프레젠테이션, 평균 점수, 최근 제출일을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentAssessment.score) AS avg_score, MAX(studentAssessment.date_submitted) AS recent_submission_date FROM studentregistration INNER JOIN studentAssessment ON studentregistration.id_student = studentAssessment.id_student INNER JOIN ( SELECT id_student, MAX(date) AS max_date FROM studentvle GROUP BY id_student ) top_students ON studentregistration.id_student = top_students.id_student INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student AND studentvle.date = top_students.max_date GROUP BY studentregistration.code_module, studentregistration.code_presentation;","SELECT m.code_module, p.code_presentation, AVG(a.score) as avg_score, MAX(sr.date_registration) as recent_submission_date FROM studentassessment a INNER JOIN studentregistration sr ON a.id_student = sr.id_student INNER JOIN studentvle v ON sr.code_module = v.code_module AND sr.code_presentation = v.code_presentation WHERE v.date IS NOT NULL GROUP BY m.code_module, p.code_presentation ORDER BY recent_submission_date DESC;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
100,주당 평균 상호 작용 수가 가장 높은 모듈과 프레젠테이션을 조회,"SELECT studentvle.code_module, studentvle.code_presentation FROM studentvle GROUP BY studentvle.code_module, studentvle.code_presentation ORDER BY AVG(studentvle.sum_click) DESC LIMIT 1;","SELECT m.name_module, p.name_presentation, AVG(sum_click/7) as avg_interactions_per_week FROM studentvle s JOIN module v ON s.code_module = v.code_module JOIN presentation p ON v.code_presentation = p.code_presentation JOIN student st ON s.id_student = st.id_student GROUP BY m.name_module, p.name_presentation ORDER BY avg_interactions_per_week DESC LIMIT 5;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
101,"모듈을 Pass 등급을 받은 학생의 비율이 평균 합격률보다 낮은 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student)) < (SELECT AVG(passing_rate) FROM (SELECT COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student) AS passing_rate FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation) AS avg_passing_rates);","SELECT courses.code_module, courses.code_presentation FROM courses INNER JOIN studentregistration ON courses.code_module = studentregistration.code_module INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Pass' GROUP BY courses.code_module, courses.code_presentation HAVING COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.code_module = courses.code_module AND studentinfo.final_result = 'Pass') < (SELECT AVG(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.code_module = courses.code_module AND studentinfo.final_result = 'Pass')) FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.code_module = courses.code_module);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
102,모듈을 Pass 등급을 받은 학생의 비율이 40% 미만인 지역명과 비율을 조회,"SELECT studentinfo.region, COUNT(CASE WHEN studentinfo.final_result = 'Pass' THEN 1 END) / COUNT(studentinfo.id_student) AS pass_percentage FROM studentinfo GROUP BY studentinfo.region HAVING pass_percentage < 0.4;","SELECT s.region, ROUND(COUNT(s.id_student) * 100.0 / (SELECT COUNT(id_student) FROM studentinfo si WHERE si.code_module = c.code_module), 2) AS pass_percentage FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN (SELECT code_module, MAX(code_presentation) AS max_code_presentation FROM studentinfo GROUP BY code_module) sub ON s.code_presentation = sub.max_code_presentation WHERE c.final_result = 'Pass' GROUP BY s.region HAVING pass_percentage < 40;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
103,"모듈을 Pass 등급을 받은 남학생의 비율보다 여학생의 비율이 낮은 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Pass' GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING (COUNT(CASE WHEN studentinfo.gender = 'F' THEN 1 END) / COUNT(studentinfo.id_student)) < (COUNT(CASE WHEN studentinfo.gender = 'M' THEN 1 END) / COUNT(studentinfo.id_student));","SELECT c.code_module, c.code_presentation, s.gender, COUNT(s.id_student) as total_students FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation WHERE s.gender = 'Female' AND c.final_result = 'Pass' GROUP BY c.code_module, c.code_presentation, s.gender HAVING total_students < (SELECT COUNT(s.id_student) FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation WHERE s.gender = 'Male' AND c.final_result = 'Pass' GROUP BY c.code_module, c.code_presentation, s.gender) ORDER BY c.code_module, c.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
104,"학생의 평균 연령이 전체 평균 연령보다 높은 모듈, 프레젠테이션을 조회","SELECT studentregistration.code_module, studentregistration.code_presentation FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation HAVING AVG(studentinfo.age_band) > (SELECT AVG(age_band) FROM studentinfo);","SELECT c.code_module, c.code_presentation FROM courses c INNER JOIN studentregistration sr ON c.code_module = sr.code_module AND c.code_presentation = sr.code_presentation INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY c.code_module, c.code_presentation HAVING AVG(si.age_band) > (SELECT AVG(si.age_band) FROM studentinfo si);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
105,주당 평균 상호 작용 수가 가장 높은 지역을 분석하고 지역명과 평균 상호작용수를 조회. 데이터는 주당 평균 상호 작용 수를 기준으로 순서대로 나열,"SELECT studentinfo.region, AVG(studentvle.sum_click) AS avg_interactions_per_week FROM studentinfo INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.region ORDER BY avg_interactions_per_week DESC;","SELECT studentinfo.region, AVG(sum_click) as avg_interactions_per_week FROM studentvle JOIN studentinfo ON studentvle.code_module = studentinfo.code_module AND studentvle.code_presentation = studentinfo.code_presentation GROUP BY studentinfo.region ORDER BY avg_interactions_per_week DESC;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
106,"학생 등록 수가 가장 많은 모듈 프레젠테이션을 식별하고 모듈, 프레젠테이션, 학생수를 조회","SELECT code_module, code_presentation, COUNT(id_student) AS num_registrations FROM studentregistration GROUP BY code_module, code_presentation ORDER BY num_registrations DESC;","SELECT m.code_module, p.code_presentation, COUNT(sr.id_student) as student_count FROM studentregistration sr JOIN courses c ON sr.code_module = c.code_module JOIN courses p ON sr.code_presentation = p.code_presentation JOIN (SELECT code_module, MAX(date_registration) as max_date FROM studentregistration GROUP BY code_module) sd ON sr.code_module = sd.code_module AND sr.date_registration = sd.max_date GROUP BY m.code_module, p.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
107,각 모델 프레젠테이션과 평균 프레젠테이션 길이를 조회,"SELECT code_presentation, AVG(module_presentation_length) AS avg_length FROM courses GROUP BY code_presentation ORDER BY avg_length DESC;","SELECT code_module, code_presentation, AVG(module_presentation_length) as avg_length FROM courses GROUP BY code_module, code_presentation ;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
108,주당 평균 상호 작용 수가 가장 높은 모듈과 평균 상호 작용횟수를 조회,"SELECT studentregistration.code_module, AVG(studentvle.sum_click) AS avg_interactions_per_week FROM studentregistration INNER JOIN studentvle ON studentregistration.id_student = studentvle.id_student GROUP BY studentregistration.code_module ORDER BY avg_interactions_per_week DESC;","SELECT m.code_module, m.title_module, AVG(v.sum_click) as avg_interactions_per_week FROM studentregistration r JOIN courses m ON r.code_module = m.code_module JOIN studentvle v ON r.code_module = v.code_module WHERE m.date_start <= r.date_registration AND m.date_end >= r.date_unregistration GROUP BY m.code_module ORDER BY avg_interactions_per_week DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
109,장애를 선언한 학생의 비율이 가장 높은 모듈을 식별하고 모듈과 학생 비율을 식별,"SELECT studentregistration.code_module, COUNT(CASE WHEN studentinfo.disability = 'Y' THEN 1 END) / COUNT(studentinfo.id_student) * 100 AS disability_percentage FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY studentregistration.code_module ORDER BY disability_percentage DESC;","SELECT c.code_module, c.code_presentation, COUNT(s.id_student) as num_students, ROUND(COUNT(s.id_student) * 100.0 / (SELECT COUNT(*) FROM studentinfo si WHERE si.code_module = c.code_module), 2) as percentage FROM studentregistration sr INNER JOIN studentinfo s ON sr.id_student = s.id_student INNER JOIN courses c ON sr.code_module = c.code_module WHERE s.disability = 'yes' GROUP BY c.code_module, c.code_presentation ORDER BY percentage DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
110,학생의 평균 연령이 가장 높은 프레젠테이션을 검색하고 프레젠테이션과 프레젠테이션 별 평균 연령을 조회,"SELECT code_presentation, AVG(age_band) AS avg_age FROM studentinfo GROUP BY code_presentation ORDER BY avg_age DESC;","SELECT code_presentation, AVG(age) as avg_age FROM studentinfo GROUP BY code_presentation ORDER BY avg_age DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
111,"""23632"" 학생의 성별, 최종 결과, 해당 모듈의 평가 유형 및 가중치 조회","SELECT studentinfo.gender, studentinfo.final_result, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 23632;","SELECT s.gender, s.final_result, a.assessment_type, a.weight FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN assessments a ON c.code_module = a.code_module WHERE s.id_student = 23632;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
112,"모듈 정보, 평가 정보, 그리고 학생 정보를 결합하여 학생별 평가 점수 조회","SELECT studentinfo.id_student, studentinfo.gender, studentinfo.age_band, courses.code_module, courses.code_presentation, courses.module_presentation_length, assessments.assessment_type, assessments.weight, assessments.date, assessments.id_assessment FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation JOIN courses ON assessments.code_module = courses.code_module AND assessments.code_presentation = courses.code_presentation ORDER BY studentinfo.id_student, assessments.date;","SELECT s.id_student, s.gender, s.region, s.highest_education, s.imd_band, s.age_band, s.num_of_prev_attempts, s.studied_credits, s.disability, s.final_result, c.module_presentation_length, a.assessment_type, a.date, a.weight FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation INNER JOIN assessments a ON s.code_module = a.code_module AND s.code_presentation = a.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
113,"""24734""학생의 성별, 연령대, 지역, 그리고 해당 모듈의 평가 유형 및 가중치 조회","SELECT studentinfo.gender, studentinfo.age_band, studentinfo.region, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 24734;","SELECT s.gender, s.age_band, s.region, a.assessment_type, a.weight FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN assessments a ON c.code_module = a.code_module WHERE s.id_student = 24734;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
114,"런던 지역의 학생들의 성별, 연령대, 장애 여부, 그리고 해당 모듈의 평가 유형 및 가중치 조회","SELECT studentinfo.gender, studentinfo.age_band, studentinfo.disability, assessments.assessment_type, assessments.weight FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.region = 'London Region';","SELECT studentinfo.gender, studentinfo.age_band, studentinfo.disability, assessments.assessment_type, assessments.weight FROM studentinfo INNER JOIN courses ON studentinfo.code_module = courses.code_module INNER JOIN assessments ON courses.code_module = assessments.code_module WHERE studentinfo.region = 'London';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
115,"""27759"" 학생의 성별, 연령대, 장애 여부, 그리고 해당 모듈의 평가 유형, 가중치, 제출 날짜 조회","SELECT studentinfo.gender, studentinfo.age_band, studentinfo.disability, assessments.assessment_type, assessments.weight, assessments.date FROM studentinfo JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 27759;","SELECT studentinfo.gender, studentinfo.age_band, studentinfo.disability, assessments.assessment_type, assessments.weight, assessments.date FROM studentinfo INNER JOIN assessments ON studentinfo.code_module = assessments.code_module AND studentinfo.code_presentation = assessments.code_presentation WHERE studentinfo.id_student = 27759;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
116,모든 프레젠테이션의 'BBB' 모듈에서 VLE 자료에 사용되는 가장 일반적인 활동 유형과 해당 활동 유형의 자료개수,"SELECT activity_type, COUNT(*) AS num_materials FROM vle INNER JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE courses.code_module = 'BBB' GROUP BY activity_type ORDER BY num_materials DESC LIMIT 1;","SELECT c.code_module, c.code_presentation, a.activity_type, COUNT(v.id_site) as count_sites FROM courses c INNER JOIN vle v ON c.code_module = v.code_module AND c.code_presentation = v.code_presentation INNER JOIN (SELECT code_module, code_presentation, activity_type, ROW_NUMBER() OVER (PARTITION BY code_module, code_presentation ORDER BY activity_type) as rn FROM vle) a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation AND a.rn = 1 GROUP BY c.code_module, c.code_presentation, a.activity_type;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
117,AAA'모듈의 모든 평가에서 가장 높은 평균 가중치를 갖는 평가 유형과 해당 가중치를 조회,"SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments WHERE code_module = 'AAA' GROUP BY assessment_type ORDER BY avg_weight DESC LIMIT 1;","SELECT assessment_type, AVG(weight) as avg_weight FROM assessments WHERE code_module = 'AAA' GROUP BY assessment_type ORDER BY avg_weight DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
118,"장애를 가진 학생들의 과목별 'Pass' 비율을 계산하고 모듈, 프레젠테이션, 비율을 조회","SELECT si.code_module, si.code_presentation, COUNT(CASE WHEN si.final_result = 'Pass' THEN 1 END) / COUNT(*) AS pass_rate FROM studentinfo si WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation;","SELECT c.code_module, c.code_presentation, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentinfo WHERE code_module = c.code_module AND code_presentation = c.code_presentation) AS pass_percentage FROM studentinfo si JOIN courses c ON si.code_module = c.code_module JOIN courses p ON si.code_presentation = p.code_presentation WHERE si.disability = 'Yes' AND si.final_result = 'Pass' GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
119,"모듈이 'BBB'이고 프레젠테이션이 '2014J'에 등록된 모든 학생들과 그들의 최종 성적을 모듈, 프레젠테이션, 학생, 최종 성적을 조회","SELECT si.code_module, si.code_presentation, si.id_student, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.code_module = 'BBB' AND si.code_presentation = '2014J';","SELECT s.code_module, s.code_presentation, s.id_student, s.final_result FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND c.code_presentation = '2014J' ;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
120,"TMA 과정의 모든 프레젠테이션에 대해 학생들의 평균 점수 계산하고 모듈, 프레젠테이션, 평균 점수를 조회","SELECT a.code_module, a.code_presentation, AVG(sa.score) AS avg_score FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment WHERE a.assessment_type = 'TMA' GROUP BY a.code_module, a.code_presentation;","SELECT c.code_module, p.code_presentation, AVG(sa.score) as avg_score FROM courses c INNER JOIN assessments a ON c.code_module = a.code_module INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment WHERE a.assessment_type = 'TMA' GROUP BY c.code_module, p.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
121,"특정 과정의 모든 발표(presentation)에서, 각 학생이 시도한 횟수(num_of_prev_attempts)에 따른 학생 수를 계산하고 모듈, 프레젠테이션, 시도 횟수, 학생 수를 조회","SELECT si.code_module, si.code_presentation, si.num_of_prev_attempts, COUNT(*) AS student_count FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation GROUP BY si.code_module, si.code_presentation, si.num_of_prev_attempts;","SELECT courses.code_module, courses.code_presentation, studentinfo.num_of_prev_attempts, COUNT(studentinfo.id_student) as student_count FROM studentinfo INNER JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation GROUP BY courses.code_module, courses.code_presentation, studentinfo.num_of_prev_attempts;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
122,"장애를 선언한 모든 학생의 ID,성별,장애여부,총학점,최종성적 리스트와 최종성적 기준으로 정렬","SELECT si.id_student, si.gender, si.disability, SUM(si.studied_credits) AS total_credits, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.disability = 'Y' GROUP BY si.id_student, si.gender, si.disability, si.final_result ORDER BY si.final_result;","SELECT s.id_student, s.gender, s.disability, SUM(c.studied_credits) as total_credits, s.final_result FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE s.disability = 'yes' GROUP BY s.id_student, s.gender, s.disability, s.final_result ORDER BY s.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
123,"특정 과정 모듈(BBB)에 등록된 학생들 중 장애를 선언한 학생들의 최종 성적을 확인하고 학생, 성별, 장애여부, 최종 성적을 조회","SELECT si.id_student, si.gender, si.disability, si.final_result FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.disability = 'Y' AND c.code_module = 'BBB';","SELECT s.id_student, s.gender, s.disability, c.final_result FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND s.disability = 'yes';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
124,"특정 과정에 등록된 학생들 중 재시도 횟수가 6회 이상인 학생들의 정보와 과정 세부 정보를 분석하고 학생, 성별, 연령대,  재시도 횟수, 모듈, 프레젠테이션을 조회","SELECT si.id_student, si.gender, si.age_band, si.num_of_prev_attempts, c.code_module, c.code_presentation FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.num_of_prev_attempts >= 6;","SELECT studentinfo.id_student, studentinfo.gender, studentinfo.age_band, studentinfo.num_of_prev_attempts, courses.code_module, courses.code_presentation FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE studentinfo.num_of_prev_attempts > 6;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
125,특정 과정 모듈에 등록된 학생들 중 최종 성적이 'Fail'인 학생들의 수와 모듈을 조회,"SELECT c.code_module, COUNT(si.id_student) AS failed_students FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.final_result = 'Fail' GROUP BY c.code_module;","SELECT c.code_module, c.code_presentation, COUNT(si.id_student) as fail_students FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation WHERE si.final_result = 'Fail' GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
126,"장애가 있는 학생이 최소 한번 이상 시도한 과목 모듈별로, 학생수를 세고 그 숫자가 가장 많은 상위 3개 과목모듈과 학생수를 조회","SELECT courses.code_module, COUNT(DISTINCT studentinfo.id_student) AS num_attempts FROM studentinfo INNER JOIN vle ON studentinfo.code_module = vle.code_module AND studentinfo.code_presentation = vle.code_presentation INNER JOIN courses ON vle.code_module = courses.code_module AND vle.code_presentation = courses.code_presentation WHERE studentinfo.disability = 'Y' GROUP BY courses.code_module ORDER BY num_attempts DESC LIMIT 3;","SELECT c.code_module, c.code_presentation, COUNT(s.id_student) as student_count FROM courses c JOIN studentinfo s ON c.code_module = s.code_module AND c.code_presentation = s.code_presentation WHERE s.disability = 'yes' GROUP BY c.code_module, c.code_presentation ORDER BY student_count DESC LIMIT 3;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
127,가장 많은 학점을 이수한 모듈의 학생번호 및 최종 성적을 조회,"SELECT sr.id_student, si.final_result FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student JOIN ( SELECT code_module, code_presentation, MAX(studied_credits) AS max_credits FROM studentinfo GROUP BY code_module, code_presentation ) AS max_credits_per_module ON sr.code_module = max_credits_per_module.code_module AND sr.code_presentation = max_credits_per_module.code_presentation WHERE si.studied_credits = max_credits_per_module.max_credits;","SELECT s.id_student, s.final_result FROM studentinfo s INNER JOIN (SELECT id_student, MAX(studied_credits) AS max_credits FROM studentinfo GROUP BY id_student) sub ON s.id_student = sub.id_student WHERE s.studied_credits = sub.max_credits;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
128,"장애가 있는 학생들이 참여한 과목 모듈과 세션을 기준으로, 해당 과목 모듈과 세션별로 장애가 있는 학생들의 수를 계산하고 모듈, 프레젠테이션, 학생 수를 조회","SELECT si.code_module, si.code_presentation, COUNT(sa.id_student) AS num_students_with_disability FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation;","SELECT courses.code_module, courses.code_presentation, COUNT(DISTINCT studentinfo.id_student) as num_students FROM courses INNER JOIN studentinfo ON courses.code_module = studentinfo.code_module AND courses.code_presentation = studentinfo.code_presentation INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.disability = 'Yes' GROUP BY courses.code_module, courses.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
129,"다양한 연령대에 따른 최종 결과의 분포를 계산하고 연령대, 최종 결과, 학생 수를 조회","SELECT si.age_band, si.final_result, COUNT(*) AS num_students FROM studentinfo si GROUP BY si.age_band, si.final_result ORDER BY si.age_band, num_students DESC;","SELECT age_band, final_result, COUNT(*) as num_students FROM studentinfo GROUP BY age_band, final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
130,다양한 모듈 프레젠테이션에서 학생당 공부한 평균 학점이 가장 높은 지역 순으로 정렬,"SELECT si.region, AVG(si.studied_credits) AS avg_credits FROM studentinfo si GROUP BY si.region ORDER BY avg_credits DESC;","SELECT region, AVG(studied_credits) as avg_credits FROM studentinfo GROUP BY region ORDER BY avg_credits DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
131,다양한 IMB 밴드 간의 평가 유형 별로 진행된 평가수 집계(imd_band 별 그룹화 및 해당 지수 내에서 평가 수가 많은 순서로 정렬),"SELECT si.imd_band, a.assessment_type, COUNT(*) AS num_assessments FROM studentinfo si INNER JOIN assessments a ON si.code_module = a.code_module AND si.code_presentation = a.code_presentation GROUP BY si.imd_band, a.assessment_type ORDER BY si.imd_band, num_assessments DESC;","SELECT a.assessment_type, s.imd_band, COUNT(a.id_assessment) as num_of_assessments, ROW_NUMBER() OVER (PARTITION BY s.imd_band ORDER BY COUNT(a.id_assessment) DESC) as rank FROM assessments a JOIN studentinfo s ON a.code_module = s.code_module JOIN courses c ON a.code_module = c.code_module GROUP BY a.assessment_type, s.imd_band ORDER BY s.imd_band, rank;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
132,모듈 프레젠테이션에 등록했지만 VLE 자료와 상호 작용하지 않은 학생은 몇 명,"SELECT sr.code_module, sr.code_presentation, COUNT(sv.id_student) AS num_students FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student AND sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE sv.id_student IS NULL GROUP BY sr.code_module, sr.code_presentation;",SELECT COUNT(*) FROM studentregistration sr WHERE sr.id_student NOT IN (SELECT vle.id_student FROM studentvle vle) ;,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
133,학생 등록과 등록 취소 사이의 차이를 통해 평균 등록기간 계산하여 가장 긴 등록기간을 가진 상위 5개 모듈 프레젠테이션 조회,"SELECT sr.code_module, sr.code_presentation, AVG(sr.date_unregistration - sr.date_registration) AS avg_registration_duration FROM studentregistration sr GROUP BY sr.code_module, sr.code_presentation ORDER BY avg_registration_duration DESC LIMIT 5;","SELECT code_module, code_presentation, AVG(DATEDIFF(date_unregistration, date_registration)) as avg_duration FROM studentregistration WHERE date_unregistration IS NOT NULL GROUP BY code_module, code_presentation ORDER BY avg_duration DESC LIMIT 5;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
134,각 모듈 프레젠테이션에 대해 각 활동 유형의 VLE 자료와 상호 작용한 고유 학생 수는 몇 명,"SELECT v.code_module, v.code_presentation, v.activity_type, COUNT(DISTINCT sv.id_student) AS num_unique_students FROM vle v INNER JOIN studentvle sv ON v.id_site = sv.id_site GROUP BY v.code_module, v.code_presentation, v.activity_type;","SELECT code_module, code_presentation, activity_type, COUNT(DISTINCT id_student) FROM studentvle GROUP BY code_module, code_presentation, activity_type;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
135,모든 모듈 프레젠테이션에서 장애 학생 비율이 가장 높은 지역순으로 정렬,"SELECT si.region, (COUNT(CASE WHEN si.disability = 'Y' THEN 1 END) / COUNT(*)) * 100 AS disability_percentage FROM studentinfo si GROUP BY si.region ORDER BY disability_percentage DESC;","SELECT region, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentinfo WHERE disability = 'yes') as percentage FROM studentinfo WHERE disability = 'yes' GROUP BY region ORDER BY percentage DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
136,모든 모듈 프레젠테이션에서 평균 점수가 가장 높은 평가 시험유형은 무엇,"SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type ORDER BY avg_score DESC LIMIT 1;","SELECT a.assessment_type, AVG(sa.score) as avg_score FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
137,여학생의 평균 이수학점이 200학점 미만인 모듈발표를 검색,"SELECT code_module, code_presentation, AVG(studied_credits) AS avg_studied_credits FROM studentinfo WHERE gender = 'F' GROUP BY code_module, code_presentation HAVING AVG(studied_credits) < 200;","SELECT presentation.date_start, presentation.date_end, course.name, AVG(student.studied_credits) as avg_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN courses AS presentation ON studentinfo.code_presentation = presentation.code_module JOIN studentinfo AS student ON studentinfo.code_module = student.code_module WHERE student.gender = 'Female' AND AVG(student.studied_credits) < 200 GROUP BY presentation.date_start, presentation.date_end, course.name;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
138,여학생 수가 남학생 수를 초과하는 모듈 프레젠테이션을 식별,"SELECT code_module, code_presentation FROM studentinfo GROUP BY code_module, code_presentation HAVING SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END);","SELECT m.code_module, p.code_presentation, COUNT(CASE WHEN s.gender = 'Female' THEN 1 END) as female_count, COUNT(CASE WHEN s.gender = 'Male' THEN 1 END) as male_count FROM studentinfo s INNER JOIN courses m ON s.code_module = m.code_module INNER JOIN courses p ON s.code_presentation = p.code_presentation GROUP BY m.code_module, p.code_presentation HAVING female_count > male_count;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
139,장애 학생의 비율이 20%를 초과하는 모듈 프레젠테이션 결정,"SELECT sr.code_module, sr.code_presentation, (COUNT(si.id_student) * 100.0 / (SELECT COUNT(*) FROM studentinfo WHERE disability = 'Y')) AS disability_percentage FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation HAVING disability_percentage > 20;","SELECT code_presentation, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student WHERE sr.code_presentation = cp.code_presentation) as percentage FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student WHERE si.disability = 'yes' GROUP BY code_presentation HAVING percentage > 20.0;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
140,학생당 VLE 자료와의 평균 상호 작용 횟수가 10회 미만인 모듈 프레젠테이션,"SELECT sv.code_module, sv.code_presentation, AVG(sv.sum_click) AS avg_interactions_per_student FROM studentvle sv GROUP BY sv.code_module, sv.code_presentation HAVING avg_interactions_per_student < 10;","SELECT code_module, code_presentation, AVG(sum_click) as avg_interactions FROM studentvle GROUP BY code_module, code_presentation HAVING AVG(sum_click) < 10 ;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
141,강좌에 등록하지 않은 학생의 비율이 10%를 초과하는 모듈 프레젠테이션을 나열,"SELECT sr.code_module, sr.code_presentation, (COUNT(sr.date_unregistration) * 100.0 / COUNT(si.id_student)) AS unregistration_percentage FROM studentregistration sr INNER JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation HAVING unregistration_percentage > 10;","SELECT c.code_module, c.code_presentation, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentregistration sr JOIN studentinfo si ON sr.id_student = si.id_student WHERE sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation) AS pct_unregistered FROM courses c LEFT JOIN studentregistration sr ON c.code_module = sr.code_module AND c.code_presentation = sr.code_presentation LEFT JOIN studentinfo si ON sr.id_student = si.id_student GROUP BY c.code_module, c.code_presentation HAVING pct_unregistered > 10;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
142,발표 시작 전 20일 이상 등록한 학생의 평균 수강 학점이 150학점 미만인 모듈 발표를 나열,"SELECT si.code_module, si.code_presentation FROM studentinfo si INNER JOIN studentregistration sr ON si.code_module = sr.code_module AND si.code_presentation = sr.code_presentation AND si.id_student = sr.id_student WHERE sr.date_registration > -20 GROUP BY si.code_module, si.code_presentation HAVING AVG(si.studied_credits) < 150;","SELECT c.code_presentation, c.title FROM courses c INNER JOIN studentregistration sr ON c.code_presentation = sr.code_presentation INNER JOIN studentinfo s ON sr.id_student = s.id_student WHERE sr.date_registration < -20 AND s.studied_credits < 150;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
143,장애를 선언한 학생이 공부한 평균 학점이 180학점 미만인 모듈 프레젠테이션을 검색,"SELECT si.code_module, si.code_presentation FROM studentinfo si WHERE si.disability = 'Y' GROUP BY si.code_module, si.code_presentation HAVING AVG(si.studied_credits) < 180;","SELECT m.title AS module_title, p.title AS presentation_title, AVG(s.studied_credits) AS avg_credits FROM studentinfo s JOIN courses m ON s.code_module = m.code_module JOIN courses p ON s.code_presentation = p.code_presentation WHERE s.disability = 'yes' GROUP BY m.title, p.title HAVING AVG(s.studied_credits) < 180;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
144,최종 평가를 Pass 등급을 받은 학생의 평균 이전 시도 횟수가 1 미만인 모듈 프레젠테이션 조회,"SELECT si.code_module, si.code_presentation FROM studentinfo si WHERE si.final_result = 'Pass' GROUP BY si.code_module, si.code_presentation HAVING AVG(si.num_of_prev_attempts) < 1;","SELECT code_module, code_presentation, AVG(num_of_prev_attempts) FROM studentinfo WHERE final_result = 'Pass' AND num_of_prev_attempts < 1 GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
145,특정 모듈(AAA)과 프레젠테이션(2013J)에서 평균 점수가 50점 이상인 학생의 목록,"SELECT si.id_student, si.code_module, si.code_presentation, AVG(sa.score) AS average_score FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.code_module = 'AAA' AND si.code_presentation = '2013J' GROUP BY si.id_student HAVING AVG(sa.score) >= 50;","SELECT DISTINCT s.id_student, s.name FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student JOIN courses c ON s.code_module = c.code_module JOIN courses c2 ON s.code_presentation = c2.code_presentation WHERE c.code_module = 'AAA' AND c2.code_presentation = '2013J' GROUP BY s.id_student HAVING AVG(sa.score) > 50;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
146,특정 모듈(AAA)에서 각 평가 유형별 평균 점수,"SELECT a.assessment_type, AVG(sa.score) AS average_score FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;","SELECT assessment_type, AVG(score) FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment JOIN courses ON assessments.code_module = courses.code_module WHERE courses.code_module = 'AAA' GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
147,각 모듈 프레젠테이션에 등록된 학생 수,"SELECT c.code_module, c.code_presentation, COUNT(si.id_student) AS student_count FROM courses c INNER JOIN studentInfo si ON c.code_module = si.code_module AND c.code_presentation = si.code_presentation GROUP BY c.code_module, c.code_presentation;","SELECT c.code_module, c.code_presentation, COUNT(si.id_student) as num_students FROM studentinfo si JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
148,두 번 이상 모듈을 시도한 학생들의 목록,"SELECT id_student, code_module, code_presentation FROM studentInfo WHERE num_of_prev_attempts >= 2;","SELECT studentinfo.id_student, studentinfo.name_student FROM studentinfo INNER JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student INNER JOIN (SELECT code_module, code_presentation, COUNT(*) as num_modules FROM studentregistration GROUP BY code_module, code_presentation HAVING COUNT(*) > 1) as modules_tried ON studentregistration.code_module = modules_tried.code_module AND studentregistration.code_presentation = modules_tried.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
149,모든 모듈과 프레젠테이션에 대해 특정평가유형(TMA)의 평균 점수,"SELECT a.code_module, a.code_presentation, AVG(sa.score) AS average_exam_score FROM assessments a INNER JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.assessment_type = 'TMA' GROUP BY a.code_module, a.code_presentation;","SELECT m.name as module_name, p.name as presentation_name, AVG(sa.score) as avg_score FROM courses m JOIN courses p ON m.code = p.code JOIN assessments a ON m.code = a.code_module AND p.code = a.code_presentation JOIN studentassessment sa ON a.id_assessment = sa.id_assessment WHERE a.assessment_type = 'TMA' GROUP BY m.name, p.name;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
150,특정 지리적 지역(Scotland)에서 공부하는 학생의 평균 학점,"SELECT region, AVG(studied_credits) AS average_credits FROM studentInfo WHERE region = 'Scotland' GROUP BY region;",SELECT AVG(studied_credits) FROM studentinfo WHERE region = 'Scotland';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
151,장애가 있는 학생들의 최종 결과 분포,"SELECT final_result, COUNT(id_student) AS result_count FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;","SELECT final_result, COUNT(*) as num_students FROM studentinfo WHERE disability = 'yes' GROUP BY final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
152,각 모듈에 대한 총 학생 등록 수와 평균 모듈 프레젠테이션 기간 조회,"SELECT si.code_module, COUNT(si.id_student) AS registration_count, AVG(c.module_presentation_length) AS average_length FROM studentInfo si INNER JOIN courses c ON si.code_module = c.code_module GROUP BY si.code_module;","SELECT c.code_module, c.code_presentation, COUNT(s.id_student) as num_students, AVG(c.module_presentation_length) as avg_length FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
153,특정 모듈(AAA)에서 평균 점수가 40점 미만인 학생의 비율,"SELECT si.code_module, (COUNT(sa.id_student) / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module)) AS fail_rate FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.code_module = 'AAA' AND sa.score < 40 GROUP BY si.code_module;",SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student WHERE si.code_module = 'AAA') as pct_below_40 FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student WHERE si.code_module = 'AAA' AND sa.score < 40;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
154,모든 과목의 평균 최종 점수를 계산,"SELECT code_module, code_presentation, AVG(score) AS average_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;",SELECT AVG(a.score) as avg_score FROM studentassessment a JOIN assessments ass ON a.id_assessment = ass.id_assessment JOIN courses c ON ass.code_module = c.code_module WHERE ass.assessment_type = 'Exam' AND c.department = 'Mathematics';,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
155,"특정 학생(26677)이 등록한 모든  모듈코드, 프레젠테이션 코드과 해당 최종 결과","SELECT si.code_module, si.code_presentation, si.final_result FROM studentInfo si WHERE id_student = ""26677"";","SELECT studentinfo.code_module, studentinfo.code_presentation, studentinfo.final_result FROM studentinfo WHERE studentinfo.id_student = 26677;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
156,특정 모듈에서 실패한 학생의 수,"SELECT code_module, code_presentation, COUNT(id_student) AS failed_students FROM studentInfo WHERE final_result = 'Fail' GROUP BY code_module, code_presentation;",SELECT COUNT(*) FROM studentinfo WHERE code_module = 'MATH1001' AND final_result = 'Failed';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
157,최소 한 번 이상의 과제를 늦게 제출한 학생들의 목록,SELECT DISTINCT id_student FROM studentAssessment WHERE date_submitted > (SELECT date FROM assessments WHERE id_assessment = studentAssessment.id_assessment);,SELECT id_student FROM studentassessment WHERE date_submitted > (SELECT MAX(date_submitted) - 1 FROM studentassessment WHERE id_student = studentassessment.id_student);,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
158,각 과목별로 가장 높은 가중치를 가진 평가,"SELECT code_module, code_presentation, MAX(weight) AS max_weight FROM assessments GROUP BY code_module, code_presentation;","SELECT code_module, code_presentation, id_assessment, assessment_type, date, weight, RANK() OVER(PARTITION BY code_module ORDER BY weight DESC) as ranking FROM assessments;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
159,특정 과목(AAA)의 모든 평가 유형과 해당 평균 점수,"SELECT a.assessment_type, AVG(sa.score) AS average_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE a.code_module = 'AAA' AND a.code_presentation = '2013J' GROUP BY a.assessment_type;","SELECT a.assessment_type, AVG(sa.score) as avg_score FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment WHERE a.code_module = 'AAA' GROUP BY a.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
160,특정 학생(25997)이 수강한 과목 중 재수강한 과목,"SELECT code_module, code_presentation FROM studentInfo WHERE id_student = 25997 AND num_of_prev_attempts > 0;","SELECT DISTINCT s.code_module, s.code_presentation FROM studentinfo s WHERE s.id_student = 25997 AND s.num_of_prev_attempts > 0;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
161,성별에 따른 각 과목의 등록 학생 수,"SELECT code_module, code_presentation, gender, COUNT(id_student) AS student_count FROM studentInfo GROUP BY code_module, code_presentation, gender;","SELECT c.subject, s.gender, COUNT(*) as num_students FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN courses p ON s.code_presentation = p.code_presentation GROUP BY c.subject, s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
162,"특정 모듈에 등록한 학생 중 장애가 있는 학생의 비율을 계산하고 모듈, 프레젠테이션, 장애가 있는 학생의 비율 순으로 조회","SELECT code_module, code_presentation, (COUNT(id_student) / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module AND code_presentation = si.code_presentation)) * 100 AS disability_percentage FROM studentInfo si WHERE disability = 'Y' GROUP BY code_module, code_presentation;","SELECT m.code_module as module, p.code_presentation as presentation, COUNT(s.id_student) as num_students, COUNT(s.id_student) * 100.0 / (SELECT COUNT(*) FROM studentinfo si WHERE si.code_module = m.code_module) as pct_disability FROM studentinfo s INNER JOIN courses m ON s.code_module = m.code_module INNER JOIN courses p ON s.code_presentation = p.code_presentation WHERE s.disability = 'yes' GROUP BY m.code_module, p.code_presentation ORDER BY m.code_module, p.code_presentation, pct_disability DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
163,"각 모듈의 프레젠테이션 기간을 모듈, 프레젠테이션, 프레젠테이션 기간 순으로 조회","SELECT code_module, code_presentation, module_presentation_length FROM courses;","SELECT code_module, code_presentation, module_presentation_length FROM courses ORDER BY code_module, code_presentation, module_presentation_length;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
164,모든 모듈의 평균 모듈 프레젠테이션 진행 일수를 계산하고 모듈과 평균 프레젠테이션 진행 일수 조회,"SELECT code_module, AVG(module_presentation_length) AS average_length FROM courses GROUP BY code_module;","SELECT m.name AS module_name, AVG(cp.length) AS avg_presentation_length FROM courses c JOIN modules m ON c.code_module = m.code JOIN course_presentations cp ON c.code_presentation = cp.code GROUP BY m.name ;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
165,특정 학생(25629)이 등록한 모든 모듈과 해당 프레젠테이션 코드,"SELECT code_module, code_presentation FROM studentInfo WHERE id_student = 25629;","SELECT c.code_module, c.code_presentation FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE s.id_student = 25629;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
166,최종 시험(Final Exam)이 있는 모든 모듈과 프레젠테이션 식별,"SELECT code_module, code_presentation FROM assessments WHERE assessment_type = 'Exam';","SELECT courses.code_module, presentations.code_presentation FROM courses INNER JOIN assessments ON courses.code_module = assessments.code_module INNER JOIN presentations ON assessments.code_presentation = presentations.code_presentation WHERE assessments.assessment_type = 'Exam';","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
167,"각 모듈 프레젠테이션별로 평균 최종 점수를 계산하고 모듈, 프레젠테이션, 평균 최종 점수를 조회( 세 개의 테이블(studentAssessment, assessments, studentRegistration)을 결합)","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentRegistration sr ON sa.id_student = sr.id_student AND a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(a.score) as avg_final_score FROM studentassessment a JOIN assessments ass ON a.id_assessment = ass.id_assessment JOIN studentregistration sr ON a.id_student = sr.id_student JOIN courses c ON ass.code_module = c.code_module AND ass.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
168,등록 해제한 학생 수가 10명 이상인 모듈과 프레젠테이션 찾기,"SELECT code_module, code_presentation FROM studentRegistration WHERE date_unregistration IS NOT NULL GROUP BY code_module, code_presentation HAVING COUNT(id_student) >= 10;","SELECT m.name_module, p.name_presentation, COUNT(sr.id_student) FROM studentregistration sr INNER JOIN courses c ON sr.code_module = c.code_module INNER JOIN courses c2 ON sr.code_presentation = c2.code_presentation INNER JOIN moduleinfo m ON c.code_module = m.code_module INNER JOIN presentationinfo p ON c2.code_presentation = p.code_presentation GROUP BY m.name_module, p.name_presentation HAVING COUNT(sr.id_student) > 10;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
169,각 모듈에 대해 등록한 학생의 평균 학점 수를 계산하고 모듈과 평균 학점 수 조회,"SELECT si.code_module, AVG(si.studied_credits) AS average_credits FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student AND si.code_module = sr.code_module GROUP BY si.code_module;","SELECT c.code_module, c.code_presentation, AVG(s.studied_credits) as avg_credits FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
170,"장애가 있는 학생들의 모듈 프레젠테이션별 평균 점수를 계산하고 모듈, 프레젠테이션 평균 점수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentRegistration sr ON si.id_student = sr.id_student AND a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(sa.score) as avg_score FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment JOIN studentinfo s ON sa.id_student = s.id_student JOIN studentregistration sr ON s.code_module = sr.code_module AND s.code_presentation = sr.code_presentation WHERE s.disability = 'Yes' GROUP BY c.code_module, c.code_presentation; SELECT c.code_module, c.code_presentation, AVG(a.score) as avg_score FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment JOIN studentinfo s ON sa.id_student = s.id_student JOIN studentregistration sr ON s.code_module = sr.code_module AND s.code_presentation = sr.code_presentation GROUP BY c.code_module, c.code_presentation; SELECT c.code_module, c.code_presentation, AVG(a.score) as avg_score FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment JOIN studentinfo s ON sa.id_student = s.id_student JOIN studentregistration sr ON s.code_module = sr.code_module AND s.code_presentation = sr.code_presentation GROUP BY c.code_module, c.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
171,모든 최종 시험의 평균 가중치를 계산 결과,SELECT AVG(weight) AS average_weight FROM assessments WHERE assessment_type = 'Exam';,SELECT AVG(weight) FROM assessments WHERE assessment_type = 'Exam' AND date = (SELECT MAX(date) FROM assessments WHERE assessment_type = 'Exam' AND code_module = assessments.code_module AND code_presentation = assessments.code_presentation);,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
172,모든 모듈에 대해 각 학생이 등록한 총 모듈 수를 계산하고 학생과 등록한 총 모듈 수 조회,"SELECT id_student, COUNT(*) AS total_modules_registered FROM studentRegistration GROUP BY id_student;","SELECT s.id_student, s.name_student, m.code_module, m.name_module, SUM(sr.date_unregistration - sr.date_registration + 1) as total_modules FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses m ON sr.code_module = m.code_module GROUP BY s.id_student, s.name_student, m.code_module, m.name_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
173,최소 2번 이상 같은 모듈을 시도한 학생 찾고 학생과 모듈 조회,"SELECT id_student, code_module FROM studentInfo WHERE num_of_prev_attempts >= 2 GROUP BY id_student, code_module;","SELECT studentinfo.code_module, studentinfo.code_presentation, studentinfo.id_student, studentinfo.gender, studentinfo.region, studentinfo.highest_education, studentinfo.imd_band, studentinfo.age_band, studentinfo.num_of_prev_attempts, studentinfo.studied_credits, studentinfo.disability, studentinfo.final_result FROM studentinfo INNER JOIN (SELECT code_module, code_presentation, COUNT(*) as num_attempts FROM studentinfo GROUP BY code_module, code_presentation HAVING num_attempts > 1) AS subquery ON studentinfo.code_module = subquery.code_module AND studentinfo.code_presentation = subquery.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
174,모든 학생의 평균 등록 일수를 계산,SELECT AVG(date_registration) AS average_registration_days FROM studentRegistration;,SELECT AVG(date_registration) as avg_days_registrations FROM studentregistration;,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
175,등록 취소한 학생이 10명 이상인 모듈과 프레젠테이션 조회,"SELECT code_module, code_presentation FROM studentRegistration WHERE date_unregistration IS NOT NULL GROUP BY code_module, code_presentation HAVING COUNT(*) >= 10;","SELECT courses.code_module, courses.code_presentation FROM courses INNER JOIN studentregistration ON courses.code_module = studentregistration.code_module INNER JOIN studentregistration AS studentregistration_2 ON courses.code_presentation = studentregistration_2.code_presentation WHERE studentregistration.date_unregistration IS NOT NULL GROUP BY courses.code_module, courses.code_presentation HAVING COUNT(DISTINCT studentregistration.id_student) > 10;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
176,각 모듈별 평균 학점을 계산하고 모듈과 평균 학점 조회,"SELECT si.code_module, AVG(si.studied_credits) AS average_credits FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.code_module;","SELECT c.code_module, c.code_presentation, AVG(s.final_result) as avg_grade FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
177,"각 모듈 프레젠테이션별 장애가 있는 학생의 평균 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 점수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS average_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentRegistration sr ON a.code_module = sr.code_module AND a.code_presentation = sr.code_presentation INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.disability = 'Y' GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, p.code_presentation, AVG(s.score) as avg_score FROM studentinfo si JOIN studentassessment s ON si.id_student = s.id_student JOIN studentregistration sr ON si.id_student = sr.id_student JOIN courses c ON sr.code_module = c.code_module JOIN courses p ON sr.code_presentation = p.code_presentation WHERE si.disability = 'Yes' GROUP BY c.code_module, p.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
178,모든 최종시험(Exam)의 평균 가중치를 계산 결과,SELECT AVG(weight) AS average_weight FROM assessments WHERE assessment_type = 'Exam';,SELECT AVG(weight) FROM assessments WHERE assessment_type = 'Exam';,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
179,"각 모듈 프레젠테이션에서 제출된 과제점수가 아직 입력되지 않은 학생ID, 평가ID, 모듈 코드, 프레젠테이션 코드를 조회","SELECT si.id_student, sa.id_assessment, sr.code_module, sr.code_presentation FROM studentassessment sa INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student WHERE sa.score IS NULL AND sa.date_submitted IS NOT NULL;","SELECT s.id_student, a.id_assessment, m.code_module, p.code_presentation FROM studentassessment a LEFT JOIN studentinfo s ON a.id_student = s.id_student LEFT JOIN studentregistration r ON s.id_student = r.id_student LEFT JOIN courses m ON r.code_module = m.code_module LEFT JOIN courses p ON r.code_presentation = p.code_presentation WHERE a.score IS NULL;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
180,특정 모듈에 대해 가중치가 50%를 넘는 모든 평가(유형 포함)와 가중치 조회,"SELECT a.assessment_type, a.weight FROM assessments a INNER JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND a.weight > 50;","SELECT assessments.code_module, assessments.code_presentation, assessments.assessment_type, assessments.weight FROM assessments JOIN courses ON assessments.code_module = courses.code_module AND assessments.code_presentation = courses.code_presentation WHERE courses.code_module = 'INF001' AND assessments.weight > 50;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
181,특정 모듈 프레젠테이션에 사용된 모든 VLE 자료(활동 유형)를 나열,SELECT v.activity_type FROM vle v INNER JOIN courses c ON v.code_module = c.code_module AND v.code_presentation = c.code_presentation WHERE c.code_module = 'BBB' AND c.code_presentation = '2013B';,SELECT vle.activity_type FROM vle WHERE vle.code_module = 'CS101' AND vle.code_presentation = '2022B';,"CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
182,장애가 있는 학생('Y'로 표시된 경우) 중에서 'studentvle' 테이블에 등록되지 않은 학생의 ID를 검색,SELECT si.id_student FROM studentinfo si WHERE si.disability = 'Y' AND si.id_student NOT IN (SELECT id_student FROM studentvle);,SELECT s.id_student FROM studentinfo s WHERE s.disability = 'Y' AND s.id_student NOT IN (SELECT sv.id_student FROM studentvle sv);,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
183,이전에 모듈을 시도하지 않은 학생의 평균 점수가 가장 높은 평가와 평균 점수 조회,"SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts = 0 GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","SELECT s.code_module, s.code_presentation, a.assessment_type, AVG(sa.score) as avg_score, RANK() OVER (PARTITION BY s.code_module ORDER BY AVG(sa.score) DESC) as rank FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment JOIN studentinfo s ON sa.id_student = s.id_student JOIN studentregistration sr ON s.id_student = sr.id_student WHERE sr.date_unregistration IS NULL AND sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY s.code_module, s.code_presentation, a.assessment_type HAVING rank = 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
184,"낙제 성적을 받은 학생의 비율이 가장 높은 모듈, 프레젠테이션, 학생의 비율을 조회","SELECT sr.code_module, sr.code_presentation, (COUNT(si.final_result) - COUNT(CASE WHEN si.final_result >= 40 THEN si.final_result END)) / COUNT(si.final_result) * 100 AS fail_percentage FROM studentregistration sr INNER JOIN studentinfo si ON si.id_student = sr.id_student WHERE si.final_result IS NOT NULL GROUP BY sr.code_module, sr.code_presentation ORDER BY fail_percentage DESC LIMIT 1;","SELECT m.code_module, p.code_presentation, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentregistration sr WHERE sr.code_module = m.code_module AND sr.code_presentation = p.code_presentation), 2) as fail_percentage FROM studentregistration sr INNER JOIN studentinfo s ON sr.id_student = s.id_student INNER JOIN courses c ON sr.code_module = c.code_module INNER JOIN courses p ON sr.code_presentation = p.code_presentation WHERE s.final_result = 'Failed' GROUP BY m.code_module, p.code_presentation ORDER BY fail_percentage DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
185,모듈을 한 번 이상 시도한 적이 있는 학생들의 평균 점수를 평가 유형별로 계산하고 평균 점수가 가장 낮은 평가 유형과 평균 점수 조회,"SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts > 0 GROUP BY a.assessment_type ORDER BY avg_score ASC LIMIT 1;","SELECT a.assessment_type, AVG(s.score) as avg_score FROM assessments a INNER JOIN studentassessment s ON a.id_assessment = s.id_assessment INNER JOIN studentregistration sr ON s.id_student = sr.id_student GROUP BY a.assessment_type HAVING COUNT(DISTINCT sr.code_module) > 0 ORDER BY avg_score ASC, a.assessment_type ASC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
186,"자퇴한(탈퇴비율) 학생 수가 전체 등록 학생 수의 20%를 넘는 모듈, 프레젠테이션, 탈퇴 비율 조회","SELECT sr.code_module, sr.code_presentation, (COUNT(sr.date_unregistration) / CAST(COUNT(*) AS FLOAT)) * 100 AS withdrawal_percentage FROM studentregistration sr GROUP BY sr.code_module, sr.code_presentation HAVING (COUNT(sr.date_unregistration) / CAST(COUNT(*) AS FLOAT)) * 100 > 20;","SELECT c.code_module, c.code_presentation, COUNT(sr.id_student) as dropout_rate FROM studentregistration sr INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN (SELECT code_module, code_presentation, COUNT(*) as total_students FROM studentregistration GROUP BY code_module, code_presentation) t ON sr.code_module = t.code_module AND sr.code_presentation = t.code_presentation WHERE sr.date_unregistration IS NOT NULL GROUP BY c.code_module, c.code_presentation HAVING COUNT(sr.id_student) > 0.2 * t.total_students;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
187,평가를 제출하지 않은 학생의 비율이 가장 높은 평가 유형과 학생 비율 조회,"SELECT a.assessment_type, (COUNT(sa.id_student) - COUNT(sa.date_submitted)) / COUNT(sa.id_student) * 100 AS non_submission_percentage FROM assessments a LEFT JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type ORDER BY non_submission_percentage DESC LIMIT 1;","SELECT a.assessment_type, 100.0 * COUNT(DISTINCT s.id_student) / (SELECT COUNT(DISTINCT id_student) FROM studentassessment sa WHERE sa.id_assessment = a.id_assessment) AS percentage FROM assessments a LEFT JOIN studentassessment s ON a.id_assessment = s.id_assessment WHERE s.id_student IS NULL GROUP BY a.assessment_type ORDER BY percentage DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
188,"학생당 평균 VLE 상호 작용 수가 가장 낮은 모듈, 프레젠테이션, 평균 VLE 상호 작용 수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sve.sum_click) AS avg_clicks_per_student FROM studentvle sve INNER JOIN studentinfo si ON si.id_student = sve.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation ORDER BY avg_clicks_per_student ASC LIMIT 1;","SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) AS avg_interactions FROM studentvle sv JOIN studentinfo s ON sv.id_student = s.id_student JOIN courses c ON sv.code_module = c.code_module AND sv.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation HAVING AVG(sv.sum_click) = (SELECT MIN(avg_interactions) FROM (SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) AS avg_interactions FROM studentvle sv JOIN studentinfo s ON sv.id_student = s.id_student JOIN courses c ON sv.code_module = c.code_module AND sv.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation) t);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
189,"교육 수준이 가장 높은 학생 중에서 평균 점수가 가장 높은 평가를 식별하고 평가ID, 평균 점수를 조회","SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.highest_education = (SELECT MAX(highest_education) FROM studentinfo) GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","SELECT a.code_module, a.code_presentation, AVG(s.score) as avg_score, a.id_assessment FROM assessments a INNER JOIN studentassessment s ON a.id_assessment = s.id_assessment INNER JOIN studentinfo st ON s.id_student = st.id_student WHERE st.highest_education = (SELECT MAX(highest_education) FROM studentinfo) GROUP BY a.code_module, a.code_presentation, a.id_assessment ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
190,"모듈 발표에 처음 등록한 학생 중 평균 점수가 가장 높은 평가를 식별하고 평가ID, 평균 점수를 조회","SELECT a.id_assessment, AVG(sa.score) AS avg_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment INNER JOIN studentinfo si ON si.id_student = sa.id_student INNER JOIN studentregistration sr ON si.id_student = sr.id_student WHERE si.num_of_prev_attempts = 0 GROUP BY a.id_assessment ORDER BY avg_score DESC LIMIT 1;","SELECT s.id_assessment, AVG(sa.score) as avg_score FROM studentassessment sa JOIN studentregistration sr ON sa.id_student = sr.id_student JOIN studentinfo st ON sr.id_student = st.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sr.date_registration = (SELECT MIN(date_registration) FROM studentregistration WHERE id_student = sr.id_student) GROUP BY s.id_assessment ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
191,"각 모듈 프레젠테이션의 평균 평가 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 평가점수를 조회","SELECT code_module, code_presentation, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;","SELECT c.code_module, p.code_presentation, AVG(a.score) as avg_score FROM studentassessment a JOIN assessments ass ON a.id_assessment = ass.id_assessment JOIN courses c ON ass.code_module = c.code_module JOIN courses p ON ass.code_presentation = p.code_presentation GROUP BY c.code_module, p.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
192,"각 모듈에 대해 최종 결과가 'Pass'인 학생의 수를 계산하고 모듈 코드, 학생 수를 조회","SELECT code_module, COUNT(id_student) AS pass_count FROM studentInfo WHERE final_result = 'Pass' GROUP BY code_module;","SELECT c.code_module, s.gender, s.region, s.highest_education, s.imd_band, s.age_band, COUNT(*) as num_students FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN studentoutcomes o ON s.id_student = o.id_student WHERE o.final_result = 'Pass' GROUP BY c.code_module, s.gender, s.region, s.highest_education, s.imd_band, s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
193,"각 모듈 프레젠테이션에 대해 가장 많은 평가를 받은 학생의 성별과 평가 유형을 식별하고 모듈 코드, 프레젠테이션 코드, 성별, 평가 유형, 평가수를 조회","SELECT sr.code_module, sr.code_presentation, si.gender, a.assessment_type, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentregistration sr ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.gender, a.assessment_type ORDER BY assessment_count DESC LIMIT 1;","SELECT c.code_module, c.code_presentation, s.gender, a.assessment_type, SUM(sa.score) as total_score FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student JOIN studentregistration sr ON sa.id_student = sr.id_student JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY c.code_module, c.code_presentation, s.gender, a.assessment_type HAVING SUM(sa.score) = (SELECT MAX(SUM(sa2.score)) FROM studentassessment sa2 JOIN studentinfo s2 ON sa2.id_student = s2.id_student JOIN studentregistration sr2 ON sa2.id_student = sr2.id_student JOIN assessments a2 ON sr2.code_module = a2.code_module AND sr2.code_presentation = a2.code_presentation GROUP BY a2.code_module, a2.code_presentation, s2.gender, a2.assessment_type) LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
194,"각 모듈 프레젠테이션에 대해 평균 가중 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 가중 점수를 조회","SELECT code_module, code_presentation, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module, code_presentation;","SELECT c.code_module, p.code_presentation, AVG(a.weight) as avg_weight FROM assessments a JOIN courses c ON a.code_module = c.code_module JOIN courses p ON a.code_presentation = p.code_presentation GROUP BY c.code_module, p.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
195,"각 모듈 프레젠테이션에 대해 최고 학력이 'A Level or Equivalent'인 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","SELECT code_module, code_presentation, COUNT(id_student) AS a_level_count FROM studentInfo WHERE highest_education = 'A Level or Equivalent' GROUP BY code_module, code_presentation;","SELECT code_module, code_presentation, COUNT(*) as num_students FROM studentinfo WHERE highest_education = 'A Level or Equivalent' GROUP BY code_module, code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
196,"평가 유형별로 가장 많은 평가를 받은 모듈과 평가유형을 식별하고 평가 유형, 모듈 코드, 평가수를 조회","SELECT a.assessment_type, sr.code_module, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment INNER JOIN studentregistration sr ON sa.id_student = sr.id_student GROUP BY a.assessment_type, sr.code_module ORDER BY assessment_count DESC LIMIT 1;","SELECT assessment_type, code_module, COUNT(*) as assessment_count FROM assessments JOIN studentassessment ON assessments.id_assessment = studentassessment.id_assessment JOIN studentregistration ON assessments.code_module = studentregistration.code_module GROUP BY assessment_type, code_module ORDER BY assessment_count DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
197,장애가 있는 학생 중에서 가장 많은 다른 모듈에 등록된 학생ID와 학생 수 조회,"SELECT si.id_student, COUNT(DISTINCT si.code_module) AS distinct_module_count FROM studentInfo si WHERE si.disability = 'Y' GROUP BY si.id_student ORDER BY distinct_module_count DESC LIMIT 1;","SELECT studentinfo.id_student, COUNT(DISTINCT studentinfo.code_module) as num_modules FROM studentinfo WHERE studentinfo.disability = 'yes' GROUP BY studentinfo.id_student ORDER BY num_modules DESC LIMIT 10;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
198,"학생 평가 데이터와 평가 데이터를 결합하여 모든 과목 모듈 및 프레젠테이션에 대한 평균 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 점수를 조회","SELECT code_module, code_presentation, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, code_presentation;","SELECT c.code_module, p.code_presentation, AVG(sa.score) as avg_score FROM studentassessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN courses c ON a.code_module = c.code_module JOIN courses p ON a.code_presentation = p.code_presentation GROUP BY c.code_module, p.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
199,모든 평가 유형에서 가장 높은 평균 점수를 가진 모듈을 식별,"SELECT code_module FROM ( SELECT code_module, AVG(score) AS avg_score FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY code_module, a.assessment_type ) AS avg_scores GROUP BY code_module ORDER BY MAX(avg_score) DESC LIMIT 1;","SELECT m.code_module, AVG(a.score) as avg_score FROM studentassessment a JOIN assessments as as1 ON a.id_assessment = as1.id_assessment JOIN courses c ON as1.code_module = c.code_module JOIN modules m ON c.code_module = m.code_module GROUP BY m.code_module HAVING avg_score = (SELECT MAX(avg_score) FROM (SELECT m.code_module, AVG(a.score) as avg_score FROM studentassessment a JOIN assessments as1 ON a.id_assessment = as1.id_assessment JOIN courses c ON as1.code_module = c.code_module JOIN modules m ON c.code_module = m.code_module GROUP BY m.code_module) t);","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
200,여러 모듈에 등록한 학생 중 가장 많은 학생이 등록한 모듈 코드를 식별,"SELECT code_module FROM ( SELECT code_module, COUNT(DISTINCT id_student) AS student_count FROM studentInfo GROUP BY code_module ) AS module_counts ORDER BY student_count DESC LIMIT 1;","SELECT m.code_module, COUNT(s.id_student) as num_students FROM studentinfo s JOIN courses m ON s.code_module = m.code_module GROUP BY m.code_module ORDER BY num_students DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
201,"각 모듈 프레젠테이션에서 장애를 신고한 여학생의 비율을 계산하고 모듈 코드, 프레젠테이션 코드, 비율 계산값을 조회","SELECT si.code_module, si.code_presentation, SUM(CASE WHEN si.gender = 'F' AND si.disability = 'Yes' THEN 1 ELSE 0 END) / COUNT(*) AS female_disabled_ratio FROM studentInfo si GROUP BY si.code_module, si.code_presentation;","SELECT c.code_module, p.code_presentation, COUNT(DISTINCT s.id_student) * 100.0 / (SELECT COUNT(DISTINCT id_student) FROM studentinfo WHERE code_module = c.code_module AND code_presentation = p.code_presentation) as pct_disability FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN courses p ON s.code_presentation = p.code_presentation WHERE s.gender = 'Female' AND s.disability = 'Yes' GROUP BY c.code_module, p.code_presentation ;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
202,"모든 모듈에 대해 최종 결과가 'Pass'로 기록된 학생 중 시험 점수가 40점 미만인 학생 수를 계산하고 모듈 코드, 학생수를 조회","SELECT si.code_module, COUNT(si.id_student) AS pass_fail_count FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Pass' AND sa.score < 40 GROUP BY si.code_module;","SELECT s.code_module, COUNT(*) as num_students FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student WHERE s.final_result = 'Pass' AND sa.score < 40 GROUP BY s.code_module;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
203,"최근 평가를 제출한 학생의 평가 유형과 평가 일자를 식별하고 평가 유형, 평가 일자를 조회","SELECT a.assessment_type, sa.date_submitted FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment ORDER BY sa.date_submitted DESC LIMIT 1;","SELECT a.assessment_type, a.date AS assessment_date FROM assessments a JOIN studentassessment sa ON a.id_assessment = sa.id_assessment WHERE sa.date_submitted = (SELECT MAX(date_submitted) FROM studentassessment) AND sa.is_branked = 0;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
204,"각 모듈에 대해 가장 많은 시도 횟수를 가진 학생의 최종 결과를 식별하고 모듈 코드, 최종 결과를 조회","SELECT sr.code_module, si.final_result FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(num_of_prev_attempts) AS max_attempts FROM studentInfo GROUP BY id_student ) AS max_attempts ON si.id_student = max_attempts.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","SELECT s.code_module, s.final_result FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student WHERE sr.num_of_prev_attempts = (SELECT MAX(num_of_prev_attempts) FROM studentregistration sr2 WHERE sr2.code_module = sr.code_module AND sr2.code_presentation = sr.code_presentation);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
205,"평가 결과가 'Distinction'이고 가장 많은 평가를 받은 모듈을 식별하고 모듈 코드, 평가의 수를 조회","SELECT sr.code_module, COUNT(sa.id_assessment) AS assessment_count FROM studentAssessment sa INNER JOIN studentInfo si ON sa.id_student = si.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student WHERE si.final_result = 'Distinction' GROUP BY sr.code_module ORDER BY assessment_count DESC LIMIT 1;","SELECT studentregistration.code_module, COUNT(DISTINCT studentassessment.id_assessment) as total_assessments FROM studentassessment JOIN studentregistration ON studentassessment.id_student = studentregistration.id_student JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentinfo.final_result = 'Distinction' GROUP BY studentregistration.code_module ORDER BY total_assessments DESC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
206,"각 모듈 프레젠테이션에 등록한 학생 중 가장 많은 모듈을 이수한 학생의 나이를 식별하고 모듈 코드, 프레젠테이션 코드, 연령대를 조회","SELECT sr.code_module, sr.code_presentation, MAX(si.age_band) AS max_age_band FROM studentInfo si INNER JOIN studentregistration sr ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT s.code_module, s.code_presentation, CASE WHEN s.age_band = '0-18' THEN 'Under 18' WHEN s.age_band = '19-24' THEN '18-24' WHEN s.age_band = '25-34' THEN '25-34' WHEN s.age_band = '35-44' THEN '35-44' WHEN s.age_band = '45-54' THEN '45-54' ELSE '55+' END as age_band FROM studentinfo s INNER JOIN (SELECT code_module, code_presentation, MAX(studied_credits) as max_credits FROM studentregistration sr INNER JOIN studentinfo s ON sr.id_student = s.id_student GROUP BY code_module, code_presentation) subq ON s.code_module = subq.code_module AND s.code_presentation = subq.code_presentation AND s.studied_credits = subq.max_credits;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
207,"각 모듈에 등록한 학생 중 최고 학력이 'Lower Than A Level'이고 모든 평가 결과가 'Pass'인 학생의 수를 계산하고 모듈 코드, 학생수를 조회","SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS lower_than_a_level_pass_count FROM studentInfo si INNER JOIN studentRegistration sr ON si.id_student = sr.id_student INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.highest_education = 'Lower Than A Level' AND sa.score >= 40 GROUP BY sr.code_module;","SELECT c.code_module, COUNT(sr.id_student) as num_students FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student JOIN courses c ON sr.code_module = c.code_module JOIN studentassessment sa ON s.id_student = sa.id_student WHERE s.highest_education = 'Lower Than A Level' AND sa.score >= 40 GROUP BY c.code_module HAVING COUNT(DISTINCT sa.id_assessment) = (SELECT COUNT(DISTINCT id_assessment) FROM studentassessment WHERE id_student = sa.id_student);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
208,"모든 모듈 프레젠테이션에 대해 평균 평가 점수가 가장 높은 모듈을 식별하고 모듈 코드, 평균 점수를 조회","SELECT sr.code_module, AVG(sa.score) AS avg_score FROM studentAssessment sa INNER JOIN studentregistration sr ON sa.id_student = sr.id_student GROUP BY sr.code_module ORDER BY avg_score DESC LIMIT 1;","SELECT c.code_module, AVG(sa.score) as avg_score FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student JOIN studentregistration sr ON si.id_student = sr.id_student JOIN courses c ON sr.code_module = c.code_module GROUP BY c.code_module ORDER BY avg_score DESC LIMIT 1;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
209,"각 모듈 프레젠테이션에서 가장 많은 시도 횟수를 가진 학생의 성별을 식별하고 모듈 코드, 프레젠테이션 코드, 성별을 조회","SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(num_of_prev_attempts) AS max_attempts FROM studentInfo GROUP BY id_student ) AS max_attempts ON si.id_student = max_attempts.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","SELECT s.code_module, s.code_presentation, s.gender, MAX(sr.num_of_prev_attempts) as highest_num_of_prev_attempts FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student GROUP BY s.code_module, s.code_presentation, s.gender HAVING highest_num_of_prev_attempts = (SELECT MAX(num_of_prev_attempts) FROM studentregistration sr2 WHERE sr2.code_module = s.code_module AND sr2.code_presentation = s.code_presentation);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
210,최종 결과가 'Fail'이고 평가 점수가 40보다 낮은 모든 학생 중 가장 많은 학점을 취득한 학생의 학점 수를 식별,SELECT MAX(si.studied_credits) AS max_credits FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Fail' AND sa.score < 40;,SELECT SUM(studied_credits) as total_credits FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentinfo.final_result = 'Fail' AND studentassessment.score < 40 GROUP BY studentinfo.id_student ORDER BY total_credits DESC LIMIT 1;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
211,"각 모듈에 등록한 학생 중 가장 많은 시도 횟수를 가진 학생의 연령대를 식별하고 모듈 코드, 프레젠테이션 코드, 연령대를 조회","SELECT sr.code_module, sr.code_presentation, si.age_band FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(num_of_prev_attempts) AS max_attempts FROM studentInfo GROUP BY id_student ) AS max_attempts ON si.id_student = max_attempts.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","SELECT s.code_module, s.code_presentation, st.age_band FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN (SELECT code_module, code_presentation, MAX(num_of_prev_attempts) as max_attempts FROM studentinfo GROUP BY code_module, code_presentation) sub ON s.code_module = sub.code_module AND s.code_presentation = sub.code_presentation INNER JOIN (SELECT DISTINCT region as age_band FROM studentinfo) st ON s.gender = st.age_band WHERE s.num_of_prev_attempts = sub.max_attempts;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
212,"studentAssessment 테이블에서 가장 늦게 제출된 과제(또는 과제들)에 대해, 점수가 40 미만인 경우 해당 과제의 유형",SELECT a.assessment_type FROM studentAssessment sa INNER JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.date_submitted = ( SELECT MAX(date_submitted) FROM studentAssessment WHERE score < 40 ) AND sa.score < 40;,SELECT assessment_type FROM assessments JOIN studentassessment ON assessments.id_assessment = studentassessment.id_assessment WHERE studentassessment.date_submitted = (SELECT MAX(date_submitted) FROM studentassessment) AND studentassessment.score < 40;,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
213,"각 모듈 프레젠테이션에서 가장 많은 모듈을 이수한 학생의 최종 결과를 식별하고 모듈 코드, 최종 결과를 조회","SELECT sr.code_module, si.final_result FROM studentInfo si INNER JOIN ( SELECT id_student, COUNT(DISTINCT code_module) AS module_count FROM studentInfo GROUP BY id_student ORDER BY module_count DESC LIMIT 1 ) AS max_modules ON si.id_student = max_modules.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","SELECT c.code_module, s.final_result FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student JOIN courses c ON sr.code_module = c.code_module JOIN (SELECT code_module, code_presentation, MAX(studied_credits) as max_credits FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY code_module, code_presentation) sub ON c.code_module = sub.code_module AND c.code_presentation = sub.code_presentation WHERE s.studied_credits = sub.max_credits;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
214,"각 모듈 프레젠테이션에서 가장 높은 점수를 받은 학생의 최종 결과를 식별하고 모듈 코드, 프레젠테이션 코드, 최종 결과를 조회","SELECT sr.code_module, sr.code_presentation, si.final_result FROM studentInfo si INNER JOIN ( SELECT sa.id_student, sa.score FROM studentAssessment sa INNER JOIN ( SELECT id_assessment, MAX(score) AS max_score FROM studentAssessment GROUP BY id_assessment ) AS max_scores ON sa.id_assessment = max_scores.id_assessment AND sa.score = max_scores.max_score ) AS max_scores ON si.id_student = max_scores.id_student INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","SELECT s.code_module, s.code_presentation, s.final_result FROM studentinfo s JOIN studentassessment a ON s.id_student = a.id_student JOIN studentregistration r ON s.id_student = r.id_student GROUP BY s.code_module, s.code_presentation HAVING MAX(a.score) = (SELECT MAX(a.score) FROM studentassessment a JOIN studentregistration r ON a.id_student = r.id_student WHERE r.code_module = s.code_module AND r.code_presentation = s.code_presentation);","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
215,"각 모듈 프레젠테이션에서 최근에 등록한 학생의 성별을 식별하고 모듈 코드, 프레젠테이션 코드, 성별을 조회","SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(code_presentation) AS latest_presentation FROM studentregistration GROUP BY id_student ) AS latest_registration ON si.id_student = latest_registration.id_student AND si.code_presentation = latest_registration.latest_presentation INNER JOIN studentregistration sr ON sr.id_student = si.id_student;","SELECT s.code_module, s.code_presentation, s.gender FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE sr.date_unregistration IS NULL ORDER BY s.code_module, s.code_presentation, s.id_student DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
216,평가 결과가 'Distinction'이고 모든 평가 유형에서 평균 점수가 80보다 높은 모든 학생의 수를 계산,SELECT COUNT(*) AS distinction_count FROM ( SELECT si.id_student FROM studentInfo si INNER JOIN studentAssessment sa ON si.id_student = sa.id_student WHERE si.final_result = 'Distinction' GROUP BY si.id_student HAVING AVG(sa.score) > 80 ) AS high_scores;,SELECT COUNT(*) FROM (SELECT id_student FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student WHERE si.final_result = 'Distinction' AND AVG(score) > 80 GROUP BY id_student) t;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
217,"각 모듈에 등록한 학생 중 최고 학력이 'No Formal quals'이고 최근 평가를 제출한 여학생의 수를 계산하고 모듈 코드, 학생수를 조회","SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS recent_female_count FROM studentInfo si INNER JOIN ( SELECT id_student, MAX(date_submitted) AS latest_submission FROM studentAssessment GROUP BY id_student ) AS latest_submissions ON si.id_student = latest_submissions.id_student INNER JOIN studentRegistration sr ON sr.id_student = si.id_student WHERE si.gender = 'F' AND si.highest_education = 'No Formal quals' GROUP BY sr.code_module;","SELECT s.code_module, COUNT(DISTINCT s.id_student) as num_students FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN studentassessment sa ON s.id_student = sa.id_student WHERE s.gender = 'Female' AND s.highest_education = 'No Formal quals' AND sa.date_submitted = (SELECT MAX(date_submitted) FROM studentassessment) GROUP BY s.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
218,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 가장 많이 이용한 학생을 식별하고 모듈 코드, 프레젠테이션 코드, 학생ID, 총 클릭수를 조회","SELECT sr.code_module, sr.code_presentation, sv.id_student, SUM(sv.sum_click) AS total_clicks FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation, sv.id_student ORDER BY total_clicks DESC LIMIT 1;","SELECT c.code_module, p.code_presentation, s.id_student, SUM(sv.sum_click) as total_clicks FROM studentregistration r JOIN studentvle s ON r.code_module = s.code_module AND r.code_presentation = s.code_presentation JOIN studentinfo s2 ON r.id_student = s2.id_student JOIN courses c ON r.code_module = c.code_module JOIN courses p ON r.code_presentation = p.code_presentation GROUP BY c.code_module, p.code_presentation, s.id_student ORDER BY total_clicks DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
219,"각 모듈 프레젠테이션에 등록한 학생 중 최근에 VLE 자료를 이용한 학생의 성별을 식별하고 모듈 코드, 프레젠테이션 코드, 성별을 조회","SELECT sr.code_module, sr.code_presentation, si.gender FROM studentInfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student INNER JOIN studentvle sv ON si.id_student = sv.id_student AND sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE sv.date = ( SELECT MAX(date) FROM studentvle sv2 WHERE sv2.code_module = sv.code_module AND sv2.code_presentation = sv.code_presentation ) GROUP BY sr.code_module, sr.code_presentation, si.gender;","SELECT s.code_module, s.code_presentation, s.gender FROM studentinfo s INNER JOIN (SELECT code_module, code_presentation, id_student FROM studentvle WHERE date = (SELECT MAX(date) FROM studentvle)) v ON s.code_module = v.code_module AND s.code_presentation = v.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
220,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 여학생의 비율을 계산하고 모듈 코드, 프레젠테이션 코드, VLE를 이용한 여학생의 비율을 조회","SELECT sr.code_module, sr.code_presentation, SUM(CASE WHEN si.gender = 'F' THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT sv.id_student) AS female_ratio FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student INNER JOIN studentInfo si ON sv.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT studentregistration.code_module, studentregistration.code_presentation, 100.0 * COUNT(DISTINCT studentvle.id_student) / COUNT(DISTINCT studentinfo.id_student) AS percentage FROM studentregistration INNER JOIN studentinfo ON studentregistration.code_module = studentinfo.code_module AND studentregistration.code_presentation = studentinfo.code_presentation INNER JOIN studentvle ON studentregistration.code_module = studentvle.code_module AND studentregistration.code_presentation = studentvle.code_presentation WHERE studentinfo.gender = 'female' GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
221,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 클릭 수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 "클릭수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_clicks FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) as avg_clicks FROM studentregistration sr JOIN courses c ON sr.code_module = c.code_module JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE sv.id_student = sr.id_student GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
222,VLE 자료를 이용한 모든 학생 중 가장 많은 모듈을 이수한 학생의 최종 결과를 식별,"SELECT si.final_result FROM studentInfo si INNER JOIN ( SELECT id_student, COUNT(DISTINCT code_module) AS module_count FROM studentregistration GROUP BY id_student ORDER BY module_count DESC LIMIT 1 ) AS max_modules ON si.id_student = max_modules.id_student;","SELECT studentinfo.code_module, studentinfo.code_presentation, studentinfo.id_student, studentinfo.gender, studentinfo.region, studentinfo.highest_education, studentinfo.imd_band, studentinfo.age_band, studentinfo.num_of_prev_attempts, studentinfo.studied_credits, studentinfo.disability, studentinfo.final_result, studentregistration.date_unregistration FROM studentinfo INNER JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student INNER JOIN (SELECT code_module, code_presentation, MAX(num_of_prev_attempts) as max_attempts FROM studentinfo GROUP BY code_module, code_presentation) as subquery ON studentinfo.code_module = subquery.code_module AND studentinfo.code_presentation = subquery.code_presentation AND studentinfo.num_of_prev_attempts = subquery.max_attempts WHERE studentregistration.date_unregistration IS NULL;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
223,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 최종 결과를 식별하고 모듈 코드, 프레젠테이션 코드, 최종 결과를 조회","SELECT sr.code_module, sr.code_presentation, si.final_result FROM studentvle sv INNER JOIN studentregistration sr ON sv.id_student = sr.id_student INNER JOIN studentInfo si ON sv.id_student = si.id_student;","SELECT s.code_module, s.code_presentation, s.final_result FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student JOIN studentvle sv ON s.code_module = sv.code_module AND s.code_presentation = sv.code_presentation WHERE sv.id_site IS NOT NULL GROUP BY s.code_module, s.code_presentation, s.final_result HAVING COUNT(DISTINCT sv.id_site) > 0;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
224,"모든 모듈 프레젠테이션에서 각 학생의 최근 평가 점수를 식별하고 학생id, 모듈 코드, 프레젠테이션 코드, 점수를 조회","SELECT si.id_student, sr.code_module, sr.code_presentation, MAX(sa.score) AS recent_score FROM studentInfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student GROUP BY si.id_student, sr.code_module, sr.code_presentation;","SELECT s.id_student, s.code_module, s.code_presentation, a.score as recent_score FROM studentinfo s INNER JOIN studentassessment a ON s.id_student = a.id_student INNER JOIN studentregistration r ON s.id_student = r.id_student WHERE a.is_branked = 0 AND r.date_unregistration IS NULL AND a.date_submitted = (SELECT MAX(date_submitted) FROM studentassessment a2 WHERE a2.id_student = a.id_student) GROUP BY s.id_student, s.code_module, s.code_presentation, a.score;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
225,"모든 학생의 평균 평가 점수와 VLE 자료를 이용한 총 클릭 수를 계산하고 학생id, 모듈 코드, 평균 평가점수,"총 클릭수를 조회","SELECT si.id_student, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks FROM studentInfo si LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student LEFT JOIN studentvle sv ON si.id_student = sv.id_student GROUP BY si.id_student;","SELECT s.id_student, c.code_module, AVG(a.score) AS avg_assessment_score, SUM(sv.sum_click) AS total_clicks FROM studentinfo s JOIN studentassessment a ON s.id_student = a.id_student JOIN studentvle sv ON s.id_student = sv.id_student JOIN courses c ON s.code_module = c.code_module GROUP BY s.id_student, c.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
226,각 모듈 프레젠테이션에서 최근 VLE 자료 이용일과 최근 제출일을 비교하여 최신 활동을 식별,"SELECT sr.code_module, sr.code_presentation, CASE WHEN MAX(sv.date) > MAX(sa.date_submitted) THEN 'VLE 자료 이용' WHEN MAX(sv.date) < MAX(sa.date_submitted) THEN '평가 제출' ELSE '동시에 VLE 자료 이용 및 평가 제출' END AS recent_activity FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT studentregistration.code_module, studentregistration.code_presentation, studentregistration.id_student, MAX(studentvle.date) AS date_last_interaction, MAX(studentassessment.date_submitted) AS date_last_submission FROM studentregistration INNER JOIN studentvle ON studentregistration.code_module = studentvle.code_module AND studentregistration.code_presentation = studentvle.code_presentation AND studentregistration.date_unregistration IS NULL INNER JOIN studentassessment ON studentregistration.code_module = studentassessment.id_assessment AND studentregistration.code_presentation = studentassessment.id_student AND studentassessment.is_branked = 1 GROUP BY studentregistration.code_module, studentregistration.code_presentation, studentregistration.id_student;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
227,모든 학생의 최종 결과와 해당 결과를 도출하는 모든 평가 유형을 조회,"SELECT si.id_student, si.final_result, GROUP_CONCAT(DISTINCT a.assessment_type) AS assessment_types FROM studentInfo si LEFT JOIN studentAssessment sa ON si.id_student = sa.id_student LEFT JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY si.id_student, si.final_result;","SELECT s.gender, s.region, s.highest_education, s.imd_band, s.age_band, s.num_of_prev_attempts, s.studied_credits, s.disability, a.assessment_type, a.score AS final_result FROM studentinfo s INNER JOIN studentassessment sa ON s.id_student = sa.id_student INNER JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE a.date = (SELECT MAX(date) FROM assessments WHERE id_assessment = a.id_assessment) AND a.assessment_type = 'Exam';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
228,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생 수를 조회","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, p.code_presentation, COUNT(DISTINCT s.id_student) as num_students FROM studentregistration s JOIN studentassessment a ON s.id_student = a.id_student JOIN studentvle v ON s.id_student = v.id_student JOIN courses c ON s.code_module = c.code_module JOIN courses p ON s.code_presentation = p.code_presentation GROUP BY c.code_module, p.code_presentation HAVING COUNT(DISTINCT a.id_assessment) > 0;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
229,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료 이용일과 평가 제출일의 차이를 계산하여 학습 시간을 확인하고 모듈 코드, 프레젠테이션 코드, 학습시간을 조회","SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, (MAX(s.date) - MIN(s.date)) AS learning_hours FROM studentregistration sr JOIN studentvle s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation JOIN studentassessment a ON sr.id_student = a.id_student GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
230,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생 중 여성 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS female_students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(DISTINCT studentvle.id_student) AS female_students_interacted_with_vle FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student INNER JOIN studentvle ON studentinfo.code_module = studentvle.code_module AND studentinfo.code_presentation = studentvle.code_presentation WHERE studentinfo.gender = 'Female' GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
231,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료 이용일과 평가 제출일의 차이의 평균과 표준 편차를 계산하여 학습 시간의 변동성을 확인하고 모듈 코드, 프레젠테이션 코드, 학습시간의 변동성을 조회","SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time, STDDEV(DATEDIFF(sa.date_submitted, sv.date)) AS std_dev_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT code_module, code_presentation, AVG(date - date_submitted) as avg_days_diff, STDDEV(date - date_submitted) as stddev_days_diff FROM studentregistration sr JOIN studentvle s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation JOIN studentassessment sa ON sr.id_student = sa.id_student GROUP BY code_module, code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
232,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료 이용일과 평가 제출일의 차이를 계산하여 학습 시간을 확인하고 모듈 코드, 프레젠테이션 코드, 학습시간을 조회","SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, (SUM(DATEDIFF(d, e.date)) / 60) as learning_hours FROM studentregistration r JOIN studentvle d ON r.code_module = d.code_module AND r.code_presentation = d.code_presentation AND r.id_student = d.id_student JOIN studentassessment e ON r.code_module = e.id_assessment AND r.code_presentation = e.id_student GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
233,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생 중 여성 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS female_students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, p.code_presentation, COUNT(DISTINCT s.id_student) as num_students FROM studentregistration s JOIN studentinfo i ON s.id_student = i.id_student JOIN studentvle v ON s.id_student = v.id_student JOIN studentassessment a ON s.id_student = a.id_student WHERE i.gender = 'Female' GROUP BY c.code_module, p.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
234,"각 모듈에 등록한 학생 중 VLE 자료 이용과 관련된 평가 점수를 받은 학생의 수를 계산하고 모듈 코드, 프레젠테이션 코드, 학생수를 조회","SELECT sr.code_module, sr.code_presentation, COUNT(DISTINCT sa.id_student) AS students_with_vle_activity_and_assessment FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT studentregistration.code_module, studentregistration.code_presentation, COUNT(DISTINCT studentvle.id_student) as num_students FROM studentregistration INNER JOIN studentvle ON studentregistration.code_module = studentvle.code_module AND studentregistration.code_presentation = studentvle.code_presentation INNER JOIN studentassessment ON studentvle.id_student = studentassessment.id_student GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
235,"과제 제출 날짜 이후 및 이전에 가상 학습 환경(VLE) 상호작용을 한 평균 횟수를 각 모듈 및 세션별로 계산하고 모듈 코드, 프레젠테이션 코드, 상호작용 평균 "횟수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(CASE WHEN sv.date >= sa.date_submitted THEN sv.sum_click END) AS avg_recent_interaction_submitted, AVG(CASE WHEN sv.date < sa.date_submitted THEN sv.sum_click END) AS avg_recent_interaction_not_submitted FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, p.code_presentation, AVG(sv.date) as avg_date, AVG(sv.sum_click) as avg_interactions FROM studentregistration sr JOIN courses c ON sr.code_module = c.code_module JOIN courses p ON sr.code_presentation = p.code_presentation JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation JOIN studentassessment sa ON sr.id_student = sa.id_student GROUP BY c.code_module, p.code_presentation ORDER BY c.code_module, p.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
236,"각 모듈 프레젠테이션에 등록한 학생 중 여학생의 평균 학습 시간과 남학생의 평균 학습 시간을 비교하여 분석하고 모듈 코드, 프레젠테이션 코드, 성별과 평균 자료 상호작용시간(학습시간)을 조회","SELECT sr.code_module, sr.code_presentation, si.gender, AVG(sv.sum_click) AS avg_learning_time FROM studentregistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentvle sv ON sr.id_student = sv.id_student WHERE si.gender IN ('M', 'F') GROUP BY sr.code_module, sr.code_presentation, si.gender;","SELECT c.code_module, c.code_presentation, AVG(CASE WHEN s.gender = 'Female' THEN sv.date ELSE NULL END) as avg_learning_time_female, AVG(CASE WHEN s.gender = 'Male' THEN sv.date ELSE NULL END) as avg_learning_time_male FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation, s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
237,"각 모듈 프레젠테이션에 등록한 학생 중 모듈 프레젠테이션 진행 일수가 가장 긴 모듈의 평균 평가 가중치를 계산하고 모듈 코드, 프레젠테이션 코드, 평가 가중치를 조회","SELECT sr.code_module, sr.code_presentation, AVG(a.weight) AS avg_weight_of_longest_module FROM studentregistration sr INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation WHERE c.module_presentation_length = ( SELECT MAX(module_presentation_length) FROM courses ) GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(a.weight) as avg_weight FROM studentregistration sr JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation WHERE sr.date_unregistration IS NULL GROUP BY c.code_module, c.code_presentation HAVING MAX(c.module_presentation_length) = (SELECT MAX(module_presentation_length) FROM courses c INNER JOIN studentregistration sr ON c.code_module = sr.code_module AND c.code_presentation = sr.code_presentation WHERE sr.date_unregistration IS NULL GROUP BY c.code_module, c.code_presentation);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)); CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
238,"각 모듈 프레젠테이션에 등록한 학생 중 모든 평가의 가중치 합이 100이 아닌 모듈 프레젠테이션을 식별하고 모듈 코드, 프레젠테이션 코드를 조회","SELECT sr.code_module, sr.code_presentation FROM studentregistration sr INNER JOIN ( SELECT code_module, code_presentation, SUM(weight) AS total_weight FROM assessments GROUP BY code_module, code_presentation HAVING total_weight <> 100 ) AS subquery ON sr.code_module = subquery.code_module AND sr.code_presentation = subquery.code_presentation;","SELECT c.code_module, c.code_presentation FROM studentregistration sr INNER JOIN courses c ON sr.code_module = c.code_module INNER JOIN assessments a ON c.code_module = a.code_module GROUP BY c.code_module, c.code_presentation HAVING SUM(a.weight)!= 100;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
239,"각 모듈에 등록한 학생 중 VLE 자료 이용일과 평가 제출일의 차이를 계산하여 학생들의 평균 학습 시간을 확인하고 모듈 코드, 프레젠테이션 코드, 평균 학습 시간을 조회","SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sa.date_submitted, sv.date)) AS avg_learning_time FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(DATEDIFF(s.date, s.studentvle.date)) as avg_learning_time FROM studentregistration s JOIN studentvle s_vle ON s.code_module = s_vle.code_module AND s.code_presentation = s_vle.code_presentation JOIN studentassessment s_assessment ON s.id_student = s_assessment.id_student GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
240,"각 모듈 프레젠테이션에 등록한 학생 중 여학생의 평균 학습 시간과 남학생의 평균 학습 시간을 비교하여 분석하고 모듈 코드, 프레젠테이션 코드, 각 성별의 평균 학습 시간을 조회","SELECT sr.code_module, sr.code_presentation, AVG(CASE WHEN si.gender = 'F' THEN DATEDIFF(sv.date, sr.date_registration) END) AS avg_female_learning_time, AVG(CASE WHEN si.gender = 'M' THEN DATEDIFF(sv.date, sr.date_registration) END) AS avg_male_learning_time FROM studentregistration sr LEFT JOIN studentInfo si ON sr.id_student = si.id_student LEFT JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT s.code_module, s.code_presentation, AVG(CASE WHEN s.gender = 'Female' THEN sv.date ELSE NULL END) as avg_learning_hours_female, AVG(CASE WHEN s.gender = 'Male' THEN sv.date ELSE NULL END) as avg_learning_hours_male FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN studentvle sv ON s.code_module = sv.code_module AND s.code_presentation = sv.code_presentation GROUP BY s.code_module, s.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
241,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 가장 많이 이용한 학생의 평균 평가 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 평가 점수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score_of_top_vle_user FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN ( SELECT id_student FROM studentvle GROUP BY id_student ORDER BY SUM(sum_click) DESC LIMIT 1 ) AS top_vle_user ON sr.id_student = top_vle_user.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, p.code_presentation, AVG(a.score) AS avg_score FROM studentregistration sr INNER JOIN studentvle s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation INNER JOIN studentassessment a ON sr.id_student = a.id_student GROUP BY c.code_module, p.code_presentation HAVING MAX(s.date) = (SELECT MAX(date) FROM studentvle GROUP BY code_module, code_presentation);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
242,"각 모듈 프레젠테이션에 등록한 학생 중 여학생이 VLE 자료를 이용한 평균 학습 시간을 계산하고 모듈 코드, 프레젠테이션 코드, 평균 학습 시간을 조회","SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sv.date, sr.date_registration)) AS avg_learning_time_female_with_vle_activity FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","SELECT studentinfo.code_module, studentinfo.code_presentation, AVG(studentvle.sum_click) AS avg_learning_time FROM studentinfo INNER JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student INNER JOIN studentvle ON studentregistration.code_module = studentvle.code_module AND studentregistration.code_presentation = studentvle.code_presentation WHERE studentinfo.gender = 'female' GROUP BY studentinfo.code_module, studentinfo.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
243,"각 모듈 프레젠테이션에 등록한 학생 중 최근에 VLE 자료를 이용한 학생과 최근에 제출한 평가를 완료한 학생 간의 비율을 분석하고 모듈 코드, 프레젠테이션 코드, 비율을 조회","SELECT sr.code_module, sr.code_presentation, (COUNT(DISTINCT CASE WHEN sv.date >= sa.date_submitted THEN sr.id_student END) / COUNT(DISTINCT sr.id_student)) AS recent_interaction_to_submission_ratio FROM studentregistration sr LEFT JOIN studentvle sv ON sr.id_student = sv.id_student LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, COUNT(DISTINCT s.id_student) * 100.0 / (SELECT COUNT(DISTINCT s.id_student) FROM studentregistration s JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE c.date_start <= date AND c.date_end >= date) AS percentage FROM studentregistration s JOIN studentvle v ON s.code_module = v.code_module AND s.code_presentation = v.code_presentation JOIN studentassessment a ON s.id_student = a.id_student JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation WHERE s.date_registration <= v.date AND s.date_unregistration >= v.date AND s.date_registration <= a.date_submitted AND s.date_unregistration >= a.date_submitted GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
244,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 가장 많이 이용한 학생의 평균 평가 점수를 계산하고 모듈 코드, 프레젠테이션 코드, 평균 평가점수를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score_of_top_vle_user FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN ( SELECT id_student FROM studentvle GROUP BY id_student ORDER BY SUM(sum_click) DESC LIMIT 1 ) AS top_vle_user ON sr.id_student = top_vle_user.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(a.score) as avg_score FROM studentregistration sr JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation JOIN studentassessment a ON sv.id_student = a.id_student WHERE sv.date = (SELECT MAX(date) FROM studentvle sv2 WHERE sv2.code_module = sv.code_module AND sv2.code_presentation = sv.code_presentation) GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
245,"각 모듈 프레젠테이션에 등록한 학생 중 여학생이 VLE 자료를 이용한 평균 학습 시간을 계산하고 모듈 코드, 프레젠테이션 코드, 평균 학습시간을 조회","SELECT sr.code_module, sr.code_presentation, AVG(DATEDIFF(sv.date, sr.date_registration)) AS avg_learning_time_female_with_vle_activity FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(sv.date) as avg_learning_time FROM studentinfo si JOIN studentregistration sr ON si.id_student = sr.id_student JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE si.gender = 'Female' GROUP BY c.code_module, c.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
246,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 점수와 VLE 자료 이용량 사이의 상관 관계를 분석하고 모듈 코드, 프레젠테이션 코드, 학생의 평균점수, VLE 자료 이용량도 함께 조회","SELECT sr.code_module, sr.code_presentation, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks FROM studentregistration sr INNER JOIN studentAssessment sa ON sr.id_student = sa.id_student INNER JOIN studentvle sv ON sr.id_student = sv.id_student GROUP BY sr.code_module, sr.code_presentation;","SELECT m.code_module, m.code_presentation, AVG(s.score) AS avg_score, AVG(v.sum_click) AS avg_vle_usage, CORR(s.score, v.sum_click) AS correlation FROM studentregistration r JOIN courses m ON r.code_module = m.code_module JOIN courses p ON r.code_presentation = p.code_presentation JOIN studentassessment s ON r.id_student = s.id_student JOIN studentvle v ON r.code_module = v.code_module AND r.code_presentation = v.code_presentation GROUP BY m.code_module, m.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
247,"각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 사이의 관계를 분석하고 모듈 코드, 모듈 프레젠테이션, 평균 상호작용 횟수, 모듈 프레젠테이션 길이를 조회","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module, sr.code_presentation;","SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) as avg_interactions, c.module_presentation_length as presentation_length FROM studentinfo si INNER JOIN studentregistration sr ON si.id_student = sr.id_student INNER JOIN studentvle sv ON si.code_module = sv.code_module AND si.code_presentation = sv.code_presentation INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation, c.module_presentation_length;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
248,"각 모듈 프레젠테이션에 등록한 학생 중 여학생이 VLE 자료를 이용한 평균 상호 작용 횟수와 최종 결과 간의 관계를 분석하고 성별, 모듈 코드와 프레젠테이션 코드도 함께 조회","SELECT si.gender, sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student WHERE si.gender = 'F' GROUP BY si.gender, sr.code_module, sr.code_presentation, si.final_result;","SELECT studentinfo.gender, studentinfo.code_module, studentinfo.code_presentation, AVG(studentvle.sum_click) as avg_interactions, studentinfo.final_result FROM studentinfo INNER JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student INNER JOIN studentvle ON studentinfo.id_student = studentvle.id_student WHERE studentinfo.gender = 'female' GROUP BY studentinfo.gender, studentinfo.code_module, studentinfo.code_presentation, studentinfo.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
249,각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 최종 결과 간의 관계를 분석하고 모듈 코드와 프레젠테이션 코드도 함께 조회,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;","SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) as avg_interactions, s.final_result FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation GROUP BY c.code_module, c.code_presentation, s.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
250,각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 최종 결과 간의 관계를 분석하고 모듈 코드와 프레젠테이션 코드도 함께 조회,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;","SELECT code_module, code_presentation, AVG(sum_click) as avg_interactions, final_result FROM studentvle JOIN studentregistration ON studentvle.id_student = studentregistration.id_student JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY code_module, code_presentation, final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
251,"각 모듈 코드, 각 프레젠테이션 코드, 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 사이의 관계를 분석","SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY sr.code_module, sr.code_presentation;","SELECT s.code_module, s.code_presentation, AVG(sv.sum_click) as avg_interactions, c.module_presentation_length as presentation_length FROM studentinfo s JOIN studentvle sv ON s.id_student = sv.id_student JOIN studentregistration sr ON s.code_module = sr.code_module AND s.code_presentation = sr.code_presentation JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation GROUP BY s.code_module, s.code_presentation, c.module_presentation_length;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
252,각 모듈 코드와 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 및 최종 결과 간의 관계를 분석,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length, si.final_result FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module, sr.code_presentation, si.final_result;","SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) as avg_interactions, c.module_presentation_length, a.assessment_type, a.weight FROM studentregistration sr JOIN studentvle sv ON sr.id_student = sv.id_student JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation GROUP BY c.code_module, c.code_presentation, a.assessment_type, a.weight, c.module_presentation_length;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
253,각 모듈 프레젠테이션에 등록한 학생 중 VLE 자료를 이용한 학생의 평균 상호 작용 횟수와 모듈 프레젠테이션의 길이 및 평가 유형 간의 관계를 분석,"SELECT sr.code_module, sr.code_presentation, AVG(sv.sum_click) AS avg_interaction_count, c.module_presentation_length, a.assessment_type FROM studentregistration sr INNER JOIN studentvle sv ON sr.id_student = sv.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY sr.code_module, sr.code_presentation, a.assessment_type;","SELECT c.code_module, c.code_presentation, AVG(sv.sum_click) as avg_interactions, c.module_presentation_length, a.assessment_type FROM studentregistration sr JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation LEFT JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation GROUP BY c.code_module, c.code_presentation, c.module_presentation_length, a.assessment_type;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
254,모든 프레젠테이션에 대한 모듈과 모듈의 평균 프레젠테이션 길이를 조회,"SELECT code_module, AVG(module_presentation_length) as avg_length FROM courses GROUP BY code_module;","SELECT m.name AS module_name, AVG(cp.length) AS avg_presentation_length FROM courses c JOIN modules m ON c.code_module = m.code_module JOIN course_presentations cp ON c.code_presentation = cp.code_presentation GROUP BY m.name ;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
255,모든 프레젠테이션에 대한 평가 유형과 평가 유형별 평균 가중치를 조회,"SELECT assessment_type, AVG(weight) as avg_weight FROM assessments GROUP BY assessment_type;","SELECT assessments.assessment_type, AVG(assessments.weight) as avg_weight FROM assessments GROUP BY assessments.assessment_type ;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
256,VLE의 모든 활동 유형과 활동 유형별 평균 활동 기간을 조회,"SELECT activity_type, AVG(week_to - week_from) as avg_activity_duration FROM vle GROUP BY activity_type;","SELECT activity_type, AVG(DATEDIFF(week_to, week_from)) as avg_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
257,모든 모듈에 대한 학생들의 평균 학점을 조회,"SELECT code_module, AVG(studied_credits) as avg_credits FROM studentInfo GROUP BY code_module;",SELECT AVG(final_result) FROM studentinfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
258,모든 모듈에 등록된 학생들의 연령대와 평균 나이를 조회,"SELECT code_module, age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, age_band;","SELECT s.age_band, AVG(s.age) as avg_age FROM studentinfo s GROUP BY s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
259,모든 프레젠테이션에 대한 최대 및 최소 평가 가중치를 조회,"SELECT code_presentation, (SELECT MAX(weight) FROM assessments AS a2 WHERE a1.code_presentation = a2.code_presentation) AS max_weight, (SELECT MIN(weight) FROM assessments AS a3 WHERE a1.code_presentation = a3.code_presentation) AS min_weight FROM assessments AS a1 GROUP BY code_presentation;","SELECT code_presentation, MAX(weight) as max_weight, MIN(weight) as min_weight FROM assessments GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
260,모듈 코드와 모든 모듈에 등록된 학생들 중 장애를 가진 학생의 비율을 조회,"SELECT code_module, SUM(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) / COUNT(*) AS disability_ratio FROM studentInfo GROUP BY code_module;","SELECT m.code_module, 100.0 * COUNT(DISTINCT s.id_student) / (SELECT COUNT(DISTINCT id_student) FROM studentinfo) AS percentage FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN moduleinfo m ON c.code_module = m.code_module WHERE s.disability = 'yes' GROUP BY m.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
261,모든 학생들의 평균 평가 점수를 조회,"SELECT AVG(score) AS avg_score FROM ( SELECT id_student, AVG(score) AS score FROM studentAssessment GROUP BY id_student ) AS student_scores;",SELECT AVG(score) FROM studentassessment;,"CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
262,모든 학생의 VLE 자료 클릭 수의 총 합을 조회,"SELECT SUM(sum_click) as total_clicks FROM ( SELECT id_student, SUM(sum_click) AS sum_click FROM studentVle GROUP BY id_student ) AS student_clicks;",SELECT SUM(sum_click) FROM studentvle;,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
263,모든 학생의 VLE 자료 클릭 수 평균을 조회,"SELECT AVG(avg_clicks) as avg_clicks FROM ( SELECT id_student, AVG(sum_click) AS avg_clicks FROM studentVle GROUP BY id_student ) AS student_avg_clicks;",SELECT AVG(sum_click) FROM studentvle;,"CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
264,모든 학생들의 평균 학점을 조회,"SELECT AVG(avg_credits) as avg_credits FROM ( SELECT id_student, SUM(studied_credits) AS avg_credits FROM studentInfo GROUP BY id_student ) AS student_avg_credits;",SELECT AVG(studied_credits) FROM studentinfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
265,모든 학생의 평균 나이를 조회,SELECT AVG(age_band) as avg_age FROM studentInfo;,SELECT AVG(age_band) FROM studentinfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
266,등록된 학생의 총 수를 조회,SELECT COUNT(id_student) as total_students FROM studentInfo;,SELECT COUNT(*) FROM studentinfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
267,학생의 등록 모듈과 해당 모듈의 평균 프레젠테이션 길이를 조회,"SELECT r.code_module, AVG(c.module_presentation_length) as avg_length FROM studentRegistration r JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY r.code_module;","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(courses.module_presentation_length) as avg_length FROM studentregistration JOIN courses ON studentregistration.code_module = courses.code_module AND studentregistration.code_presentation = courses.code_presentation GROUP BY studentregistration.code_module, studentregistration.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
268,"학생 코드, 학생의 평가 점수와 평가 유형을 조회","SELECT s.id_student, a.assessment_type, sa.score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo s ON sa.id_student = s.id_student;","SELECT studentinfo.code_module, studentinfo.code_presentation, studentassessment.score, assessments.assessment_type FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student INNER JOIN assessments ON studentassessment.code_module = assessments.code_module AND studentassessment.code_presentation = assessments.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
269,학생의 VLE 자료 클릭 수와 활동 유형을 조회,"SELECT v.id_student, m.activity_type, v.sum_click FROM vle m JOIN studentvle v ON v.id_site = m.id_site WHERE v.code_module = m.code_module AND v.code_presentation = m.code_presentation;","SELECT studentvle.date, studentvle.sum_click, vle.activity_type FROM studentvle INNER JOIN vle ON studentvle.code_module = vle.code_module AND studentvle.code_presentation = vle.code_presentation;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
270,등록된 학생의 모듈과 프레젠테이션 코드와 프레젠테이션에 대한 평균 학점을 조회,"SELECT r.code_module, r.code_presentation, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY r.code_module, r.code_presentation;","SELECT s.code_module, s.code_presentation, p.title, AVG(g.grade) as avg_grade FROM studentregistration s INNER JOIN studentinfo st ON s.id_student = st.id_student INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN courses p ON s.code_presentation = p.code_presentation INNER JOIN grades g ON st.id_student = g.id_student GROUP BY s.code_module, s.code_presentation, p.title;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
271,평가 점수가 40점 미만인 학생들의 평균 학점을 조회,"SELECT r.code_module, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE sa.score < 40 GROUP BY r.code_module;",SELECT AVG(score) FROM studentassessment sa JOIN studentregistration sr ON sa.id_student = sr.id_student JOIN studentinfo st ON sr.id_student = st.id_student WHERE st.gender = 'female' AND st.region = 'North' AND st.highest_education = 'Master' AND st.imd_band = 'Band 1' AND st.age_band = 'Under 25' AND st.num_of_prev_attempts > 1 AND st.studied_credits > 10 AND st.disability = 'Yes' AND sa.score < 40;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
272,모듈 코드 별 장애를 가진 학생의 모듈 코드와 평균 학점을 조회,"SELECT r.code_module, AVG(s.studied_credits) as avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;","SELECT s.code_module, AVG(sr.final_result) as avg_grade FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student WHERE s.disability = 'yes' GROUP BY s.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
273,평가 점수가 40점 미만인 학생의 평가 유형과 점수를 조회,"SELECT a.assessment_type, sa.score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40;","SELECT assessments.assessment_type, studentassessment.score FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment WHERE studentassessment.score < 40;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
274,등록 모듈과 프레젠테이션에 대해 VLE 자료의 총 클릭 수를 조회,"SELECT r.code_module, r.code_presentation, SUM(v.sum_click) as total_clicks FROM studentRegistration r JOIN studentVle v ON r.id_student = v.id_student GROUP BY r.code_module, r.code_presentation;","SELECT s.code_module, s.code_presentation, SUM(sv.sum_click) as total_clicks FROM studentregistration s INNER JOIN studentvle sv ON s.code_module = sv.code_module AND s.code_presentation = sv.code_presentation GROUP BY s.code_module, s.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
275,장애를 가진 학생들의 VLE 자료 클릭 수의 평균과 등록 모듈을 조회,"SELECT r.code_module, AVG(v.sum_click) as avg_clicks FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON r.id_student = v.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;","SELECT studentinfo.code_module, studentinfo.code_presentation, AVG(studentvle.sum_click) FROM studentinfo INNER JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student INNER JOIN studentvle ON studentregistration.code_module = studentvle.code_module AND studentregistration.code_presentation = studentvle.code_presentation WHERE studentinfo.disability = 'yes' GROUP BY studentinfo.code_module, studentinfo.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
276,전체 학생의 등록된 모듈 수를 조회,SELECT COUNT(DISTINCT code_module) AS total_modules FROM studentRegistration;,SELECT COUNT(*) FROM studentregistration;,"CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
277,학생의 나이대 분포를 조회,"SELECT age_band, COUNT(*) AS count FROM studentInfo GROUP BY age_band;","SELECT age_band, COUNT(*) as num_students FROM studentinfo GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
278,모든 학생의 최대 및 최소 나이대를 조회,"SELECT MAX(age_band) AS max_age, MIN(age_band) AS min_age FROM studentInfo;","SELECT MIN(age_band) as min_age, MAX(age_band) as max_age FROM studentinfo;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
279,전체 학생의 장애 여부 분포를 조회,"SELECT disability, COUNT(*) AS count FROM studentInfo GROUP BY disability;","SELECT disability, COUNT(*) as total FROM studentinfo GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
280,학생의 최대 및 최소 이전 시도 횟수를 조회,"SELECT MAX(num_of_prev_attempts) AS max_attempts, MIN(num_of_prev_attempts) AS min_attempts FROM studentInfo;","SELECT MAX(num_of_prev_attempts) as max_attempts, MIN(num_of_prev_attempts) as min_attempts FROM studentinfo;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
281,등록된 학생의 평균 등록 및 탈퇴 기간을 조회,"SELECT AVG(date_registration) AS avg_registration_duration, AVG(date_unregistration) AS avg_unregistration_duration FROM studentRegistration;","SELECT AVG(date_registration) as avg_registration, AVG(date_unregistration) as avg_unregistration FROM studentregistration;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
282,평가 점수가 60점 이상을 받은 학생 수와 합격율 조회,"SELECT COUNT(*) AS passed_count, (COUNT(*) / (SELECT COUNT(*) FROM studentAssessment)) * 100 AS pass_rate FROM studentAssessment WHERE score >= 60;","SELECT COUNT(*) as passed_students, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentassessment WHERE id_student = s.id)) as pass_rate FROM studentassessment s WHERE s.score >= 60;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
283,모든 학생의 등록 모듈과 프레젠테이션별 평균 VLE 자료 클릭 수를 조회,"SELECT r.code_module, r.code_presentation, AVG(v.sum_click) AS avg_clicks FROM studentRegistration r JOIN studentVle v ON r.id_student = v.id_student GROUP BY r.code_module, r.code_presentation;","SELECT code_module, code_presentation, AVG(sum_click) as avg_clicks FROM studentregistration sr JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation GROUP BY sr.code_module, sr.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
284,등록된 학생의 성별과 평균 학점을 조회,"SELECT s.gender, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;","SELECT s.gender, AVG(c.grade) as avg_grade FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
285,평가 유형과 평가 유형별로 가장 높은 평가 점수를 조회,"SELECT a.assessment_type, MAX(sa.score) AS max_score FROM assessments a LEFT JOIN studentAssessment sa ON sa.id_assessment = a.id_assessment GROUP BY a.assessment_type;","SELECT a.assessment_type, MAX(sa.score) as max_score FROM assessments a INNER JOIN studentassessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
286,VLE의 활동 유형별 평균 클릭 수를 조회,"SELECT m.activity_type, AVG(v.sum_click) AS avg_clicks FROM studentVle v JOIN vle m ON v.id_site = m.id_site GROUP BY m.activity_type;","SELECT activity_type, AVG(sum_click) FROM studentvle JOIN vle ON studentvle.id_site = vle.id_site GROUP BY activity_type;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
287,학생의 성별과 평균 평가 점수를 조회,"SELECT s.gender, AVG(sa.score) AS avg_score FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student GROUP BY s.gender;","SELECT s.gender, AVG(a.score) as avg_score FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student GROUP BY s.gender;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
288,학생의 평가 점수가 가장 높은 모듈 코드와 평균 프레젠테이션 기간을 조회,"SELECT r.code_module, AVG(c.module_presentation_length) AS avg_length FROM studentRegistration r JOIN courses c ON r.code_module = c.code_module GROUP BY r.code_module;","SELECT c.code_module, AVG(c.module_presentation_length) as avg_length FROM courses c INNER JOIN studentregistration sr ON c.code_module = sr.code_module INNER JOIN studentinfo s ON sr.id_student = s.id_student WHERE s.score = (SELECT MAX(score) FROM studentinfo) GROUP BY c.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
289,장애를 가진 학생들의 평균 학점을 조회,"SELECT r.code_module, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y'",SELECT AVG(final_result) FROM studentinfo WHERE disability = 'yes';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
290,모든 학생의 최고 학력 수준 분포를 조회,"SELECT highest_education, COUNT(*) AS count FROM studentInfo GROUP BY highest_education;","SELECT highest_education, COUNT(*) as count FROM studentinfo GROUP BY highest_education;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
291,학생의 등록 모듈별 모듈 코드와 평균 등록 기간을 조회,"SELECT code_module, AVG(date_registration) AS avg_registration FROM studentRegistration GROUP BY code_module;","SELECT code_module, AVG(date_registration) as avg_date_registration FROM studentregistration GROUP BY code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
292,지역명과 등록된 학생의 지역별 등록 수를 조회,"SELECT region, COUNT(*) AS registration_count FROM studentInfo GROUP BY region;","SELECT studentinfo.region, COUNT(studentinfo.id_student) as num_students FROM studentinfo GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
293,평가 점수가 70점 이상인 학생들의 총 수와 비율을 조회,"SELECT COUNT(*) AS passed_count, (COUNT(*) / (SELECT COUNT(*) FROM studentAssessment)) * 100 AS pass_rate FROM studentAssessment WHERE score >= 70;","SELECT COUNT(*) as num_students, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentassessment), 2) as percentage FROM studentassessment WHERE score >= 70;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
294,각 학생의 등록된 모듈과 해당 모듈의 평균 평가 점수를 조회,"SELECT r.code_module, AVG(s.studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student WHERE s.disability = 'Y' GROUP BY r.code_module;","SELECT s.id_student, s.gender, s.region, s.highest_education, s.imd_band, s.age_band, s.num_of_prev_attempts, s.studied_credits, s.disability, s.final_result, c.code_module, c.name_module, c.description, c.assessment_score, c.code_presentation, c.date_start, c.date_end FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
295,학생의 성별 및 장애 여부에 따른 평균 학점을 조회,"SELECT gender, disability, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY gender, disability;","SELECT s.gender, s.disability, AVG(c.final_result) as avg_grade FROM studentinfo s JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation GROUP BY s.gender, s.disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
296,모든 학생의 평균 나이와 성별을 조회,"SELECT s.gender, AVG(s.age_band) AS avg_age FROM studentInfo s GROUP BY s.gender;","SELECT AVG(age_band) as avg_age, gender FROM studentinfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
297,평가 점수가 40점 미만인 학생들의 평균 평가 점수와 평가 유형을 조회,"SELECT a.assessment_type, AVG(sa.score) AS avg_score FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40 GROUP BY a.assessment_type;","SELECT a.assessment_type, AVG(sa.score) as avg_score FROM studentassessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment WHERE sa.score < 40 GROUP BY a.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
298,학생의 등록 모듈과 프레젠테이션에 대한 평균 학점과 장애 여부를 조회,"SELECT r.code_module, r.code_presentation, s.disability, AVG(s.studied_credits) AS avg_credits FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY r.code_module, r.code_presentation, s.disability;","SELECT studentregistration.code_module, studentregistration.code_presentation, AVG(studentinfo.final_result) as avg_grade, studentinfo.disability FROM studentregistration INNER JOIN studentinfo ON studentregistration.code_module = studentinfo.code_module AND studentregistration.code_presentation = studentinfo.code_presentation GROUP BY studentregistration.code_module, studentregistration.code_presentation, studentinfo.disability;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
299,남성과 여성 학생의 수를 조회,"SELECT gender, COUNT(*) AS count FROM studentInfo GROUP BY gender;","SELECT gender, COUNT(*) FROM studentinfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
300,성별에 따른 학생들의 최고 학력 수준 분포를 조회,"SELECT gender, highest_education, COUNT(*) AS count FROM studentInfo GROUP BY gender, highest_education;","SELECT gender, MAX(highest_education) as highest_education FROM studentinfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
301,각 성별로 등록된 모듈 수를 조회,"SELECT studentInfo.gender, COUNT(DISTINCT studentRegistration.code_module) AS module_count FROM studentRegistration JOIN studentInfo ON studentRegistration.id_student = studentInfo.id_student GROUP BY studentInfo.gender;","SELECT s.gender, COUNT(sr.id_student) as num_modules FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
302,성별에 따른 학생들의 평균 VLE 자료 클릭 수를 조회,"SELECT gender, AVG(v.sum_click) AS avg_clicks FROM studentInfo s JOIN studentVle v ON s.id_student = v.id_student GROUP BY gender;","SELECT studentinfo.gender, AVG(studentvle.sum_click) as avg_clicks FROM studentinfo JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
303,남성과 여성 학생들의 성별 최대 및 최소 학점을 조회,"SELECT gender, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY gender;","SELECT gender, MAX(studied_credits) as max_credits, MIN(studied_credits) as min_credits FROM studentinfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
304,"성별로 지역명, 학생들의 지역별 등록 수를 조회","SELECT gender, region, COUNT(*) AS registration_count FROM studentInfo GROUP BY gender, region;","SELECT gender, region, COUNT(id_student) as num_students FROM studentinfo GROUP BY gender, region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
305,성별에 따른 학생들의 평균 나이와 최대 학력 수준을 조회,"SELECT gender, AVG(age_band) AS avg_age, MAX(highest_education) AS max_education FROM studentInfo GROUP BY gender;","SELECT s.gender, AVG(s.age_band) as avg_age, MAX(s.highest_education) as max_education FROM studentinfo s GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
306,성별에 따른 평가 유형과 평가 유형별 평균 점수를 조회,"SELECT s.gender, a.assessment_type, AVG(sa.score) AS avg_score FROM studentInfo s JOIN studentAssessment sa ON s.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY s.gender, a.assessment_type;","SELECT s.gender, a.assessment_type, AVG(a.score) as avg_score FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY s.gender, a.assessment_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
307,각 성별의 학생들의 최대 및 최소 학점을 조회,"SELECT s.gender, MAX(s.studied_credits) AS max_credits, MIN(s.studied_credits) AS min_credits FROM studentInfo s GROUP BY s.gender;","SELECT gender, MAX(studied_credits) as max_credits, MIN(studied_credits) as min_credits FROM studentinfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
308,성별에 따른 등록 모듈코드와 모듈별 평균 등록 기간을 조회,"SELECT s.gender, r.code_module, AVG(r.date_registration) AS avg_registration FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.gender, r.code_module;","SELECT c.code_module, s.gender, AVG(sr.date_registration) as avg_registration_duration FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student JOIN courses c ON sr.code_module = c.code_module GROUP BY c.code_module, s.gender;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
309,각 성별의 학생들의 등록 모듈 수를 조회,"SELECT s.gender, COUNT(DISTINCT r.code_module) AS module_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.gender;","SELECT gender, COUNT(*) FROM studentinfo GROUP BY gender;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
310,남성과 여성 학생들의 평균 나이를 조회,"SELECT s.gender, AVG(s.age_band) AS avg_age FROM studentInfo s GROUP BY s.gender;","SELECT AVG(age_band) as avg_age, gender FROM studentinfo GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
311,"지역명과 지역별로 가장 많이 등록된 모듈 코드, 학생수를 조회","SELECT si.region, sr.code_module, COUNT(*) AS registration_count FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY si.region, sr.code_module ORDER BY registration_count DESC LIMIT 1;","SELECT r.region, c.code_module, COUNT(sr.id_student) as student_count FROM studentregistration sr INNER JOIN studentinfo s ON sr.code_module = s.code_module AND sr.code_presentation = s.code_presentation INNER JOIN courses c ON sr.code_module = c.code_module GROUP BY r.region, c.code_module ORDER BY student_count DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
312,각 지역의 지역명과 학생들의 평균 나이를 조회,"SELECT region, AVG(CAST(SUBSTRING(age_band, 1, 2) AS UNSIGNED)) AS avg_age FROM studentInfo GROUP BY region;","SELECT s.region, AVG(s.age_band) as avg_age FROM studentinfo s GROUP BY s.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
313,"각 지역의 지역명, 학생들의 최고 학력 수준과 최고 학력 수준 별 분포를 조회","SELECT region, highest_education, COUNT(*) AS count FROM studentInfo GROUP BY region, highest_education;","SELECT s.region, s.highest_education, COUNT(s.id_student) as count_student FROM studentinfo s GROUP BY s.region, s.highest_education;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
314,"각 지역의 지역명, 학생들의 평균 학점을 조회","SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY region;","SELECT s.region, AVG(s.final_result) as avg_grade FROM studentinfo s GROUP BY s.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
315,"각 지역의 지역명, 학생들의 최대 및 최소 학점을 조회","SELECT region, MAX(studied_credits) AS max_credits, MIN(studied_credits) AS min_credits FROM studentInfo GROUP BY region;","SELECT s.region, MAX(s.studied_credits) as max_credits, MIN(s.studied_credits) as min_credits FROM studentinfo s GROUP BY s.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
316,각 지역의 지역명과 학생들의 VLE 자료 클릭 수 평균을 조회,"SELECT region, AVG(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) AS disability_ratio FROM studentInfo GROUP BY region;","SELECT studentinfo.region, AVG(vlestats.num_of_clicks) as avg_clicks FROM studentinfo INNER JOIN courses ON studentinfo.code_module = courses.code_module INNER JOIN vlestats ON courses.code_module = vlestats.code_module GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
317,각 지역의 지역명과 등록된 모듈 수를 조회,"SELECT s.region, COUNT(DISTINCT r.code_module) AS module_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.region;","SELECT s.region, COUNT(DISTINCT c.code_module) as num_modules FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses c ON sr.code_module = c.code_module GROUP BY s.region;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
318,"각 지역의 지역명, 학생들의 평균 나이와 최대 학력 수준을 조회","SELECT s.region, AVG(s.age_band) AS avg_age, MAX(s.highest_education) AS max_education FROM studentInfo s GROUP BY s.region;","SELECT region, AVG(age_band) as avg_age, MAX(highest_education) as max_education FROM studentinfo GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
319,"각 지역명, 등록 모듈코드, 모듈 별 평균 등록 기간을 조회","SELECT s.region, r.code_module, AVG(r.date_registration) AS avg_registration FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student GROUP BY s.region, r.code_module;","SELECT studentregistration.code_module, AVG(DATEDIFF(studentregistration.date_unregistration, studentregistration.date_registration)) as avg_duration FROM studentregistration JOIN studentinfo ON studentregistration.code_module = studentinfo.code_module JOIN courses ON studentinfo.code_module = courses.code_module GROUP BY studentregistration.code_module, studentinfo.region;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
320,각 지역명과 지역의 학습 기간을 조회,"SELECT s.region, AVG(c.module_presentation_length) AS avg_length FROM courses c JOIN studentInfo s ON c.code_presentation = s.code_presentation GROUP BY s.region;","SELECT c.code_module, c.code_presentation, c.module_presentation_length, s.region FROM courses c JOIN studentinfo s ON c.code_module = s.code_module AND c.code_presentation = s.code_presentation GROUP BY c.code_module, c.code_presentation, s.region;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
321,"각 지역의 지역명, 등록 모듈 코드, 모듈 별 학생 수를 조회","SELECT s.region, c.code_module, COUNT(*) AS student_count FROM studentRegistration r JOIN studentInfo s ON r.id_student = s.id_student JOIN courses c ON r.code_module = c.code_module GROUP BY s.region, c.code_module;","SELECT r.region, s.code_module, COUNT(s.id_student) as num_students FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses c ON sr.code_module = c.code_module AND sr.code_presentation = c.code_presentation INNER JOIN regions r ON s.region = r.region GROUP BY r.region, s.code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
322,각 모듈 코드와 평균 가중치를 조회,"SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","SELECT code_module, AVG(weight) FROM assessments GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
323,"각 모듈 코드,  프레젠테이션 코드, 프레젠테이션 별 평가 결과를 조회","SELECT code_module, code_presentation, assessment_type FROM assessments;","SELECT c.code_module, p.code_presentation, a.assessment_type, a.date, a.weight, a.id_assessment FROM assessments a JOIN courses c ON a.code_module = c.code_module JOIN courses p ON a.code_presentation = p.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
324,평균 가중치 중 가장 낮은 유형을 조회,"SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type ORDER BY avg_weight ASC LIMIT 1;","SELECT assessment_type, AVG(weight) as avg_weight FROM assessments GROUP BY assessment_type ORDER BY avg_weight ASC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
325,각 활동 유형과 활동 유형별 평균 활동 기간 조회,"SELECT activity_type, AVG(week_to - week_from) AS avg_duration FROM vle GROUP BY activity_type ORDER BY avg_duration DESC;","SELECT activity_type, AVG(DATEDIFF(week_to, week_from)) AS avg_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
326,"각 모듈 코드와 지역명, 지역별 학생 수와 해당 지역에 거주하는 학생의 비율","SELECT si.code_module, si.region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module) AS percentage FROM studentInfo si GROUP BY si.code_module, si.region;","SELECT s.code_module, r.region, COUNT(s.id_student) as num_students, (COUNT(s.id_student) * 100.0 / (SELECT COUNT(*) FROM studentinfo si WHERE si.code_module = s.code_module) ) as percentage FROM studentinfo s INNER JOIN studentinfo si ON s.code_module = si.code_module INNER JOIN regions r ON s.region = r.region GROUP BY s.code_module, r.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
327,각 모듈코드와 성별로 등록된 학생의 수를 조회,"SELECT code_module, gender, COUNT(*) AS num_students FROM studentInfo GROUP BY code_module, gender;","SELECT s.code_module, s.gender, COUNT(*) FROM studentinfo s GROUP BY s.code_module, s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
328,수강한 모든 모듈 중 평가 유형의 평균 가중치를 조회,SELECT AVG(weight) AS avg_weight FROM assessments;,SELECT AVG(weight) as avg_weight FROM assessments WHERE assessments.code_module IN (SELECT code_module FROM courses WHERE courses.code_module IN (SELECT code_module FROM enrollments WHERE id_enrollment = 123));,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
329,각 모듈의 프레젠테이션 길이가 평균 이상인 모듈,SELECT code_module FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) >= (SELECT AVG(module_presentation_length) FROM courses);,"SELECT code_module, code_presentation, module_presentation_length FROM courses WHERE module_presentation_length > (SELECT AVG(module_presentation_length) FROM courses) GROUP BY code_module, code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
330,각 활동 유형과 활동 유형별로 가장 많이 사용된 기간 조회,"SELECT activity_type, MAX(week_to - week_from) AS max_duration FROM vle GROUP BY activity_type;","SELECT activity_type, week_from, week_to, COUNT(*) as frequency FROM vle GROUP BY activity_type, week_from, week_to ORDER BY frequency DESC;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
331,가장 많은 학생이 등록한 모듈과 학생 수 조회,"SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentRegistration GROUP BY code_module ORDER BY num_students DESC LIMIT 1;","SELECT code_module, COUNT(*) as student_count FROM studentregistration WHERE date_unregistration IS NULL GROUP BY code_module ORDER BY student_count DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
332,평균 이상으로 평가가 많이 이루어진 모듈,SELECT code_module FROM assessments GROUP BY code_module HAVING COUNT(*) > ( SELECT AVG(module_count) FROM ( SELECT COUNT(*) AS module_count FROM assessments GROUP BY code_module ) AS module_counts );,"SELECT c.code_module, c.title AS module_title, AVG(a.weight) AS avg_weight FROM assessments a JOIN courses c ON a.code_module = c.code_module GROUP BY c.code_module HAVING AVG(a.weight) > (SELECT AVG(a.weight) FROM assessments a JOIN courses c ON a.code_module = c.code_module WHERE c.code_module = c.code_module) ;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
333,가장 많은 모듈을 학습한 학생 id와 모듈의 수를 조회,"SELECT id_student, COUNT(DISTINCT code_module) AS num_modules FROM studentRegistration GROUP BY id_student ORDER BY num_modules DESC LIMIT 1;","SELECT s.id_student, COUNT(sr.code_module) as num_modules FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student JOIN courses c ON sr.code_module = c.code_module GROUP BY s.id_student ORDER BY num_modules DESC LIMIT 1;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
334,모든 프레젠테이션의 평균 길이,SELECT AVG(module_presentation_length) AS avg_length FROM courses;,SELECT AVG(module_presentation_length) FROM courses;,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
335,가장 최근에 등록한 학생,"SELECT id_student, MAX(date_registration) AS max_registration_date FROM studentRegistration GROUP BY id_student;","SELECT id_student, code_module, code_presentation, date_registration, date_unregistration FROM studentregistration WHERE date_registration = (SELECT MAX(date_registration) FROM studentregistration);","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
336,각 활동 유형과 활동 유형 별로 가장 짧은 기간을 가진 활동 조회,"SELECT activity_type, MIN(week_to - week_from) AS min_duration FROM vle GROUP BY activity_type;","SELECT activity_type, MIN(DATEDIFF(week_to, week_from)) OVER (PARTITION BY activity_type) as shortest_duration FROM vle;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
337,각 모듈 코드와 모듈에 속한 학생 중 특정 지역에 거주하는 학생의 비율이 가장 높은순 대로 정렬,"SELECT code_module, region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module) AS percentage FROM studentInfo si GROUP BY code_module, region ORDER BY percentage DESC;","SELECT code_module, COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY code_module) as percentage FROM studentinfo WHERE region ='specific region' GROUP BY code_module ORDER BY percentage DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
338,각 모듈 코드와 모듈에 속한 학생 중 장애를 가진 학생의 비율이 가장 높은순대로 정렬,"SELECT code_module, AVG(CASE WHEN disability = 'Y' THEN 1 ELSE 0 END) AS percentage_with_disability FROM studentInfo GROUP BY code_module ORDER BY percentage_with_disability DESC;","SELECT s.code_module, s.code_presentation, COUNT(s.id_student) as total_students, COUNT(CASE WHEN s.disability = 'yes' THEN 1 END) as num_of_disabled_students, ROUND(COUNT(CASE WHEN s.disability = 'yes' THEN 1 END) * 100.0 / COUNT(s.id_student), 2) as percentage_of_disabled_students FROM studentinfo s GROUP BY s.code_module, s.code_presentation ORDER BY percentage_of_disabled_students DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
339,각 모듈의 평균 가중치 중 가장 낮은 유형,"SELECT code_module, MIN(avg_weight) AS min_avg_weight FROM ( SELECT a.code_module, a.assessment_type, AVG(a.weight) AS avg_weight FROM assessments a GROUP BY a.code_module, a.assessment_type ) AS avg_weights GROUP BY code_module ORDER BY min_avg_weight ASC;","SELECT code_module, assessment_type, AVG(weight) as avg_weight FROM assessments WHERE date = (SELECT MAX(date) FROM assessments WHERE code_module = assessments.code_module) GROUP BY code_module, assessment_type ORDER BY avg_weight ASC;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
340,각 모듈코드와 모듈에 등록된 학생들의 평균 나이 조회,"SELECT sr.code_module, ROUND(AVG(si.age_band)) AS avg_age FROM studentRegistration sr INNER JOIN studentInfo si ON sr.id_student = si.id_student GROUP BY sr.code_module;","SELECT s.code_module, AVG(YEAR(CURRENT_DATE) - YEAR(s.date_of_birth)) as avg_age FROM studentregistration sr JOIN studentinfo s ON sr.id_student = s.id_student GROUP BY s.code_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
341,각 모듈에 속한 학생 중 특정 지역에 거주하는 학생의 비율,"SELECT code_module, region, COUNT(*) AS num_students, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM studentInfo WHERE code_module = si.code_module) AS percentage FROM studentInfo si GROUP BY code_module, region;","SELECT s.code_module, s.region, COUNT(s.id_student) * 100.0 / (SELECT COUNT(id_student) FROM studentinfo si WHERE si.code_module = s.code_module) as percentage FROM studentinfo s WHERE s.region = 'North' GROUP BY s.code_module, s.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
342,각 평가 유형별로 평균 가중치 조회,"SELECT assessment_type, AVG(weight) AS avg_weight FROM assessments GROUP BY assessment_type;","SELECT assessment_type, AVG(weight) as avg_weight FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
343,VLE 활동 유형별로 평균 활동 기간 조회,"SELECT activity_type, AVG(week_to - week_from) AS avg_activity_duration FROM vle GROUP BY activity_type;","SELECT activity_type, AVG(DATEDIFF(week_to, week_from)) as avg_duration FROM vle GROUP BY activity_type;","CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
344,각 학생의 등록된 모든 모듈의 평균 학점 조회,"SELECT id_student, AVG(score) AS avg_score FROM studentAssessment GROUP BY id_student;","SELECT id_student, AVG(score) as avg_score FROM studentassessment WHERE is_branked = 1 GROUP BY id_student;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
345,최대 및 최소 평가 가중치 조회,"SELECT MAX(CAST(weight AS DECIMAL(10,2))) AS max_weight, MIN(CAST(weight AS DECIMAL(10,2))) AS min_weight FROM assessments;","SELECT MAX(weight) as max_weight, MIN(weight) as min_weight FROM assessments WHERE assessment_type!= 'Exam';","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
346,모든 학생의 학생 코드와 VLE 자료 클릭 수의 총 합 조회,"SELECT id_student, SUM(sum_click) AS total_clicks FROM studentVle GROUP BY id_student;","SELECT s.code_module, s.code_presentation, SUM(s.sum_click) FROM studentvle s GROUP BY s.code_module, s.code_presentation ;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
347,각 학생의 학생코드와 평균 VLE 자료 클릭 수 조회,"SELECT id_student, AVG(sum_click) AS avg_clicks FROM studentVle GROUP BY id_student;","SELECT id_student, AVG(sum_click) as avg_click FROM studentvle GROUP BY id_student;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
348,"모듈 코드, 각 모듈의 평균 프레젠테이션 길이와 평가 유형, 평가 유형별 평균 가중치 조회","SELECT c.code_module, a.assessment_type, AVG(c.module_presentation_length) AS avg_presentation_length, AVG(a.weight) AS avg_weight FROM courses c JOIN assessments a ON c.code_module = a.code_module GROUP BY c.code_module, a.assessment_type;","SELECT c.code_module, AVG(c.module_presentation_length) as avg_length, a.assessment_type, AVG(a.weight) as avg_weight FROM courses c INNER JOIN assessments a ON c.code_module = a.code_module GROUP BY c.code_module, a.assessment_type;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
349,각 모듈의 등록된 학생 수와 평균 나이 조회,"SELECT r.code_module, COUNT(r.id_student) AS num_students, AVG(CAST(i.age_band AS UNSIGNED)) AS avg_age FROM studentRegistration r JOIN studentInfo i ON r.id_student = i.id_student GROUP BY r.code_module;","SELECT m.code_module, m.name_module, COUNT(sr.id_student) as num_students, AVG(s.age_band) as avg_age FROM studentregistration sr INNER JOIN studentinfo s ON sr.id_student = s.id_student INNER JOIN courses m ON sr.code_module = m.code_module GROUP BY m.code_module, m.name_module;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
350,"지역명, 각 지역별로 등록된 학생 수와 VLE 자료 클릭 수의 총 합 조회","SELECT i.region, COUNT(r.id_student) AS num_students, SUM(v.sum_click) AS total_clicks FROM studentInfo i JOIN studentRegistration r ON i.id_student = r.id_student JOIN studentVle v ON r.id_student = v.id_student GROUP BY i.region;","SELECT studentinfo.region, COUNT(DISTINCT studentinfo.id_student) as num_students, SUM(studentvle.sum_click) as total_clicks FROM studentinfo INNER JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student INNER JOIN studentvle ON studentregistration.code_module = studentvle.code_module AND studentregistration.code_presentation = studentvle.code_presentation GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
351,"모듈 코드, 각 모듈의 평균 가중치와 최소 평가 가중치 조회","SELECT a.code_module, AVG(a.weight) AS avg_weight, MIN(a.weight) AS min_weight FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY a.code_module;","SELECT c.code_module, AVG(a.weight) as avg_weight, MIN(a.weight) as min_weight FROM assessments a INNER JOIN courses c ON a.code_module = c.code_module GROUP BY c.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
352,"모듈 코드, 각 모듈의 평균 프레젠테이션 길이, 평가 유형별 평균 가중치, 학생들의 평균 나이 조회","SELECT c.code_module, AVG(c.module_presentation_length) AS avg_presentation_length, a.assessment_type, AVG(a.weight) AS avg_weight, AVG(i.age_band) AS avg_age FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation JOIN studentInfo i ON c.code_module = i.code_module AND c.code_presentation = i.code_presentation GROUP BY c.code_module, a.assessment_type;","SELECT c.code_module, AVG(c.module_presentation_length) AS avg_presentation_length, AVG(a.weight) AS avg_weight, AVG(s.age_band) AS avg_age_band FROM courses c JOIN assessments a ON c.code_module = a.code_module JOIN studentinfo s ON c.code_module = s.code_module GROUP BY c.code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
353,"모듈 코드, 각 모듈의 평균 프레젠테이션 길이, VLE 자료 활동 유형별 평균 활동 기간, 학생들의 최대 등록일 조회","SELECT c.code_module, AVG(c.module_presentation_length) AS avg_presentation_length, v.activity_type, AVG(v.week_to - v.week_from) AS avg_activity_duration FROM courses c JOIN vle v ON c.code_module = v.code_module AND c.code_presentation = v.code_presentation JOIN studentRegistration r ON c.code_module = r.code_module AND c.code_presentation = r.code_presentation GROUP BY c.code_module, v.activity_type;","SELECT c.code_module, AVG(c.module_presentation_length) as avg_length, v.activity_type, MAX(sr.date_registration) as max_date FROM courses c INNER JOIN vle v ON c.code_module = v.code_module INNER JOIN studentregistration sr ON c.code_module = sr.code_module GROUP BY c.code_module, v.activity_type;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
354,"모듈 코드, 각 모듈별 최근 프레젠테이션과 해당 프레젠테이션의 평균 평가 가중치 조회","SELECT c.code_module, c.code_presentation, AVG(a.weight) AS avg_weight FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation JOIN (SELECT code_module, MAX(code_presentation) AS max_code_presentation FROM courses GROUP BY code_module) AS latest ON c.code_module = latest.code_module AND c.code_presentation = latest.max_code_presentation GROUP BY c.code_module, c.code_presentation;","SELECT c.code_module, c.code_presentation, a.weight, a.date, ROW_NUMBER() OVER (PARTITION BY c.code_module ORDER BY a.date DESC) as recent_presentation FROM courses c JOIN assessments a ON c.code_module = a.code_module AND c.code_presentation = a.code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
355,가장 많은 클릭을 한 모듈과 그 학생의 클릭 수 조회,"SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentInfo GROUP BY code_module ORDER BY num_students DESC LIMIT 1;","SELECT m.code_module, m.title, COUNT(s.id_student) AS clicks FROM studentinfo s JOIN courses m ON s.code_module = m.code_module JOIN course_activities ca ON m.code_module = ca.code_module GROUP BY m.code_module, m.title ORDER BY clicks DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
356,총 학생 수가 가장 많은 모듈과 해당 학생 수 조회,"SELECT code_module, COUNT(DISTINCT id_student) AS num_students FROM studentInfo GROUP BY code_module ORDER BY num_students DESC LIMIT 1;","SELECT m.code_module, COUNT(s.id_student) as num_students FROM studentinfo s JOIN courses m ON s.code_module = m.code_module JOIN presentations p ON s.code_presentation = p.code_presentation GROUP BY m.code_module ORDER BY num_students DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
357,평균 등록일보다 더 늦게 등록한 학생들의 모듈과 프레젠테이션 코드 조회,"SELECT code_module, code_presentation FROM studentRegistration GROUP BY code_module, code_presentation HAVING AVG(date_registration) > (SELECT AVG(date_registration) FROM studentRegistration);","SELECT s.code_module, s.code_presentation FROM studentregistration s INNER JOIN (SELECT code_module, code_presentation, AVG(date_registration) as avg_date FROM studentregistration GROUP BY code_module, code_presentation) sub ON s.code_module = sub.code_module AND s.code_presentation = sub.code_presentation WHERE s.date_registration > sub.avg_date;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
358,가장 많은 평가 유형을 가진 모듈과 해당 평가 유형 수 조회,"SELECT code_module, COUNT(DISTINCT assessment_type) AS num_assessment_types FROM assessments GROUP BY code_module ORDER BY num_assessment_types DESC LIMIT 1;","SELECT c.code_module, COUNT(DISTINCT a.assessment_type) as assessment_types FROM assessments a JOIN courses c ON a.code_module = c.code_module GROUP BY c.code_module ORDER BY assessment_types DESC LIMIT 1;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
359,평균 평가 가중치보다 높은 모듈과 해당 평가 유형 조회,"SELECT code_module, assessment_type FROM assessments GROUP BY code_module, assessment_type HAVING AVG(weight) > (SELECT AVG(weight) FROM assessments);","SELECT courses.code_module, assessments.assessment_type, assessments.weight FROM courses JOIN assessments ON courses.code_module = assessments.code_module WHERE assessments.weight > (SELECT AVG(assessments.weight) FROM assessments WHERE assessments.code_module = courses.code_module);","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
360,평균 평가 가중치 이상의 모듈과 해당 프레젠테이션 코드 조회,"SELECT code_module, code_presentation FROM assessments GROUP BY code_module, code_presentation HAVING AVG(weight) >= (SELECT AVG(weight) FROM assessments);","SELECT c.code_module, c.code_presentation FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation WHERE a.weight > (SELECT AVG(weight) FROM assessments) GROUP BY c.code_module, c.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
361,각 모듈의 최신 프레젠테이션 조회,"SELECT code_module, code_presentation FROM courses WHERE (code_module, code_presentation) IN ( SELECT code_module, MAX(code_presentation) AS latest_presentation FROM courses GROUP BY code_module );","SELECT code_module, code_presentation, module_presentation_length, ROW_NUMBER() OVER(PARTITION BY code_module ORDER BY module_presentation_length DESC) as rank FROM courses;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
362,평균 프레젠테이션 길이보다 긴 모듈과 해당 프레젠테이션 코드와 프레젠테이션 길이 조회,"SELECT code_module, code_presentation, module_presentation_length FROM courses WHERE module_presentation_length > ( SELECT AVG(module_presentation_length) FROM courses );","SELECT m.code_module, m.code_presentation, m.module_presentation_length FROM courses m INNER JOIN (SELECT code_module, AVG(module_presentation_length) as avg_length FROM courses GROUP BY code_module) a ON m.code_module = a.code_module WHERE m.module_presentation_length > a.avg_length;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
363,각 모듈별 프레젠테이션 수 조회,"SELECT code_module, COUNT(DISTINCT code_presentation) AS num_presentations FROM courses GROUP BY code_module;","SELECT code_module, COUNT(code_presentation) as num_presentation FROM courses GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
364,평가 유형별 평가 수 조회,"SELECT assessment_type, COUNT(*) AS num_assessments FROM assessments GROUP BY assessment_type;","SELECT assessment_type, COUNT(*) as assessment_count FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
365,각 프레젠테이션의 최대 평가 가중치 조회,"SELECT code_presentation, MAX(weight) AS max_weight FROM assessments GROUP BY code_presentation;","SELECT code_presentation, MAX(weight) as max_weight FROM assessments GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
366,프레젠테이션 코드와 평가 일자가 있는 프레젠테이션의 평가 일자의 평균 조회,"SELECT code_presentation, AVG(date) AS avg_assessment_date FROM assessments WHERE date IS NOT NULL GROUP BY code_presentation;","SELECT code_presentation, AVG(date) as avg_date FROM assessments WHERE code_presentation IN (SELECT code_presentation FROM assessments WHERE date IS NOT NULL) GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
367,모듈 코드와 모듈 별 평가 수와 해당 모듈의 평균 평가 가중치 조회,"SELECT code_module, COUNT(*) AS num_assessments, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","SELECT c.code_module, COUNT(a.id_assessment) as assessment_count, AVG(a.weight) as avg_weight FROM assessments a INNER JOIN courses c ON a.code_module = c.code_module GROUP BY c.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
368,학생의 나이대와 해당 나이대의 학생 수 조회,"SELECT age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY age_band;","SELECT age_band, COUNT(*) as num_students FROM studentinfo GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
369,모듈 코드와 모듈 별 평가 유형과 해당 유형의 평가 수 조회,"SELECT a.code_module, a.assessment_type, COUNT(*) AS num_assessments FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY a.code_module, a.assessment_type;","SELECT m.code_module, m.code_presentation, at.assessment_type, COUNT(*) as assessment_count FROM assessments a JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation JOIN (SELECT 'Tutor Marked Assessment' as assessment_type, 'TMA' as code FROM dual UNION ALL SELECT 'Computer Marked Assessment' as assessment_type, 'CMA' as code FROM dual UNION ALL SELECT 'Final Exam' as assessment_type, 'Exam' as code FROM dual) at ON a.assessment_type = at.code GROUP BY m.code_module, m.code_presentation, at.assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
370,"프레젠테이션 코드, 평가 일자가 있는 프레젠테이션의 평가 일자와 해당 프레젠테이션의 평균 평가 점수 조회","SELECT a.code_presentation, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment WHERE a.date IS NOT NULL GROUP BY a.code_presentation;","SELECT p.code_presentation, a.date as assessment_date, AVG(s.score) as avg_score FROM assessments a INNER JOIN studentassessment s ON a.id_assessment = s.id_assessment INNER JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation WHERE a.date IS NOT NULL GROUP BY p.code_presentation, a.date;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
371,"프레젠테이션 코드, 각 프레젠테이션의 최소 평가 일자와 해당 프레젠테이션의 평균 평가 점수 조회","SELECT a.code_presentation, MIN(a.date) AS min_assessment_date, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation;","SELECT courses.code_presentation, MIN(assessments.date) AS earliest_date, AVG(studentassessment.score) AS avg_score FROM courses INNER JOIN assessments ON courses.code_module = assessments.code_module INNER JOIN studentassessment ON assessments.id_assessment = studentassessment.id_assessment GROUP BY courses.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
372,학생의 성별과 나이대 그리고 해당 성별 및 나이대의 학생 수 조회,"SELECT gender, age_band, COUNT(*) AS num_students FROM studentInfo GROUP BY gender, age_band;","SELECT s.gender, s.age_band, COUNT(s.id_student) as num_students FROM studentinfo s GROUP BY s.gender, s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
373,모듈코드와 각 모듈별 최대 평가 가중치와 해당 모듈의 평균 평가 점수 조회,"SELECT a.code_module, MAX(a.weight) AS max_weight, AVG(sa.score) AS avg_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;","SELECT courses.code_module, MAX(assessments.weight) as max_weight, AVG(assessments.weight) as avg_weight FROM courses JOIN assessments ON courses.code_module = assessments.code_module GROUP BY courses.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
374,평가 유형과 평가 유형별 평가 수와 해당 평가 유형의 평균 평가 점수와 최소 평가 가중치 조회,"SELECT a.assessment_type, COUNT(*) AS num_assessments, AVG(sa.score) AS avg_score, MIN(a.weight) AS min_weight FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.assessment_type;","SELECT assessment_type, COUNT(id_assessment) as total_assessments, AVG(score) as avg_score, MIN(weight) as min_weight FROM assessments JOIN studentassessment ON assessments.id_assessment = studentassessment.id_assessment GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
375,"모듈 코드, 각 모듈의 최대 평가 일자와 해당 모듈의 평균 평가 점수와 최대 평가 가중치 조회","SELECT a.code_module, MAX(a.date) AS max_assessment_date, AVG(sa.score) AS avg_score, MAX(a.weight) AS max_weight FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;","SELECT courses.code_module, MAX(assessments.date) as max_date, AVG(studentassessment.score) as avg_score, MAX(assessments.weight) as max_weight FROM courses INNER JOIN assessments ON courses.code_module = assessments.code_module INNER JOIN studentassessment ON assessments.id_assessment = studentassessment.id_assessment GROUP BY courses.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
376,프레젠테이션 코드와 각 프레젠테이션의 최소 평가 일자와 해당 프레젠테이션의 평균 평가 점수와 최대 평가 일자 조회,"SELECT a.code_presentation, MIN(a.date) AS min_assessment_date, AVG(sa.score) AS avg_score, MAX(a.date) AS max_assessment_date FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_presentation;","SELECT p.code_presentation, MIN(a.date_submitted) as min_date, AVG(a.score) as avg_score, MAX(a.date_submitted) as max_date FROM studentassessment a JOIN assessments ass ON a.id_assessment = ass.id_assessment JOIN presentations p ON ass.code_presentation = p.code_presentation GROUP BY p.code_presentation;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
377,프레젠테이션 코드와 프레젠테이션 별 평균 진행기간 조회,"SELECT code_presentation, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_presentation;","SELECT code_presentation, AVG(module_presentation_length) AS avg_length FROM courses GROUP BY code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
378,평가 일자가 있는 평가 수 조회,SELECT COUNT(*) AS num_assessments_with_date FROM assessments WHERE date IS NOT NULL;,SELECT COUNT(*) FROM assessments WHERE date IS NOT NULL;,"CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
379,모듈 코드와 각 모듈의 평균 평가 가중치 조회,"SELECT code_module, AVG(weight) AS avg_weight FROM assessments GROUP BY code_module;","SELECT code_module, AVG(weight) as avg_weight FROM assessments GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
380,평가 유형과 평가 유형별 평가 가중치 합 조회,"SELECT assessment_type, SUM(weight) AS total_weight FROM assessments GROUP BY assessment_type;","SELECT assessment_type, SUM(weight) as total_weight FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
381,평가 유형과 평가 유형별 최소 평가 일자 조회,"SELECT assessment_type, MIN(date) AS min_assessment_date FROM assessments GROUP BY assessment_type;","SELECT assessment_type, MIN(date) as min_date FROM assessments GROUP BY assessment_type;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
382,학생id와 학생의 총 수강 모듈 수와 평균 학습 점수 조회,"SELECT id_student, COUNT(*) AS num_modules_enrolled, AVG(score) AS avg_learning_score FROM studentAssessment GROUP BY id_student;","SELECT s.id_student, COUNT(a.id_assessment) as total_modules, AVG(a.score) as avg_score FROM studentassessment a JOIN student s ON a.id_student = s.id_student GROUP BY s.id_student;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
383,프레젠테이션과 평가 일자가 있는 각 프레젠테이션의 최소 평가 일자 조회,"SELECT code_presentation, MIN(date) AS min_assessment_date FROM assessments WHERE date IS NOT NULL GROUP BY code_presentation;","SELECT code_presentation, MIN(date) FROM assessments WHERE code_presentation IN (SELECT code_presentation FROM assessments WHERE date IS NOT NULL) GROUP BY code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
384,"모듈코드, 모듈 별 평균 평가 가중치와 평균 학습 점수 조회","SELECT a.code_module, AVG(a.weight) AS avg_weight, AVG(sa.score) AS avg_learning_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment GROUP BY a.code_module;","SELECT code_module, AVG(weight) as avg_weight, AVG(score) as avg_score FROM assessments JOIN studentassessment ON assessments.id_assessment = studentassessment.id_assessment GROUP BY code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
385,"모듈코드, 모듈 별 평균 평가 점수와 평균 학습 점수 조회","SELECT a.code_module, AVG(sa.score) AS avg_assessment_score, AVG(sa_learning.score) AS avg_learning_score FROM assessments a JOIN studentAssessment sa ON a.id_assessment = sa.id_assessment JOIN ( SELECT id_student, AVG(score) AS score FROM studentAssessment GROUP BY id_student ) sa_learning ON sa.id_student = sa_learning.id_student GROUP BY a.code_module;","SELECT m.code_module, AVG(a.score) as avg_assessment_score, AVG(l.score) as avg_learning_score FROM assessments a JOIN courses c ON a.code_module = c.code_module JOIN studentassessment sa ON a.id_assessment = sa.id_assessment JOIN learning l ON sa.id_student = l.id_student GROUP BY m.code_module;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
386,"학생 코드, 학생이 수강한 각 모듈과 해당 모듈의 총 평가 수 조회","SELECT sr.id_student, sr.code_module, COUNT(sa.id_assessment) AS total_assessments FROM studentRegistration sr LEFT JOIN studentAssessment sa ON sr.id_student = sa.id_student GROUP BY sr.id_student, sr.code_module;","SELECT s.code_module, s.code_presentation, COUNT(a.id_assessment) as total_assessments FROM studentregistration s INNER JOIN studentassessment a ON s.id_student = a.id_student GROUP BY s.code_module, s.code_presentation;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
387,코드 모듈과 모듈 별 평균 평가 가중치와 평균 클릭 수 조회,"SELECT a.code_module, AVG(a.weight) AS avg_weight, AVG(sv.sum_click) AS avg_clicks FROM assessments a JOIN studentVle sv ON a.code_module = sv.code_module GROUP BY a.code_module;","SELECT c.code_module, c.code_presentation, AVG(a.weight) as avg_weight, AVG(s.sum_click) as avg_click FROM assessments a JOIN courses c ON a.code_module = c.code_module JOIN studentvle s ON c.code_module = s.code_module GROUP BY c.code_module, c.code_presentation;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
388,특정 프레젠테이션의 평균 모듈 프레젠테이션 길이 조회,SELECT AVG(module_presentation_length) AS avg_presentation_length FROM courses WHERE code_presentation = '2014B';,SELECT AVG(module_presentation_length) FROM courses WHERE code_presentation = '2022J';,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
389,특정 모듈의 총 프레젠테이션 수 조회,SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE code_module = 'AAA';,SELECT COUNT(code_presentation) FROM courses WHERE code_module = 'INF103';,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
390,모듈 코드와 각 모듈의 최소 모듈 프레젠테이션 길이 조회,"SELECT code_module, MIN(module_presentation_length) AS min_presentation_length FROM courses GROUP BY code_module;","SELECT code_module, MIN(module_presentation_length) FROM courses GROUP BY code_module ;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
391,특정 모듈의 최대 모듈 프레젠테이션 길이 조회,SELECT MAX(module_presentation_length) AS max_presentation_length FROM courses WHERE code_module = 'BBB';,"SELECT code_module, MAX(module_presentation_length) FROM courses WHERE code_module = 'MOD001' GROUP BY code_module ;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
392,모듈 프레젠테이션 길이가 평균 이상인 모듈 조회,SELECT code_module FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) > (SELECT AVG(module_presentation_length) FROM courses);,"SELECT code_module, code_presentation, module_presentation_length FROM courses WHERE module_presentation_length > (SELECT AVG(module_presentation_length) FROM courses);","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
393,모듈과 각 모듈의 평균 모듈 프레젠테이션 길이와 최대 모듈 프레젠테이션 길이 조회,"SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length, MAX(module_presentation_length) AS max_presentation_length FROM courses GROUP BY code_module;","SELECT code_module, AVG(module_presentation_length) AS avg_length, MAX(module_presentation_length) AS max_length FROM courses GROUP BY code_module ;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
394,특정 모듈의 평균 모듈 프레젠테이션 길이와 최소 모듈 프레젠테이션 길이 조회,"SELECT AVG(module_presentation_length) AS avg_presentation_length, MIN(module_presentation_length) AS min_presentation_length FROM courses WHERE code_module = 'CCC';","SELECT code_module, AVG(module_presentation_length) as avg_length, MIN(module_presentation_length) as min_length FROM courses WHERE code_module = 'COM-101' GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
395,각 프레젠테이션의 평균 모듈 프레젠테이션 길이와 총 모듈 수 조회,"SELECT AVG(module_presentation_length) AS avg_presentation_length, COUNT(DISTINCT code_module) AS num_modules FROM courses;","SELECT code_presentation, AVG(module_presentation_length) as avg_length, COUNT(code_module) as total_modules FROM courses GROUP BY code_presentation;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
396,프레젠테이션 길이가 200보다 큰 각 프레젠테이션의 수 조회,SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE module_presentation_length > 200;,"SELECT code_presentation, COUNT(*) as 'Number of presentations with length greater than 200' FROM courses WHERE module_presentation_length > 200 GROUP BY code_presentation ;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
397,프레젠테이션 길이가 150보다 작은 각 모듈 코드의 수 조회,SELECT COUNT(DISTINCT code_module) AS num_modules FROM courses WHERE module_presentation_length < 150;,"SELECT code_module, COUNT(*) as 'presentation length < 150' FROM courses WHERE module_presentation_length < 150 GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
398,2017년에 시작하는 각 모듈 코드의 수 조회,SELECT COUNT(DISTINCT code_module) AS num_modules FROM courses WHERE code_presentation LIKE '2017%';,"SELECT code_module, COUNT(*) as 'number of courses' FROM courses WHERE code_presentation LIKE '2017%' GROUP BY code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
399,모듈 코드와 모듈 코드별로 프레젠테이션 수를 내림차순으로 조회,"SELECT code_module, COUNT(DISTINCT code_presentation) AS num_presentations FROM courses GROUP BY code_module ORDER BY num_presentations DESC;","SELECT code_module, COUNT(code_presentation) as presentation_count FROM courses GROUP BY code_module ORDER BY presentation_count DESC;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
400,모듈 코드와 평균 프레젠테이션 길이가 150보다 큰 경우 평균 길이를 내림차순으로 반환,"SELECT code_module, AVG(module_presentation_length) AS avg_length FROM courses GROUP BY code_module HAVING AVG(module_presentation_length) > 150 ORDER BY avg_length DESC;","SELECT code_module, AVG(module_presentation_length) as avg_length FROM courses GROUP BY code_module HAVING avg_length > 150 ORDER BY avg_length DESC;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
401,모듈 코드와 모듈 코드별 평가 수 내림차순으로 반환,"SELECT code_module, COUNT(*) AS num_assessments FROM assessments GROUP BY code_module ORDER BY num_assessments DESC;","SELECT code_module, COUNT(*) as assessment_count FROM assessments GROUP BY code_module ORDER BY assessment_count DESC;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
402,프레젠테이션 코드와 각 프레젠테이션 코드별 학생 평균 수강 학점 내림차순으로 반환,"SELECT code_presentation, AVG(studied_credits) AS avg_credits FROM studentInfo GROUP BY code_presentation ORDER BY avg_credits DESC;","SELECT code_presentation, AVG(studied_credits) as avg_credits FROM studentinfo GROUP BY code_presentation ORDER BY avg_credits DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
403,"모듈 코드, 프레젠테이션 코드와 프레젠테이션 코드별 학생 수 내림차순으로 반환","SELECT code_module, code_presentation, COUNT(*) AS num_students FROM studentRegistration GROUP BY code_module, code_presentation ORDER BY num_students DESC;","SELECT code_module, code_presentation, COUNT(*) as student_count FROM studentregistration GROUP BY code_module, code_presentation ORDER BY student_count DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
404,모듈 코드와 모듈 코드별 학생 수 내림차순으로 반환,"SELECT code_module, COUNT(DISTINCT id_student) AS num_unique_students FROM studentRegistration GROUP BY code_module ORDER BY num_unique_students DESC;","SELECT code_module, COUNT(*) as num_students FROM studentregistration GROUP BY code_module ORDER BY num_students DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
405,모듈 코드와 프레젠테이션 코드와 모듈 프레젠테이션 코드별 가장 최근 등록된 날짜를 반환하여 최근 등록된 날짜를 기준으로 내림차순 정렬,"SELECT sr.code_module, sr.code_presentation, sr.date_registration AS last_registration FROM studentRegistration sr JOIN ( SELECT code_module, code_presentation, MAX(date_registration) AS max_date FROM studentRegistration GROUP BY code_module, code_presentation ) AS max_dates ON sr.code_module = max_dates.code_module AND sr.code_presentation = max_dates.code_presentation AND sr.date_registration = max_dates.max_date ORDER BY last_registration DESC;","SELECT code_module, code_presentation, MAX(date_registration) OVER (PARTITION BY code_module, code_presentation) AS recent_registration_date FROM studentregistration ORDER BY recent_registration_date DESC;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
406,학생 연령대와 학생 연령대별 모듈 프레젠테이션의 평균 길이,"SELECT s.age_band, AVG(c.module_presentation_length) AS avg_length FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN courses c ON r.code_module = c.code_module AND r.code_presentation = c.code_presentation GROUP BY s.age_band;","SELECT studentinfo.age_band, AVG(courses.module_presentation_length) as avg_length FROM studentinfo INNER JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student INNER JOIN courses ON studentregistration.code_module = courses.code_module AND studentregistration.code_presentation = courses.code_presentation GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
407,학생 연령대와 학생 연령대별 평균 클릭 횟수 조회,"SELECT s.age_band, AVG(sv.sum_click) AS avg_clicks FROM studentInfo s JOIN studentVle sv ON s.id_student = sv.id_student GROUP BY s.age_band;","SELECT age_band, AVG(sum_click) FROM studentvle GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
408,성적 최종 결과와 학생의 최종 결과에 따른 학생 수 조회,"SELECT s.final_result, COUNT(*) AS num_students FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.final_result;","SELECT s.final_result, COUNT(s.id_student) as student_count FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student JOIN courses c ON sr.code_module = c.code_module JOIN courses p ON sr.code_presentation = p.code_presentation GROUP BY s.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
409,학생들이 현재 공부하고 있는 모든 모듈의 평균학점 수,SELECT AVG(studied_credits) AS avg_credits FROM studentInfo;,SELECT AVG(studied_credits) FROM studentinfo WHERE id_student IN (SELECT id_student FROM studentinfo WHERE final_result = 'completed');,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
410,학생 성별과 성별에 따른 학생의 평균 등록일,"SELECT s.gender, AVG(r.date_registration) AS avg_reg_date FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;","SELECT s.gender, AVG(sr.date_registration) as avg_date_registration FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
411,모듈 코드와 모듈 프레젠테이션 기간이 150일을 초과하는 모든 모듈과 프레젠테이션,"SELECT DISTINCT code_module, code_presentation FROM courses WHERE module_presentation_length > 150;","SELECT code_module, code_presentation FROM courses WHERE module_presentation_length > 150;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
412,모듈 프레젠테이션 기간이 120일 미만인 프레젠테이션 수,SELECT COUNT(DISTINCT code_presentation) AS num_presentations FROM courses WHERE module_presentation_length < 120;,SELECT COUNT(*) FROM courses WHERE module_presentation_length < 120 ;,"CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
413,모듈 코드와 각 모듈의 평균 프레젠테이션 길이 조회,"SELECT code_module, AVG(module_presentation_length) AS avg_presentation_length FROM courses GROUP BY code_module;","SELECT m.code_module, AVG(cp.module_presentation_length) AS avg_presentation_length FROM courses m JOIN course_presentations cp ON m.code_module = cp.code_module GROUP BY m.code_module;","CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
414,장애가 있는 학생들의 최고 학력 조회,SELECT DISTINCT highest_education FROM studentInfo WHERE disability = 'Y';,"SELECT s1.id_student, s1.gender, s1.region, s1.highest_education, s1.imd_band, s1.age_band, s1.num_of_prev_attempts, s1.studied_credits, s1.disability, s1.final_result FROM studentinfo s1 INNER JOIN (SELECT code_module, code_presentation, MAX(highest_education) as max_high_edu FROM studentinfo WHERE disability = 'yes' GROUP BY code_module, code_presentation) s2 ON s1.code_module = s2.code_module AND s1.code_presentation = s2.code_presentation AND s1.highest_education = s2.max_high_edu;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
415,학생 성별과 성별에 따른 학생들의 평균 수강 기간 조회,"SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_course_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender;","SELECT s.gender, AVG(DATEDIFF(d, sr.date_registration, COALESCE(sr.date_unregistration, CURDATE()))) AS avg_duration FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
416,장애가 있는 학생들의 거주 지역명 조회,SELECT DISTINCT region FROM studentInfo WHERE disability = 'Y';,SELECT DISTINCT region FROM studentinfo WHERE disability = 'yes';,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
417,학생들의 평균 모듈 재시도 횟수,SELECT AVG(num_of_prev_attempts) AS avg_attempts FROM studentInfo;,SELECT AVG(num_of_prev_attempts) FROM studentinfo;,"CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
418,Pass 등급을 받은 학생들의 연령대와 연령대별 평균 학점,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;","SELECT studentinfo.age_band, AVG(course.credits) as avg_credits FROM studentinfo INNER JOIN courses ON studentinfo.code_module = courses.code_module INNER JOIN enrollments ON studentinfo.code_presentation = enrollments.code_presentation WHERE studentinfo.final_result = 'pass' GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
419,장애를 가진 학생의 최고 학력 수준과 그에 따른 학생 수,"SELECT highest_education, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY highest_education;","SELECT s.highest_education, COUNT(s.id_student) as num_students FROM studentinfo s WHERE s.disability = 'Yes' GROUP BY s.highest_education ORDER BY num_students DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
420,지역명과 각 지역별로 사용된 VLE 자료의 수 조회,"SELECT s.region, COUNT(DISTINCT v.id_site) AS num_materials FROM studentInfo s JOIN vle v ON s.code_module = v.code_module AND s.code_presentation = v.code_presentation GROUP BY s.region;","SELECT studentinfo.region, COUNT(DISTINCT vle.id_site) as num_of_sites FROM studentinfo INNER JOIN courses ON studentinfo.code_module = courses.code_module INNER JOIN vle ON courses.code_module = vle.code_module GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
421,A Level 또는 해당 학위'를 가진 학생이 거주하는 지역명 조회,SELECT DISTINCT region FROM studentInfo WHERE highest_education = 'A Level or Equivalent';,"SELECT region FROM studentinfo WHERE highest_education IN ('A Levels', 'A Level Equivalent');","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
422,등록 및 평가가 있는 학생 중 지역명과 지역별 등록된 학생 수,"SELECT s.region, COUNT(DISTINCT r.id_student) AS num_students FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student GROUP BY s.region;","SELECT studentregistration.region, COUNT(DISTINCT studentregistration.id_student) FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student GROUP BY studentregistration.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
423,Fail 등급을 받은 학생들의 연령대와 연령대별 평균 학점 ,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) FROM studentinfo WHERE final_result = 'Fail' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
424,Withdrawn 등급을 받은 학생들의 연령대와 연령대별 평균 학점 ,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) as avg_credits FROM studentinfo WHERE final_result = 'Withdrawn' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
425,Distinction 등급을 받은 연령대와 연령대 별 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;","SELECT studentinfo.age_band, AVG(studentinfo.studied_credits) as avg_credits, COUNT(*) as num_students FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN student_results ON studentinfo.code_module = student_results.code_module JOIN (SELECT code_module, MAX(final_result) as max_result FROM student_results GROUP BY code_module) as max_results ON student_results.code_module = max_results.code_module WHERE student_results.final_result = max_results.max_result AND studentinfo.final_result = 'Distinction' GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
426,지역명과 지역별 Pass 등급을 받은 학생들의 평균 학점,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY region;","SELECT studentinfo.region, AVG(studentinfo.studied_credits) as avg_credits FROM studentinfo WHERE studentinfo.final_result = 'Pass' GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
427,지역명과 지역별 Fail 등급을 받은 학생들의 평균 학점,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY region;","SELECT region, AVG(studied_credits) as avg_credits FROM studentinfo WHERE final_result = 'Fail' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
428,지역명과 지역별 Withdrawn 등급을 받은 학생들의 평균 학점,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY region;","SELECT region, AVG(studied_credits) as avg_credits FROM studentinfo WHERE final_result = 'Withdrawn' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
429,지역명과 지역별 Distinction 등급을 받은 학생들의 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY region;","SELECT region, AVG(studied_credits) as avg_credits FROM studentinfo WHERE final_result = 'Distinction' GROUP BY region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
430,연령대와 연령대별 평가 가중치의 평균 조회,"SELECT s.age_band, AVG(a.weight) AS avg_weight FROM studentInfo s JOIN assessments a ON s.code_module = a.code_module AND s.code_presentation = a.code_presentation GROUP BY s.age_band;","SELECT age_band, AVG(weight) as avg_weight FROM assessments JOIN studentinfo ON assessments.code_module = studentinfo.code_module AND assessments.code_presentation = studentinfo.code_presentation GROUP BY age_band;","CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
431,장애가 없는 학생들의 지역명과 지역별 학생수 조회,"SELECT region, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'N' GROUP BY region;","SELECT studentinfo.region, COUNT(studentinfo.id_student) as num_students FROM studentinfo WHERE studentinfo.disability!= 'Yes' GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
432,Withdrawn 등급을 받은 학생 중 장애여부와 학생들의 수 조회,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY disability;","SELECT s.disability, COUNT(s.id_student) as num_students FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN module_presentations mp ON s.code_presentation = mp.code_presentation WHERE c.final_result = 'Withdrawn' GROUP BY s.disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
433,Pass 등급을 받은 학생 중 장애여부와 학생들의 수 조회,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Pass' GROUP BY disability;","SELECT s.disability, COUNT(*) as num_students FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN module_presentation mp ON c.code_module = mp.code_module WHERE s.final_result = 'pass' GROUP BY s.disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
434,Fail 등급을 받은 학생 중 장애 여부와 학생들의 수 조회,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Fail' GROUP BY disability;","SELECT COUNT(*) as num_students, disability FROM studentinfo WHERE final_result = 'Fail' GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
435,Distinction 등급을 받은 학생 중 장애 여부와 학생 수 조회,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Distinction' GROUP BY disability;","SELECT s.disability, COUNT(s.id_student) as num_students FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN module_presentation mp ON c.code_module = mp.code_module WHERE s.final_result = 'Distinction' GROUP BY s.disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
436,35-55세 연령대 학생들의 지역명과 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE age_band = '35-55' GROUP BY region;","SELECT studentinfo.region, AVG(studentinfo.final_result) as avg_grade FROM studentinfo WHERE studentinfo.age_band = '35-55' GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
437,이전 시도(전학)가 있는 학생들 중 장애 여부와 학생들의 수 조회,"SELECT disability, COUNT(*) AS num_students FROM studentInfo WHERE num_of_prev_attempts > 1 GROUP BY disability;","SELECT COUNT(DISTINCT id_student) as num_students, disability FROM studentinfo WHERE num_of_prev_attempts > 0 GROUP BY disability;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
438,Distinction 등급을 받은 학생들의 성별에 따른 평균 학점,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY gender;","SELECT gender, AVG(studied_credits) as avg_credits FROM studentinfo WHERE final_result = 'Distinction' GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
439,Pass 등급을 받은 학생들의 성별에 따른 평균 학점,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY gender;","SELECT studentinfo.gender, AVG(studentinfo.studied_credits) as avg_credits FROM studentinfo WHERE studentinfo.final_result = 'Pass' GROUP BY studentinfo.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
440,Fail 등급을 받은 학생들의 성별에 따른 평균 학점,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY gender;","SELECT gender, AVG(studied_credits) as avg_credits FROM studentinfo WHERE final_result = 'Fail' GROUP BY gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
441,Withdrawn 등급을 받은 학생들의 성별에 따른 평균 학점,"SELECT gender, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY gender;","SELECT s.gender, AVG(c.credits) as avg_credits FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN student_results sr ON s.code_module = sr.code_module AND s.code_presentation = sr.code_presentation WHERE sr.final_result = 'Withdrawn' GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
442,장애여부가 'Y'인 학생들의 최종 결과와 학생 수 조회,"SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'Y' GROUP BY final_result;","SELECT s.code_module, s.code_presentation, s.final_result, COUNT(s.id_student) as num_students FROM studentinfo s WHERE s.disability = 'Y' GROUP BY s.code_module, s.code_presentation, s.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
443,장애여부가 'N'인 학생들의 최종 결과와 학생 수 조회,"SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE disability = 'N' GROUP BY final_result;","SELECT s.code_module, s.code_presentation, s.id_student, s.gender, s.region, s.highest_education, s.imd_band, s.age_band, s.num_of_prev_attempts, s.studied_credits, s.disability, s.final_result, COUNT(s.id_student) as num_students FROM studentinfo s WHERE s.disability = 'N' GROUP BY s.code_module, s.code_presentation, s.id_student, s.gender, s.region, s.highest_education, s.imd_band, s.age_band, s.num_of_prev_attempts, s.studied_credits, s.disability, s.final_result ;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
444,이전 시도(전학)가 있는 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE num_of_prev_attempts > 0 GROUP BY age_band;","SELECT age_band, AVG(studied_credits) as avg_credits FROM studentinfo WHERE num_of_prev_attempts > 0 GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
445,Withdrawn 등급을 받은 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' GROUP BY age_band;","SELECT studentinfo.age_band, AVG(studentinfo.studied_credits) FROM studentinfo INNER JOIN courses ON studentinfo.code_module = courses.code_module INNER JOIN module_presentation ON courses.code_module = module_presentation.code_module WHERE studentinfo.final_result = 'Withdrawn' GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
446,Pass 등급을 받은 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Pass' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) as avg_credits FROM studentinfo WHERE final_result = 'Pass' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
447,Fail 등급을 받은 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Fail' GROUP BY age_band;","SELECT studentinfo.age_band, AVG(courses.credits) FROM studentinfo INNER JOIN courses ON studentinfo.code_module = courses.code_module INNER JOIN studentresults ON studentinfo.id_student = studentresults.id_student WHERE studentresults.final_result = 'Fail' GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
448,Distinction 등급을 받은 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Distinction' GROUP BY age_band;","SELECT studentinfo.age_band, AVG(courses.credits) as avg_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN module_presentation ON courses.code_module = module_presentation.code_module JOIN student_module ON module_presentation.code_presentation = student_module.code_presentation WHERE studentinfo.final_result = 'Distinction' GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
449,장애가 있는 학생들 중 Distinction 등급으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Distinction' GROUP BY age_band;","SELECT s.age_band, AVG(s.studied_credits) FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN presentations p ON s.code_presentation = p.code_presentation WHERE s.disability = 'Yes' AND c.final_result = 'Distinction' GROUP BY s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
450,장애가 없는 학생들 중 Distinction 등급으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Distinction' GROUP BY age_band;","SELECT s.age_band, AVG(s.studied_credits) as avg_credits FROM studentinfo s JOIN courses c ON s.code_module = c.code_module JOIN student_results sr ON s.code_presentation = sr.code_presentation WHERE s.disability!= 'yes' AND sr.final_result = 'Distinction' GROUP BY s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
451,장애가 있는 학생들 중 Pass 성적으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Pass' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) as avg_credits FROM studentinfo WHERE final_result = 'Pass' AND disability = 'Yes' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
452,장애가 없는 학생들 중 Pass 성적으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Pass' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) FROM studentinfo WHERE disability = 'No' AND final_result = 'Pass' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
453,장애가 있는 학생들 중 Fail 성적으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Fail' GROUP BY age_band;","SELECT age_band, AVG(studied_credits) FROM studentinfo WHERE disability = 'Yes' AND final_result = 'Fail' GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
454,장애가 없는 학생들 중 Fail 성적으로 수료한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Fail' GROUP BY age_band;","SELECT studentinfo.age_band, AVG(studentinfo.studied_credits) FROM studentinfo INNER JOIN courses ON studentinfo.code_module = courses.code_module INNER JOIN studentresults ON studentinfo.code_module = studentresults.code_module AND studentinfo.code_presentation = studentresults.code_presentation WHERE studentinfo.disability!= 'Yes' AND studentresults.final_result = 'Fail' GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
455,장애가 있는 학생들 중 중도포기한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'Y' AND final_result = 'Withdrawn' GROUP BY age_band;","SELECT s.age_band, AVG(c.credits) as avg_credits FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN (SELECT code_module FROM studentinfo WHERE final_result = 'withdrawn' AND disability = 'yes') w ON c.code_module = w.code_module GROUP BY s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
456,장애가 없는 학생들 중 중도포기한 학생들의 연령대와 평균 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE disability = 'N' AND final_result = 'Withdrawn' GROUP BY age_band;","SELECT s.age_band, AVG(c.credits) as avg_credits FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN (SELECT code_module FROM studentinfo WHERE final_result = 'withdrawn' AND disability = 'no') w ON s.code_module = w.code_module GROUP BY s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
457,나이대가 0-35세이고 학점이 120 이상인 학생들의 최종 결과와 학생 수 조회,"SELECT final_result, COUNT(*) AS num_students FROM studentInfo WHERE age_band = '0-35' AND studied_credits >= 120 GROUP BY final_result;","SELECT studentinfo.age_band, studentinfo.final_result, COUNT(studentinfo.id_student) FROM studentinfo WHERE studentinfo.studied_credits > 120 AND studentinfo.age_band = '0-35' GROUP BY studentinfo.age_band, studentinfo.final_result;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
458,대학 학력을 가진 비장애 학생들 중 학점 평균이 90보다 낮은 지역명과 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) < 90;","SELECT studentinfo.region, AVG(studentinfo.studied_credits) FROM studentinfo WHERE studentinfo.highest_education = 'University' AND studentinfo.disability!= 'Yes' GROUP BY studentinfo.region HAVING AVG(studentinfo.studied_credits) < 90;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
459,대학 학력을 가진 장애 학생들 중 학점 평균이 90보다 낮은 지역명과 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'Y' GROUP BY region HAVING AVG(studied_credits) < 90;","SELECT s.region, AVG(s.studied_credits) as avg_credits FROM studentinfo s INNER JOIN courses c ON s.code_module = c.code_module INNER JOIN studentinfo s2 ON c.code_presentation = s2.code_presentation WHERE s.highest_education = 'University' AND s.disability = 'Yes' AND AVG(s2.studied_credits) < 90 GROUP BY s.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
460,대학 학력을 가진 비장애 학생들 중 학점 평균이 90보다 높은 지역명과 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'N' GROUP BY region HAVING AVG(studied_credits) > 90;","SELECT studentinfo.region, AVG(studentinfo.studied_credits) as avg_credits FROM studentinfo WHERE studentinfo.disability = 'no' AND studentinfo.highest_education = 'University' AND AVG(studentinfo.studied_credits) > 90 GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
461,대학 학력을 가진 장애 학생들 중 학점 평균이 90보다 높은 지역명과 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE highest_education = 'HE Qualification' AND disability = 'Y' GROUP BY region HAVING AVG(studied_credits) > 90;","SELECT studentinfo.region, AVG(courses.credits) as avg_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN student_disability ON studentinfo.id_student = student_disability.id_student WHERE student_disability.disability = 'yes' AND studentinfo.highest_education = 'University' GROUP BY studentinfo.region HAVING avg_credits > 90;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
462,55세 이상인 학생들 중 Withdrawn 등급을 받은 학생들의 지역별 평균 학점이 60보다 높은 경우 지역명과 평균 학점 조회,"SELECT region, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE age_band = '55<=' AND final_result = 'Withdrawn' GROUP BY region HAVING AVG(studied_credits) > 60;","SELECT studentinfo.region, AVG(courses.credits) as avg_credits FROM studentinfo JOIN courses ON studentinfo.code_module = courses.code_module JOIN (SELECT code_module, final_result FROM studentinfo WHERE studentinfo.id_student IN (SELECT id_student FROM studentinfo WHERE studentinfo.age_band = '55+' AND studentinfo.final_result = 'Withdrawn')) AS withdrawn_students ON courses.code_module = withdrawn_students.code_module WHERE AVG(courses.credits) > 60 GROUP BY studentinfo.region;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
463,장애가 있는 학생들 중 Pass 등급을 받은 학생들의 연령대별 학생 수가 10명 이상인 경우 연령대와 학생 수 조회,"SELECT age_band, COUNT(*) AS num_students FROM studentInfo WHERE final_result = 'Pass' AND disability = 'Y' GROUP BY age_band HAVING COUNT(*) > 10;","SELECT age_band, COUNT(*) as student_count FROM studentinfo WHERE disability = 'Yes' AND final_result = 'Pass' GROUP BY age_band HAVING COUNT(*) > 10;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
464,아직 등록 중이며 평가에 참여하지 않은 학생들의 성별 평균 학점이 60보다 높은 경우 성별과 평균 학점 조회,"SELECT s.gender, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_unregistration IS NULL AND sa.score IS NULL GROUP BY s.gender HAVING AVG(studied_credits) > 60;","SELECT studentinfo.gender, AVG(studentregistration.studied_credits) as avg_credits FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student INNER JOIN courses ON studentregistration.code_module = courses.code_module INNER JOIN studentevaluations ON studentinfo.id_student = studentevaluations.id_student WHERE studentregistration.date_unregistration IS NULL AND studentevaluations.final_result IS NULL GROUP BY studentinfo.gender HAVING AVG(studentregistration.studied_credits) > 60;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
465,스코틀랜드 지역에서 Withdrawn 등급을 받은 학생들의 연령대별 평균 학점이 50보다 높은 경우 연령대와 해당 학점 조회,"SELECT age_band, AVG(studied_credits) AS avg_credits FROM studentInfo WHERE final_result = 'Withdrawn' AND region = 'Scotland' GROUP BY age_band HAVING AVG(studied_credits) > 50;","SELECT age_band, AVG(studied_credits) FROM studentinfo WHERE region = 'Scotland' AND final_result = 'Withdrawn' GROUP BY age_band HAVING AVG(studied_credits) > 50;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
466,등록한 학생들 중 VLE 자료와 상호 작용한 학생들의 연령대별 평균 학점이 80보다 낮은 경우 연령대와 해당 평균 학점 조회,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON s.id_student = v.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_unregistration IS NULL AND v.id_site IS NOT NULL GROUP BY s.age_band HAVING AVG(studied_credits) < 80;","SELECT studentassessment.age_band, AVG(studentassessment.score) FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.code_module = studentvle.code_module AND studentinfo.code_presentation = studentvle.code_presentation GROUP BY studentassessment.age_band HAVING AVG(studentassessment.score) < 80;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
467,등록하지 않은 학생들 중 평가에 참여하지 않은 학생들의 연령대별 평균 학점이 50보다 높은 경우 연령대와 해당 학점 조회,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentAssessment sa ON s.id_student = sa.id_student WHERE r.date_registration IS NULL AND sa.score IS NULL GROUP BY s.age_band HAVING AVG(studied_credits) > 50;","SELECT studentinfo.age_band, AVG(studentassessment.score) as avg_score FROM studentinfo LEFT JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student LEFT JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student WHERE studentregistration.id_student IS NULL AND studentassessment.id_student IS NULL GROUP BY studentinfo.age_band HAVING avg_score > 50;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ;"
468,VLE 자료와 상호 작용한 학생들의 연령대별 평균 학점이 80보다 낮은 경우 연령대와 평균 학점 조회,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.age_band HAVING AVG(studied_credits) < 80;","SELECT studentinfo.age_band, AVG(studentvle.sum_click) as avg_grade FROM studentinfo INNER JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student INNER JOIN studentvle ON studentregistration.code_module = studentvle.code_module AND studentregistration.code_presentation = studentvle.code_presentation WHERE studentinfo.age_band IN (SELECT age_band FROM studentinfo GROUP BY age_band HAVING AVG(studentvle.sum_click) < 80) GROUP BY studentinfo.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
469,등록한 학생들의 연령대별 평균 학점이 60보다 높은 경우 연령대와 해당 평균 학점 조회,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.age_band HAVING AVG(studied_credits) > 60;","SELECT studentregistration.age_band, AVG(studentinfo.studied_credits) as avg_credits FROM studentregistration INNER JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student INNER JOIN courses ON studentregistration.code_module = courses.code_module WHERE courses.final_result = 'completed' GROUP BY studentregistration.age_band HAVING avg_credits > 60;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
470,VLE 자료와 상호 작용한 학생들의 연령대별 평균 학점이 전체 학생들의 평균 학점보다 낮은 경우 해당 연령대와 평균 학점 조회,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.age_band HAVING AVG(studied_credits) < (SELECT AVG(studied_credits) FROM studentInfo);","SELECT studentinfo.age_band, AVG(studentregistration.final_result) AS avg_grade FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.id_student = studentvle.id_student GROUP BY studentinfo.age_band HAVING AVG(studentregistration.final_result) < (SELECT AVG(studentregistration.final_result) FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student) ORDER BY avg_grade DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
471,지역별 평균 학점이 전체 학생들의 평균 학점보다 높은 경우 해당 지역명과 평균 학점 조회,"SELECT s.region, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.region HAVING AVG(studied_credits) > (SELECT AVG(studied_credits) FROM studentInfo);","SELECT s.region, AVG(s.final_result) as avg_grade FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses c ON sr.code_module = c.code_module WHERE c.region = s.region GROUP BY s.region HAVING AVG(s.final_result) > (SELECT AVG(s.final_result) FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses c ON sr.code_module = c.code_module) ;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
472,VLE 자료와 상호 작용한 학생들의 연령대별 평균 학점이 전체 학생들의 평균 학점보다 낮은 경우 연령대와 평균 학점 조회,"SELECT s.age_band, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student LEFT JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.age_band HAVING AVG(studied_credits) < (SELECT AVG(studied_credits) FROM studentInfo);","SELECT s.age_band, AVG(s.final_result) FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation WHERE s.age_band IN (SELECT s.age_band FROM studentinfo s WHERE AVG(s.final_result) < (SELECT AVG(s.final_result) FROM studentinfo s)) GROUP BY s.age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
473,성별 평균 학점이 전체 학생들의 평균 학점보다 높은 경우 성별과 평균 학점 조회,"SELECT s.gender, AVG(studied_credits) AS avg_credits FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender HAVING AVG(studied_credits) > (SELECT AVG(studied_credits) FROM studentInfo);","SELECT s.gender, AVG(s.final_result) as avg_grade FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student WHERE s.gender IN (SELECT s.gender FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student GROUP BY s.gender HAVING AVG(s.final_result) > (SELECT AVG(s.final_result) FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student)) GROUP BY s.gender;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
474,IMD 밴드별 평균 등록 기간이 양수인 경우 IMD 밴드와 평균 등록 기간을 조회,"SELECT s.imd_band, AVG(r.date_unregistration - r.date_registration) AS avg_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.imd_band HAVING AVG(r.date_unregistration - r.date_registration) > 0;","SELECT imd_band, AVG(date_registration) as avg_registration_duration FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student JOIN courses ON studentregistration.code_module = courses.code_module WHERE courses.code_presentation = studentinfo.code_presentation AND imd_band IS NOT NULL GROUP BY imd_band HAVING AVG(date_registration) > 0;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
475,성별에 따른 평균 등록 기간이 양수인 경우 성별과 평균 등록 기간 조회,"SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_registration_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student JOIN studentVle v ON s.id_student = v.id_student GROUP BY s.gender HAVING AVG(r.date_unregistration - r.date_registration) > 0;","SELECT studentinfo.gender, AVG(studentregistration.date_registration) AS avg_date_registration FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student WHERE studentregistration.date_unregistration > 0 GROUP BY studentinfo.gender HAVING AVG(studentregistration.date_registration) > 0;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
476,성별에 따른 평균 등록 기간이 양수인 경우 성별과 평균 등록 기간 조회,"SELECT s.gender, AVG(r.date_unregistration - r.date_registration) AS avg_registration_duration FROM studentInfo s JOIN studentRegistration r ON s.id_student = r.id_student GROUP BY s.gender HAVING AVG(r.date_unregistration - r.date_registration) > 0;","SELECT studentinfo.gender, AVG(studentregistration.date_registration - studentregistration.date_unregistration) as avg_duration FROM studentregistration JOIN studentinfo ON studentregistration.code_module = studentinfo.code_module AND studentregistration.code_presentation = studentinfo.code_presentation WHERE studentregistration.date_unregistration > 0 GROUP BY studentinfo.gender;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
477,모듈별로 가장 많은 학생 수를 가진 상위 5개 모듈명과 학생 수 조회,"SELECT sr.code_module, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY sr.code_module ORDER BY num_students DESC LIMIT 5;","SELECT c.code_module, COUNT(sr.id_student) as num_students FROM courses c JOIN studentregistration sr ON c.code_module = sr.code_module GROUP BY c.code_module ORDER BY num_students DESC LIMIT 5;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
478,등록된 학생 수를 연령대별로 반환,"SELECT si.age_band, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student WHERE sr.date_registration IS NOT NULL GROUP BY si.age_band;","SELECT age_band, COUNT(*) as num_students FROM studentregistration JOIN studentinfo ON studentregistration.id_student = studentinfo.id_student GROUP BY age_band;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
479,모듈 코드와 연령대별로 자료 상호 작용 횟수의 평균을 내림차순으로 반환,"SELECT sr.code_module, si.age_band, AVG(v.sum_click) AS avg_clicks FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle v ON si.id_student = v.id_student GROUP BY sr.code_module, si.age_band ORDER BY avg_clicks DESC;","SELECT studentinfo.age_band, studentinfo.code_module, AVG(studentvle.sum_click) as avg_interactions FROM studentinfo JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student JOIN studentvle ON studentinfo.code_module = studentvle.code_module AND studentinfo.code_presentation = studentvle.code_presentation GROUP BY studentinfo.age_band, studentinfo.code_module ORDER BY avg_interactions DESC;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
480,성별과 모듈별로 자료 상호 작용 횟수의 평균 조회,"SELECT si.gender, sr.code_module, AVG(v.sum_click) AS avg_clicks FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student JOIN studentVle v ON si.id_student = v.id_student GROUP BY si.gender, sr.code_module ORDER BY avg_clicks DESC;","SELECT gender, code_module, AVG(sum_click) as avg_interactions FROM studentvle JOIN studentinfo ON studentvle.id_student = studentinfo.id_student JOIN studentregistration ON studentvle.code_module = studentregistration.code_module AND studentvle.code_presentation = studentregistration.code_presentation GROUP BY gender, code_module;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
481,지역별 학생 수가 50명을 초과하는 경우 지역명과 학생 수 조회,"SELECT si.region, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.region HAVING COUNT(DISTINCT si.id_student) > 50;","SELECT region, COUNT(*) FROM studentinfo GROUP BY region HAVING COUNT(*) > 50;","CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
482,"성별과 모듈별 학생 수가 10명을 초과하는 경우 성별, 모듈 코드, 학생 수 조회","SELECT si.gender, sr.code_module, COUNT(DISTINCT si.id_student) AS num_students FROM studentInfo si JOIN studentRegistration sr ON si.id_student = sr.id_student GROUP BY si.gender, sr.code_module HAVING COUNT(DISTINCT si.id_student) > 10;","SELECT s.gender, c.code_module, COUNT(sr.id_student) as student_count FROM studentinfo s INNER JOIN studentregistration sr ON s.id_student = sr.id_student INNER JOIN courses c ON sr.code_module = c.code_module GROUP BY s.gender, c.code_module HAVING COUNT(sr.id_student) > 10;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ;"
483,"모듈별 지역별 자료 상호 작용 횟수의 평균이 20회 미만인 경우 모듈 코드와 지역명, 자료 상호 작용 횟수의 평균 조회","SELECT sr.code_module, si.region, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.region HAVING AVG(v.sum_click) < 20;","SELECT studentinfo.region, studentinfo.code_module, AVG(studentvle.sum_click) FROM studentinfo INNER JOIN studentregistration ON studentinfo.id_student = studentregistration.id_student INNER JOIN studentvle ON studentregistration.code_module = studentvle.code_module AND studentregistration.code_presentation = studentvle.code_presentation GROUP BY studentinfo.region, studentinfo.code_module HAVING AVG(studentvle.sum_click) < 20;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
484,"모듈별 최고 학력별 자료 상호 작용 횟수의 평균이 25회 미만인 경우 모듈 코드와 최고 학력, 자료 상호 작용 횟수의 평균 조회","SELECT sr.code_module, si.highest_education, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.highest_education HAVING AVG(v.sum_click) < 25;","SELECT s.highest_education, c.code_module, AVG(sv.sum_click) as avg_interactions FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation GROUP BY s.highest_education, c.code_module HAVING avg_interactions < 25;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
485,"자료 상호 작업 횟수의 평균이 15회 미만인 모듈과 성별, 평균 자료 상호작업 횟수","SELECT sr.code_module, si.gender, AVG(v.sum_click) AS avg_clicks FROM studentRegistration sr JOIN studentInfo si ON sr.id_student = si.id_student JOIN studentVle v ON sr.id_student = v.id_student GROUP BY sr.code_module, si.gender HAVING AVG(v.sum_click) < 15;","SELECT s.gender, c.code_module, AVG(sv.sum_click) FROM studentinfo s JOIN studentregistration sr ON s.id_student = sr.id_student JOIN studentvle sv ON sr.code_module = sv.code_module AND sr.code_presentation = sv.code_presentation GROUP BY s.gender, c.code_module HAVING AVG(sv.sum_click) < 15;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
486,BBB 수업을 듣는 학생들 중 장애가 있는 학생들과 해당 학생들이 과제를 언제 제출했는지를 파악,"SELECT si.disability, sa.date_submitted, c.code_module FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student LEFT JOIN assessments a ON sa.id_assessment = a.id_assessment LEFT JOIN courses c ON si.code_module = c.code_module WHERE si.code_module = 'BBB';","SELECT studentinfo.id_student, studentinfo.gender, studentinfo.region, studentinfo.highest_education, studentinfo.imd_band, studentinfo.age_band, studentinfo.num_of_prev_attempts, studentinfo.studied_credits, studentinfo.disability, studentassessment.date_submitted FROM studentinfo INNER JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student INNER JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation WHERE courses.code_presentation = 'BBB';","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
487,"지역 별 평균 성적, 총 클릭 수, 가장 많이 듣는 수업","SELECT si.region, AVG(sa.score) AS avg_score, SUM(sv.sum_click) AS total_clicks, MAX(c.code_module) AS most_popular_module FROM studentinfo si LEFT JOIN studentassessment sa ON si.id_student = sa.id_student LEFT JOIN studentvle sv ON si.id_student = sv.id_student LEFT JOIN courses c ON si.code_module = c.code_module GROUP BY si.region;","SELECT s.region, AVG(a.score) as avg_score, SUM(v.sum_click) as total_clicks, COUNT(DISTINCT c.code_module) as most_popular_course FROM studentinfo s JOIN studentassessment a ON s.id_student = a.id_student JOIN studentvle v ON s.id_student = v.id_student JOIN courses c ON s.code_module = c.code_module GROUP BY s.region ORDER BY total_clicks DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ;"
488,지역별로 가장 많은 학생이 수강하는 모듈과 해당 모듈의 평균 점수,"SELECT si.region, SUBSTRING_INDEX(GROUP_CONCAT(c.code_module ORDER BY num_students_taking DESC), ',', 1) AS most_popular_module, MAX(num_students_taking) AS enrollment_count, AVG(sa.score) AS average_score FROM (SELECT region, code_module, COUNT(*) AS num_students_taking FROM studentinfo GROUP BY region, code_module) AS s JOIN courses c ON s.code_module = c.code_module JOIN studentinfo si ON s.region = si.region JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY si.region;","SELECT c.code_module, c.code_presentation, AVG(a.score) as avg_score, COUNT(s.id_student) as num_students FROM studentinfo s JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation JOIN studentassessment a ON s.id_student = a.id_student GROUP BY c.code_module, c.code_presentation ORDER BY num_students DESC, avg_score DESC LIMIT 1;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
489,각 수업에서 특정 활동 유형이 학생의 평균 성적에 미치는 영향,"SELECT c.code_module, c.code_presentation, v.activity_type, AVG(sa.score) AS average_score FROM studentvle sv JOIN vle v ON sv.id_site = v.id_site JOIN studentassessment sa ON sv.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN courses c ON a.code_module = c.code_module AND a.code_presentation = c.code_presentation GROUP BY c.code_module, c.code_presentation, v.activity_type ORDER BY c.code_module, c.code_presentation, v.activity_type;","SELECT vle.activity_type, AVG(studentassessment.score) as avg_score FROM vle INNER JOIN studentvle ON vle.id_site = studentvle.id_site INNER JOIN studentassessment ON studentvle.id_student = studentassessment.id_student GROUP BY vle.activity_type, studentassessment.code_module, studentassessment.code_presentation;","CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
490,"0-35세의 학생들의 모듈과 평균 점수, 사이트 id, 활동 유형","SELECT vle.code_module, AVG(studentassessment.score) AS average_score, vle.id_site, vle.activity_type FROM studentinfo JOIN studentassessment ON studentinfo.id_student = studentassessment.id_student JOIN courses ON studentinfo.code_module = courses.code_module AND studentinfo.code_presentation = courses.code_presentation JOIN studentvle ON studentinfo.id_student = studentvle.id_student JOIN vle ON studentvle.id_site = vle.id_site WHERE studentinfo.age_band = '0-35' GROUP BY vle.code_module, vle.id_site, vle.activity_type;","SELECT c.code_module, c.code_presentation, AVG(a.score) as avg_score, v.id_site, v.activity_type FROM studentinfo s INNER JOIN studentassessment a ON s.id_student = a.id_student INNER JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation INNER JOIN studentvle sv ON s.id_student = sv.id_student INNER JOIN vle v ON c.code_module = v.code_module AND c.code_presentation = v.code_presentation WHERE s.age_band = '0-35' GROUP BY c.code_module, c.code_presentation, v.id_site, v.activity_type;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ;"
491,지역 별로 많이 듣는 수업과 평균 점수를 구해줘,"SELECT s.region, SUBSTRING_INDEX(GROUP_CONCAT(c.code_module ORDER BY num_students_taking DESC), ',', 1) AS most_popular_module, MAX(num_students_taking) AS enrollment_count, AVG(sa.score) AS average_score FROM (SELECT region, code_module, COUNT(*) AS num_students_taking FROM studentinfo GROUP BY region, code_module) AS s JOIN courses c ON s.code_module = c.code_module JOIN studentinfo si ON s.region = si.region JOIN studentassessment sa ON si.id_student = sa.id_student JOIN assessments a ON sa.id_assessment = a.id_assessment GROUP BY s.region;","SELECT s.region, c.code_module, c.code_presentation, AVG(a.score) as avg_score FROM studentassessment a JOIN studentinfo s ON a.id_student = s.id_student JOIN courses c ON s.code_module = c.code_module AND s.code_presentation = c.code_presentation GROUP BY s.region, c.code_module, c.code_presentation ORDER BY s.region, AVG(a.score) DESC LIMIT 10;","CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
492,수업 모듈과 프레젠테이션에서의 연령대별로 활동 유형에 따른 평균 점수를 비교,"SELECT c.code_module, c.code_presentation, si.age_band, v.activity_type, AVG(sa.score) AS average_score FROM studentassessment sa JOIN studentinfo si ON sa.id_student = si.id_student JOIN courses c ON si.code_module = c.code_module AND si.code_presentation = c.code_presentation JOIN studentvle sv ON sa.id_student = sv.id_student JOIN vle v ON sv.id_site = v.id_site GROUP BY c.code_module, c.code_presentation, si.age_band, v.activity_type ORDER BY c.code_module, c.code_presentation, si.age_band, v.activity_type;","SELECT c.activity_type, AVG(CASE WHEN s.age_band = '0-18' THEN sa.score ELSE NULL END) as avg_score_0_18, AVG(CASE WHEN s.age_band = '19-25' THEN sa.score ELSE NULL END) as avg_score_19_25, AVG(CASE WHEN s.age_band = '26-35' THEN sa.score ELSE NULL END) as avg_score_26_35, AVG(CASE WHEN s.age_band = '36-50' THEN sa.score ELSE NULL END) as avg_score_36_50, AVG(CASE WHEN s.age_band = '51+' THEN sa.score ELSE NULL END) as avg_score_51_plus FROM studentassessment sa JOIN studentinfo s ON sa.id_student = s.id_student JOIN courses c ON sa.code_module = c.code_module AND sa.code_presentation = c.code_presentation GROUP BY c.activity_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE courses (code_module varchar(45) NOT NULL -- 'code name of the module, which serves as the identifier.', code_presentation varchar(45) NOT NULL -- 'code name of the presentation. It consists of the year and “B” for the presentation starting in February and “J” for the presentation starting in October.', module_presentation_length int NOT NULL -- 'length of the module-presentation in days.', PRIMARY KEY (code_module,code_presentation), KEY code_module_id (code_module), KEY code_presentation_id (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
493,"date가 100 이상인 학생들의 평균 성적, 활동 유형 및 이수 학점","SELECT si.id_student, AVG(sa.score) AS average_score, v.activity_type, si.studied_credits FROM studentassessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentvle sv ON sa.id_student = sv.id_student JOIN vle v ON sv.id_site = v.id_site JOIN studentinfo si ON sa.id_student = si.id_student WHERE a.date >= 100 GROUP BY si.id_student, v.activity_type, si.studied_credits;","SELECT studentassessment.id_student, studentassessment.assessment_type, AVG(studentassessment.score) as avg_score, SUM(assessments.weight) as total_credits FROM studentassessment JOIN assessments ON studentassessment.id_assessment = assessments.id_assessment JOIN studentvle ON studentassessment.id_student = studentvle.id_student JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student WHERE studentvle.date > 100 GROUP BY studentassessment.id_student, studentassessment.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
494,"성별, 지역, 최고 학력, 최종 결과 및 활동 유형에 따른 학생들의 평균 점수와 활동 수","SELECT si.gender, si.region, si.highest_education, si.final_result, AVG(sa.score) AS average_score, v.activity_type, COUNT(*) AS activity_count FROM studentinfo si JOIN studentassessment sa ON si.id_student = sa.id_student JOIN studentvle sv ON si.id_student = sv.id_student JOIN vle v ON sv.id_site = v.id_site JOIN studentregistration sr ON si.code_module = sr.code_module AND si.code_presentation = sr.code_presentation JOIN assessments a ON sr.code_module = a.code_module AND sr.code_presentation = a.code_presentation AND sa.id_assessment = a.id_assessment GROUP BY si.gender, si.region, si.highest_education, si.final_result, v.activity_type;","SELECT studentinfo.gender, studentinfo.region, studentinfo.highest_education, studentassessment.final_result, studentvle.activity_type, AVG(studentassessment.score) as avg_score, COUNT(studentvle.id_site) as num_activities FROM studentassessment JOIN studentinfo ON studentassessment.id_student = studentinfo.id_student JOIN studentregistration ON studentassessment.id_student = studentregistration.id_student JOIN studentvle ON studentassessment.id_student = studentvle.id_student JOIN vle ON studentvle.code_module = vle.code_module AND studentvle.code_presentation = vle.code_presentation GROUP BY studentinfo.gender, studentinfo.region, studentinfo.highest_education, studentassessment.final_result, studentvle.activity_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentregistration (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the presentation.', id_student int NOT NULL -- 'a unique identification number for the student.', date_registration int -- 'the date of student’s registration on the module presentation, this is the number of days measured relative to the start of the module-presentation (e.g. the negative value -30 means that the student registered to module presentation 30 days before it started).', date_unregistration int -- 'date of student unregistration from the module presentation, this is the number of days measured relative to the start of the module-presentation. Students, who completed the course have this field empty.', KEY studentregistration_ibfk_1 (code_module), KEY studentregistration_ibfk_2 (code_presentation), KEY studentregistration_ibfk_3 (id_student), CONSTRAINT studentregistration_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentregistration_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation), CONSTRAINT studentregistration_ibfk_3 FOREIGN KEY (id_student) REFERENCES studentinfo (id_student)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
495,"""AAA"" 모듈에서 각 평가 유형과 평가 유형별로 상위 10% 최고 학력 수준과 하위 10% 최고 학력 수준 학생들의 평균 이수 학점 및 차이를 조회","WITH education_credits AS (SELECT sa.id_student, a.assessment_type, si.highest_education, si.studied_credits,NTILE(10) OVER (PARTITION BY a.assessment_type, si.highest_education ORDER BY si.studied_credits DESC) AS decile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA') SELECT assessment_type, highest_education, AVG(CASE WHEN decile = 10 THEN studied_credits END) AS top_10_avg_credits, AVG(CASE WHEN decile = 1 THEN studied_credits END) AS bottom_10_avg_credits, AVG(CASE WHEN decile = 10 THEN studied_credits END) - AVG(CASE WHEN decile = 1 THEN studied_credits END) AS credit_diff FROM education_credits GROUP BY assessment_type, highest_education;","SELECT assessment_type, AVG(score) AS avg_score, (SELECT AVG(score) FROM studentassessment sa JOIN assessments a ON sa.code_module = a.code_module JOIN studentinfo si ON sa.id_student = si.id_student WHERE si.highest_education = 'Doctorate' AND a.code_module = 'AAA' GROUP BY assessment_type ORDER BY avg_score DESC LIMIT 10) - (SELECT AVG(score) FROM studentassessment sa JOIN assessments a ON sa.code_module = a.code_module JOIN studentinfo si ON sa.id_student = si.id_student WHERE si.highest_education = 'Primary School' AND a.code_module = 'AAA' GROUP BY assessment_type ORDER BY avg_score ASC LIMIT 10) AS difference FROM studentassessment sa JOIN assessments a ON sa.code_module = a.code_module JOIN studentinfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA' GROUP BY assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
496,"""BBB"" 모듈에서 각 평가 유형과 평가 유형별로 상위 40% 연령대와 하위 40% 연령대 학생들의 평균 이전 시도 횟수 및 차이를 조회","WITH age_attempts AS ( SELECT sa.id_student, a.assessment_type, si.num_of_prev_attempts, si.age_band, CASE WHEN si.age_band LIKE '0-35' THEN 1 WHEN si.age_band LIKE '35-55' THEN 2 WHEN si.age_band LIKE '55<=' THEN 3 END AS age_band_num, NTILE(5) OVER (PARTITION BY a.assessment_type ORDER BY si.age_band) AS quintile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'BBB') SELECT assessment_type, AVG(CASE WHEN quintile >= 3 THEN num_of_prev_attempts END) AS top_40_avg_attempts, AVG(CASE WHEN quintile <= 2 THEN num_of_prev_attempts END) AS bottom_40_avg_attempts, AVG(CASE WHEN quintile >= 3 THEN num_of_prev_attempts END) - AVG(CASE WHEN quintile <= 2 THEN num_of_prev_attempts END) AS attempt_diff FROM age_attempts GROUP BY assessment_type;","SELECT a.assessment_type, AVG(s.num_of_prev_attempts) AS avg_attempts, AVG(s2.num_of_prev_attempts) AS avg_attempts_lower, AVG(s2.num_of_prev_attempts) - AVG(s.num_of_prev_attempts) AS diff_attempts FROM studentinfo s INNER JOIN studentassessment a ON s.id_student = a.id_student INNER JOIN studentinfo s2 ON s.code_module = s2.code_module AND s2.age_band = '40-49' AND s2.num_of_prev_attempts >= PERCENTILE_CONT(0.6) WITHIN GROUP (ORDER BY s2.num_of_prev_attempts) GROUP BY a.assessment_type HAVING a.code_module = 'BBB' ;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
497,"""AAA"" 모듈에서 각 평가 유형과 평가 유형별로 상위 20%와 하위 20% 학생들의 평균 학점과 두 그룹 간의 평균 학점 차이를 조회","WITH region_credits AS (SELECT sa.id_student, a.assessment_type, si.studied_credits, si.imd_band, NTILE(5) OVER (PARTITION BY a.assessment_type, si.imd_band ORDER BY si.studied_credits DESC) AS quintile FROM studentAssessment sa JOIN assessments a ON sa.id_assessment = a.id_assessment JOIN studentInfo si ON sa.id_student = si.id_student WHERE a.code_module = 'AAA') SELECT assessment_type, AVG(CASE WHEN quintile = 5 THEN studied_credits END) AS top_20_avg_credits, AVG(CASE WHEN quintile = 1 THEN studied_credits END) AS bottom_20_avg_credits, AVG(CASE WHEN quintile = 5 THEN studied_credits END) - AVG(CASE WHEN quintile = 1 THEN studied_credits END) AS credit_diff FROM region_credits GROUP BY assessment_type;","SELECT a.assessment_type, AVG(s.score) as avg_score, AVG(s.score) - LAG(AVG(s.score)) OVER (PARTITION BY a.assessment_type ORDER BY a.assessment_type) as avg_score_diff FROM studentassessment s JOIN assessments a ON s.id_assessment = a.id_assessment JOIN studentinfo si ON s.id_student = si.id_student JOIN courses c ON a.code_module = c.code_module WHERE c.code_module = 'AAA' GROUP BY a.assessment_type, NTILE(4) OVER (ORDER BY s.score) HAVING NTILE(4) OVER (ORDER BY s.score) IN (1, 4) ORDER BY a.assessment_type;","CREATE TABLE studentassessment (id_assessment int -- 'a unique identification number for the student.', id_student int -- 'the identification number of the assessment.', date_submitted int -- 'the date of student submission, measured as the number of days since the start of the module presentation.', is_branked tinyint NOT NULL -- 'a status flag indicating that the assessment result has been transferred from a previous presentation.', score float -- 'the student’s score in this assessment. The range is from 0 to 100. The score lower than 40 is interpreted as Fail. The marks are in the range from 0 to 100.', KEY id_student (id_assessment), KEY id_assessment (id_student)) ; CREATE TABLE assessments (code_module varchar(45) NOT NULL -- 'identification code of the module, to which the assessment belongs.', code_presentation varchar(45) NOT NULL -- 'identification code of the presentation, to which the assessment belongs.', id_assessment int NOT NULL -- 'identification number of the assessment.', assessment_type varchar(45) -- 'type of assessment. Three types of assessments exist: Tutor Marked Assessment (TMA), Computer Marked Assessment (CMA) and Final Exam (Exam).', date int -- 'information about the final submission date of the assessment calculated as the number of days since the start of the module-presentation. The starting date of the presentation has number 0 (zero).', weight int -- 'weight of the assessment in %. Typically, Exams are treated separately and have the weight 100%; the sum of all other assessments is 100%.', PRIMARY KEY (id_assessment), KEY assessments_ibfk_1 (code_module), KEY assessments_ibfk_2 (code_presentation), CONSTRAINT assessments_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT assessments_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentvle (code_module varchar(45) NOT NULL -- 'an identification code for a module.', code_presentation varchar(45) NOT NULL -- 'the identification code of the module presentation.', id_student int -- 'a unique identification number for the student.', id_site int -- 'an identification number for the VLE material.', date int -- 'the date of student’s interaction with the material measured as the number of days since the start of the - module-presentation.', sum_click int -- 'the number of times a student interacts with the material in that day.', KEY id_student (id_site), KEY id_site (id_student), KEY code_module (code_module), KEY code_presentation (code_presentation)) ; CREATE TABLE vle (id_site int NOT NULL -- 'an identification number of the material.', code_module varchar(45) NOT NULL -- 'an identification code for module.', code_presentation varchar(45) NOT NULL -- 'the identification code of presentation.', activity_type varchar(45) -- 'the role associated with the module material.', week_from int -- 'the week from which the material is planned to be used.', week_to int -- 'week until which the material is planned to be used.', PRIMARY KEY (id_site), KEY vle_ibfk_1 (code_module), KEY vle_ibfk_2 (code_presentation), CONSTRAINT vle_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT vle_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;  CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ; CREATE TABLE studentinfo (code_module varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.', code_presentation varchar(45) NOT NULL -- 'an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.an identification code for a module on which the student is registered.the identification code of the presentation during which the student is registered on the module.', id_student int NOT NULL -- 'a unique identification number for the student.', gender varchar(3) -- 'the student’s gender.', region varchar(45) -- 'identifies the geographic region, where the student lived while taking the module-presentation.', highest_education varchar(45) -- 'highest student education level on entry to the module presentation.', imd_band varchar(16) -- 'specifies the Index of Multiple Depravation band of the place where the student lived during the module-presentation.', age_band varchar(16) -- 'band of the student’s age.', num_of_prev_attempts int -- 'the number times the student has attempted this module.', studied_credits int -- 'the total number of credits for the modules the student is currently studying.', disability varchar(3) -- 'indicates whether the student has declared a disability.', final_result varchar(45) -- 'student’s final result in the module-presentation.', PRIMARY KEY (id_student), KEY studentinfo_ibfk_1 (code_module), KEY studentinfo_ibfk_2 (code_presentation), CONSTRAINT studentinfo_ibfk_1 FOREIGN KEY (code_module) REFERENCES courses (code_module), CONSTRAINT studentinfo_ibfk_2 FOREIGN KEY (code_presentation) REFERENCES courses (code_presentation)) ;"
