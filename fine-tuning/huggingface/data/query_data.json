{"schema": "sample", "input": "Search all records in the employee table.", "output": "SELECT *  FROM EMP"}
{"schema": "sample", "input": "Check the employee name and employment date", "output": "SELECT ENAME,HIREDATE FROM EMP"}
{"schema": "sample", "input": "Check the employee number and name.", "output": "SELECT DEPTNO,ENAME  FROM EMP"}
{"schema": "sample", "input": "View the list of positions in the employee table.", "output": "SELECT DISTINCT JOB FROM EMP"}
{"schema": "sample", "input": "Find the total number of employees.", "output": "SELECT COUNT(EMPNO) FROM EMP"}
{"schema": "sample", "input": "Search for the employee whose department number is 10.", "output": "SELECT * FROM EMP WHERE DEPTNO = 10;"}
{"schema": "sample", "input": "Search for employees whose monthly salary is over 2500", "output": "SELECT * FROM EMP WHERE SAL >= 2500;"}
{"schema": "sample", "input": "Search for employees whose name is 'KING'.", "output": "SELECT * FROM EMP WHERE ENAME = 'KING'"}
{"schema": "sample", "input": "Among the employees, look up the employee number and name of the employee whose name begins with S.", "output": "SELECT EMPNO,ENAME FROM EMP WHERE ENAME LIKE 'S%';"}
{"schema": "sample", "input": "Search for the employee number and name of an employee whose name includes T.", "output": "SELECT EMPNO,ENAME FROM EMP WHERE ENAME LIKE '%T%';"}
{"schema": "sample", "input": "Check the employee number, name, and commission of employees with commissions of 300, 500, and 1400.", "output": "SELECT EMPNO,ENAME,COMM FROM EMP WHERE COMM = 300 OR COMM = 500 OR COMM = 1400;"}
{"schema": "sample", "input": "Check the employee number, name, and monthly salary of an employee whose monthly salary is between 1200 and 3500.", "output": "SELECT EMPNO,ENAME,SAL FROM EMP WHERE SAL BETWEEN 1200 AND 3500;"}
{"schema": "sample", "input": "Look up the name, employee number, rank, and department number of an employee whose rank is manager and department number 30.", "output": "SELECT ENAME,EMPNO,JOB,DEPTNO FROM EMP WHERE DEPTNO = 30 AND JOB = 'MANAGER';"}
{"schema": "sample", "input": "Search for the employee number, name, and department number of an employee whose department number is not 30.", "output": "SELECT EMPNO,ENAME,DEPTNO FROM EMP WHERE NOT DEPTNO = 30;"}
{"schema": "sample", "input": "Check the employee number, name, and commission of employees whose commission is not 300, 500, or 1400.", "output": "SELECT EMPNO,ENAME,COMM FROM EMP WHERE COMM NOT IN (300,500,1400);"}
{"schema": "sample", "input": "Search for the employee number and name of an employee whose name does not contain S.", "output": "SELECT EMPNO,ENAME FROM EMP WHERE ENAME NOT LIKE '%S%';"}
{"schema": "sample", "input": "Check the employee number, name, and monthly salary of employees whose salary is less than 1200 or more than 3700.", "output": "SELECT EMPNO,ENAME,SAL FROM EMP WHERE SAL NOT BETWEEN 1200 AND 3700;"}
{"schema": "sample", "input": "Search for the name and rank of an employee whose immediate supervisor is NULL.", "output": "SELECT ENAME,JOB FROM EMP WHERE MGR IS NULL;"}
{"schema": "sample", "input": "Query to find average monthly salary by department", "output": "SELECT DEPTNO,AVG(SAL) FROM EMP GROUP BY DEPTNO;"}
{"schema": "sample", "input": "Query to find the total number of employees in each department and the number of employees receiving commissions", "output": "SELECT DEPTNO,COUNT(*),COUNT(COMM) FROM EMP GROUP BY DEPTNO;"}
{"schema": "sample", "input": "Query to find maximum and minimum salary by department", "output": "SELECT DEPTNO,MAX(SAL),MIN(SAL) FROM EMP GROUP BY DEPTNO;"}
{"schema": "sample", "input": "Salary average by department (but only if the average salary by department is over 2000)", "output": "SELECT DEPTNO,AVG(SAL) FROM EMP GROUP BY DEPTNO HAVING AVG(SAL) >= 2000;"}
{"schema": "sample", "input": "Find the average monthly salary by department, targeting only employees whose monthly salary is 1000 or more. However, find only records with an average value of 2000 or more.", "output": "SELECT DEPTNO,AVG(SAL) FROM EMP WHERE SAL >= 1000 GROUP BY DEPTNO HAVING AVG(SAL) >= 2000;"}
{"schema": "sample", "input": "Search in order of highest salary, and if salaries are the same, search all employee numbers, names, and monthly salaries in order of employees whose names are spelled faster.", "output": "SELECT EMPNO,ENAME,SAL FROM EMP ORDER BY SAL DESC,ENAME ASC;"}
{"schema": "sample", "input": "Look up the employee name and department name.", "output": "SELECT ENAME,DNAME FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO;"}
{"schema": "sample", "input": "Look up your name and immediate supervisor\u2019s name.", "output": "SELECT E.ENAME,M.ENAME FROM EMP E,EMP M WHERE E.MGR = M.EMPNO;"}
{"schema": "sample", "input": "Search for name, department number, and department name.", "output": "SELECT ENAME,E.DEPTNO,DNAME FROM EMP E,DEPT D WHERE E.DEPTNO = D.DEPTNO;"}
{"schema": "sample", "input": "Look up the names, positions, department numbers, and department locations of employees whose department number is 30.", "output": "SELECT ENAME,JOB,E.DEPTNO,LOC FROM EMP E,DEPT D WHERE E.DEPTNO = D.DEPTNO AND D.DEPTNO = 30;"}
{"schema": "sample", "input": "Look up the name, commission, department name, and department location of the employee who receives the commission.", "output": "SELECT ENAME,COMM,DNAME,LOC FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO  AND EMP.COMM IS NOT NULL AND EMP.COMM <> 0;"}
{"schema": "sample", "input": "Search for the name, rank, department number, and department name of employees working at DALLAS.", "output": "SELECT E.ENAME,E.JOB,D.DEPTNO,D.DNAME FROM EMP E,DEPT D WHERE E.DEPTNO = D.DEPTNO AND D.LOC = 'DALLAS';"}
{"schema": "sample", "input": "Look up the name and department name of the employee with A in the name.", "output": "SELECT E.ENAME,D.DNAME FROM EMP E,DEPT D WHERE E.DEPTNO = D.DEPTNO AND E.ENAME LIKE '%A%';"}
{"schema": "sample", "input": "Search for the name and department number of an employee working in the same department as ALLEN.", "output": "SELECT C.ENAME,C.DEPTNO FROM EMP E,EMP C WHERE E.EMPNO <> C.EMPNO AND E.DEPTNO = C.DEPTNO AND E.ENAME = 'ALLEN' ORDER BY C.ENAME;"}
{"schema": "sample", "input": "Search for the department name to which the employee name 'JONES' belongs", "output": "SELECT DNAME  FROM DEPT WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME = 'JONES');"}
{"schema": "sample", "input": "Look up the name of the employee working in department number 10 and the department name of department number 10.", "output": "SELECT E.ENAME,D.DNAME FROM EMP E,DEPT D WHERE E.DEPTNO = D.DEPTNO AND D.DEPTNO = 10;"}
{"schema": "sample", "input": "Check the employee number, name, and monthly salary of an employee who received more than the average monthly salary.", "output": "SELECT EMPNO,ENAME,SAL FROM EMP WHERE SAL > (SELECT AVG(SAL)               FROM EMP) ORDER BY SAL DESC;"}
{"schema": "sample", "input": "Among employees with department number 10, query the employee number and name of the employee who receives the same salary as the employee who receives the maximum salary.", "output": "SELECT e1.EMPNO,        e1.ENAME FROM emp e1 JOIN   (SELECT MAX(SAL) AS MAX_SAL    FROM emp    WHERE DEPTNO = 10) AS e2 ON e1.SAL = e2.MAX_SAL WHERE e1.DEPTNO = 10;"}
{"schema": "classicmodels", "input": "View sales by date and sort data by latest", "output": "SELECT A.orderDate, \n           sum(B.priceEach*B.quantityOrdered) AS sales \nFROM classicmodels.orders A \nLEFT JOIN classicmodels.orderdetails B\nON A.orderNumber = B.orderNumber \nGROUP BY A.orderDate\nORDER BY A.orderDate DESC; "}
{"schema": "classicmodels", "input": "View monthly sales and sort data by most recent", "output": "SELECT substr(A.orderDate, 1, 7) MM,\n          sum(B.priceEach*B.quantityOrdered) AS sales\nFROM classicmodels.orders A\nLEFT JOIN classicmodels.orderdetails B                \nON A.orderNumber = B.orderNumber                                 \nGROUP BY MM                                                                                 \nORDER BY MM DESC;        "}
{"schema": "classicmodels", "input": "View sales by year and sort data by most recent", "output": "SELECT substr(A.orderDate, 1, 4) YY, \n          sum(B.priceEach*B.quantityOrdered) AS sales\nFROM classicmodels.orders A\nLEFT JOIN classicmodels.orderdetails B                \nON A.orderNumber = B.orderNumber                                 \nGROUP BY YY                                                                                 \nORDER BY YY DESC;        "}
{"schema": "classicmodels", "input": "View buyers and number of purchases by date and sort data in latest order", "output": "SELECT orderDate,\nCOUNT(DISTINCT customerNumber) n_purchasers,\nCOUNT(DISTINCT orderNumber) n_orders\nFROM classicmodels.orders\nGROUP BY orderDate\nORDER BY orderDate DESC;"}
{"schema": "classicmodels", "input": "View monthly buyers and number of purchases and sort data by most recent", "output": "SELECT substr(orderDate, 1, 7) MM,\nCOUNT(DISTINCT customerNumber) n_purchasers,\nCOUNT(DISTINCT orderNumber) n_orders\nFROM classicmodels.orders\nGROUP BY MM\nORDER BY MM DESC;"}
{"schema": "classicmodels", "input": "Check the number of buyers and purchases by year and sort the data in latest order.", "output": "SELECT substr(orderDate, 1, 4) YY,\nCOUNT(DISTINCT customerNumber) n_purchasers,\nCOUNT(DISTINCT orderNumber) n_orders        \nFROM classicmodels.orders\nGROUP BY YY\nORDER BY YY DESC;"}
{"schema": "classicmodels", "input": "View the number of buyers, total sales, and average sales per person by year and sort by most recent.", "output": "SELECT substr(A.orderDate, 1, 4) YY, \t\t\t\t\n\tCOUNT(DISTINCT A.customerNumber) n_purchasers, \n\tsum(B.priceEach*B.quantityOrdered) sales, \t\n    sum(B.priceEach*B.quantityOrdered) / COUNT(DISTINCT A.customerNumber) amv\nFROM classicmodels.orders A\nLEFT JOIN classicmodels.orderdetails B\t\t\nON A.orderNumber = B.orderNumber\t\t\t\t\nGROUP BY YY\t\t\t\t\t\t\t\t\t\nORDER BY YY;\t"}
{"schema": "classicmodels", "input": "View the number of purchases by year, total sales, and amount per purchase and sort by most recent.", "output": "SELECT substr(A.orderDate, 1, 4) YY, \n\tCOUNT(DISTINCT A.orderNumber) n_orders, \n\tsum(B.priceEach*B.quantityOrdered) sales, \t\n    sum(B.priceEach*B.quantityOrdered) / COUNT(DISTINCT A.orderNumber) atv\nFROM classicmodels.orders A\nLEFT JOIN classicmodels.orderdetails B\t\t\nON A.orderNumber = B.orderNumber\nGROUP BY YY\t\nORDER BY YY DESC;\t"}
{"schema": "sample", "input": "Considering only medal winning records since 2000, create a query to retrieve the names and team names of Olympic athletes who have won medals.\\nThe names of the players viewed are sorted in ascending order.", "output": "SELECT a.name, t.team\nFROM sample.records r LEFT JOIN athletics a ON r.athlete_id= a.id\n               LEFT JOIN olympic_games g ON r.game_id = g.id  \n               LEFT JOIN teams t ON r.team_id = t.id\nWHERE medal IS NOT NULL AND g.year >= 2000;"}
{"schema": "sample", "input": "View athletes from the USA team who won gold medals among Olympic participants", "output": "SELECT a.name, t.team\nFROM records r LEFT JOIN athletes a ON r.athlete_id= a.id\n               LEFT JOIN teams t ON r.team_id = t.id\nWHERE r.medal = 'GOLD' AND t.team = 'USA';"}
{"schema": "sample", "input": "View silver medal winning athletes and host cities from Olympic Games held in the winter since 2000.\\nThe names of the players viewed are sorted in descending order.", "output": "SELECT DISTINCT(a.name), g.city\nFROM records r\nLEFT JOIN athletes a ON r.athlete_id = a.id\nLEFT JOIN olympic_games g ON r.game_id = g.id\nWHERE g.year > 2000 AND season = 'Winter' AND medal = 'Silver'\nORDER BY name DESC;"}
{"schema": "sample", "input": "View athletes who have won bronze medals in speed skating events", "output": "SELECT event, a.name\nFROM records r\nINNER JOIN events e ON r.event_id = e.id\nINNER JOIN olympic_games g ON r.game_id = g.id\nINNER JOIN athletes a ON r.athlete_id = a.id\nWHERE medal = 'Bronze' AND event LIKE 'Speed%'"}
{"schema": "sample", "input": "Create a query to retrieve the name of the event, game, and participating athlete in the 2004 Olympics.\\nThe searched stock names are sorted in ascending order.", "output": "SELECT a.name, e.sport, e.event\nFROM records r LEFT JOIN athletes a ON r.athlete_id= a.id\n               LEFT JOIN olympic_games g ON r.game_id = g.id  \n               LEFT JOIN events e ON r.event_id = e.id\nWHERE g.year = 2004\nORDER BY sport ASC;"}
{"schema": "sample", "input": "Write a query to retrieve the names and ages of athletes who participated in the 2016 Olympics.\\nViewed ages are sorted in ascending order.", "output": "SELECT a.name, r.age\nFROM records r LEFT JOIN events e ON r.event_id = e.id\n\t\t\t   LEFT JOIN olympic_games g ON r.game_id = g.id\n               LEFT JOIN athletes a ON r.athlete_id = a.id\nWHERE g.year = 2016\nORDER BY age;"}
{"schema": "sample", "input": "Create a query to retrieve the sports and winning teams that won silver medals in the 2012 Olympics.", "output": "SELECT e.event,t.team\nFROM records r LEFT JOIN events e ON r.event_id = e.id\n                           LEFT JOIN olympic_games g ON r.game_id = g.id\n               LEFT JOIN teams t ON r.team_id = t.id\nWHERE g.year = 2012 AND medal = 'SILVER';"}
{"schema": "sample", "input": "Create a query to search for sports events held at the Olympic Games held in the winter of 2014.", "output": "SELECT DISTINCT(event)\nfrom records r \nLEFT JOIN events e ON r.event_id =e.id\nLEFT JOIN games g ON r.game_id = g.id\nWHERE season = 'Winter' AND year = 2014"}
{"schema": "sample", "input": "Create a query to find the youngest age for each event held at the 2008 Olympics.\\nThe column storing the youngest age is changed to 'min age' and the youngest age viewed is sorted in ascending order.", "output": "SELECT sport,min(r.age) as 'min age'\nFROM records r\nLEFT JOIN athletes a ON r.athlete_id = a.id\nLEFT JOIN events e ON r.event_id = e.id\nLEFT JOIN olympic_games g ON r.game_id = g.id\nWHERE g.year = '2008'\nGROUP BY sport\nORDER BY min(r.age);"}
{"schema": "sample", "input": "Create a query to find athletes in their 30s or older at the 2006 Olympics\\nThe players viewed must be sorted in ascending order by age and have no duplicate names.", "output": "SELECT distinct(a.name), age\nFROM records r \nINNER JOIN olympic_games g ON r.game_id = g.id\nINNER JOIN athletes a ON r.athlete_id = a.id\nWHERE age BETWEEN 30 and 40 and g.year = '2006'\nORDER BY age;"}
{"schema": "sample", "input": "Create a query to retrieve athletes in their 30s or older from the 2006 Olympic Games. The retrieved athletes must be sorted in ascending order based on age and have no duplicate names.", "output": "SELECT e.event, avg(r.age) AS 'AVG age'\nFrom records r\nINNER join olympic_games g ON r.game_id = g.id\ninner join events e ON r.event_id = e.id\nWHERE g.year < 2010 AND g.season = 'Winter' AND r.medal = 'Gold'\nGROUP BY e.event\nORDER BY avg(r.age) DESC;"}
{"schema": "sample", "input": "Create a query to retrieve the number of medals won by each participating country in the 1900 Olympic Games. Change the column indicating participating countries to \u201cParticipating Countries\u201d and sort them in descending order based on the number of gold medals won.", "output": "select t.team AS '\ucc38\uac00\uad6d',\ncount(case when medal = 'Gold' then 1 end) as 'Gold Medal',\ncount(case when medal = 'Silver' then 1 end) as 'Silver Medal',\ncount(case when medal = 'Bronze' then 1 end) as 'Bronze Medal'\nfrom records r left join teams t on r.team_id = t.id\nleft join olympic_games g on r.game_id = g.id\nwhere g.year = 1900\ngroup by t.team\norder by count(case when medal = 'Gold' then 1 end) DESC;"}
{"schema": "sample", "input": "Write a query to retrieve the number of events for each sporting event held at the 1904 Olympics. Sort in descending order based on number of stocks", "output": "select sport, count(distinct(event))\nfrom records r left join events e on r.team_id = e.id\nleft join olympic_games g on r.game_id = g.id\nwhere g.year = 2000\ngroup by sport\nOrder by count(distinct(event)) DESC;"}
{"schema": "sample", "input": "Create a query to retrieve the number of participating countries, host city, and year of the Olympic Games based on saved data. The column indicating the number of participating countries is indicated as \u201ccount\u201d.", "output": "select g.year, g.city, count(distinct(r.team_id)) as 'count'\nfrom records r left join teams t on r.team_id = t.id\nleft join olympic_games g on r.game_id = g.id\ngroup by game_id;"}
{"schema": "sample", "input": "Write a query to retrieve the number of female athletes for each Olympic Games held in 1908.", "output": "select sport, count(distinct(r.athlete_id))\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join athletics a on r.athlete_id = a.id\nleft join events e on r.event_id = e.id\nwhere g.year = 1908 and r.sex = 'F'\ngroup by sport;"}
{"schema": "sample", "input": "Write a query to retrieve the number of athletes who participated in the Olympic Games held from 1896 to 2016. The column where the number of players is stored is displayed as \u201cNumber of Athletic\u201d.", "output": "select g.year,g.city,count(r.athlete_id) as 'Number of Athletics'\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join athletics a on r.athlete_id = a.id\ngroup by g.year, g.city\norder by g.year;"}
{"schema": "sample", "input": "Create a query to look up the number and rate of increase/decrease in athletes for each Olympic Games held from 1896 to 2016. If it is a null value, it is converted to 0 and the column name that stores the player increase/decrease rate is indicated as 'athletic_increase(%)'.", "output": "SELECT\n    current_year,\n    current_count,\n    ifnull((current_count - previous_count),0) AS player_increase,\n    ifnull(ROUND(((current_count - previous_count) / previous_count) * 100, 2),0) AS 'athletic_increase(%)'\nFROM\n    (\n        SELECT\n            current.year AS current_year,\n            current.count AS current_count,\n            previous.year AS previous_year,\n            previous.count AS previous_count\n        FROM\n            (\n                SELECT\n                    year,\n                    COUNT(DISTINCT athlete_id) AS count\n                FROM\n                    records\n                LEFT JOIN olympic_games ON records.game_id = olympic_games.id\n                GROUP BY\n                    year\n            ) AS current\n        LEFT JOIN\n            (\n                SELECT\n                    year,\n                    COUNT(DISTINCT athlete_id) AS count\n                FROM\n                    records\n                LEFT JOIN olympic_games ON records.game_id = olympic_games.id\n                GROUP BY\n                    year\n            ) AS previous ON current.year = previous.year + 4\n    ) AS player_counts\nORDER BY\n    current_year;"}
{"schema": "sample", "input": "Create a query to look up the number and rate of increase/decrease in female athletes for each Olympic Games held from 1896 to 2016. If it is a null value, it is converted to 0 and the column name storing the player increase/decrease rate is indicated as 'Female_athletic_increase(%)'.", "output": "SELECT\n    current_year,\n    current_count,\n    ifnull((current_count - previous_count),0) AS player_increase,\n    ifnull(ROUND(((current_count - previous_count) / previous_count) * 100, 2),0) AS 'Female_athletic_increase(%)'\nFROM\n    (\n        SELECT\n            current.year AS current_year,\n            current.count AS current_count,\n            previous.year AS previous_year,\n            previous.count AS previous_count\n        FROM\n            (\n                SELECT year,COUNT(DISTINCT athlete_id) AS count\n                FROM records\n                LEFT JOIN olympic_games ON records.game_id = olympic_games.id\n                where records.sex = 'F'\n                GROUP BY year\n            ) AS current\n        LEFT JOIN\n            (\n                SELECT year,COUNT(DISTINCT athlete_id) AS count\n                FROM records\n                LEFT JOIN olympic_games ON records.game_id = olympic_games.id\n                where records.sex = 'F'\n                GROUP BY year\n            ) AS previous ON current.year = previous.year + 4\n    ) AS player_counts\nORDER BY\n    current_year;"}
{"schema": "sample", "input": "Write a query to retrieve the host year, host city, and number of participating athletes for each Olympic Games held in winter. The column name storing the number of players is displayed as \u2018Athletic\u2019.", "output": "select g.year, g.city, count(r.athlete_id) as 'Athletic'\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join athletics a on r.athlete_id = a.id\nwhere g.season = 'Winter'\ngroup by r.game_id;"}
{"schema": "sample", "input": "Write a query to retrieve the number of games per Olympic Games. Sorted in ascending order based on the year of the event, and the column name indicating the number of games is indicated as 'sport'.", "output": "select g.year, g.city, count(e.sport) as 'sport'\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join events e on r.event_id = e.id\ngroup by r.game_id\norder by g.year;"}
{"schema": "sample", "input": "Create a query to retrieve the name of the youngest athlete to win a silver medal at the 1912 Olympics.", "output": "select a.name, r.age\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join athletics a on r.athlete_id = a.id\nwhere g.year = 1912 and r.medal = 'Silver'\norder by age ASC\nLIMIT 1;"}
{"schema": "sample", "input": "Create a query to retrieve the name and team of the oldest player who won a bronze medal at the 1920 Olympics.", "output": "select a.name, r.age, t.team\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join athletics a on r.athlete_id = a.id\nleft join teams t on r.team_id = t.id\nwhere g.year = 1920 and r.medal = 'Bronze'\norder by r.age DESC\nLIMIT 1;"}
{"schema": "sample", "input": "Write a query to find the team that won the silver medal in each event at the 1924 Olympics.", "output": "select e.sport, t.team\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join teams t on r.team_id = t.id\nleft join events e on r.event_id = e.id\nwhere g.year = 1924 and r.medal = 'Silver';"}
{"schema": "sample", "input": "Create a query to retrieve the names of players taller than 2m and the name of the sport among those who participated in previous Olympics. Sort by player height in descending order", "output": "select distinct(a.name), r.height, e.event\nfrom records r left join athletics a on r.athlete_id = a.id\nleft join events e on r.event_id = e.id\nwhere r.height > 200;"}
{"schema": "sample", "input": "Write a query to retrieve the average weight of athletes in each event in the 2006 Olympics. Sort in ascending order by weight", "output": "select avg(weight) as 'avg_weight', e.event\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join events e on r.event_id = e.id\nwhere g.year = 2006\ngroup by e.event\norder by avg(weight);"}
{"schema": "sample", "input": "Write a query to retrieve the average age, average height, and average weight of athletes who participated in the 2000 Olympic Games by game.", "output": "select e.sport, avg(r.age), avg(r.height), avg(r.weight)\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join events e on r.event_id = e.id\nwhere g.year = 2000\ngroup by e.sport;"}
{"schema": "sample", "input": "Write a query to find teams that did not win a medal at the Olympics held in the 2010s.'", "output": "select distinct(t.team)\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join teams t on r.team_id = t.id\nwhere g.year >= 2010 and r.medal is null;"}
{"schema": "sample", "input": "Write a query to retrieve the names and BMI index of the top 500 athletes who participated in the Olympics held in the summer. The formula for calculating the BMI index is weight (kg)/(height (m)^2). Result values \\u200b\\u200bare sorted in descending order based on BMI index, except when BMI index is a NULL value.", "output": "select distinct(a.name),\n(r.weight/(r.height/100)^2) as 'bmi'\nfrom records r left join olympic_games g on r.game_id = g.id\nleft join events e on r.event_id = e.id\nleft join athletics a on r.athlete_id = a.id\nwhere g.season = 'Summer' and (r.weight/r.height^2) is not null\norder by bmi DESC\nlimit 500;"}
{"schema": "sample", "input": "Write a query to find the sport with the most medals for each country participating in the Olympics. Results are sorted in descending order by participating country.", "output": "select t.team,e.sport,count(*) AS Medal_Count\nfrom records r inner join teams t on r.team_id = t.id\ninner join events e ON r.event_id = e.id\nwhere r.medal is not null\ngroup by t.team, e.sport\nhaving count(*) = \n(select count(*)\nfrom records r\ninner join teams ti on r.team_id = ti.id\ninner join events ei on r.event_id = ei.id\nwhere r.medal is not null and ti.team = t.team\ngroup by ei.sport\norder by count(*) DESC\nlimit 1\n)\norder by t.team DESC;"}
{"schema": "sample", "input": "Create a query to retrieve the name of the athlete who won a medal at the 1988 Olympics, the name of the event, age, and height.", "output": "select a.name,e.event, r.age, r.height \nfrom records r left join olympic_games g on r.game_id = g.id\nleft join events e on r.event_id = e.id\nleft join athletics a on r.athlete_id = a.id\nwhere g.year = 1988 and r.medal is not null;"}
